[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 11, 2018 8:09:30 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:987:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1073:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:445:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:453:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:964:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.25.4-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.25.4-SNAPSHOT.jar ...
[info] Compiling 58 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("a");
[info]       private[this] val f1: Array[String] = Array("b");
[info]       private[this] val f2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("properties", "geometry");
[info]       private[this] val f1: Array[String] = Array("coordinates");
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d6(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d6(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d8(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d5(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d7(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d8(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d8(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d10(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d13(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d8(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d7(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d9(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e6(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e6(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e8(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e7(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e8(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e8(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e10(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e6(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e13(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e8(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e7(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e9(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e14(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "bd", "os");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("destination_addresses", "origin_addresses", "rows", "status");
[info]       private[this] val f1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val f2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val f1: Array[String] = Array("screen_name", "name", "id", "id_str", "indices");
[info]       private[this] val f2: Array[String] = Array("url", "expanded_url", "display_url", "indices");
[info]       private[this] val f3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val f4: Array[String] = Array("url", "description");
[info]       private[this] val f5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:64:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:65:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:70:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:72:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:73:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:74:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:75:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:76:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.4-SNAPSHOT.jar ...
[info] Compiling 49 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 422 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 629 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.4-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.4-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/jdk-10/bin/java -jvmArgsAppend -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -prof gc -rf json -rff jdk10graal.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:12:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77713.110 ops/s
[info] # Warmup Iteration   2: 671759.428 ops/s
[info] # Warmup Iteration   3: 691045.452 ops/s
[info] # Warmup Iteration   4: 708187.684 ops/s
[info] # Warmup Iteration   5: 704949.798 ops/s
[info] Iteration   1: 713965.341 ops/s
[info]                  ·gc.alloc.rate:                   1927.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              4249.231 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2023.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4460.932 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.279 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 705837.244 ops/s
[info]                  ·gc.alloc.rate:                   1905.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              4248.371 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3030.154 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.427 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 727047.433 ops/s
[info]                  ·gc.alloc.rate:                                  1962.486 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4248.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.153 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.331 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.525 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4425.582 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 727689.143 ops/s
[info]                  ·gc.alloc.rate:            1963.989 MB/sec
[info]                  ·gc.alloc.rate.norm:       4248.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4421.690 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 701903.813 ops/s
[info]                  ·gc.alloc.rate:            1895.515 MB/sec
[info]                  ·gc.alloc.rate.norm:       4250.932 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4584.035 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   715288.595 ±(99.9%) 45653.897 ops/s [Average]
[info]   (min, avg, max) = (701903.813, 715288.595, 727689.143), stdev = 11856.172
[info]   CI (99.9%): [669634.697, 760942.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   1931.037 ±(99.9%) 121.747 MB/sec [Average]
[info]   (min, avg, max) = (1895.515, 1931.037, 1963.989), stdev = 31.617
[info]   CI (99.9%): [1809.290, 2052.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4248.907 ±(99.9%) 4.770 B/op [Average]
[info]   (min, avg, max) = (4248.001, 4248.907, 4250.932), stdev = 1.239
[info]   CI (99.9%): [4244.137, 4253.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.263 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.153), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.066 ±(99.9%) 0.570 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.331), stdev = 0.148
[info]   CI (99.9%): [≈ 0, 0.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1903.138 ±(99.9%) 1171.538 MB/sec [Average]
[info]   (min, avg, max) = (1359.122, 1903.138, 2044.525), stdev = 304.245
[info]   CI (99.9%): [731.600, 3074.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4184.479 ±(99.9%) 2497.683 B/op [Average]
[info]   (min, avg, max) = (3030.154, 4184.479, 4584.035), stdev = 648.640
[info]   CI (99.9%): [1686.796, 6682.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.623 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.663), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.541 ±(99.9%) 19.071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.541, 10.279), stdev = 4.953
[info]   CI (99.9%): [≈ 0, 22.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 21.000), stdev = 7.430
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.23% complete, ETA 01:54:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80535.754 ops/s
[info] # Warmup Iteration   2: 1422679.372 ops/s
[info] # Warmup Iteration   3: 1423358.805 ops/s
[info] # Warmup Iteration   4: 1517200.456 ops/s
[info] # Warmup Iteration   5: 1483537.409 ops/s
[info] Iteration   1: 1499616.298 ops/s
[info]                  ·gc.alloc.rate:            1000.300 MB/sec
[info]                  ·gc.alloc.rate.norm:       1049.844 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 706.138 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 1413821.303 ops/s
[info]                  ·gc.alloc.rate:            941.603 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.118 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1497.949 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 1487939.263 ops/s
[info]                  ·gc.alloc.rate:            990.583 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 711.646 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1497866.918 ops/s
[info]                  ·gc.alloc.rate:            998.301 MB/sec
[info]                  ·gc.alloc.rate.norm:       1049.124 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 706.943 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 1470803.693 ops/s
[info]                  ·gc.alloc.rate:                   983.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              1052.645 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1439.878 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.851 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1474009.495 ±(99.9%) 136844.473 ops/s [Average]
[info]   (min, avg, max) = (1413821.303, 1474009.495, 1499616.298), stdev = 35538.075
[info]   CI (99.9%): [1337165.022, 1610853.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   982.875 ±(99.9%) 92.432 MB/sec [Average]
[info]   (min, avg, max) = (941.603, 982.875, 1000.300), stdev = 24.004
[info]   CI (99.9%): [890.443, 1075.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1049.546 ±(99.9%) 7.280 B/op [Average]
[info]   (min, avg, max) = (1048.000, 1049.546, 1052.645), stdev = 1.891
[info]   CI (99.9%): [1042.266, 1056.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   941.861 ±(99.9%) 1419.092 MB/sec [Average]
[info]   (min, avg, max) = (672.656, 941.861, 1345.721), stdev = 368.534
[info]   CI (99.9%): [≈ 0, 2360.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1012.511 ±(99.9%) 1606.287 B/op [Average]
[info]   (min, avg, max) = (706.138, 1012.511, 1497.949), stdev = 417.148
[info]   CI (99.9%): [≈ 0, 2618.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.570 ±(99.9%) 4.910 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.570, 2.851), stdev = 1.275
[info]   CI (99.9%): [≈ 0, 5.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   67.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.400, 19.000), stdev = 5.128
[info]   CI (99.9%): [67.000, 67.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.46% complete, ETA 01:54:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3074379.348 ops/s
[info] # Warmup Iteration   2: 5204097.255 ops/s
[info] # Warmup Iteration   3: 5412331.135 ops/s
[info] # Warmup Iteration   4: 5580512.619 ops/s
[info] # Warmup Iteration   5: 5574330.722 ops/s
[info] Iteration   1: 5586949.951 ops/s
[info]                  ·gc.alloc.rate:            371.393 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.646 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 190.097 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 5690032.494 ops/s
[info]                  ·gc.alloc.rate:      375.933 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5624618.265 ops/s
[info]                  ·gc.alloc.rate:            371.626 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 188.636 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 5617623.493 ops/s
[info]                  ·gc.alloc.rate:      371.308 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5590187.463 ops/s
[info]                  ·gc.alloc.rate:                   369.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        189.795 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   5621882.333 ±(99.9%) 159870.179 ops/s [Average]
[info]   (min, avg, max) = (5586949.951, 5621882.333, 5690032.494), stdev = 41517.778
[info]   CI (99.9%): [5462012.154, 5781752.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   371.919 ±(99.9%) 9.338 MB/sec [Average]
[info]   (min, avg, max) = (369.335, 371.919, 375.933), stdev = 2.425
[info]   CI (99.9%): [362.581, 381.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.129 ±(99.9%) 1.113 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.129, 104.646), stdev = 0.289
[info]   CI (99.9%): [103.017, 105.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.548 ±(99.9%) 1422.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.548, 674.661), stdev = 369.300
[info]   CI (99.9%): [≈ 0, 1826.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   113.706 ±(99.9%) 399.697 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 113.706, 190.097), stdev = 103.800
[info]   CI (99.9%): [≈ 0, 513.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.323 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.188), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 7.000), stdev = 3.834
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.69% complete, ETA 01:54:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 554.448 ops/s
[info] # Warmup Iteration   2: 194399.189 ops/s
[info] # Warmup Iteration   3: 285843.337 ops/s
[info] # Warmup Iteration   4: 290429.255 ops/s
[info] # Warmup Iteration   5: 292602.122 ops/s
[info] Iteration   1: 294930.692 ops/s
[info]                  ·gc.alloc.rate:                   2295.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              12252.337 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2705.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14436.125 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      8.660 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 46.213 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 299402.902 ops/s
[info]                  ·gc.alloc.rate:                                  2330.223 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12249.173 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10745.415 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 298363.228 ops/s
[info]                  ·gc.alloc.rate:            2321.590 MB/sec
[info]                  ·gc.alloc.rate.norm:       12248.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.504 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14378.929 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 299203.996 ops/s
[info]                  ·gc.alloc.rate:                                  2329.422 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12251.267 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10753.637 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 295606.873 ops/s
[info]                  ·gc.alloc.rate:            2300.007 MB/sec
[info]                  ·gc.alloc.rate.norm:       12248.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2043.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10884.541 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   297501.538 ±(99.9%) 8043.852 ops/s [Average]
[info]   (min, avg, max) = (294930.692, 297501.538, 299402.902), stdev = 2088.963
[info]   CI (99.9%): [289457.686, 305545.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2315.430 ±(99.9%) 63.026 MB/sec [Average]
[info]   (min, avg, max) = (2295.906, 2315.430, 2330.223), stdev = 16.368
[info]   CI (99.9%): [2252.403, 2378.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   12249.756 ±(99.9%) 7.566 B/op [Average]
[info]   (min, avg, max) = (12248.001, 12249.756, 12252.337), stdev = 1.965
[info]   CI (99.9%): [12242.190, 12257.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.015 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.012 ±(99.9%) 0.080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2312.682 ±(99.9%) 1415.566 MB/sec [Average]
[info]   (min, avg, max) = (2043.968, 2312.682, 2725.504), stdev = 367.618
[info]   CI (99.9%): [897.116, 3728.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   12239.729 ±(99.9%) 7623.475 B/op [Average]
[info]   (min, avg, max) = (10745.415, 12239.729, 14436.125), stdev = 1979.792
[info]   CI (99.9%): [4616.254, 19863.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 14.912 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 8.660), stdev = 3.873
[info]   CI (99.9%): [≈ 0, 16.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   9.243 ±(99.9%) 79.581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.243, 46.213), stdev = 20.667
[info]   CI (99.9%): [≈ 0, 88.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 24.000), stdev = 8.899
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.92% complete, ETA 01:53:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57794.691 ops/s
[info] # Warmup Iteration   2: 487570.237 ops/s
[info] # Warmup Iteration   3: 677331.535 ops/s
[info] # Warmup Iteration   4: 701891.156 ops/s
[info] # Warmup Iteration   5: 688735.503 ops/s
[info] Iteration   1: 683594.620 ops/s
[info]                  ·gc.alloc.rate:                   1932.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              4450.296 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2024.840 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4662.540 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.202 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 687213.819 ops/s
[info]                  ·gc.alloc.rate:                                  1956.508 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4481.160 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4674.128 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.627 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 716805.917 ops/s
[info]                  ·gc.alloc.rate:            2029.336 MB/sec
[info]                  ·gc.alloc.rate.norm:       4455.211 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4488.820 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 721135.333 ops/s
[info]                  ·gc.alloc.rate:            2038.703 MB/sec
[info]                  ·gc.alloc.rate.norm:       4448.798 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.652 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4461.778 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 711643.697 ops/s
[info]                  ·gc.alloc.rate:            2011.220 MB/sec
[info]                  ·gc.alloc.rate.norm:       4448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4521.407 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   704078.677 ±(99.9%) 67087.503 ops/s [Average]
[info]   (min, avg, max) = (683594.620, 704078.677, 721135.333), stdev = 17422.412
[info]   CI (99.9%): [636991.174, 771166.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1993.687 ±(99.9%) 179.690 MB/sec [Average]
[info]   (min, avg, max) = (1932.667, 1993.687, 2038.703), stdev = 46.665
[info]   CI (99.9%): [1813.996, 2173.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4456.693 ±(99.9%) 53.759 B/op [Average]
[info]   (min, avg, max) = (4448.001, 4456.693, 4481.160), stdev = 13.961
[info]   CI (99.9%): [4402.934, 4510.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.053), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   2039.861 ±(99.9%) 32.956 MB/sec [Average]
[info]   (min, avg, max) = (2024.840, 2039.861, 2044.652), stdev = 8.558
[info]   CI (99.9%): [2006.906, 2072.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4561.735 ±(99.9%) 383.754 B/op [Average]
[info]   (min, avg, max) = (4461.778, 4561.735, 4674.128), stdev = 99.660
[info]   CI (99.9%): [4177.981, 4945.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 7.779 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 3.996), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 9.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.366 ±(99.9%) 17.877 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.366, 9.202), stdev = 4.643
[info]   CI (99.9%): [≈ 0, 21.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.600, 23.000), stdev = 8.234
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.15% complete, ETA 01:53:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_bbe3575e/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 116431.505 ops/s
[info] # Warmup Iteration   2: 2310135.916 ops/s
[info] # Warmup Iteration   3: 2333842.844 ops/s
[info] # Warmup Iteration   4: 2321714.792 ops/s
[info] # Warmup Iteration   5: 2333873.191 ops/s
[info] Iteration   1: 2398635.057 ops/s
[info]                  ·gc.alloc.rate:            999.777 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 441.454 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 2358105.250 ops/s
[info]                  ·gc.alloc.rate:                   983.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.289 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        898.582 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.445 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 2375920.342 ops/s
[info]                  ·gc.alloc.rate:            990.284 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 445.663 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 2383476.986 ops/s
[info]                  ·gc.alloc.rate:            993.459 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.142 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 444.275 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 2376933.147 ops/s
[info]                  ·gc.alloc.rate:                   991.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        891.009 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.205 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2378614.156 ±(99.9%) 56303.119 ops/s [Average]
[info]   (min, avg, max) = (2358105.250, 2378614.156, 2398635.057), stdev = 14621.741
[info]   CI (99.9%): [2322311.038, 2434917.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   991.569 ±(99.9%) 22.854 MB/sec [Average]
[info]   (min, avg, max) = (983.324, 991.569, 999.777), stdev = 5.935
[info]   CI (99.9%): [968.715, 1014.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   656.086 ±(99.9%) 0.497 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.086, 656.289), stdev = 0.129
[info]   CI (99.9%): [655.589, 656.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   942.122 ±(99.9%) 1420.348 MB/sec [Average]
[info]   (min, avg, max) = (672.673, 942.122, 1346.352), stdev = 368.860
[info]   CI (99.9%): [≈ 0, 2362.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   624.196 ±(99.9%) 951.267 B/op [Average]
[info]   (min, avg, max) = (441.454, 624.196, 898.582), stdev = 247.041
[info]   CI (99.9%): [≈ 0, 1575.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 5.563 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.332), stdev = 1.445
[info]   CI (99.9%): [≈ 0, 6.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.530 ±(99.9%) 3.682 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.530, 2.205), stdev = 0.956
[info]   CI (99.9%): [≈ 0, 4.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   65.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.000, 19.000), stdev = 5.050
[info]   CI (99.9%): [65.000, 65.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.39% complete, ETA 01:53:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2667194.470 ops/s
[info] # Warmup Iteration   2: 12254063.673 ops/s
[info] # Warmup Iteration   3: 13658393.437 ops/s
[info] # Warmup Iteration   4: 13241151.171 ops/s
[info] # Warmup Iteration   5: 13391288.391 ops/s
[info] Iteration   1: 13497953.683 ops/s
[info]                  ·gc.alloc.rate:            686.666 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78.604 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 13677564.531 ops/s
[info]                  ·gc.alloc.rate:            698.876 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.431 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77.573 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 13704980.695 ops/s
[info]                  ·gc.alloc.rate:            696.847 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77.415 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 13370198.725 ops/s
[info]                  ·gc.alloc.rate:            681.306 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.208 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79.355 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 13490572.477 ops/s
[info]                  ·gc.alloc.rate:            685.648 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78.647 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   13548254.022 ±(99.9%) 540619.407 ops/s [Average]
[info]   (min, avg, max) = (13370198.725, 13548254.022, 13704980.695), stdev = 140397.143
[info]   CI (99.9%): [13007634.615, 14088873.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   689.869 ±(99.9%) 29.277 MB/sec [Average]
[info]   (min, avg, max) = (681.306, 689.869, 698.876), stdev = 7.603
[info]   CI (99.9%): [660.592, 719.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.142 ±(99.9%) 0.696 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.142, 80.431), stdev = 0.181
[info]   CI (99.9%): [79.446, 80.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.113 ±(99.9%) 0.329 MB/sec [Average]
[info]   (min, avg, max) = (674.044, 674.113, 674.235), stdev = 0.085
[info]   CI (99.9%): [673.784, 674.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   78.319 ±(99.9%) 3.126 B/op [Average]
[info]   (min, avg, max) = (77.415, 78.319, 79.355), stdev = 0.812
[info]   CI (99.9%): [75.193, 81.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.62% complete, ETA 01:52:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3844371.357 ops/s
[info] # Warmup Iteration   2: 14727545.550 ops/s
[info] # Warmup Iteration   3: 14667391.004 ops/s
[info] # Warmup Iteration   4: 14664096.164 ops/s
[info] # Warmup Iteration   5: 14557677.597 ops/s
[info] Iteration   1: 14646218.971 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 14665870.143 ops/s
[info]                  ·gc.alloc.rate:      0.003 MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 14619286.532 ops/s
[info]                  ·gc.alloc.rate:      9.501 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 14672051.790 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 14661896.817 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   14653064.851 ±(99.9%) 81464.645 ops/s [Average]
[info]   (min, avg, max) = (14619286.532, 14653064.851, 14672051.790), stdev = 21156.110
[info]   CI (99.9%): [14571600.205, 14734529.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.901 ±(99.9%) 16.360 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.901, 9.501), stdev = 4.249
[info]   CI (99.9%): [≈ 0, 18.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.205 ±(99.9%) 1.761 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.205, 1.023), stdev = 0.457
[info]   CI (99.9%): [≈ 0, 1.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.85% complete, ETA 01:52:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1246.331 ops/s
[info] # Warmup Iteration   2: 282326.414 ops/s
[info] # Warmup Iteration   3: 507554.379 ops/s
[info] # Warmup Iteration   4: 518008.665 ops/s
[info] # Warmup Iteration   5: 517036.669 ops/s
[info] Iteration   1: 514614.321 ops/s
[info]                  ·gc.alloc.rate:            1552.460 MB/sec
[info]                  ·gc.alloc.rate.norm:       4746.393 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2019.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6173.128 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  30.000 ms
[info] Iteration   2: 518138.505 ops/s
[info]                  ·gc.alloc.rate:                   1561.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              4744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.507 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4087.463 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 534187.349 ops/s
[info]                  ·gc.alloc.rate:                   1611.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              4748.903 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1352.241 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3984.115 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.738 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 540957.991 ops/s
[info]                  ·gc.alloc.rate:                   1630.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              4744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2043.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5944.218 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.876 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 533818.250 ops/s
[info]                  ·gc.alloc.rate:                                  1609.235 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4744.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.125 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4018.473 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   528343.283 ±(99.9%) 43729.868 ops/s [Average]
[info]   (min, avg, max) = (514614.321, 528343.283, 540957.991), stdev = 11356.508
[info]   CI (99.9%): [484613.415, 572073.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1593.132 ±(99.9%) 131.340 MB/sec [Average]
[info]   (min, avg, max) = (1552.460, 1593.132, 1630.526), stdev = 34.109
[info]   CI (99.9%): [1461.792, 1724.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4745.460 ±(99.9%) 8.416 B/op [Average]
[info]   (min, avg, max) = (4744.001, 4745.460, 4748.903), stdev = 2.186
[info]   CI (99.9%): [4737.043, 4753.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   ≈ 10⁻³ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1624.607 ±(99.9%) 1429.392 MB/sec [Average]
[info]   (min, avg, max) = (1345.507, 1624.607, 2043.045), stdev = 371.208
[info]   CI (99.9%): [195.216, 3053.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4841.480 ±(99.9%) 4292.333 B/op [Average]
[info]   (min, avg, max) = (3984.115, 4841.480, 6173.128), stdev = 1114.705
[info]   CI (99.9%): [549.146, 9133.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 7.609 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 1.976
[info]   CI (99.9%): [≈ 0, 9.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.142 ±(99.9%) 22.543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.142, 13.738), stdev = 5.854
[info]   CI (99.9%): [≈ 0, 27.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   69.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 13.800, 30.000), stdev = 10.895
[info]   CI (99.9%): [69.000, 69.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.08% complete, ETA 01:52:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 407941.200 ops/s
[info] # Warmup Iteration   2: 1746086.747 ops/s
[info] # Warmup Iteration   3: 1774787.331 ops/s
[info] # Warmup Iteration   4: 1794818.288 ops/s
[info] # Warmup Iteration   5: 1794676.851 ops/s
[info] Iteration   1: 1836003.182 ops/s
[info]                  ·gc.alloc.rate:                                  2453.980 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.154 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.132 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.648 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1749.616 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.855 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 1827101.262 ops/s
[info]                  ·gc.alloc.rate:            2443.330 MB/sec
[info]                  ·gc.alloc.rate.norm:       2104.932 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.455 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2347.983 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1812123.660 ops/s
[info]                  ·gc.alloc.rate:                                  2425.023 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2106.515 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2367.435 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 1841348.858 ops/s
[info]                  ·gc.alloc.rate:                                  2462.220 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2104.337 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.597 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1747.415 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1833442.371 ops/s
[info]                  ·gc.alloc.rate:            2458.262 MB/sec
[info]                  ·gc.alloc.rate.norm:       2109.428 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2726.929 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2339.970 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1830003.867 ±(99.9%) 43251.270 ops/s [Average]
[info]   (min, avg, max) = (1812123.660, 1830003.867, 1841348.858), stdev = 11232.218
[info]   CI (99.9%): [1786752.596, 1873255.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2448.563 ±(99.9%) 57.484 MB/sec [Average]
[info]   (min, avg, max) = (2425.023, 2448.563, 2462.220), stdev = 14.928
[info]   CI (99.9%): [2391.079, 2506.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2105.842 ±(99.9%) 8.567 B/op [Average]
[info]   (min, avg, max) = (2104.000, 2105.842, 2109.428), stdev = 2.225
[info]   CI (99.9%): [2097.275, 2114.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.262 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.154), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.027 ±(99.9%) 0.225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.132), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2452.605 ±(99.9%) 1441.158 MB/sec [Average]
[info]   (min, avg, max) = (2040.648, 2452.605, 2726.929), stdev = 374.264
[info]   CI (99.9%): [1011.447, 3893.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2110.484 ±(99.9%) 1272.955 B/op [Average]
[info]   (min, avg, max) = (1747.415, 2110.484, 2367.435), stdev = 330.582
[info]   CI (99.9%): [837.529, 3383.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.571 ±(99.9%) 4.917 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.571, 2.855), stdev = 1.277
[info]   CI (99.9%): [≈ 0, 5.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 9.000), stdev = 2.191
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.31% complete, ETA 01:52:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.704 ops/s
[info] # Warmup Iteration   2: 7020137.326 ops/s
[info] # Warmup Iteration   3: 8139543.119 ops/s
[info] # Warmup Iteration   4: 7935319.242 ops/s
[info] # Warmup Iteration   5: 8040149.706 ops/s
[info] Iteration   1: 8142264.663 ops/s
[info]                  ·gc.alloc.rate:                   993.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.193 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        129.537 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 8074054.999 ops/s
[info]                  ·gc.alloc.rate:                   987.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.445 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1340.863 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        261.394 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   3: 8032058.664 ops/s
[info]                  ·gc.alloc.rate:            979.726 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 131.445 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 8019200.041 ops/s
[info]                  ·gc.alloc.rate:                   978.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1340.091 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        262.927 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Iteration   5: 7763194.679 ops/s
[info]                  ·gc.alloc.rate:                   947.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        135.993 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.540 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   8006154.609 ±(99.9%) 554703.738 ops/s [Average]
[info]   (min, avg, max) = (7763194.679, 8006154.609, 8142264.663), stdev = 144054.799
[info]   CI (99.9%): [7451450.872, 8560858.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   977.291 ±(99.9%) 68.525 MB/sec [Average]
[info]   (min, avg, max) = (947.256, 977.291, 993.360), stdev = 17.796
[info]   CI (99.9%): [908.766, 1045.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   192.116 ±(99.9%) 0.721 B/op [Average]
[info]   (min, avg, max) = (192.000, 192.116, 192.445), stdev = 0.187
[info]   CI (99.9%): [191.394, 192.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   938.518 ±(99.9%) 1412.942 MB/sec [Average]
[info]   (min, avg, max) = (670.193, 938.518, 1340.863), stdev = 366.937
[info]   CI (99.9%): [≈ 0, 2351.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   184.259 ±(99.9%) 273.990 B/op [Average]
[info]   (min, avg, max) = (129.537, 184.259, 262.927), stdev = 71.154
[info]   CI (99.9%): [≈ 0, 458.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 3.890 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 2.664), stdev = 1.010
[info]   CI (99.9%): [≈ 0, 4.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.186 ±(99.9%) 0.793 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.186, 0.540), stdev = 0.206
[info]   CI (99.9%): [≈ 0, 0.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   84.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (12.000, 16.800, 25.000), stdev = 6.611
[info]   CI (99.9%): [84.000, 84.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.54% complete, ETA 01:52:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19452.816 ops/s
[info] # Warmup Iteration   2: 2237743.967 ops/s
[info] # Warmup Iteration   3: 2414515.040 ops/s
[info] # Warmup Iteration   4: 2432216.926 ops/s
[info] # Warmup Iteration   5: 2460807.598 ops/s
[info] Iteration   1: 2426678.226 ops/s
[info]                  ·gc.alloc.rate:            1594.955 MB/sec
[info]                  ·gc.alloc.rate.norm:       1032.138 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2008.477 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1299.739 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  29.000 ms
[info] Iteration   2: 2487505.478 ops/s
[info]                  ·gc.alloc.rate:                   1634.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              1034.500 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.856 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        853.463 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.950 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 2477024.734 ops/s
[info]                  ·gc.alloc.rate:                   1624.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.145 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.573 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        862.593 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.540 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2560338.838 ops/s
[info]                  ·gc.alloc.rate:                                  1678.879 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1032.073 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.917 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1256.476 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 2478446.270 ops/s
[info]                  ·gc.alloc.rate:            1632.879 MB/sec
[info]                  ·gc.alloc.rate.norm:       1037.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 865.477 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2485998.709 ±(99.9%) 184521.962 ops/s [Average]
[info]   (min, avg, max) = (2426678.226, 2485998.709, 2560338.838), stdev = 47919.767
[info]   CI (99.9%): [2301476.747, 2670520.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1633.222 ±(99.9%) 115.994 MB/sec [Average]
[info]   (min, avg, max) = (1594.955, 1633.222, 1678.879), stdev = 30.123
[info]   CI (99.9%): [1517.228, 1749.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1033.589 ±(99.9%) 8.521 B/op [Average]
[info]   (min, avg, max) = (1032.073, 1033.589, 1037.091), stdev = 2.213
[info]   CI (99.9%): [1025.069, 1042.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.072), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.009 ±(99.9%) 0.076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1624.300 ±(99.9%) 1413.677 MB/sec [Average]
[info]   (min, avg, max) = (1348.856, 1624.300, 2043.917), stdev = 367.127
[info]   CI (99.9%): [210.623, 3037.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1027.550 ±(99.9%) 882.879 B/op [Average]
[info]   (min, avg, max) = (853.463, 1027.550, 1299.739), stdev = 229.281
[info]   CI (99.9%): [144.671, 1910.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.098 ±(99.9%) 5.816 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.098, 2.950), stdev = 1.510
[info]   CI (99.9%): [≈ 0, 6.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.800, 29.000), stdev = 10.640
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.77% complete, ETA 01:51:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6154490.816 ops/s
[info] # Warmup Iteration   2: 10601498.064 ops/s
[info] # Warmup Iteration   3: 11125808.728 ops/s
[info] # Warmup Iteration   4: 11472434.695 ops/s
[info] # Warmup Iteration   5: 11553576.252 ops/s
[info] Iteration   1: 11408892.240 ops/s
[info]                  ·gc.alloc.rate:            1449.965 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.475 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 186.180 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 11343090.326 ops/s
[info]                  ·gc.alloc.rate:                   1441.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2022.228 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        280.616 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.462 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   3: 11571081.159 ops/s
[info]                  ·gc.alloc.rate:                   1471.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.124 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        184.473 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.544 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 10998122.625 ops/s
[info]                  ·gc.alloc.rate:                                  1399.786 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.327 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.122 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.843 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       195.040 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 11107415.923 ops/s
[info]                  ·gc.alloc.rate:            1411.669 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 193.118 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   11285720.455 ±(99.9%) 891485.072 ops/s [Average]
[info]   (min, avg, max) = (10998122.625, 11285720.455, 11571081.159), stdev = 231515.842
[info]   CI (99.9%): [10394235.383, 12177205.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1434.756 ±(99.9%) 111.422 MB/sec [Average]
[info]   (min, avg, max) = (1399.786, 1434.756, 1471.079), stdev = 28.936
[info]   CI (99.9%): [1323.334, 1546.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.109 ±(99.9%) 0.501 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.109, 200.327), stdev = 0.130
[info]   CI (99.9%): [199.608, 200.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.122), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1490.668 ±(99.9%) 1144.421 MB/sec [Average]
[info]   (min, avg, max) = (1349.475, 1490.668, 2022.228), stdev = 297.203
[info]   CI (99.9%): [346.246, 2635.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   207.885 ±(99.9%) 157.501 B/op [Average]
[info]   (min, avg, max) = (184.473, 207.885, 280.616), stdev = 40.902
[info]   CI (99.9%): [50.385, 365.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 7.779 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 3.996), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 9.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.201 ±(99.9%) 1.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.201, 0.544), stdev = 0.277
[info]   CI (99.9%): [≈ 0, 1.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.400, 23.000), stdev = 8.264
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.00% complete, ETA 01:51:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23425.033 ops/s
[info] # Warmup Iteration   2: 363003.838 ops/s
[info] # Warmup Iteration   3: 1011927.633 ops/s
[info] # Warmup Iteration   4: 1043977.660 ops/s
[info] # Warmup Iteration   5: 1029536.895 ops/s
[info] Iteration   1: 1049328.871 ops/s
[info]                  ·gc.alloc.rate:                   2503.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              3754.137 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2715.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4071.424 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.993 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 1072242.145 ops/s
[info]                  ·gc.alloc.rate:                                  2556.584 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3752.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3000.879 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1054771.242 ops/s
[info]                  ·gc.alloc.rate:            2515.428 MB/sec
[info]                  ·gc.alloc.rate.norm:       3752.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2726.868 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4067.384 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1066764.378 ops/s
[info]                  ·gc.alloc.rate:                                  2544.173 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3753.920 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4021.686 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 1040647.362 ops/s
[info]                  ·gc.alloc.rate:                                  2481.634 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3753.717 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.513 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4122.608 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   1056750.799 ±(99.9%) 49409.101 ops/s [Average]
[info]   (min, avg, max) = (1040647.362, 1056750.799, 1072242.145), stdev = 12831.387
[info]   CI (99.9%): [1007341.699, 1106159.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2520.266 ±(99.9%) 116.909 MB/sec [Average]
[info]   (min, avg, max) = (2481.634, 2520.266, 2556.584), stdev = 30.361
[info]   CI (99.9%): [2403.356, 2637.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3753.156 ±(99.9%) 4.094 B/op [Average]
[info]   (min, avg, max) = (3752.000, 3753.156, 3754.137), stdev = 1.063
[info]   CI (99.9%): [3749.062, 3757.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2587.580 ±(99.9%) 1168.576 MB/sec [Average]
[info]   (min, avg, max) = (2044.773, 2587.580, 2726.868), stdev = 303.476
[info]   CI (99.9%): [1419.004, 3756.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   3856.796 ±(99.9%) 1847.558 B/op [Average]
[info]   (min, avg, max) = (3000.879, 3856.796, 4122.608), stdev = 479.805
[info]   CI (99.9%): [2009.239, 5704.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.330), stdev = 2.384
[info]   CI (99.9%): [≈ 0, 10.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.599 ±(99.9%) 13.764 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 7.993), stdev = 3.575
[info]   CI (99.9%): [≈ 0, 15.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 17.000), stdev = 5.357
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.23% complete, ETA 01:51:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 559525.473 ops/s
[info] # Warmup Iteration   2: 2014426.178 ops/s
[info] # Warmup Iteration   3: 2168493.398 ops/s
[info] # Warmup Iteration   4: 2204831.539 ops/s
[info] # Warmup Iteration   5: 2190473.925 ops/s
[info] Iteration   1: 2195202.353 ops/s
[info]                  ·gc.alloc.rate:                   1829.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              1312.205 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2023.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1450.955 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.343 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 2219037.972 ops/s
[info]                  ·gc.alloc.rate:                                  1850.151 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1312.260 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1447.184 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.362 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 2238669.857 ops/s
[info]                  ·gc.alloc.rate:                                  1866.013 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       958.195 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 2232465.457 ops/s
[info]                  ·gc.alloc.rate:            1861.124 MB/sec
[info]                  ·gc.alloc.rate.norm:       1312.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.498 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1441.270 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 2234007.041 ops/s
[info]                  ·gc.alloc.rate:                                  1862.263 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1312.034 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.302 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1440.287 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2223876.536 ±(99.9%) 67821.076 ops/s [Average]
[info]   (min, avg, max) = (2195202.353, 2223876.536, 2238669.857), stdev = 17612.918
[info]   CI (99.9%): [2156055.460, 2291697.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1853.889 ±(99.9%) 56.436 MB/sec [Average]
[info]   (min, avg, max) = (1829.893, 1853.889, 1866.013), stdev = 14.656
[info]   CI (99.9%): [1797.453, 1910.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1312.100 ±(99.9%) 0.475 B/op [Average]
[info]   (min, avg, max) = (1312.000, 1312.100, 1312.260), stdev = 0.123
[info]   CI (99.9%): [1311.625, 1312.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1903.075 ±(99.9%) 1163.444 MB/sec [Average]
[info]   (min, avg, max) = (1362.808, 1903.075, 2044.498), stdev = 302.143
[info]   CI (99.9%): [739.631, 3066.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1347.578 ±(99.9%) 838.345 B/op [Average]
[info]   (min, avg, max) = (958.195, 1347.578, 1450.955), stdev = 217.716
[info]   CI (99.9%): [509.233, 2185.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.662), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.141 ±(99.9%) 6.163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.141, 3.343), stdev = 1.601
[info]   CI (99.9%): [≈ 0, 7.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 22.000), stdev = 7.969
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.46% complete, ETA 01:51:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.718 ops/s
[info] # Warmup Iteration   2: 15690611.381 ops/s
[info] # Warmup Iteration   3: 16710876.398 ops/s
[info] # Warmup Iteration   4: 17801267.967 ops/s
[info] # Warmup Iteration   5: 16547079.434 ops/s
[info] Iteration   1: 16382118.636 ops/s
[info]                  ·gc.alloc.rate:            499.560 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64.446 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 17157903.546 ops/s
[info]                  ·gc.alloc.rate:      523.406 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 16973642.415 ops/s
[info]                  ·gc.alloc.rate:            519.041 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.126 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62.198 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 17124654.311 ops/s
[info]                  ·gc.alloc.rate:            522.226 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61.650 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 17029727.792 ops/s
[info]                  ·gc.alloc.rate:            519.321 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61.996 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   16933609.340 ±(99.9%) 1220401.244 ops/s [Average]
[info]   (min, avg, max) = (16382118.636, 16933609.340, 17157903.546), stdev = 316934.328
[info]   CI (99.9%): [15713208.096, 18154010.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   516.711 ±(99.9%) 37.612 MB/sec [Average]
[info]   (min, avg, max) = (499.560, 516.711, 523.406), stdev = 9.768
[info]   CI (99.9%): [479.099, 554.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.025 ±(99.9%) 0.216 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.025, 48.126), stdev = 0.056
[info]   CI (99.9%): [47.809, 48.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   536.602 ±(99.9%) 1155.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.602, 670.814), stdev = 299.970
[info]   CI (99.9%): [≈ 0, 1691.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   50.058 ±(99.9%) 107.836 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.058, 64.446), stdev = 28.005
[info]   CI (99.9%): [≈ 0, 157.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 8.000, 10.000), stdev = 4.472
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.70% complete, ETA 01:51:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_bbe3575e/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 265859.277 ops/s
[info] # Warmup Iteration   2: 5555357.163 ops/s
[info] # Warmup Iteration   3: 5669765.942 ops/s
[info] # Warmup Iteration   4: 5642502.310 ops/s
[info] # Warmup Iteration   5: 5708887.451 ops/s
[info] Iteration   1: 5659332.873 ops/s
[info]                  ·gc.alloc.rate:            1553.944 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.218 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2018.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 561.318 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  29.000 ms
[info] Iteration   2: 5669438.126 ops/s
[info]                  ·gc.alloc.rate:                   1556.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.822 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        374.476 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.110 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 5795550.317 ops/s
[info]                  ·gc.alloc.rate:                   1590.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.084 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.815 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        368.488 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.266 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 5794588.316 ops/s
[info]                  ·gc.alloc.rate:                                  1590.630 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.141 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.455 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       555.283 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 5791545.398 ops/s
[info]                  ·gc.alloc.rate:            1589.461 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 370.384 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   5742091.006 ±(99.9%) 273551.273 ops/s [Average]
[info]   (min, avg, max) = (5659332.873, 5742091.006, 5795550.317), stdev = 71040.397
[info]   CI (99.9%): [5468539.733, 6015642.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1576.244 ±(99.9%) 74.512 MB/sec [Average]
[info]   (min, avg, max) = (1553.944, 1576.244, 1590.981), stdev = 19.350
[info]   CI (99.9%): [1501.732, 1650.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.075 ±(99.9%) 0.331 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.075, 432.218), stdev = 0.086
[info]   CI (99.9%): [431.744, 432.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.242 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.141), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1626.189 ±(99.9%) 1424.516 MB/sec [Average]
[info]   (min, avg, max) = (1348.822, 1626.189, 2044.455), stdev = 369.942
[info]   CI (99.9%): [201.673, 3050.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   445.990 ±(99.9%) 394.963 B/op [Average]
[info]   (min, avg, max) = (368.488, 445.990, 561.318), stdev = 102.571
[info]   CI (99.9%): [51.027, 840.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.475 ±(99.9%) 2.514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.475, 1.266), stdev = 0.653
[info]   CI (99.9%): [≈ 0, 2.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 12.800, 29.000), stdev = 10.378
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 3.93% complete, ETA 01:50:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7456026.024 ops/s
[info] # Warmup Iteration   2: 18851380.982 ops/s
[info] # Warmup Iteration   3: 18607218.469 ops/s
[info] # Warmup Iteration   4: 18419574.544 ops/s
[info] # Warmup Iteration   5: 18706449.359 ops/s
[info] Iteration   1: 18278112.136 ops/s
[info]                  ·gc.alloc.rate:            557.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58.048 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 18323283.416 ops/s
[info]                  ·gc.alloc.rate:            561.692 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.247 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57.904 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 18542485.421 ops/s
[info]                  ·gc.alloc.rate:            565.415 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57.219 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 18139775.989 ops/s
[info]                  ·gc.alloc.rate:            553.177 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58.489 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 18829692.852 ops/s
[info]                  ·gc.alloc.rate:            574.616 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.212 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56.349 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   18422669.963 ±(99.9%) 1038294.965 ops/s [Average]
[info]   (min, avg, max) = (18139775.989, 18422669.963, 18829692.852), stdev = 269641.905
[info]   CI (99.9%): [17384374.998, 19460964.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   562.491 ±(99.9%) 31.480 MB/sec [Average]
[info]   (min, avg, max) = (553.177, 562.491, 574.616), stdev = 8.175
[info]   CI (99.9%): [531.011, 593.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.058 ±(99.9%) 0.408 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.058, 48.247), stdev = 0.106
[info]   CI (99.9%): [47.650, 48.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.082 ±(99.9%) 0.336 MB/sec [Average]
[info]   (min, avg, max) = (673.999, 674.082, 674.212), stdev = 0.087
[info]   CI (99.9%): [673.746, 674.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   57.602 ±(99.9%) 3.218 B/op [Average]
[info]   (min, avg, max) = (56.349, 57.602, 58.489), stdev = 0.836
[info]   CI (99.9%): [54.384, 60.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.16% complete, ETA 01:50:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9482640.314 ops/s
[info] # Warmup Iteration   2: 21137210.711 ops/s
[info] # Warmup Iteration   3: 21252496.990 ops/s
[info] # Warmup Iteration   4: 21246777.097 ops/s
[info] # Warmup Iteration   5: 21269898.623 ops/s
[info] Iteration   1: 21255844.218 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 21242570.865 ops/s
[info]                  ·gc.alloc.rate:      0.855 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.063 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 21253360.851 ops/s
[info]                  ·gc.alloc.rate:      0.006 MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 21258057.038 ops/s
[info]                  ·gc.alloc.rate:      0.087 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21284603.749 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   21258887.345 ±(99.9%) 59903.606 ops/s [Average]
[info]   (min, avg, max) = (21242570.865, 21258887.345, 21284603.749), stdev = 15556.776
[info]   CI (99.9%): [21198983.739, 21318790.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.224 ±(99.9%) 1.386 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.224, 0.855), stdev = 0.360
[info]   CI (99.9%): [≈ 0, 1.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.017 ±(99.9%) 0.103 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.017, 0.063), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.39% complete, ETA 01:50:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30045.879 ops/s
[info] # Warmup Iteration   2: 1317526.965 ops/s
[info] # Warmup Iteration   3: 1393729.600 ops/s
[info] # Warmup Iteration   4: 1422058.595 ops/s
[info] # Warmup Iteration   5: 1397615.301 ops/s
[info] Iteration   1: 1433085.901 ops/s
[info]                  ·gc.alloc.rate:                   2149.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              2361.153 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2026.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2225.450 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.326 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.047 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 1443132.215 ops/s
[info]                  ·gc.alloc.rate:                                  2164.008 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2360.235 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.177 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.193 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2724.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2971.454 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.453 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 1449555.153 ops/s
[info]                  ·gc.alloc.rate:            2173.531 MB/sec
[info]                  ·gc.alloc.rate.norm:       2360.151 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.196 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2219.711 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1448212.973 ops/s
[info]                  ·gc.alloc.rate:            2171.379 MB/sec
[info]                  ·gc.alloc.rate.norm:       2360.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2221.851 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1454237.648 ops/s
[info]                  ·gc.alloc.rate:                                  2180.393 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2360.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.242 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2212.634 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1445644.778 ±(99.9%) 31030.697 ops/s [Average]
[info]   (min, avg, max) = (1433085.901, 1445644.778, 1454237.648), stdev = 8058.573
[info]   CI (99.9%): [1414614.081, 1476675.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2167.784 ±(99.9%) 45.134 MB/sec [Average]
[info]   (min, avg, max) = (2149.609, 2167.784, 2180.393), stdev = 11.721
[info]   CI (99.9%): [2122.650, 2212.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2360.308 ±(99.9%) 1.861 B/op [Average]
[info]   (min, avg, max) = (2360.000, 2360.308, 2361.153), stdev = 0.483
[info]   CI (99.9%): [2358.447, 2362.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.303 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.177), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.039 ±(99.9%) 0.331 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.193), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   2176.637 ±(99.9%) 1179.516 MB/sec [Average]
[info]   (min, avg, max) = (2026.063, 2176.637, 2724.412), stdev = 306.317
[info]   CI (99.9%): [997.121, 3356.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2370.220 ±(99.9%) 1294.327 B/op [Average]
[info]   (min, avg, max) = (2212.634, 2370.220, 2971.454), stdev = 336.133
[info]   CI (99.9%): [1075.893, 3664.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 12.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 7.326), stdev = 3.180
[info]   CI (99.9%): [≈ 0, 13.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.900 ±(99.9%) 13.452 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.900, 8.047), stdev = 3.494
[info]   CI (99.9%): [≈ 0, 15.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 20.000), stdev = 7.106
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.62% complete, ETA 01:49:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120675.201 ops/s
[info] # Warmup Iteration   2: 260248.010 ops/s
[info] # Warmup Iteration   3: 261193.948 ops/s
[info] # Warmup Iteration   4: 263761.556 ops/s
[info] # Warmup Iteration   5: 270513.458 ops/s
[info] Iteration   1: 267791.194 ops/s
[info]                  ·gc.alloc.rate:            1471.396 MB/sec
[info]                  ·gc.alloc.rate.norm:       8649.867 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2021.816 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11885.607 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  23.000 ms
[info] Iteration   2: 268769.718 ops/s
[info]                  ·gc.alloc.rate:                   1477.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              8649.697 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7894.412 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.602 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 264003.906 ops/s
[info]                  ·gc.alloc.rate:                   1457.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              8687.077 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8077.486 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.799 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 271165.397 ops/s
[info]                  ·gc.alloc.rate:                                  1490.439 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8648.624 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.398 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.249 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7910.571 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   5: 273450.408 ops/s
[info]                  ·gc.alloc.rate:                                  1502.781 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8649.606 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.933 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7844.680 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   269036.125 ±(99.9%) 13744.662 ops/s [Average]
[info]   (min, avg, max) = (264003.906, 269036.125, 273450.408), stdev = 3569.445
[info]   CI (99.9%): [255291.463, 282780.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1479.816 ±(99.9%) 67.454 MB/sec [Average]
[info]   (min, avg, max) = (1457.241, 1479.816, 1502.781), stdev = 17.517
[info]   CI (99.9%): [1412.363, 1547.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8656.974 ±(99.9%) 64.825 B/op [Average]
[info]   (min, avg, max) = (8648.624, 8656.974, 8687.077), stdev = 16.835
[info]   CI (99.9%): [8592.148, 8721.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.117 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.069), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.084 ±(99.9%) 0.677 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.084, 0.398), stdev = 0.176
[info]   CI (99.9%): [≈ 0, 0.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1490.243 ±(99.9%) 1144.501 MB/sec [Average]
[info]   (min, avg, max) = (1348.235, 1490.243, 2021.816), stdev = 297.223
[info]   CI (99.9%): [345.742, 2634.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8722.551 ±(99.9%) 6817.059 B/op [Average]
[info]   (min, avg, max) = (7844.680, 8722.551, 11885.607), stdev = 1770.369
[info]   CI (99.9%): [1905.492, 15539.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 8.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 4.663), stdev = 2.128
[info]   CI (99.9%): [≈ 0, 9.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.680 ±(99.9%) 48.687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.680, 27.799), stdev = 12.644
[info]   CI (99.9%): [≈ 0, 57.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 12.600, 23.000), stdev = 7.232
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.85% complete, ETA 01:49:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78140.310 ops/s
[info] # Warmup Iteration   2: 377727.956 ops/s
[info] # Warmup Iteration   3: 393519.422 ops/s
[info] # Warmup Iteration   4: 388442.860 ops/s
[info] # Warmup Iteration   5: 389917.512 ops/s
[info] Iteration   1: 388904.204 ops/s
[info]                  ·gc.alloc.rate:            493.479 MB/sec
[info]                  ·gc.alloc.rate.norm:       1997.483 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2722.853 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 392369.292 ops/s
[info]                  ·gc.alloc.rate:      496.789 MB/sec
[info]                  ·gc.alloc.rate.norm: 1992.296 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 389146.654 ops/s
[info]                  ·gc.alloc.rate:            492.501 MB/sec
[info]                  ·gc.alloc.rate.norm:       1992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.783 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2721.181 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 389439.346 ops/s
[info]                  ·gc.alloc.rate:                   492.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              1992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.200 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2716.420 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.692 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 389921.721 ops/s
[info]                  ·gc.alloc.rate:            493.478 MB/sec
[info]                  ·gc.alloc.rate.norm:       1992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2715.682 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   389956.243 ±(99.9%) 5395.507 ops/s [Average]
[info]   (min, avg, max) = (388904.204, 389956.243, 392369.292), stdev = 1401.196
[info]   CI (99.9%): [384560.736, 395351.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   493.837 ±(99.9%) 6.548 MB/sec [Average]
[info]   (min, avg, max) = (492.501, 493.837, 496.789), stdev = 1.701
[info]   CI (99.9%): [487.289, 500.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1993.156 ±(99.9%) 9.326 B/op [Average]
[info]   (min, avg, max) = (1992.001, 1993.156, 1997.483), stdev = 2.422
[info]   CI (99.9%): [1983.830, 2002.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.084 ±(99.9%) 1158.267 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.084, 672.783), stdev = 300.798
[info]   CI (99.9%): [≈ 0, 1696.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2175.227 ±(99.9%) 4682.355 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2175.227, 2722.853), stdev = 1215.993
[info]   CI (99.9%): [≈ 0, 6857.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.538 ±(99.9%) 4.636 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.538, 2.692), stdev = 1.204
[info]   CI (99.9%): [≈ 0, 5.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.800, 10.000), stdev = 4.382
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.08% complete, ETA 01:49:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 628184.151 ops/s
[info] # Warmup Iteration   2: 946707.947 ops/s
[info] # Warmup Iteration   3: 961514.542 ops/s
[info] # Warmup Iteration   4: 981836.379 ops/s
[info] # Warmup Iteration   5: 997176.701 ops/s
[info] Iteration   1: 994516.208 ops/s
[info]                  ·gc.alloc.rate:            664.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       1052.204 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1066.855 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 974356.366 ops/s
[info]                  ·gc.alloc.rate:            649.482 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.697 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1088.905 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 964871.735 ops/s
[info]                  ·gc.alloc.rate:            642.423 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1099.662 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 957643.164 ops/s
[info]                  ·gc.alloc.rate:            643.987 MB/sec
[info]                  ·gc.alloc.rate.norm:       1058.267 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.222 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1107.951 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 964147.400 ops/s
[info]                  ·gc.alloc.rate:            641.995 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.138 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1100.399 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   971106.975 ±(99.9%) 55372.302 ops/s [Average]
[info]   (min, avg, max) = (957643.164, 971106.975, 994516.208), stdev = 14380.011
[info]   CI (99.9%): [915734.673, 1026479.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   648.531 ±(99.9%) 36.792 MB/sec [Average]
[info]   (min, avg, max) = (641.995, 648.531, 664.767), stdev = 9.555
[info]   CI (99.9%): [611.739, 685.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1051.061 ±(99.9%) 16.865 B/op [Average]
[info]   (min, avg, max) = (1048.000, 1051.061, 1058.267), stdev = 4.380
[info]   CI (99.9%): [1034.197, 1067.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.145 ±(99.9%) 0.609 MB/sec [Average]
[info]   (min, avg, max) = (674.006, 674.145, 674.384), stdev = 0.158
[info]   CI (99.9%): [673.537, 674.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1092.755 ±(99.9%) 61.571 B/op [Average]
[info]   (min, avg, max) = (1066.855, 1092.755, 1107.951), stdev = 15.990
[info]   CI (99.9%): [1031.183, 1154.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.31% complete, ETA 01:49:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23389.300 ops/s
[info] # Warmup Iteration   2: 76655.386 ops/s
[info] # Warmup Iteration   3: 79748.557 ops/s
[info] # Warmup Iteration   4: 79086.133 ops/s
[info] # Warmup Iteration   5: 80342.524 ops/s
[info] Iteration   1: 82631.607 ops/s
[info]                  ·gc.alloc.rate:                                  2530.643 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48185.560 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       51904.804 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                12.688 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 82830.209 ops/s
[info]                  ·gc.alloc.rate:            2537.012 MB/sec
[info]                  ·gc.alloc.rate.norm:       48211.293 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.480 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 51792.782 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 82630.936 ops/s
[info]                  ·gc.alloc.rate:                                  2530.195 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48184.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       38938.119 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 82049.936 ops/s
[info]                  ·gc.alloc.rate:                                  2512.854 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48194.700 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       52285.054 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 81941.362 ops/s
[info]                  ·gc.alloc.rate:            2513.731 MB/sec
[info]                  ·gc.alloc.rate.norm:       48289.284 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52353.315 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   82416.810 ±(99.9%) 1520.315 ops/s [Average]
[info]   (min, avg, max) = (81941.362, 82416.810, 82830.209), stdev = 394.821
[info]   CI (99.9%): [80896.496, 83937.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2524.887 ±(99.9%) 42.075 MB/sec [Average]
[info]   (min, avg, max) = (2512.854, 2524.887, 2537.012), stdev = 10.927
[info]   CI (99.9%): [2482.812, 2566.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   48212.968 ±(99.9%) 169.501 B/op [Average]
[info]   (min, avg, max) = (48184.005, 48212.968, 48289.284), stdev = 44.019
[info]   CI (99.9%): [48043.467, 48382.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.019 ±(99.9%) 0.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.074), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2589.509 ±(99.9%) 1172.781 MB/sec [Average]
[info]   (min, avg, max) = (2044.683, 2589.509, 2726.124), stdev = 304.567
[info]   CI (99.9%): [1416.729, 3762.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   49454.815 ±(99.9%) 22656.794 B/op [Average]
[info]   (min, avg, max) = (38938.119, 49454.815, 52353.315), stdev = 5883.897
[info]   CI (99.9%): [26798.021, 72111.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.538 ±(99.9%) 21.849 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.538, 12.688), stdev = 5.674
[info]   CI (99.9%): [≈ 0, 24.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 1.949
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.54% complete, ETA 01:49:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 163864.430 ops/s
[info] # Warmup Iteration   2: 296836.235 ops/s
[info] # Warmup Iteration   3: 285799.665 ops/s
[info] # Warmup Iteration   4: 303346.891 ops/s
[info] # Warmup Iteration   5: 305602.318 ops/s
[info] Iteration   1: 308059.907 ops/s
[info]                  ·gc.alloc.rate:      477.806 MB/sec
[info]                  ·gc.alloc.rate.norm: 2441.597 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 294027.733 ops/s
[info]                  ·gc.alloc.rate:                   457.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              2447.253 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3604.751 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.566 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 293919.499 ops/s
[info]                  ·gc.alloc.rate:            455.741 MB/sec
[info]                  ·gc.alloc.rate.norm:       2440.622 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3609.777 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 297167.831 ops/s
[info]                  ·gc.alloc.rate:      460.654 MB/sec
[info]                  ·gc.alloc.rate.norm: 2440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 292624.742 ops/s
[info]                  ·gc.alloc.rate:            454.739 MB/sec
[info]                  ·gc.alloc.rate.norm:       2446.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3625.749 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   297159.943 ±(99.9%) 24329.895 ops/s [Average]
[info]   (min, avg, max) = (292624.742, 297159.943, 308059.907), stdev = 6318.396
[info]   CI (99.9%): [272830.048, 321489.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   461.217 ±(99.9%) 36.735 MB/sec [Average]
[info]   (min, avg, max) = (454.739, 461.217, 477.806), stdev = 9.540
[info]   CI (99.9%): [424.482, 497.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2443.108 ±(99.9%) 12.779 B/op [Average]
[info]   (min, avg, max) = (2440.001, 2443.108, 2447.253), stdev = 3.319
[info]   CI (99.9%): [2430.329, 2455.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   404.294 ±(99.9%) 1421.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.294, 674.059), stdev = 369.069
[info]   CI (99.9%): [≈ 0, 1825.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2168.055 ±(99.9%) 7621.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2168.055, 3625.749), stdev = 1979.170
[info]   CI (99.9%): [≈ 0, 9789.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.713 ±(99.9%) 6.140 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.713, 3.566), stdev = 1.595
[info]   CI (99.9%): [≈ 0, 6.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.200, 9.000), stdev = 4.764
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.77% complete, ETA 01:48:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 254413.694 ops/s
[info] # Warmup Iteration   2: 776482.479 ops/s
[info] # Warmup Iteration   3: 797859.792 ops/s
[info] # Warmup Iteration   4: 811710.265 ops/s
[info] # Warmup Iteration   5: 862344.158 ops/s
[info] Iteration   1: 845944.703 ops/s
[info]                  ·gc.alloc.rate:            610.964 MB/sec
[info]                  ·gc.alloc.rate.norm:       1136.575 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.532 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1252.971 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 834436.236 ops/s
[info]                  ·gc.alloc.rate:            607.087 MB/sec
[info]                  ·gc.alloc.rate.norm:       1145.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1268.964 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 849600.679 ops/s
[info]                  ·gc.alloc.rate:            613.178 MB/sec
[info]                  ·gc.alloc.rate.norm:       1136.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1246.369 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 814473.237 ops/s
[info]                  ·gc.alloc.rate:            587.803 MB/sec
[info]                  ·gc.alloc.rate.norm:       1136.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1300.089 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 848213.569 ops/s
[info]                  ·gc.alloc.rate:            612.131 MB/sec
[info]                  ·gc.alloc.rate.norm:       1136.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1248.405 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   838533.685 ±(99.9%) 56684.172 ops/s [Average]
[info]   (min, avg, max) = (814473.237, 838533.685, 849600.679), stdev = 14720.699
[info]   CI (99.9%): [781849.513, 895217.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   606.233 ±(99.9%) 40.650 MB/sec [Average]
[info]   (min, avg, max) = (587.803, 606.233, 613.178), stdev = 10.557
[info]   CI (99.9%): [565.582, 646.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1137.934 ±(99.9%) 15.287 B/op [Average]
[info]   (min, avg, max) = (1136.001, 1137.934, 1145.023), stdev = 3.970
[info]   CI (99.9%): [1122.648, 1153.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.890 ±(99.9%) 1.392 MB/sec [Average]
[info]   (min, avg, max) = (672.696, 672.890, 673.532), stdev = 0.362
[info]   CI (99.9%): [671.497, 674.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1263.360 ±(99.9%) 86.119 B/op [Average]
[info]   (min, avg, max) = (1246.369, 1263.360, 1300.089), stdev = 22.365
[info]   CI (99.9%): [1177.241, 1349.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.00% complete, ETA 01:48:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1566441.258 ops/s
[info] # Warmup Iteration   2: 1994489.825 ops/s
[info] # Warmup Iteration   3: 1935636.646 ops/s
[info] # Warmup Iteration   4: 1913316.608 ops/s
[info] # Warmup Iteration   5: 1961617.212 ops/s
[info] Iteration   1: 1971792.731 ops/s
[info]                  ·gc.alloc.rate:            912.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.277 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 538.093 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1931666.637 ops/s
[info]                  ·gc.alloc.rate:            902.021 MB/sec
[info]                  ·gc.alloc.rate.norm:       734.797 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.587 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1098.574 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 1966358.806 ops/s
[info]                  ·gc.alloc.rate:            910.381 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.600 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.186 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 539.567 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1953943.508 ops/s
[info]                  ·gc.alloc.rate:            903.916 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.192 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1086.023 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   5: 1970287.608 ops/s
[info]                  ·gc.alloc.rate:            911.223 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 538.490 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   1958809.858 ±(99.9%) 64367.869 ops/s [Average]
[info]   (min, avg, max) = (1931666.637, 1958809.858, 1971792.731), stdev = 16716.131
[info]   CI (99.9%): [1894441.989, 2023177.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   907.965 ±(99.9%) 17.940 MB/sec [Average]
[info]   (min, avg, max) = (902.021, 907.965, 912.283), stdev = 4.659
[info]   CI (99.9%): [890.025, 925.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   729.524 ±(99.9%) 11.388 B/op [Average]
[info]   (min, avg, max) = (728.000, 729.524, 734.797), stdev = 2.957
[info]   CI (99.9%): [718.135, 740.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   943.833 ±(99.9%) 1421.907 MB/sec [Average]
[info]   (min, avg, max) = (674.018, 943.833, 1348.587), stdev = 369.265
[info]   CI (99.9%): [≈ 0, 2365.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   760.150 ±(99.9%) 1167.678 B/op [Average]
[info]   (min, avg, max) = (538.093, 760.150, 1098.574), stdev = 303.242
[info]   CI (99.9%): [≈ 0, 1927.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.000, 16.000), stdev = 4.123
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.24% complete, ETA 01:48:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1652330.959 ops/s
[info] # Warmup Iteration   2: 2183842.315 ops/s
[info] # Warmup Iteration   3: 2310009.659 ops/s
[info] # Warmup Iteration   4: 2315536.167 ops/s
[info] # Warmup Iteration   5: 2295747.104 ops/s
[info] Iteration   1: 2312693.107 ops/s
[info]                  ·gc.alloc.rate:      0.005 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2307799.074 ops/s
[info]                  ·gc.alloc.rate:      3.290 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.243 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2244209.987 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2312158.475 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2310968.146 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2297565.758 ±(99.9%) 115084.776 ops/s [Average]
[info]   (min, avg, max) = (2244209.987, 2297565.758, 2312693.107), stdev = 29887.151
[info]   CI (99.9%): [2182480.982, 2412650.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.659 ±(99.9%) 5.662 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.659, 3.290), stdev = 1.470
[info]   CI (99.9%): [≈ 0, 6.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.449 ±(99.9%) 3.860 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.449, 2.243), stdev = 1.003
[info]   CI (99.9%): [≈ 0, 4.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.47% complete, ETA 01:48:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 196227.307 ops/s
[info] # Warmup Iteration   2: 374800.570 ops/s
[info] # Warmup Iteration   3: 398721.976 ops/s
[info] # Warmup Iteration   4: 402322.196 ops/s
[info] # Warmup Iteration   5: 412159.713 ops/s
[info] Iteration   1: 418580.878 ops/s
[info]                  ·gc.alloc.rate:      604.189 MB/sec
[info]                  ·gc.alloc.rate.norm: 2272.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 415875.595 ops/s
[info]                  ·gc.alloc.rate:                   603.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              2284.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2546.091 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.521 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 417355.757 ops/s
[info]                  ·gc.alloc.rate:            602.708 MB/sec
[info]                  ·gc.alloc.rate.norm:       2272.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2539.649 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 414962.401 ops/s
[info]                  ·gc.alloc.rate:                   599.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              2272.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.837 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2551.833 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.527 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 417270.261 ops/s
[info]                  ·gc.alloc.rate:            602.532 MB/sec
[info]                  ·gc.alloc.rate.norm:       2272.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2540.166 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   416808.978 ±(99.9%) 5422.587 ops/s [Average]
[info]   (min, avg, max) = (414962.401, 416808.978, 418580.878), stdev = 1408.228
[info]   CI (99.9%): [411386.392, 422231.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   602.394 ±(99.9%) 7.626 MB/sec [Average]
[info]   (min, avg, max) = (599.054, 602.394, 604.189), stdev = 1.980
[info]   CI (99.9%): [594.768, 610.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2274.423 ±(99.9%) 20.855 B/op [Average]
[info]   (min, avg, max) = (2272.001, 2274.423, 2284.112), stdev = 5.416
[info]   CI (99.9%): [2253.568, 2295.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   538.580 ±(99.9%) 1159.335 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.580, 673.709), stdev = 301.076
[info]   CI (99.9%): [≈ 0, 1697.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2035.548 ±(99.9%) 4381.712 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2035.548, 2551.833), stdev = 1137.917
[info]   CI (99.9%): [≈ 0, 6417.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.009 ±(99.9%) 5.323 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.009, 2.527), stdev = 1.382
[info]   CI (99.9%): [≈ 0, 6.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.200, 9.000), stdev = 4.025
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.70% complete, ETA 01:48:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8882.760 ops/s
[info] # Warmup Iteration   2: 16577.746 ops/s
[info] # Warmup Iteration   3: 16084.500 ops/s
[info] # Warmup Iteration   4: 16494.659 ops/s
[info] # Warmup Iteration   5: 16492.230 ops/s
[info] Iteration   1: 16315.401 ops/s
[info]                  ·gc.alloc.rate:            1115.758 MB/sec
[info]                  ·gc.alloc.rate.norm:       107653.714 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.900 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130051.953 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 16263.832 ops/s
[info]                  ·gc.alloc.rate:                   1124.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              108784.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.918 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        130403.224 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 64.460 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 16856.029 ops/s
[info]                  ·gc.alloc.rate:            1156.876 MB/sec
[info]                  ·gc.alloc.rate.norm:       108017.425 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62939.437 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 16749.594 ops/s
[info]                  ·gc.alloc.rate:                   1145.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              107593.942 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        126557.672 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 312.952 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 16849.896 ops/s
[info]                  ·gc.alloc.rate:                   1152.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              107604.833 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        126553.349 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 373.314 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   16606.951 ±(99.9%) 1129.463 ops/s [Average]
[info]   (min, avg, max) = (16263.832, 16606.951, 16856.029), stdev = 293.318
[info]   CI (99.9%): [15477.488, 17736.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1138.863 ±(99.9%) 68.900 MB/sec [Average]
[info]   (min, avg, max) = (1115.758, 1138.863, 1156.876), stdev = 17.893
[info]   CI (99.9%): [1069.963, 1207.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   107930.796 ±(99.9%) 1955.952 B/op [Average]
[info]   (min, avg, max) = (107593.942, 107930.796, 108784.066), stdev = 507.955
[info]   CI (99.9%): [105974.844, 109886.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1214.369 ±(99.9%) 1163.064 MB/sec [Average]
[info]   (min, avg, max) = (674.087, 1214.369, 1354.988), stdev = 302.044
[info]   CI (99.9%): [51.305, 2377.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   115301.127 ±(99.9%) 112935.012 B/op [Average]
[info]   (min, avg, max) = (62939.437, 115301.127, 130403.224), stdev = 29328.864
[info]   CI (99.9%): [2366.115, 228236.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 7.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 3.997), stdev = 1.919
[info]   CI (99.9%): [≈ 0, 8.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   150.145 ±(99.9%) 690.810 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 150.145, 373.314), stdev = 179.401
[info]   CI (99.9%): [≈ 0, 840.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 12.800, 16.000), stdev = 3.962
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.93% complete, ETA 01:47:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10797.909 ops/s
[info] # Warmup Iteration   2: 27891.439 ops/s
[info] # Warmup Iteration   3: 28329.616 ops/s
[info] # Warmup Iteration   4: 28785.225 ops/s
[info] # Warmup Iteration   5: 27889.018 ops/s
[info] Iteration   1: 28551.391 ops/s
[info]                  ·gc.alloc.rate:            715.703 MB/sec
[info]                  ·gc.alloc.rate.norm:       39458.682 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37085.890 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 28827.860 ops/s
[info]                  ·gc.alloc.rate:            721.424 MB/sec
[info]                  ·gc.alloc.rate.norm:       39384.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36728.343 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 28392.652 ops/s
[info]                  ·gc.alloc.rate:            710.431 MB/sec
[info]                  ·gc.alloc.rate.norm:       39384.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.490 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74589.693 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   4: 28680.100 ops/s
[info]                  ·gc.alloc.rate:            717.576 MB/sec
[info]                  ·gc.alloc.rate.norm:       39384.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36920.403 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 28740.728 ops/s
[info]                  ·gc.alloc.rate:            719.281 MB/sec
[info]                  ·gc.alloc.rate.norm:       39384.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.880 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36843.338 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   28638.546 ±(99.9%) 655.931 ops/s [Average]
[info]   (min, avg, max) = (28392.652, 28638.546, 28827.860), stdev = 170.343
[info]   CI (99.9%): [27982.615, 29294.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   716.883 ±(99.9%) 16.094 MB/sec [Average]
[info]   (min, avg, max) = (710.431, 716.883, 721.424), stdev = 4.180
[info]   CI (99.9%): [700.789, 732.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39398.948 ±(99.9%) 128.582 B/op [Average]
[info]   (min, avg, max) = (39384.014, 39398.948, 39458.682), stdev = 33.392
[info]   CI (99.9%): [39270.366, 39527.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   807.301 ±(99.9%) 1158.494 MB/sec [Average]
[info]   (min, avg, max) = (672.665, 807.301, 1345.490), stdev = 300.857
[info]   CI (99.9%): [≈ 0, 1965.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   44433.533 ±(99.9%) 64915.336 B/op [Average]
[info]   (min, avg, max) = (36728.343, 44433.533, 74589.693), stdev = 16858.307
[info]   CI (99.9%): [≈ 0, 109348.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.200, 18.000), stdev = 3.834
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.16% complete, ETA 01:47:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26693.902 ops/s
[info] # Warmup Iteration   2: 38873.301 ops/s
[info] # Warmup Iteration   3: 40740.649 ops/s
[info] # Warmup Iteration   4: 40855.049 ops/s
[info] # Warmup Iteration   5: 42736.575 ops/s
[info] Iteration   1: 42454.046 ops/s
[info]                  ·gc.alloc.rate:            570.223 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24991.378 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 42213.386 ops/s
[info]                  ·gc.alloc.rate:            567.081 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25134.034 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 41358.968 ops/s
[info]                  ·gc.alloc.rate:            577.430 MB/sec
[info]                  ·gc.alloc.rate.norm:       21976.633 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25654.166 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 42518.299 ops/s
[info]                  ·gc.alloc.rate:            571.320 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.214 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24952.006 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 42394.604 ops/s
[info]                  ·gc.alloc.rate:            569.717 MB/sec
[info]                  ·gc.alloc.rate.norm:       21147.923 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.210 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25026.743 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   42187.860 ±(99.9%) 1837.146 ops/s [Average]
[info]   (min, avg, max) = (41358.968, 42187.860, 42518.299), stdev = 477.101
[info]   CI (99.9%): [40350.715, 44025.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   571.154 ±(99.9%) 14.780 MB/sec [Average]
[info]   (min, avg, max) = (567.081, 571.154, 577.430), stdev = 3.838
[info]   CI (99.9%): [556.374, 585.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21311.317 ±(99.9%) 1432.157 B/op [Average]
[info]   (min, avg, max) = (21144.010, 21311.317, 21976.633), stdev = 371.927
[info]   CI (99.9%): [19879.160, 22743.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.111 ±(99.9%) 0.389 MB/sec [Average]
[info]   (min, avg, max) = (673.980, 674.111, 674.214), stdev = 0.101
[info]   CI (99.9%): [673.722, 674.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   25151.665 ±(99.9%) 1112.661 B/op [Average]
[info]   (min, avg, max) = (24952.006, 25151.665, 25654.166), stdev = 288.955
[info]   CI (99.9%): [24039.004, 26264.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.39% complete, ETA 01:47:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8040.457 ops/s
[info] # Warmup Iteration   2: 23622.438 ops/s
[info] # Warmup Iteration   3: 23929.486 ops/s
[info] # Warmup Iteration   4: 23914.655 ops/s
[info] # Warmup Iteration   5: 24130.615 ops/s
[info] Iteration   1: 23882.439 ops/s
[info]                  ·gc.alloc.rate:            1190.205 MB/sec
[info]                  ·gc.alloc.rate.norm:       78432.449 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.599 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 88672.647 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 23815.106 ops/s
[info]                  ·gc.alloc.rate:            1169.105 MB/sec
[info]                  ·gc.alloc.rate.norm:       77262.450 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.590 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 88925.795 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 23913.269 ops/s
[info]                  ·gc.alloc.rate:                   1173.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              77232.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        88557.719 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 219.202 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   4: 23821.735 ops/s
[info]                  ·gc.alloc.rate:                   1169.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              77246.174 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        44669.883 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.333 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 88.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 23556.911 ops/s
[info]                  ·gc.alloc.rate:                   1156.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              77237.465 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        90700.645 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 267.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   23797.892 ±(99.9%) 542.505 ops/s [Average]
[info]   (min, avg, max) = (23556.911, 23797.892, 23913.269), stdev = 140.887
[info]   CI (99.9%): [23255.387, 24340.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1171.806 ±(99.9%) 46.722 MB/sec [Average]
[info]   (min, avg, max) = (1156.470, 1171.806, 1190.205), stdev = 12.134
[info]   CI (99.9%): [1125.084, 1218.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   77482.111 ±(99.9%) 2046.154 B/op [Average]
[info]   (min, avg, max) = (77232.017, 77482.111, 78432.449), stdev = 531.380
[info]   CI (99.9%): [75435.957, 79528.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1214.267 ±(99.9%) 1158.023 MB/sec [Average]
[info]   (min, avg, max) = (676.382, 1214.267, 1358.053), stdev = 300.735
[info]   CI (99.9%): [56.244, 2372.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   80305.338 ±(99.9%) 76780.864 B/op [Average]
[info]   (min, avg, max) = (44669.883, 80305.338, 90700.645), stdev = 19939.747
[info]   CI (99.9%): [3524.474, 157086.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 7.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 3.998), stdev = 1.861
[info]   CI (99.9%): [≈ 0, 8.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   114.850 ±(99.9%) 476.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 114.850, 267.028), stdev = 123.641
[info]   CI (99.9%): [≈ 0, 590.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   70.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 14.000, 19.000), stdev = 6.856
[info]   CI (99.9%): [70.000, 70.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.62% complete, ETA 01:47:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9927.642 ops/s
[info] # Warmup Iteration   2: 22550.672 ops/s
[info] # Warmup Iteration   3: 22761.989 ops/s
[info] # Warmup Iteration   4: 22886.288 ops/s
[info] # Warmup Iteration   5: 22607.959 ops/s
[info] Iteration   1: 22376.824 ops/s
[info]                  ·gc.alloc.rate:            1287.868 MB/sec
[info]                  ·gc.alloc.rate.norm:       90565.188 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.137 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 94733.063 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 22696.091 ops/s
[info]                  ·gc.alloc.rate:            1291.412 MB/sec
[info]                  ·gc.alloc.rate.norm:       89568.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.628 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 93397.677 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 22660.855 ops/s
[info]                  ·gc.alloc.rate:                   1289.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              89584.322 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        93777.346 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 323.849 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 23047.098 ops/s
[info]                  ·gc.alloc.rate:                   1311.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              89573.587 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        92794.336 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 227.437 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 23058.087 ops/s
[info]                  ·gc.alloc.rate:                                  1311.970 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89568.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.600 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       93026.906 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   22767.791 ±(99.9%) 1108.884 ops/s [Average]
[info]   (min, avg, max) = (22376.824, 22767.791, 23058.087), stdev = 287.974
[info]   CI (99.9%): [21658.907, 23876.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1298.503 ±(99.9%) 46.837 MB/sec [Average]
[info]   (min, avg, max) = (1287.868, 1298.503, 1311.970), stdev = 12.163
[info]   CI (99.9%): [1251.666, 1345.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89771.827 ±(99.9%) 1707.963 B/op [Average]
[info]   (min, avg, max) = (89568.018, 89771.827, 90565.188), stdev = 443.552
[info]   CI (99.9%): [88063.864, 91479.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.015 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.120 ±(99.9%) 1.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.120, 0.600), stdev = 0.268
[info]   CI (99.9%): [≈ 0, 1.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1353.038 ±(99.9%) 27.817 MB/sec [Average]
[info]   (min, avg, max) = (1346.628, 1353.038, 1362.635), stdev = 7.224
[info]   CI (99.9%): [1325.221, 1380.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   93545.866 ±(99.9%) 2931.991 B/op [Average]
[info]   (min, avg, max) = (92794.336, 93545.866, 94733.063), stdev = 761.429
[info]   CI (99.9%): [90613.874, 96477.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.621 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.662), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   110.257 ±(99.9%) 595.987 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 110.257, 323.849), stdev = 154.776
[info]   CI (99.9%): [≈ 0, 706.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   60.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 12.000, 17.000), stdev = 5.148
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.85% complete, ETA 01:46:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1597.142 ops/s
[info] # Warmup Iteration   2: 19508.089 ops/s
[info] # Warmup Iteration   3: 21050.403 ops/s
[info] # Warmup Iteration   4: 20734.934 ops/s
[info] # Warmup Iteration   5: 20971.868 ops/s
[info] Iteration   1: 20037.479 ops/s
[info]                  ·gc.alloc.rate:            1132.112 MB/sec
[info]                  ·gc.alloc.rate.norm:       88919.695 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.289 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 105741.834 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 21119.798 ops/s
[info]                  ·gc.alloc.rate:            1162.080 MB/sec
[info]                  ·gc.alloc.rate.norm:       86590.500 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.839 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50135.474 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 21056.454 ops/s
[info]                  ·gc.alloc.rate:            1156.598 MB/sec
[info]                  ·gc.alloc.rate.norm:       86455.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 100570.890 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   4: 21484.438 ops/s
[info]                  ·gc.alloc.rate:                   1179.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              86432.345 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        98816.381 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 341.587 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 21758.800 ops/s
[info]                  ·gc.alloc.rate:                   1194.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              86416.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        49002.931 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 240.919 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   21091.394 ±(99.9%) 2519.656 ops/s [Average]
[info]   (min, avg, max) = (20037.479, 21091.394, 21758.800), stdev = 654.347
[info]   CI (99.9%): [18571.738, 23611.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1165.012 ±(99.9%) 91.363 MB/sec [Average]
[info]   (min, avg, max) = (1132.112, 1165.012, 1194.588), stdev = 23.727
[info]   CI (99.9%): [1073.649, 1256.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   86962.725 ±(99.9%) 4220.888 B/op [Average]
[info]   (min, avg, max) = (86416.020, 86962.725, 88919.695), stdev = 1096.151
[info]   CI (99.9%): [82741.837, 91183.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1078.136 ±(99.9%) 1416.678 MB/sec [Average]
[info]   (min, avg, max) = (672.839, 1078.136, 1348.709), stdev = 367.907
[info]   CI (99.9%): [≈ 0, 2494.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   80853.502 ±(99.9%) 110415.588 B/op [Average]
[info]   (min, avg, max) = (49002.931, 80853.502, 105741.834), stdev = 28674.577
[info]   CI (99.9%): [≈ 0, 191269.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.621 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.662), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   116.501 ±(99.9%) 629.381 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 116.501, 341.587), stdev = 163.448
[info]   CI (99.9%): [≈ 0, 745.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   69.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 13.800, 19.000), stdev = 6.140
[info]   CI (99.9%): [69.000, 69.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.08% complete, ETA 01:46:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12317.529 ops/s
[info] # Warmup Iteration   2: 25052.692 ops/s
[info] # Warmup Iteration   3: 24664.999 ops/s
[info] # Warmup Iteration   4: 25092.336 ops/s
[info] # Warmup Iteration   5: 24321.009 ops/s
[info] Iteration   1: 24642.956 ops/s
[info]                  ·gc.alloc.rate:            1281.418 MB/sec
[info]                  ·gc.alloc.rate.norm:       81845.708 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.159 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86108.566 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 25138.633 ops/s
[info]                  ·gc.alloc.rate:                   1301.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              81474.690 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        84364.829 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.703 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 25223.480 ops/s
[info]                  ·gc.alloc.rate:                   1306.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              81512.577 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        84125.489 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 166.256 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 25257.889 ops/s
[info]                  ·gc.alloc.rate:                   1306.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              81445.903 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        84424.003 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 290.545 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 25563.582 ops/s
[info]                  ·gc.alloc.rate:            1322.504 MB/sec
[info]                  ·gc.alloc.rate.norm:       81432.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83909.046 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   25165.308 ±(99.9%) 1283.110 ops/s [Average]
[info]   (min, avg, max) = (24642.956, 25165.308, 25563.582), stdev = 333.220
[info]   CI (99.9%): [23882.198, 26448.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1303.636 ±(99.9%) 56.871 MB/sec [Average]
[info]   (min, avg, max) = (1281.418, 1303.636, 1322.504), stdev = 14.769
[info]   CI (99.9%): [1246.764, 1360.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   81542.179 ±(99.9%) 664.071 B/op [Average]
[info]   (min, avg, max) = (81432.016, 81542.179, 81845.708), stdev = 172.457
[info]   CI (99.9%): [80878.108, 82206.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1352.192 ±(99.9%) 25.378 MB/sec [Average]
[info]   (min, avg, max) = (1347.359, 1352.192, 1362.733), stdev = 6.590
[info]   CI (99.9%): [1326.815, 1377.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   84586.386 ±(99.9%) 3369.975 B/op [Average]
[info]   (min, avg, max) = (83909.046, 84586.386, 86108.566), stdev = 875.172
[info]   CI (99.9%): [81216.411, 87956.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.598 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.598, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 9.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   99.701 ±(99.9%) 487.435 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 99.701, 290.545), stdev = 126.585
[info]   CI (99.9%): [≈ 0, 587.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 12.600, 16.000), stdev = 5.273
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.31% complete, ETA 01:46:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14322.998 ops/s
[info] # Warmup Iteration   2: 25399.492 ops/s
[info] # Warmup Iteration   3: 25611.699 ops/s
[info] # Warmup Iteration   4: 25707.923 ops/s
[info] # Warmup Iteration   5: 25598.905 ops/s
[info] Iteration   1: 25838.512 ops/s
[info]                  ·gc.alloc.rate:            1286.743 MB/sec
[info]                  ·gc.alloc.rate.norm:       78385.679 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 82123.508 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 25336.352 ops/s
[info]                  ·gc.alloc.rate:            1261.576 MB/sec
[info]                  ·gc.alloc.rate.norm:       78376.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83747.053 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 25872.374 ops/s
[info]                  ·gc.alloc.rate:                   1288.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              78386.210 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        82015.606 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 162.086 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 25685.357 ops/s
[info]                  ·gc.alloc.rate:                   1280.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              78464.144 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        83020.770 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 285.716 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 26102.461 ops/s
[info]                  ·gc.alloc.rate:                                  1299.702 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78376.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.495 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82176.677 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   25767.011 ±(99.9%) 1090.615 ops/s [Average]
[info]   (min, avg, max) = (25336.352, 25767.011, 26102.461), stdev = 283.229
[info]   CI (99.9%): [24676.396, 26857.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1283.464 ±(99.9%) 54.071 MB/sec [Average]
[info]   (min, avg, max) = (1261.576, 1283.464, 1299.702), stdev = 14.042
[info]   CI (99.9%): [1229.393, 1337.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   78397.613 ±(99.9%) 144.486 B/op [Average]
[info]   (min, avg, max) = (78376.016, 78397.613, 78464.144), stdev = 37.523
[info]   CI (99.9%): [78253.127, 78542.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.100 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.058), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.699 ±(99.9%) 6.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.699, 3.495), stdev = 1.563
[info]   CI (99.9%): [≈ 0, 6.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1352.439 ±(99.9%) 24.913 MB/sec [Average]
[info]   (min, avg, max) = (1348.030, 1352.439, 1362.728), stdev = 6.470
[info]   CI (99.9%): [1327.527, 1377.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   82616.723 ±(99.9%) 2881.008 B/op [Average]
[info]   (min, avg, max) = (82015.606, 82616.723, 83747.053), stdev = 748.189
[info]   CI (99.9%): [79735.715, 85497.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 8.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 4.663), stdev = 2.128
[info]   CI (99.9%): [≈ 0, 9.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   89.560 ±(99.9%) 501.324 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 89.560, 285.716), stdev = 130.192
[info]   CI (99.9%): [≈ 0, 590.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 12.400, 16.000), stdev = 5.128
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.55% complete, ETA 01:46:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2830.089 ops/s
[info] # Warmup Iteration   2: 6992.848 ops/s
[info] # Warmup Iteration   3: 7285.109 ops/s
[info] # Warmup Iteration   4: 7357.591 ops/s
[info] # Warmup Iteration   5: 7367.215 ops/s
[info] Iteration   1: 7304.694 ops/s
[info]                  ·gc.alloc.rate:                   956.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.597 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        289915.620 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 143.523 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 7366.164 ops/s
[info]                  ·gc.alloc.rate:            964.883 MB/sec
[info]                  ·gc.alloc.rate.norm:       206144.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 143860.814 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 7286.462 ops/s
[info]                  ·gc.alloc.rate:            954.263 MB/sec
[info]                  ·gc.alloc.rate.norm:       206155.874 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.620 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 290919.412 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   4: 7338.252 ops/s
[info]                  ·gc.alloc.rate:            961.133 MB/sec
[info]                  ·gc.alloc.rate.norm:       206144.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 144409.527 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 7247.411 ops/s
[info]                  ·gc.alloc.rate:                   951.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              206526.571 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        292154.968 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 723.156 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   7308.596 ±(99.9%) 176.903 ops/s [Average]
[info]   (min, avg, max) = (7247.411, 7308.596, 7366.164), stdev = 45.941
[info]   CI (99.9%): [7131.694, 7485.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   957.664 ±(99.9%) 20.877 MB/sec [Average]
[info]   (min, avg, max) = (951.254, 957.664, 964.883), stdev = 5.422
[info]   CI (99.9%): [936.787, 978.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   206222.923 ±(99.9%) 653.922 B/op [Average]
[info]   (min, avg, max) = (206144.055, 206222.923, 206526.571), stdev = 169.821
[info]   CI (99.9%): [205569.001, 206876.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1076.906 ±(99.9%) 1418.631 MB/sec [Average]
[info]   (min, avg, max) = (673.300, 1076.906, 1346.620), stdev = 368.414
[info]   CI (99.9%): [≈ 0, 2495.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   232252.068 ±(99.9%) 309759.269 B/op [Average]
[info]   (min, avg, max) = (143860.814, 232252.068, 292154.968), stdev = 80443.498
[info]   CI (99.9%): [≈ 0, 542011.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   173.336 ±(99.9%) 1207.481 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 173.336, 723.156), stdev = 313.579
[info]   CI (99.9%): [≈ 0, 1380.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   72.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 14.400, 18.000), stdev = 4.930
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.78% complete, ETA 01:45:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7562.668 ops/s
[info] # Warmup Iteration   2: 16205.994 ops/s
[info] # Warmup Iteration   3: 17376.457 ops/s
[info] # Warmup Iteration   4: 17234.978 ops/s
[info] # Warmup Iteration   5: 17141.541 ops/s
[info] Iteration   1: 17305.872 ops/s
[info]                  ·gc.alloc.rate:            1337.003 MB/sec
[info]                  ·gc.alloc.rate.norm:       121586.752 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.294 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 122613.543 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 16936.162 ops/s
[info]                  ·gc.alloc.rate:            1327.180 MB/sec
[info]                  ·gc.alloc.rate.norm:       123338.331 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62642.203 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 17325.403 ops/s
[info]                  ·gc.alloc.rate:                   1337.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              121488.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        122351.011 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 302.549 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 17068.065 ops/s
[info]                  ·gc.alloc.rate:                   1325.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              122253.215 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.789 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        124937.238 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 368.546 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 17243.742 ops/s
[info]                  ·gc.alloc.rate:                   1330.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              121488.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1362.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        124323.859 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 60.794 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   17175.849 ±(99.9%) 647.060 ops/s [Average]
[info]   (min, avg, max) = (16936.162, 17175.849, 17325.403), stdev = 168.039
[info]   CI (99.9%): [16528.790, 17822.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1331.594 ±(99.9%) 20.651 MB/sec [Average]
[info]   (min, avg, max) = (1325.684, 1331.594, 1337.158), stdev = 5.363
[info]   CI (99.9%): [1310.943, 1352.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   122030.869 ±(99.9%) 3071.776 B/op [Average]
[info]   (min, avg, max) = (121488.024, 122030.869, 123338.331), stdev = 797.730
[info]   CI (99.9%): [118959.094, 125102.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1217.163 ±(99.9%) 1169.302 MB/sec [Average]
[info]   (min, avg, max) = (674.060, 1217.163, 1362.013), stdev = 303.664
[info]   CI (99.9%): [47.861, 2386.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   111373.571 ±(99.9%) 104983.385 B/op [Average]
[info]   (min, avg, max) = (62642.203, 111373.571, 124937.238), stdev = 27263.852
[info]   CI (99.9%): [6390.186, 216356.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.598 ±(99.9%) 7.389 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.598, 3.996), stdev = 1.919
[info]   CI (99.9%): [≈ 0, 8.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   146.378 ±(99.9%) 677.773 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 146.378, 368.546), stdev = 176.016
[info]   CI (99.9%): [≈ 0, 824.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 10.800, 16.000), stdev = 5.215
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.01% complete, ETA 01:45:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16250.089 ops/s
[info] # Warmup Iteration   2: 33147.343 ops/s
[info] # Warmup Iteration   3: 33960.718 ops/s
[info] # Warmup Iteration   4: 33460.016 ops/s
[info] # Warmup Iteration   5: 34009.484 ops/s
[info] Iteration   1: 34204.197 ops/s
[info]                  ·gc.alloc.rate:            842.091 MB/sec
[info]                  ·gc.alloc.rate.norm:       38752.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30987.412 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 33853.283 ops/s
[info]                  ·gc.alloc.rate:                   834.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              38764.611 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        62588.148 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 30.969 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 34250.161 ops/s
[info]                  ·gc.alloc.rate:            843.221 MB/sec
[info]                  ·gc.alloc.rate.norm:       38752.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30946.705 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 34264.894 ops/s
[info]                  ·gc.alloc.rate:            843.739 MB/sec
[info]                  ·gc.alloc.rate.norm:       38752.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.834 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30902.564 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 33567.229 ops/s
[info]                  ·gc.alloc.rate:            829.975 MB/sec
[info]                  ·gc.alloc.rate.norm:       38919.142 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31545.044 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   34027.953 ±(99.9%) 1185.843 ops/s [Average]
[info]   (min, avg, max) = (33567.229, 34027.953, 34264.894), stdev = 307.960
[info]   CI (99.9%): [32842.110, 35213.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   838.622 ±(99.9%) 23.948 MB/sec [Average]
[info]   (min, avg, max) = (829.975, 838.622, 843.739), stdev = 6.219
[info]   CI (99.9%): [814.674, 862.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   38787.958 ±(99.9%) 283.164 B/op [Average]
[info]   (min, avg, max) = (38752.012, 38787.958, 38919.142), stdev = 73.537
[info]   CI (99.9%): [38504.794, 39071.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   807.797 ±(99.9%) 1160.004 MB/sec [Average]
[info]   (min, avg, max) = (672.718, 807.797, 1346.688), stdev = 301.249
[info]   CI (99.9%): [≈ 0, 1967.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   37393.974 ±(99.9%) 54241.692 B/op [Average]
[info]   (min, avg, max) = (30902.564, 37393.974, 62588.148), stdev = 14086.395
[info]   CI (99.9%): [≈ 0, 91635.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   6.194 ±(99.9%) 53.330 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.194, 30.969), stdev = 13.850
[info]   CI (99.9%): [≈ 0, 59.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.200, 19.000), stdev = 4.382
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.24% complete, ETA 01:45:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43956.399 ops/s
[info] # Warmup Iteration   2: 56496.438 ops/s
[info] # Warmup Iteration   3: 58049.615 ops/s
[info] # Warmup Iteration   4: 59593.400 ops/s
[info] # Warmup Iteration   5: 60256.028 ops/s
[info] Iteration   1: 59501.159 ops/s
[info]                  ·gc.alloc.rate:            774.962 MB/sec
[info]                  ·gc.alloc.rate.norm:       20501.269 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17831.307 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 58881.534 ops/s
[info]                  ·gc.alloc.rate:            761.037 MB/sec
[info]                  ·gc.alloc.rate.norm:       20341.974 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18018.422 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 60139.326 ops/s
[info]                  ·gc.alloc.rate:            777.005 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17642.464 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 58290.180 ops/s
[info]                  ·gc.alloc.rate:            754.311 MB/sec
[info]                  ·gc.alloc.rate.norm:       20366.445 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36403.393 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   5: 58178.860 ops/s
[info]                  ·gc.alloc.rate:            751.740 MB/sec
[info]                  ·gc.alloc.rate.norm:       20338.859 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18236.418 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   58998.212 ±(99.9%) 3187.765 ops/s [Average]
[info]   (min, avg, max) = (58178.860, 58998.212, 60139.326), stdev = 827.852
[info]   CI (99.9%): [55810.447, 62185.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   763.811 ±(99.9%) 44.827 MB/sec [Average]
[info]   (min, avg, max) = (751.740, 763.811, 777.005), stdev = 11.641
[info]   CI (99.9%): [718.984, 808.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20376.911 ±(99.9%) 271.710 B/op [Average]
[info]   (min, avg, max) = (20336.007, 20376.911, 20501.269), stdev = 70.562
[info]   CI (99.9%): [20105.201, 20648.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.907 ±(99.9%) 1161.021 MB/sec [Average]
[info]   (min, avg, max) = (674.032, 808.907, 1348.271), stdev = 301.513
[info]   CI (99.9%): [≈ 0, 1969.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   21626.401 ±(99.9%) 31819.899 B/op [Average]
[info]   (min, avg, max) = (17642.464, 21626.401, 36403.393), stdev = 8263.527
[info]   CI (99.9%): [≈ 0, 53446.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.800, 15.000), stdev = 3.493
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.47% complete, ETA 01:45:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2854.556 ops/s
[info] # Warmup Iteration   2: 21720.776 ops/s
[info] # Warmup Iteration   3: 24198.092 ops/s
[info] # Warmup Iteration   4: 23832.818 ops/s
[info] # Warmup Iteration   5: 24286.288 ops/s
[info] Iteration   1: 23266.674 ops/s
[info]                  ·gc.alloc.rate:            1455.997 MB/sec
[info]                  ·gc.alloc.rate.norm:       98474.676 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.832 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 91023.787 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 23280.409 ops/s
[info]                  ·gc.alloc.rate:                   1436.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              97088.510 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.852 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        90965.150 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 180.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   3: 24165.738 ops/s
[info]                  ·gc.alloc.rate:                   1486.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              96840.541 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1352.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        88107.975 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 303.671 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 24724.854 ops/s
[info]                  ·gc.alloc.rate:                   1521.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              96841.585 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2043.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        130054.294 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.333 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 84.809 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 24720.164 ops/s
[info]                  ·gc.alloc.rate:                                  1522.054 MB/sec
[info]                  ·gc.alloc.rate.norm:                             96915.731 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.177 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86773.439 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   24031.568 ±(99.9%) 2804.708 ops/s [Average]
[info]   (min, avg, max) = (23266.674, 24031.568, 24724.854), stdev = 728.374
[info]   CI (99.9%): [21226.860, 26836.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1484.629 ±(99.9%) 148.230 MB/sec [Average]
[info]   (min, avg, max) = (1436.449, 1484.629, 1522.054), stdev = 38.495
[info]   CI (99.9%): [1336.399, 1632.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   97232.209 ±(99.9%) 2702.676 B/op [Average]
[info]   (min, avg, max) = (96840.541, 97232.209, 98474.676), stdev = 701.876
[info]   CI (99.9%): [94529.532, 99934.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.035 ±(99.9%) 0.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.177), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1490.187 ±(99.9%) 1191.773 MB/sec [Average]
[info]   (min, avg, max) = (1345.832, 1490.187, 2043.698), stdev = 309.500
[info]   CI (99.9%): [298.413, 2681.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   97384.929 ±(99.9%) 70678.743 B/op [Average]
[info]   (min, avg, max) = (86773.439, 97384.929, 130054.294), stdev = 18355.045
[info]   CI (99.9%): [26706.186, 168063.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 7.609 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.662), stdev = 1.976
[info]   CI (99.9%): [≈ 0, 9.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   113.722 ±(99.9%) 499.070 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 113.722, 303.671), stdev = 129.607
[info]   CI (99.9%): [≈ 0, 612.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   60.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.000, 20.000), stdev = 7.416
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.70% complete, ETA 01:44:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7421.000 ops/s
[info] # Warmup Iteration   2: 24820.904 ops/s
[info] # Warmup Iteration   3: 25128.706 ops/s
[info] # Warmup Iteration   4: 25491.631 ops/s
[info] # Warmup Iteration   5: 25576.070 ops/s
[info] Iteration   1: 25547.977 ops/s
[info]                  ·gc.alloc.rate:                   1447.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              89175.868 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        82935.664 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 25243.983 ops/s
[info]                  ·gc.alloc.rate:                   1429.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              89144.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        83892.725 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 207.655 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 25252.091 ops/s
[info]                  ·gc.alloc.rate:                   1430.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              89193.540 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.471 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        84364.366 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 290.625 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 25883.654 ops/s
[info]                  ·gc.alloc.rate:                                  1467.317 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89223.752 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.192 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82831.347 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                40.504 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 25655.188 ops/s
[info]                  ·gc.alloc.rate:            1453.306 MB/sec
[info]                  ·gc.alloc.rate.norm:       89152.674 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 125412.305 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   25516.579 ±(99.9%) 1053.143 ops/s [Average]
[info]   (min, avg, max) = (25243.983, 25516.579, 25883.654), stdev = 273.498
[info]   CI (99.9%): [24463.435, 26569.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1445.781 ±(99.9%) 61.093 MB/sec [Average]
[info]   (min, avg, max) = (1429.580, 1445.781, 1467.317), stdev = 15.866
[info]   CI (99.9%): [1384.688, 1506.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   89177.970 ±(99.9%) 123.814 B/op [Average]
[info]   (min, avg, max) = (89144.016, 89177.970, 89223.752), stdev = 32.154
[info]   CI (99.9%): [89054.155, 89301.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.202 ±(99.9%) 1.737 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.202, 1.009), stdev = 0.451
[info]   CI (99.9%): [≈ 0, 1.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1490.372 ±(99.9%) 1192.835 MB/sec [Average]
[info]   (min, avg, max) = (1345.366, 1490.372, 2044.385), stdev = 309.775
[info]   CI (99.9%): [297.537, 2683.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   91887.282 ±(99.9%) 72207.936 B/op [Average]
[info]   (min, avg, max) = (82831.347, 91887.282, 125412.305), stdev = 18752.172
[info]   CI (99.9%): [19679.345, 164095.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 7.779 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 4.663), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 9.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   115.964 ±(99.9%) 485.814 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 115.964, 290.625), stdev = 126.164
[info]   CI (99.9%): [≈ 0, 601.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 12.800, 19.000), stdev = 6.099
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.93% complete, ETA 01:44:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22795.395 ops/s
[info] # Warmup Iteration   2: 33871.525 ops/s
[info] # Warmup Iteration   3: 34897.984 ops/s
[info] # Warmup Iteration   4: 33797.375 ops/s
[info] # Warmup Iteration   5: 34874.847 ops/s
[info] Iteration   1: 34896.594 ops/s
[info]                  ·gc.alloc.rate:            1376.197 MB/sec
[info]                  ·gc.alloc.rate.norm:       62066.108 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.299 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60807.914 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 34969.252 ops/s
[info]                  ·gc.alloc.rate:            1377.761 MB/sec
[info]                  ·gc.alloc.rate.norm:       62016.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60680.996 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 34721.572 ops/s
[info]                  ·gc.alloc.rate:                   1370.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              62140.632 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        61233.360 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 181.164 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 35217.930 ops/s
[info]                  ·gc.alloc.rate:                   1387.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              62021.947 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        60758.109 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 148.844 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 35101.057 ops/s
[info]                  ·gc.alloc.rate:                                  1382.976 MB/sec
[info]                  ·gc.alloc.rate.norm:                             62016.515 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.498 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61111.676 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   34981.281 ±(99.9%) 733.429 ops/s [Average]
[info]   (min, avg, max) = (34721.572, 34981.281, 35217.930), stdev = 190.469
[info]   CI (99.9%): [34247.851, 35714.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1379.063 ±(99.9%) 24.912 MB/sec [Average]
[info]   (min, avg, max) = (1370.760, 1379.063, 1387.622), stdev = 6.470
[info]   CI (99.9%): [1354.151, 1403.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   62052.243 ±(99.9%) 206.573 B/op [Average]
[info]   (min, avg, max) = (62016.014, 62052.243, 62140.632), stdev = 53.646
[info]   CI (99.9%): [61845.670, 62258.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.019 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.100 ±(99.9%) 0.857 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.100, 0.498), stdev = 0.223
[info]   CI (99.9%): [≈ 0, 0.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1353.858 ±(99.9%) 26.099 MB/sec [Average]
[info]   (min, avg, max) = (1348.102, 1353.858, 1362.798), stdev = 6.778
[info]   CI (99.9%): [1327.759, 1379.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   60918.411 ±(99.9%) 924.990 B/op [Average]
[info]   (min, avg, max) = (60680.996, 60918.411, 61233.360), stdev = 240.217
[info]   CI (99.9%): [59993.421, 61843.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 7.779 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 3.996), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 9.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   66.002 ±(99.9%) 350.778 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 66.002, 181.164), stdev = 91.096
[info]   CI (99.9%): [≈ 0, 416.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.600, 16.000), stdev = 5.771
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.16% complete, ETA 01:44:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21389.205 ops/s
[info] # Warmup Iteration   2: 34662.988 ops/s
[info] # Warmup Iteration   3: 34971.944 ops/s
[info] # Warmup Iteration   4: 34918.902 ops/s
[info] # Warmup Iteration   5: 35087.963 ops/s
[info] Iteration   1: 35069.868 ops/s
[info]                  ·gc.alloc.rate:            1320.894 MB/sec
[info]                  ·gc.alloc.rate.norm:       59286.235 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60507.992 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 35122.680 ops/s
[info]                  ·gc.alloc.rate:            1322.784 MB/sec
[info]                  ·gc.alloc.rate.norm:       59272.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60416.700 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 35200.199 ops/s
[info]                  ·gc.alloc.rate:                   1325.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              59281.973 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.802 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        60401.981 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 178.704 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 35286.342 ops/s
[info]                  ·gc.alloc.rate:                   1329.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              59284.459 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        60641.041 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 148.557 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 35603.950 ops/s
[info]                  ·gc.alloc.rate:                                  1340.864 MB/sec
[info]                  ·gc.alloc.rate.norm:                             59272.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.151 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60245.051 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   35256.608 ±(99.9%) 811.201 ops/s [Average]
[info]   (min, avg, max) = (35069.868, 35256.608, 35603.950), stdev = 210.666
[info]   CI (99.9%): [34445.407, 36067.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1327.973 ±(99.9%) 30.484 MB/sec [Average]
[info]   (min, avg, max) = (1320.894, 1327.973, 1340.864), stdev = 7.916
[info]   CI (99.9%): [1297.489, 1358.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   59279.339 ±(99.9%) 26.401 B/op [Average]
[info]   (min, avg, max) = (59272.011, 59279.339, 59286.235), stdev = 6.856
[info]   CI (99.9%): [59252.938, 59305.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.045 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.026), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.230 ±(99.9%) 1.983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.230, 1.151), stdev = 0.515
[info]   CI (99.9%): [≈ 0, 2.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1354.023 ±(99.9%) 26.656 MB/sec [Average]
[info]   (min, avg, max) = (1348.114, 1354.023, 1362.877), stdev = 6.922
[info]   CI (99.9%): [1327.367, 1380.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   60442.553 ±(99.9%) 561.328 B/op [Average]
[info]   (min, avg, max) = (60245.051, 60442.553, 60641.041), stdev = 145.775
[info]   CI (99.9%): [59881.225, 61003.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 7.781 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 3.996), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 9.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   65.452 ±(99.9%) 347.543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 65.452, 178.704), stdev = 90.256
[info]   CI (99.9%): [≈ 0, 412.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.600, 16.000), stdev = 5.771
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.39% complete, ETA 01:43:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133921.204 ops/s
[info] # Warmup Iteration   2: 286816.472 ops/s
[info] # Warmup Iteration   3: 292310.040 ops/s
[info] # Warmup Iteration   4: 295123.168 ops/s
[info] # Warmup Iteration   5: 291954.583 ops/s
[info] Iteration   1: 303539.296 ops/s
[info]                  ·gc.alloc.rate:            1532.921 MB/sec
[info]                  ·gc.alloc.rate.norm:       7945.646 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6990.806 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 305150.298 ops/s
[info]                  ·gc.alloc.rate:                   1540.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              7944.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6954.087 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.743 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 294735.178 ops/s
[info]                  ·gc.alloc.rate:                   1500.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              8015.190 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.493 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7238.992 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 24.901 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 307743.321 ops/s
[info]                  ·gc.alloc.rate:                                  1553.210 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7944.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.085 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10455.813 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 306340.176 ops/s
[info]                  ·gc.alloc.rate:            1546.505 MB/sec
[info]                  ·gc.alloc.rate.norm:       7944.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.210 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7002.463 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   303501.654 ±(99.9%) 19786.792 ops/s [Average]
[info]   (min, avg, max) = (294735.178, 303501.654, 307743.321), stdev = 5138.567
[info]   CI (99.9%): [283714.862, 323288.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1534.753 ±(99.9%) 78.520 MB/sec [Average]
[info]   (min, avg, max) = (1500.836, 1534.753, 1553.210), stdev = 20.391
[info]   CI (99.9%): [1456.234, 1613.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7958.568 ±(99.9%) 121.915 B/op [Average]
[info]   (min, avg, max) = (7944.001, 7958.568, 8015.190), stdev = 31.661
[info]   CI (99.9%): [7836.653, 8080.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.017 ±(99.9%) 0.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.085), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1492.017 ±(99.9%) 1189.099 MB/sec [Average]
[info]   (min, avg, max) = (1348.356, 1492.017, 2044.319), stdev = 308.805
[info]   CI (99.9%): [302.918, 2681.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7728.432 ±(99.9%) 5886.857 B/op [Average]
[info]   (min, avg, max) = (6954.087, 7728.432, 10455.813), stdev = 1528.798
[info]   CI (99.9%): [1841.575, 13615.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 8.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 4.663), stdev = 2.127
[info]   CI (99.9%): [≈ 0, 9.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   7.729 ±(99.9%) 43.491 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.729, 24.901), stdev = 11.294
[info]   CI (99.9%): [≈ 0, 51.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 10.600, 16.000), stdev = 4.450
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.62% complete, ETA 01:43:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.740 ops/s
[info] # Warmup Iteration   2: 1228383.514 ops/s
[info] # Warmup Iteration   3: 1340437.117 ops/s
[info] # Warmup Iteration   4: 1325998.783 ops/s
[info] # Warmup Iteration   5: 1345791.160 ops/s
[info] Iteration   1: 1325079.760 ops/s
[info]                  ·gc.alloc.rate:            418.193 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.765 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 796.761 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1328553.997 ops/s
[info]                  ·gc.alloc.rate:            418.807 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 794.696 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 1344979.140 ops/s
[info]                  ·gc.alloc.rate:      424.374 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.589 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1328765.703 ops/s
[info]                  ·gc.alloc.rate:            420.077 MB/sec
[info]                  ·gc.alloc.rate.norm:       497.604 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.776 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 794.572 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 1329028.764 ops/s
[info]                  ·gc.alloc.rate:            418.799 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 794.401 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1331281.473 ±(99.9%) 30131.765 ops/s [Average]
[info]   (min, avg, max) = (1325079.760, 1331281.473, 1344979.140), stdev = 7825.124
[info]   CI (99.9%): [1301149.707, 1361413.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   420.050 ±(99.9%) 9.675 MB/sec [Average]
[info]   (min, avg, max) = (418.193, 420.050, 424.374), stdev = 2.512
[info]   CI (99.9%): [410.375, 429.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   496.592 ±(99.9%) 2.551 B/op [Average]
[info]   (min, avg, max) = (496.000, 496.592, 497.604), stdev = 0.662
[info]   CI (99.9%): [494.041, 499.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   536.657 ±(99.9%) 1155.196 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.657, 671.016), stdev = 300.001
[info]   CI (99.9%): [≈ 0, 1691.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   636.086 ±(99.9%) 1369.228 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 636.086, 796.761), stdev = 355.584
[info]   CI (99.9%): [≈ 0, 2005.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 9.400, 12.000), stdev = 5.273
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.85% complete, ETA 01:43:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 187171.407 ops/s
[info] # Warmup Iteration   2: 591400.643 ops/s
[info] # Warmup Iteration   3: 621768.031 ops/s
[info] # Warmup Iteration   4: 615903.871 ops/s
[info] # Warmup Iteration   5: 615223.443 ops/s
[info] Iteration   1: 612787.895 ops/s
[info]                  ·gc.alloc.rate:            494.548 MB/sec
[info]                  ·gc.alloc.rate.norm:       1270.375 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1729.666 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 614740.587 ops/s
[info]                  ·gc.alloc.rate:      496.478 MB/sec
[info]                  ·gc.alloc.rate.norm: 1270.744 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 616317.457 ops/s
[info]                  ·gc.alloc.rate:            495.068 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.937 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1718.135 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 615821.609 ops/s
[info]                  ·gc.alloc.rate:                   494.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1719.510 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.702 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 596193.310 ops/s
[info]                  ·gc.alloc.rate:            478.844 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.518 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1777.894 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   611172.172 ±(99.9%) 32662.546 ops/s [Average]
[info]   (min, avg, max) = (596193.310, 611172.172, 616317.457), stdev = 8482.359
[info]   CI (99.9%): [578509.626, 643834.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   491.892 ±(99.9%) 28.253 MB/sec [Average]
[info]   (min, avg, max) = (478.844, 491.892, 496.478), stdev = 7.337
[info]   CI (99.9%): [463.639, 520.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1266.626 ±(99.9%) 13.835 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1266.626, 1270.744), stdev = 3.593
[info]   CI (99.9%): [1252.791, 1280.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.507 ±(99.9%) 1159.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.507, 673.518), stdev = 301.035
[info]   CI (99.9%): [≈ 0, 1697.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1389.041 ±(99.9%) 2991.494 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1389.041, 1777.894), stdev = 776.882
[info]   CI (99.9%): [≈ 0, 4380.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.340 ±(99.9%) 2.932 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.340, 1.702), stdev = 0.761
[info]   CI (99.9%): [≈ 0, 3.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.400, 10.000), stdev = 4.159
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.09% complete, ETA 01:43:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1303516.464 ops/s
[info] # Warmup Iteration   2: 1745943.198 ops/s
[info] # Warmup Iteration   3: 1772893.154 ops/s
[info] # Warmup Iteration   4: 1753041.636 ops/s
[info] # Warmup Iteration   5: 1778828.569 ops/s
[info] Iteration   1: 1753363.591 ops/s
[info]                  ·gc.alloc.rate:            338.736 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 605.117 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 1741546.408 ops/s
[info]                  ·gc.alloc.rate:      345.584 MB/sec
[info]                  ·gc.alloc.rate.norm: 312.370 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1744466.875 ops/s
[info]                  ·gc.alloc.rate:            343.897 MB/sec
[info]                  ·gc.alloc.rate.norm:       310.318 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 608.216 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1703937.802 ops/s
[info]                  ·gc.alloc.rate:      329.107 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1708704.518 ops/s
[info]                  ·gc.alloc.rate:            330.150 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 620.926 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1730403.839 ±(99.9%) 86540.763 ops/s [Average]
[info]   (min, avg, max) = (1703937.802, 1730403.839, 1753363.591), stdev = 22474.361
[info]   CI (99.9%): [1643863.076, 1816944.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   337.495 ±(99.9%) 29.343 MB/sec [Average]
[info]   (min, avg, max) = (329.107, 337.495, 345.584), stdev = 7.620
[info]   CI (99.9%): [308.152, 366.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   306.950 ±(99.9%) 15.696 B/op [Average]
[info]   (min, avg, max) = (304.000, 306.950, 312.370), stdev = 4.076
[info]   CI (99.9%): [291.255, 322.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.497 ±(99.9%) 1421.866 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.497, 674.337), stdev = 369.254
[info]   CI (99.9%): [≈ 0, 1826.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   366.852 ±(99.9%) 1289.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 366.852, 620.926), stdev = 334.941
[info]   CI (99.9%): [≈ 0, 1656.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 8.000), stdev = 4.219
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.32% complete, ETA 01:43:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23302.969 ops/s
[info] # Warmup Iteration   2: 65452.989 ops/s
[info] # Warmup Iteration   3: 68171.704 ops/s
[info] # Warmup Iteration   4: 67464.398 ops/s
[info] # Warmup Iteration   5: 68365.355 ops/s
[info] Iteration   1: 69184.871 ops/s
[info]                  ·gc.alloc.rate:                   2241.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              51009.958 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2038.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        46382.820 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 90.917 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 69158.441 ops/s
[info]                  ·gc.alloc.rate:                                  2241.881 MB/sec
[info]                  ·gc.alloc.rate.norm:                             51017.079 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.520 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.930 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62032.283 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 69465.942 ops/s
[info]                  ·gc.alloc.rate:            2251.206 MB/sec
[info]                  ·gc.alloc.rate.norm:       51009.234 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.224 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46319.301 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 69689.100 ops/s
[info]                  ·gc.alloc.rate:            2259.034 MB/sec
[info]                  ·gc.alloc.rate.norm:       51008.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46169.779 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 67560.549 ops/s
[info]                  ·gc.alloc.rate:                                  2191.959 MB/sec
[info]                  ·gc.alloc.rate.norm:                             51052.629 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.769 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       47624.456 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   69011.780 ±(99.9%) 3234.637 ops/s [Average]
[info]   (min, avg, max) = (67560.549, 69011.780, 69689.100), stdev = 840.025
[info]   CI (99.9%): [65777.143, 72246.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2237.159 ±(99.9%) 101.184 MB/sec [Average]
[info]   (min, avg, max) = (2191.959, 2237.159, 2259.034), stdev = 26.277
[info]   CI (99.9%): [2135.975, 2338.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   51019.381 ±(99.9%) 72.855 B/op [Average]
[info]   (min, avg, max) = (51008.006, 51019.381, 51052.629), stdev = 18.920
[info]   CI (99.9%): [50946.526, 51092.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.038 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.122 ±(99.9%) 0.869 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.122, 0.520), stdev = 0.226
[info]   CI (99.9%): [≈ 0, 0.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2179.610 ±(99.9%) 1176.042 MB/sec [Average]
[info]   (min, avg, max) = (2038.366, 2179.610, 2725.930), stdev = 305.414
[info]   CI (99.9%): [1003.568, 3355.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   49705.728 ±(99.9%) 26628.545 B/op [Average]
[info]   (min, avg, max) = (46169.779, 49705.728, 62032.283), stdev = 6915.349
[info]   CI (99.9%): [23077.182, 76334.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   18.183 ±(99.9%) 156.565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.183, 90.917), stdev = 40.659
[info]   CI (99.9%): [≈ 0, 174.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 13.000), stdev = 4.025
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.55% complete, ETA 01:42:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161634.782 ops/s
[info] # Warmup Iteration   2: 305460.506 ops/s
[info] # Warmup Iteration   3: 312328.890 ops/s
[info] # Warmup Iteration   4: 322799.184 ops/s
[info] # Warmup Iteration   5: 324812.657 ops/s
[info] Iteration   1: 327361.251 ops/s
[info]                  ·gc.alloc.rate:      507.550 MB/sec
[info]                  ·gc.alloc.rate.norm: 2440.524 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 324181.645 ops/s
[info]                  ·gc.alloc.rate:                   505.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              2452.476 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3269.665 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.234 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 324347.755 ops/s
[info]                  ·gc.alloc.rate:            502.796 MB/sec
[info]                  ·gc.alloc.rate.norm:       2440.247 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3271.214 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 319534.691 ops/s
[info]                  ·gc.alloc.rate:            501.274 MB/sec
[info]                  ·gc.alloc.rate.norm:       2469.256 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3320.490 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 326660.060 ops/s
[info]                  ·gc.alloc.rate:      506.384 MB/sec
[info]                  ·gc.alloc.rate.norm: 2440.052 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   324417.080 ±(99.9%) 11805.390 ops/s [Average]
[info]   (min, avg, max) = (319534.691, 324417.080, 327361.251), stdev = 3065.822
[info]   CI (99.9%): [312611.691, 336222.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   504.615 ±(99.9%) 9.896 MB/sec [Average]
[info]   (min, avg, max) = (501.274, 504.615, 507.550), stdev = 2.570
[info]   CI (99.9%): [494.719, 514.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2448.511 ±(99.9%) 49.076 B/op [Average]
[info]   (min, avg, max) = (2440.052, 2448.511, 2469.256), stdev = 12.745
[info]   CI (99.9%): [2399.435, 2497.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   404.291 ±(99.9%) 1421.140 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.291, 674.080), stdev = 369.065
[info]   CI (99.9%): [≈ 0, 1825.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1972.274 ±(99.9%) 6933.267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1972.274, 3320.490), stdev = 1800.547
[info]   CI (99.9%): [≈ 0, 8905.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.647 ±(99.9%) 5.569 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.647, 3.234), stdev = 1.446
[info]   CI (99.9%): [≈ 0, 6.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.800, 8.000), stdev = 4.382
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 11.78% complete, ETA 01:42:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.867 ops/s
[info] # Warmup Iteration   2: 1171131.647 ops/s
[info] # Warmup Iteration   3: 1237705.801 ops/s
[info] # Warmup Iteration   4: 1230830.217 ops/s
[info] # Warmup Iteration   5: 1202976.006 ops/s
[info] Iteration   1: 1218322.436 ops/s
[info]                  ·gc.alloc.rate:            563.685 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.901 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 866.523 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 1196772.095 ops/s
[info]                  ·gc.alloc.rate:            559.634 MB/sec
[info]                  ·gc.alloc.rate.norm:       735.714 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 882.167 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 1174623.709 ops/s
[info]                  ·gc.alloc.rate:            543.338 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 898.800 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 1210105.229 ops/s
[info]                  ·gc.alloc.rate:            559.690 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 872.449 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 1229925.957 ops/s
[info]                  ·gc.alloc.rate:      568.904 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1205949.885 ±(99.9%) 81928.276 ops/s [Average]
[info]   (min, avg, max) = (1174623.709, 1205949.885, 1229925.957), stdev = 21276.513
[info]   CI (99.9%): [1124021.610, 1287878.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   559.050 ±(99.9%) 36.844 MB/sec [Average]
[info]   (min, avg, max) = (543.338, 559.050, 568.904), stdev = 9.568
[info]   CI (99.9%): [522.206, 595.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   729.552 ±(99.9%) 13.265 B/op [Average]
[info]   (min, avg, max) = (728.000, 729.552, 735.714), stdev = 3.445
[info]   CI (99.9%): [716.287, 742.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   536.698 ±(99.9%) 1155.284 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.698, 671.036), stdev = 300.024
[info]   CI (99.9%): [≈ 0, 1691.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   703.988 ±(99.9%) 1516.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 703.988, 898.800), stdev = 393.731
[info]   CI (99.9%): [≈ 0, 2220.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 8.000, 10.000), stdev = 4.472
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.01% complete, ETA 01:42:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 500400.355 ops/s
[info] # Warmup Iteration   2: 943946.390 ops/s
[info] # Warmup Iteration   3: 969058.483 ops/s
[info] # Warmup Iteration   4: 979588.465 ops/s
[info] # Warmup Iteration   5: 949712.952 ops/s
[info] Iteration   1: 934313.529 ops/s
[info]                  ·gc.alloc.rate:            661.550 MB/sec
[info]                  ·gc.alloc.rate.norm:       1114.283 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.526 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1134.455 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 946184.489 ops/s
[info]                  ·gc.alloc.rate:            668.362 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1120.251 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 933884.389 ops/s
[info]                  ·gc.alloc.rate:            668.152 MB/sec
[info]                  ·gc.alloc.rate.norm:       1126.124 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1134.935 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 937526.477 ops/s
[info]                  ·gc.alloc.rate:            664.707 MB/sec
[info]                  ·gc.alloc.rate.norm:       1115.687 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.577 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1130.576 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 937890.731 ops/s
[info]                  ·gc.alloc.rate:            663.191 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.551 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.608 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1130.026 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   937959.923 ±(99.9%) 19034.640 ops/s [Average]
[info]   (min, avg, max) = (933884.389, 937959.923, 946184.489), stdev = 4943.236
[info]   CI (99.9%): [918925.283, 956994.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   665.192 ±(99.9%) 11.602 MB/sec [Average]
[info]   (min, avg, max) = (661.550, 665.192, 668.362), stdev = 3.013
[info]   CI (99.9%): [653.590, 676.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1116.129 ±(99.9%) 22.233 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1116.129, 1126.124), stdev = 5.774
[info]   CI (99.9%): [1093.896, 1138.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   673.482 ±(99.9%) 0.484 MB/sec [Average]
[info]   (min, avg, max) = (673.321, 673.482, 673.608), stdev = 0.126
[info]   CI (99.9%): [672.998, 673.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1130.049 ±(99.9%) 22.745 B/op [Average]
[info]   (min, avg, max) = (1120.251, 1130.049, 1134.935), stdev = 5.907
[info]   CI (99.9%): [1107.303, 1152.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.24% complete, ETA 01:41:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1825861.997 ops/s
[info] # Warmup Iteration   2: 2162224.317 ops/s
[info] # Warmup Iteration   3: 2375494.101 ops/s
[info] # Warmup Iteration   4: 2414242.855 ops/s
[info] # Warmup Iteration   5: 2393783.140 ops/s
[info] Iteration   1: 2371429.989 ops/s
[info]                  ·gc.alloc.rate:            1098.105 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.875 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 894.791 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 2386011.365 ops/s
[info]                  ·gc.alloc.rate:            1103.506 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 889.361 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 2447199.581 ops/s
[info]                  ·gc.alloc.rate:            1131.799 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 433.562 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 2431485.419 ops/s
[info]                  ·gc.alloc.rate:                   1124.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.477 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        872.724 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.725 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 2415450.231 ops/s
[info]                  ·gc.alloc.rate:                   1117.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.145 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.767 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        883.303 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2410315.317 ±(99.9%) 120816.680 ops/s [Average]
[info]   (min, avg, max) = (2371429.989, 2410315.317, 2447199.581), stdev = 31375.708
[info]   CI (99.9%): [2289498.637, 2531131.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1115.178 ±(99.9%) 54.581 MB/sec [Average]
[info]   (min, avg, max) = (1098.105, 1115.178, 1131.799), stdev = 14.175
[info]   CI (99.9%): [1060.596, 1169.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.204 ±(99.9%) 1.464 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.204, 728.875), stdev = 0.380
[info]   CI (99.9%): [726.740, 729.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1214.891 ±(99.9%) 1164.279 MB/sec [Average]
[info]   (min, avg, max) = (674.046, 1214.891, 1355.767), stdev = 302.360
[info]   CI (99.9%): [50.612, 2379.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   794.748 ±(99.9%) 778.120 B/op [Average]
[info]   (min, avg, max) = (433.562, 794.748, 894.791), stdev = 202.075
[info]   CI (99.9%): [16.628, 1572.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 8.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 4.664), stdev = 2.128
[info]   CI (99.9%): [≈ 0, 9.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.953 ±(99.9%) 5.332 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.953, 3.038), stdev = 1.385
[info]   CI (99.9%): [≈ 0, 6.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 12.800, 16.000), stdev = 3.962
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 12.47% complete, ETA 01:41:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2126746.595 ops/s
[info] # Warmup Iteration   2: 2653381.333 ops/s
[info] # Warmup Iteration   3: 2745774.816 ops/s
[info] # Warmup Iteration   4: 2744723.345 ops/s
[info] # Warmup Iteration   5: 2746863.938 ops/s
[info] Iteration   1: 2749066.230 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2741142.278 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2738948.068 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2754111.394 ops/s
[info]                  ·gc.alloc.rate:      0.002 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2753803.968 ops/s
[info]                  ·gc.alloc.rate:      0.027 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2747414.388 ±(99.9%) 27188.869 ops/s [Average]
[info]   (min, avg, max) = (2738948.068, 2747414.388, 2754111.394), stdev = 7060.863
[info]   CI (99.9%): [2720225.519, 2774603.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.006 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.006, 0.027), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.70% complete, ETA 01:41:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 254897.052 ops/s
[info] # Warmup Iteration   2: 483372.224 ops/s
[info] # Warmup Iteration   3: 485231.219 ops/s
[info] # Warmup Iteration   4: 490587.736 ops/s
[info] # Warmup Iteration   5: 496685.759 ops/s
[info] Iteration   1: 492516.224 ops/s
[info]                  ·gc.alloc.rate:                   553.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              1768.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2149.938 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.129 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 492582.224 ops/s
[info]                  ·gc.alloc.rate:            555.764 MB/sec
[info]                  ·gc.alloc.rate.norm:       1775.653 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.511 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2151.853 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 490349.039 ops/s
[info]                  ·gc.alloc.rate:                   554.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              1779.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.846 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2159.460 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.138 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 488726.870 ops/s
[info]                  ·gc.alloc.rate:            548.929 MB/sec
[info]                  ·gc.alloc.rate.norm:       1768.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2168.820 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 491510.500 ops/s
[info]                  ·gc.alloc.rate:            553.415 MB/sec
[info]                  ·gc.alloc.rate.norm:       1768.543 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.525 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2142.791 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   491136.971 ±(99.9%) 6256.569 ops/s [Average]
[info]   (min, avg, max) = (488726.870, 491136.971, 492582.224), stdev = 1624.811
[info]   CI (99.9%): [484880.403, 497393.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   553.119 ±(99.9%) 9.828 MB/sec [Average]
[info]   (min, avg, max) = (548.929, 553.119, 555.764), stdev = 2.552
[info]   CI (99.9%): [543.291, 562.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1771.845 ±(99.9%) 19.872 B/op [Average]
[info]   (min, avg, max) = (1768.001, 1771.845, 1779.027), stdev = 5.161
[info]   CI (99.9%): [1751.973, 1791.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   672.588 ±(99.9%) 4.638 MB/sec [Average]
[info]   (min, avg, max) = (670.525, 672.588, 673.511), stdev = 1.204
[info]   CI (99.9%): [667.950, 677.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2154.572 ±(99.9%) 38.242 B/op [Average]
[info]   (min, avg, max) = (2142.791, 2154.572, 2168.820), stdev = 9.931
[info]   CI (99.9%): [2116.330, 2192.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.853 ±(99.9%) 4.499 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.853, 2.138), stdev = 1.168
[info]   CI (99.9%): [≈ 0, 5.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 12.93% complete, ETA 01:41:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79895.195 ops/s
[info] # Warmup Iteration   2: 137121.123 ops/s
[info] # Warmup Iteration   3: 144254.923 ops/s
[info] # Warmup Iteration   4: 140272.571 ops/s
[info] # Warmup Iteration   5: 145176.706 ops/s
[info] Iteration   1: 140733.070 ops/s
[info]                  ·gc.alloc.rate:                   1693.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              18934.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2021.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22609.538 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 37.248 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 141863.394 ops/s
[info]                  ·gc.alloc.rate:                   1704.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              18909.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.811 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        15032.023 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 51.733 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 146793.484 ops/s
[info]                  ·gc.alloc.rate:                                  1763.272 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18904.591 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.703 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1947.878 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20883.814 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 147465.955 ops/s
[info]                  ·gc.alloc.rate:            1770.973 MB/sec
[info]                  ·gc.alloc.rate.norm:       18904.977 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2043.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21819.413 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 147794.601 ops/s
[info]                  ·gc.alloc.rate:            1775.507 MB/sec
[info]                  ·gc.alloc.rate.norm:       18907.821 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.848 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14513.310 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   144930.101 ±(99.9%) 12933.789 ops/s [Average]
[info]   (min, avg, max) = (140733.070, 144930.101, 147794.601), stdev = 3358.864
[info]   CI (99.9%): [131996.311, 157863.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   1741.407 ±(99.9%) 152.035 MB/sec [Average]
[info]   (min, avg, max) = (1693.042, 1741.407, 1775.507), stdev = 39.483
[info]   CI (99.9%): [1589.371, 1893.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18912.097 ±(99.9%) 47.832 B/op [Average]
[info]   (min, avg, max) = (18904.591, 18912.097, 18934.063), stdev = 12.422
[info]   CI (99.9%): [18864.265, 18959.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.066), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.141 ±(99.9%) 1.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.141, 0.703), stdev = 0.314
[info]   CI (99.9%): [≈ 0, 1.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1746.244 ±(99.9%) 1368.733 MB/sec [Average]
[info]   (min, avg, max) = (1354.811, 1746.244, 2043.990), stdev = 355.456
[info]   CI (99.9%): [377.512, 3114.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   18971.620 ±(99.9%) 14962.837 B/op [Average]
[info]   (min, avg, max) = (14513.310, 18971.620, 22609.538), stdev = 3885.801
[info]   CI (99.9%): [4008.782, 33934.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.663), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   17.796 ±(99.9%) 95.884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.796, 51.733), stdev = 24.901
[info]   CI (99.9%): [≈ 0, 113.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 24.000), stdev = 8.562
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.16% complete, ETA 01:40:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 155896.820 ops/s
[info] # Warmup Iteration   2: 342792.478 ops/s
[info] # Warmup Iteration   3: 357147.336 ops/s
[info] # Warmup Iteration   4: 367069.758 ops/s
[info] # Warmup Iteration   5: 363187.026 ops/s
[info] Iteration   1: 365933.894 ops/s
[info]                  ·gc.alloc.rate:      303.172 MB/sec
[info]                  ·gc.alloc.rate.norm: 1304.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 361519.631 ops/s
[info]                  ·gc.alloc.rate:            300.756 MB/sec
[info]                  ·gc.alloc.rate.norm:       1309.393 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.433 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2931.908 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 366702.338 ops/s
[info]                  ·gc.alloc.rate:      303.845 MB/sec
[info]                  ·gc.alloc.rate.norm: 1304.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 366860.950 ops/s
[info]                  ·gc.alloc.rate:      303.956 MB/sec
[info]                  ·gc.alloc.rate.norm: 1304.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 362606.554 ops/s
[info]                  ·gc.alloc.rate:            301.819 MB/sec
[info]                  ·gc.alloc.rate.norm:       1309.882 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2922.846 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   364724.673 ±(99.9%) 9567.857 ops/s [Average]
[info]   (min, avg, max) = (361519.631, 364724.673, 366860.950), stdev = 2484.742
[info]   CI (99.9%): [355156.816, 374292.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   302.710 ±(99.9%) 5.332 MB/sec [Average]
[info]   (min, avg, max) = (300.756, 302.710, 303.956), stdev = 1.385
[info]   CI (99.9%): [297.378, 308.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1306.256 ±(99.9%) 11.905 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1306.256, 1309.882), stdev = 3.092
[info]   CI (99.9%): [1294.350, 1318.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   269.381 ±(99.9%) 1420.370 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.381, 673.473), stdev = 368.865
[info]   CI (99.9%): [≈ 0, 1689.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1170.951 ±(99.9%) 6174.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1170.951, 2931.908), stdev = 1603.393
[info]   CI (99.9%): [≈ 0, 7345.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 9.000), stdev = 4.930
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.39% complete, ETA 01:40:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 882711.273 ops/s
[info] # Warmup Iteration   2: 1150671.178 ops/s
[info] # Warmup Iteration   3: 1096324.403 ops/s
[info] # Warmup Iteration   4: 1125192.179 ops/s
[info] # Warmup Iteration   5: 1165857.772 ops/s
[info] Iteration   1: 1157034.232 ops/s
[info]                  ·gc.alloc.rate:            223.544 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 917.900 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 1165298.158 ops/s
[info]                  ·gc.alloc.rate:      225.072 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1165721.345 ops/s
[info]                  ·gc.alloc.rate:      225.149 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1149284.336 ops/s
[info]                  ·gc.alloc.rate:            223.903 MB/sec
[info]                  ·gc.alloc.rate.norm:       306.656 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 923.153 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1160958.567 ops/s
[info]                  ·gc.alloc.rate:      224.323 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1159659.328 ±(99.9%) 26170.506 ops/s [Average]
[info]   (min, avg, max) = (1149284.336, 1159659.328, 1165721.345), stdev = 6796.397
[info]   CI (99.9%): [1133488.822, 1185829.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   224.398 ±(99.9%) 2.722 MB/sec [Average]
[info]   (min, avg, max) = (223.544, 224.398, 225.149), stdev = 0.707
[info]   CI (99.9%): [221.676, 227.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.531 ±(99.9%) 4.573 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.531, 306.656), stdev = 1.188
[info]   CI (99.9%): [299.959, 309.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.801 ±(99.9%) 1422.582 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.801, 674.968), stdev = 369.440
[info]   CI (99.9%): [≈ 0, 1692.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   368.211 ±(99.9%) 1941.481 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 368.211, 923.153), stdev = 504.197
[info]   CI (99.9%): [≈ 0, 2309.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 8.000), stdev = 4.123
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.63% complete, ETA 01:40:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19052.893 ops/s
[info] # Warmup Iteration   2: 58515.474 ops/s
[info] # Warmup Iteration   3: 57135.279 ops/s
[info] # Warmup Iteration   4: 59527.719 ops/s
[info] # Warmup Iteration   5: 59636.471 ops/s
[info] Iteration   1: 59833.318 ops/s
[info]                  ·gc.alloc.rate:                   2313.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              60862.454 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2719.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        71561.518 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 105.134 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 60362.419 ops/s
[info]                  ·gc.alloc.rate:                                  2335.726 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60881.475 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2045.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53305.059 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 60195.848 ops/s
[info]                  ·gc.alloc.rate:                                  2327.188 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60849.262 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71271.747 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 59247.695 ops/s
[info]                  ·gc.alloc.rate:            2290.377 MB/sec
[info]                  ·gc.alloc.rate.norm:       60848.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54305.333 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 58432.271 ops/s
[info]                  ·gc.alloc.rate:            2259.798 MB/sec
[info]                  ·gc.alloc.rate.norm:       60872.338 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.191 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55064.504 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   59614.310 ±(99.9%) 3030.436 ops/s [Average]
[info]   (min, avg, max) = (58432.271, 59614.310, 60362.419), stdev = 786.995
[info]   CI (99.9%): [56583.874, 62644.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2305.280 ±(99.9%) 118.091 MB/sec [Average]
[info]   (min, avg, max) = (2259.798, 2305.280, 2335.726), stdev = 30.668
[info]   CI (99.9%): [2187.189, 2423.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   60862.708 ±(99.9%) 55.862 B/op [Average]
[info]   (min, avg, max) = (60848.010, 60862.708, 60881.475), stdev = 14.507
[info]   CI (99.9%): [60806.846, 60918.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.031 ±(99.9%) 0.165 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.089), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2315.823 ±(99.9%) 1430.894 MB/sec [Average]
[info]   (min, avg, max) = (2044.104, 2315.823, 2725.797), stdev = 371.599
[info]   CI (99.9%): [884.929, 3746.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   61101.632 ±(99.9%) 36340.349 B/op [Average]
[info]   (min, avg, max) = (53305.059, 61101.632, 71561.518), stdev = 9437.473
[info]   CI (99.9%): [24761.284, 97441.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   21.027 ±(99.9%) 181.048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.027, 105.134), stdev = 47.018
[info]   CI (99.9%): [≈ 0, 202.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.86% complete, ETA 01:40:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130643.175 ops/s
[info] # Warmup Iteration   2: 245117.103 ops/s
[info] # Warmup Iteration   3: 258900.338 ops/s
[info] # Warmup Iteration   4: 258149.942 ops/s
[info] # Warmup Iteration   5: 256746.182 ops/s
[info] Iteration   1: 255805.731 ops/s
[info]                  ·gc.alloc.rate:            1138.958 MB/sec
[info]                  ·gc.alloc.rate.norm:       7008.863 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8291.520 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 255360.946 ops/s
[info]                  ·gc.alloc.rate:                   1127.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              6952.763 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8305.805 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 256461.748 ops/s
[info]                  ·gc.alloc.rate:            1132.730 MB/sec
[info]                  ·gc.alloc.rate.norm:       6952.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4132.855 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 256120.174 ops/s
[info]                  ·gc.alloc.rate:                   1132.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              6960.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.556 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8297.309 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 28.654 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 256354.810 ops/s
[info]                  ·gc.alloc.rate:                   1132.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              6955.186 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.605 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8342.609 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.448 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   256020.682 ±(99.9%) 1719.405 ops/s [Average]
[info]   (min, avg, max) = (255360.946, 256020.682, 256461.748), stdev = 446.524
[info]   CI (99.9%): [254301.277, 257740.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1133.039 ±(99.9%) 15.057 MB/sec [Average]
[info]   (min, avg, max) = (1127.953, 1133.039, 1138.958), stdev = 3.910
[info]   CI (99.9%): [1117.982, 1148.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6965.775 ±(99.9%) 93.539 B/op [Average]
[info]   (min, avg, max) = (6952.002, 6965.775, 7008.863), stdev = 24.292
[info]   CI (99.9%): [6872.237, 7059.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1215.481 ±(99.9%) 1167.023 MB/sec [Average]
[info]   (min, avg, max) = (673.390, 1215.481, 1358.605), stdev = 303.072
[info]   CI (99.9%): [48.457, 2382.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7474.019 ±(99.9%) 7192.516 B/op [Average]
[info]   (min, avg, max) = (4132.855, 7474.019, 8342.609), stdev = 1867.874
[info]   CI (99.9%): [281.503, 14666.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 8.233 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.664), stdev = 2.138
[info]   CI (99.9%): [≈ 0, 9.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   10.641 ±(99.9%) 50.567 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.641, 28.654), stdev = 13.132
[info]   CI (99.9%): [≈ 0, 61.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   60.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 12.000, 17.000), stdev = 4.848
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.09% complete, ETA 01:39:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 805392.005 ops/s
[info] # Warmup Iteration   2: 1640726.731 ops/s
[info] # Warmup Iteration   3: 1673055.443 ops/s
[info] # Warmup Iteration   4: 1659272.078 ops/s
[info] # Warmup Iteration   5: 1663679.594 ops/s
[info] Iteration   1: 1635125.815 ops/s
[info]                  ·gc.alloc.rate:            843.364 MB/sec
[info]                  ·gc.alloc.rate.norm:       811.947 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1296.466 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 1668209.546 ops/s
[info]                  ·gc.alloc.rate:            857.556 MB/sec
[info]                  ·gc.alloc.rate.norm:       809.163 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 635.374 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 1656706.407 ops/s
[info]                  ·gc.alloc.rate:            856.120 MB/sec
[info]                  ·gc.alloc.rate.norm:       813.378 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 639.781 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1662838.373 ops/s
[info]                  ·gc.alloc.rate:            853.600 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 637.433 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 1654590.758 ops/s
[info]                  ·gc.alloc.rate:                   849.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.163 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1280.614 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.634 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1655494.180 ±(99.9%) 48431.461 ops/s [Average]
[info]   (min, avg, max) = (1635125.815, 1655494.180, 1668209.546), stdev = 12577.497
[info]   CI (99.9%): [1607062.719, 1703925.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   852.000 ±(99.9%) 22.118 MB/sec [Average]
[info]   (min, avg, max) = (843.364, 852.000, 857.556), stdev = 5.744
[info]   CI (99.9%): [829.882, 874.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   810.098 ±(99.9%) 9.403 B/op [Average]
[info]   (min, avg, max) = (808.000, 810.098, 813.378), stdev = 2.442
[info]   CI (99.9%): [800.695, 819.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   942.595 ±(99.9%) 1419.421 MB/sec [Average]
[info]   (min, avg, max) = (673.373, 942.595, 1346.630), stdev = 368.619
[info]   CI (99.9%): [≈ 0, 2362.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   897.934 ±(99.9%) 1373.218 B/op [Average]
[info]   (min, avg, max) = (635.374, 897.934, 1296.466), stdev = 356.620
[info]   CI (99.9%): [≈ 0, 2271.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.127 ±(99.9%) 1.091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.127, 0.634), stdev = 0.283
[info]   CI (99.9%): [≈ 0, 1.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 12.800, 18.000), stdev = 4.817
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.32% complete, ETA 01:39:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1690425.101 ops/s
[info] # Warmup Iteration   2: 2261289.192 ops/s
[info] # Warmup Iteration   3: 2342443.290 ops/s
[info] # Warmup Iteration   4: 2337234.458 ops/s
[info] # Warmup Iteration   5: 2348890.705 ops/s
[info] Iteration   1: 2357529.561 ops/s
[info]                  ·gc.alloc.rate:            635.140 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 450.024 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 2336206.564 ops/s
[info]                  ·gc.alloc.rate:            636.509 MB/sec
[info]                  ·gc.alloc.rate.norm:       428.823 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 454.147 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 2353386.278 ops/s
[info]                  ·gc.alloc.rate:            633.922 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 450.831 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 2359307.102 ops/s
[info]                  ·gc.alloc.rate:            635.458 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 449.687 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 2357838.943 ops/s
[info]                  ·gc.alloc.rate:            636.764 MB/sec
[info]                  ·gc.alloc.rate.norm:       425.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 449.984 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2352853.689 ±(99.9%) 36822.178 ops/s [Average]
[info]   (min, avg, max) = (2336206.564, 2352853.689, 2359307.102), stdev = 9562.603
[info]   CI (99.9%): [2316031.511, 2389675.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   635.559 ±(99.9%) 4.398 MB/sec [Average]
[info]   (min, avg, max) = (633.922, 635.559, 636.764), stdev = 1.142
[info]   CI (99.9%): [631.160, 639.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   425.182 ±(99.9%) 8.044 B/op [Average]
[info]   (min, avg, max) = (424.000, 425.182, 428.823), stdev = 2.089
[info]   CI (99.9%): [417.138, 433.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.054 ±(99.9%) 0.248 MB/sec [Average]
[info]   (min, avg, max) = (673.956, 674.054, 674.124), stdev = 0.064
[info]   CI (99.9%): [673.806, 674.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   450.935 ±(99.9%) 7.104 B/op [Average]
[info]   (min, avg, max) = (449.687, 450.935, 454.147), stdev = 1.845
[info]   CI (99.9%): [443.831, 458.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 14.55% complete, ETA 01:39:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2039115.130 ops/s
[info] # Warmup Iteration   2: 2491793.733 ops/s
[info] # Warmup Iteration   3: 2648922.478 ops/s
[info] # Warmup Iteration   4: 2643970.588 ops/s
[info] # Warmup Iteration   5: 2651548.774 ops/s
[info] Iteration   1: 2644619.314 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2637760.299 ops/s
[info]                  ·gc.alloc.rate:      0.452 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.270 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2643972.273 ops/s
[info]                  ·gc.alloc.rate:      0.230 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.137 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2644222.504 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2641926.216 ops/s
[info]                  ·gc.alloc.rate:      0.161 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.096 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   2642500.121 ±(99.9%) 10962.522 ops/s [Average]
[info]   (min, avg, max) = (2637760.299, 2642500.121, 2644619.314), stdev = 2846.932
[info]   CI (99.9%): [2631537.599, 2653462.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.169 ±(99.9%) 0.722 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.169, 0.452), stdev = 0.188
[info]   CI (99.9%): [≈ 0, 0.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.100 ±(99.9%) 0.431 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.100, 0.270), stdev = 0.112
[info]   CI (99.9%): [≈ 0, 0.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 14.78% complete, ETA 01:39:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15370.474 ops/s
[info] # Warmup Iteration   2: 36071.694 ops/s
[info] # Warmup Iteration   3: 37635.109 ops/s
[info] # Warmup Iteration   4: 39264.850 ops/s
[info] # Warmup Iteration   5: 39049.281 ops/s
[info] Iteration   1: 39393.224 ops/s
[info]                  ·gc.alloc.rate:                   1667.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              66624.878 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        53787.459 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.614 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 39226.964 ops/s
[info]                  ·gc.alloc.rate:                   1660.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              66615.172 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2026.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        81329.920 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.327 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 293.996 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 38819.276 ops/s
[info]                  ·gc.alloc.rate:                                  1642.320 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66592.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.150 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.078 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55230.854 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                27.008 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 38807.317 ops/s
[info]                  ·gc.alloc.rate:            1641.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       66592.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 82912.420 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 38917.495 ops/s
[info]                  ·gc.alloc.rate:            1646.577 MB/sec
[info]                  ·gc.alloc.rate.norm:       66592.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55115.902 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   39032.855 ±(99.9%) 1013.925 ops/s [Average]
[info]   (min, avg, max) = (38807.317, 39032.855, 39393.224), stdev = 263.313
[info]   CI (99.9%): [38018.930, 40046.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1651.688 ±(99.9%) 44.602 MB/sec [Average]
[info]   (min, avg, max) = (1641.789, 1651.688, 1667.594), stdev = 11.583
[info]   CI (99.9%): [1607.086, 1696.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66603.217 ±(99.9%) 60.543 B/op [Average]
[info]   (min, avg, max) = (66592.010, 66603.217, 66624.878), stdev = 15.723
[info]   CI (99.9%): [66542.674, 66663.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.258 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.150), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.216 ±(99.9%) 10.467 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.216, 6.078), stdev = 2.718
[info]   CI (99.9%): [≈ 0, 11.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1628.451 ±(99.9%) 1431.319 MB/sec [Average]
[info]   (min, avg, max) = (1346.279, 1628.451, 2044.160), stdev = 371.709
[info]   CI (99.9%): [197.133, 3059.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65675.311 ±(99.9%) 57890.866 B/op [Average]
[info]   (min, avg, max) = (53787.459, 65675.311, 82912.420), stdev = 15034.074
[info]   CI (99.9%): [7784.445, 123566.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 12.112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 7.327), stdev = 3.145
[info]   CI (99.9%): [≈ 0, 13.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   69.524 ±(99.9%) 485.943 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 69.524, 293.996), stdev = 126.198
[info]   CI (99.9%): [≈ 0, 555.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 19.000), stdev = 7.893
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.01% complete, ETA 01:38:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 123749.577 ops/s
[info] # Warmup Iteration   2: 223237.436 ops/s
[info] # Warmup Iteration   3: 227136.621 ops/s
[info] # Warmup Iteration   4: 228344.939 ops/s
[info] # Warmup Iteration   5: 227463.496 ops/s
[info] Iteration   1: 234484.273 ops/s
[info]                  ·gc.alloc.rate:                                  2412.898 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16193.802 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.249 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.541 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13721.633 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   2: 240079.197 ops/s
[info]                  ·gc.alloc.rate:            2474.401 MB/sec
[info]                  ·gc.alloc.rate.norm:       16220.904 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17868.616 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 242842.108 ops/s
[info]                  ·gc.alloc.rate:            2498.236 MB/sec
[info]                  ·gc.alloc.rate.norm:       16186.554 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13249.615 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 241363.588 ops/s
[info]                  ·gc.alloc.rate:                                  2493.903 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16257.265 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17774.757 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 241248.041 ops/s
[info]                  ·gc.alloc.rate:                                  2486.681 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16222.498 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17782.197 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   240003.441 ±(99.9%) 12466.221 ops/s [Average]
[info]   (min, avg, max) = (234484.273, 240003.441, 242842.108), stdev = 3237.438
[info]   CI (99.9%): [227537.221, 252469.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2473.224 ±(99.9%) 134.428 MB/sec [Average]
[info]   (min, avg, max) = (2412.898, 2473.224, 2498.236), stdev = 34.911
[info]   CI (99.9%): [2338.796, 2607.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16216.205 ±(99.9%) 107.691 B/op [Average]
[info]   (min, avg, max) = (16186.554, 16216.205, 16257.265), stdev = 27.967
[info]   CI (99.9%): [16108.513, 16323.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.037), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.054 ±(99.9%) 0.421 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.249), stdev = 0.109
[info]   CI (99.9%): [≈ 0, 0.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2453.538 ±(99.9%) 1436.967 MB/sec [Average]
[info]   (min, avg, max) = (2044.541, 2453.538, 2726.690), stdev = 373.176
[info]   CI (99.9%): [1016.571, 3890.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   16079.364 ±(99.9%) 9141.082 B/op [Average]
[info]   (min, avg, max) = (13249.615, 16079.364, 17868.616), stdev = 2373.910
[info]   CI (99.9%): [6938.281, 25220.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.24% complete, ETA 01:38:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102570.967 ops/s
[info] # Warmup Iteration   2: 279256.590 ops/s
[info] # Warmup Iteration   3: 300421.204 ops/s
[info] # Warmup Iteration   4: 298261.730 ops/s
[info] # Warmup Iteration   5: 298300.246 ops/s
[info] Iteration   1: 298497.769 ops/s
[info]                  ·gc.alloc.rate:                   1430.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              7545.142 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7098.191 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.512 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 298962.585 ops/s
[info]                  ·gc.alloc.rate:                   1438.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              7573.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7083.765 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.534 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 304292.917 ops/s
[info]                  ·gc.alloc.rate:                   1464.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              7573.843 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7000.958 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 24.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 315211.867 ops/s
[info]                  ·gc.alloc.rate:                   1510.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              7544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1362.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6801.959 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.326 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 308138.692 ops/s
[info]                  ·gc.alloc.rate:            1476.823 MB/sec
[info]                  ·gc.alloc.rate.norm:       7544.418 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10441.971 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   305020.766 ±(99.9%) 26772.419 ops/s [Average]
[info]   (min, avg, max) = (298497.769, 305020.766, 315211.867), stdev = 6952.712
[info]   CI (99.9%): [278248.347, 331793.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1464.245 ±(99.9%) 123.231 MB/sec [Average]
[info]   (min, avg, max) = (1430.816, 1464.245, 1510.762), stdev = 32.003
[info]   CI (99.9%): [1341.014, 1587.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7556.097 ±(99.9%) 61.070 B/op [Average]
[info]   (min, avg, max) = (7544.001, 7556.097, 7573.843), stdev = 15.860
[info]   CI (99.9%): [7495.028, 7617.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1490.271 ±(99.9%) 1192.268 MB/sec [Average]
[info]   (min, avg, max) = (1345.658, 1490.271, 2044.021), stdev = 309.628
[info]   CI (99.9%): [298.004, 2682.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7685.369 ±(99.9%) 5951.205 B/op [Average]
[info]   (min, avg, max) = (6801.959, 7685.369, 10441.971), stdev = 1545.509
[info]   CI (99.9%): [1734.163, 13636.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 7.780 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 4.663), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 9.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   9.698 ±(99.9%) 40.489 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.698, 24.117), stdev = 10.515
[info]   CI (99.9%): [≈ 0, 50.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   58.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 11.600, 19.000), stdev = 6.580
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.47% complete, ETA 01:38:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1706025.831 ops/s
[info] # Warmup Iteration   2: 2003492.036 ops/s
[info] # Warmup Iteration   3: 2131908.299 ops/s
[info] # Warmup Iteration   4: 2139847.716 ops/s
[info] # Warmup Iteration   5: 2138075.447 ops/s
[info] Iteration   1: 2136477.307 ops/s
[info]                  ·gc.alloc.rate:            739.665 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.998 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 496.615 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 2028039.631 ops/s
[info]                  ·gc.alloc.rate:            701.496 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.408 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 523.137 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 2046499.209 ops/s
[info]                  ·gc.alloc.rate:            707.260 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 518.437 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 2041180.925 ops/s
[info]                  ·gc.alloc.rate:            705.725 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 519.792 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 2110708.554 ops/s
[info]                  ·gc.alloc.rate:            737.640 MB/sec
[info]                  ·gc.alloc.rate.norm:       550.117 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 502.666 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   2072581.125 ±(99.9%) 184535.923 ops/s [Average]
[info]   (min, avg, max) = (2028039.631, 2072581.125, 2136477.307), stdev = 47923.393
[info]   CI (99.9%): [1888045.202, 2257117.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   718.357 ±(99.9%) 71.855 MB/sec [Average]
[info]   (min, avg, max) = (701.496, 718.357, 739.665), stdev = 18.660
[info]   CI (99.9%): [646.502, 790.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   545.505 ±(99.9%) 10.053 B/op [Average]
[info]   (min, avg, max) = (544.000, 545.505, 550.117), stdev = 2.611
[info]   CI (99.9%): [535.452, 555.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.089 ±(99.9%) 0.513 MB/sec [Average]
[info]   (min, avg, max) = (674.000, 674.089, 674.320), stdev = 0.133
[info]   CI (99.9%): [673.576, 674.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   512.129 ±(99.9%) 45.149 B/op [Average]
[info]   (min, avg, max) = (496.615, 512.129, 523.137), stdev = 11.725
[info]   CI (99.9%): [466.980, 557.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.70% complete, ETA 01:38:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8845.900 ops/s
[info] # Warmup Iteration   2: 57806.035 ops/s
[info] # Warmup Iteration   3: 61386.723 ops/s
[info] # Warmup Iteration   4: 61799.107 ops/s
[info] # Warmup Iteration   5: 61954.949 ops/s
[info] Iteration   1: 62531.966 ops/s
[info]                  ·gc.alloc.rate:                   2378.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              59880.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2719.894 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        68471.042 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 100.594 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 63222.343 ops/s
[info]                  ·gc.alloc.rate:            2406.473 MB/sec
[info]                  ·gc.alloc.rate.norm:       59913.337 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50892.410 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 63841.237 ops/s
[info]                  ·gc.alloc.rate:            2428.724 MB/sec
[info]                  ·gc.alloc.rate.norm:       59880.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67194.516 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 63966.358 ops/s
[info]                  ·gc.alloc.rate:            2433.780 MB/sec
[info]                  ·gc.alloc.rate.norm:       59888.519 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50299.787 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 61837.996 ops/s
[info]                  ·gc.alloc.rate:                                  2356.695 MB/sec
[info]                  ·gc.alloc.rate.norm:                             59980.584 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.133 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.898 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69377.221 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   63079.980 ±(99.9%) 3459.311 ops/s [Average]
[info]   (min, avg, max) = (61837.996, 63079.980, 63966.358), stdev = 898.372
[info]   CI (99.9%): [59620.669, 66539.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2400.860 ±(99.9%) 126.784 MB/sec [Average]
[info]   (min, avg, max) = (2356.695, 2400.860, 2433.780), stdev = 32.925
[info]   CI (99.9%): [2274.077, 2527.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   59908.491 ±(99.9%) 163.850 B/op [Average]
[info]   (min, avg, max) = (59880.006, 59908.491, 59980.584), stdev = 42.551
[info]   CI (99.9%): [59744.640, 60072.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.027 ±(99.9%) 0.230 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.133), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2451.888 ±(99.9%) 1433.376 MB/sec [Average]
[info]   (min, avg, max) = (2044.108, 2451.888, 2725.898), stdev = 372.243
[info]   CI (99.9%): [1018.512, 3885.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   61246.995 ±(99.9%) 37566.936 B/op [Average]
[info]   (min, avg, max) = (50299.787, 61246.995, 69377.221), stdev = 9756.014
[info]   CI (99.9%): [23680.059, 98813.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   20.119 ±(99.9%) 173.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.119, 100.594), stdev = 44.987
[info]   CI (99.9%): [≈ 0, 193.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 11.000), stdev = 2.864
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.94% complete, ETA 01:37:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83584.864 ops/s
[info] # Warmup Iteration   2: 190913.890 ops/s
[info] # Warmup Iteration   3: 194277.446 ops/s
[info] # Warmup Iteration   4: 196118.476 ops/s
[info] # Warmup Iteration   5: 197270.978 ops/s
[info] Iteration   1: 197912.682 ops/s
[info]                  ·gc.alloc.rate:                   1674.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              13320.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2021.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16077.417 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.487 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 204577.590 ops/s
[info]                  ·gc.alloc.rate:                   1732.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              13325.873 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2035.550 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        15660.561 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 35.872 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 207024.777 ops/s
[info]                  ·gc.alloc.rate:                                  1752.116 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13320.804 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.085 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.837 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10361.233 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 206065.032 ops/s
[info]                  ·gc.alloc.rate:            1743.926 MB/sec
[info]                  ·gc.alloc.rate.norm:       13320.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15614.318 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 203694.533 ops/s
[info]                  ·gc.alloc.rate:            1725.059 MB/sec
[info]                  ·gc.alloc.rate.norm:       13330.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.819 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10530.900 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   203854.923 ±(99.9%) 13721.314 ops/s [Average]
[info]   (min, avg, max) = (197912.682, 203854.923, 207024.777), stdev = 3563.382
[info]   CI (99.9%): [190133.609, 217576.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1725.628 ±(99.9%) 116.268 MB/sec [Average]
[info]   (min, avg, max) = (1674.949, 1725.628, 1752.116), stdev = 30.195
[info]   CI (99.9%): [1609.359, 1841.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13323.344 ±(99.9%) 17.219 B/op [Average]
[info]   (min, avg, max) = (13320.002, 13323.344, 13330.037), stdev = 4.472
[info]   CI (99.9%): [13306.125, 13340.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.019 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.017 ±(99.9%) 0.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.085), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1765.440 ±(99.9%) 1415.580 MB/sec [Average]
[info]   (min, avg, max) = (1362.819, 1765.440, 2044.310), stdev = 367.622
[info]   CI (99.9%): [349.860, 3181.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   13648.886 ±(99.9%) 11282.127 B/op [Average]
[info]   (min, avg, max) = (10361.233, 13648.886, 16077.417), stdev = 2929.933
[info]   CI (99.9%): [2366.758, 24931.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.663), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   12.472 ±(99.9%) 66.989 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.472, 35.872), stdev = 17.397
[info]   CI (99.9%): [≈ 0, 79.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.000, 24.000), stdev = 9.274
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.17% complete, ETA 01:37:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 571151.914 ops/s
[info] # Warmup Iteration   2: 1366792.510 ops/s
[info] # Warmup Iteration   3: 1366403.442 ops/s
[info] # Warmup Iteration   4: 1391413.248 ops/s
[info] # Warmup Iteration   5: 1390127.263 ops/s
[info] Iteration   1: 1391716.589 ops/s
[info]                  ·gc.alloc.rate:                   813.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        760.865 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.753 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1355480.341 ops/s
[info]                  ·gc.alloc.rate:            793.241 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.944 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 781.899 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1332085.121 ops/s
[info]                  ·gc.alloc.rate:            778.827 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.125 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1591.449 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   4: 1340906.738 ops/s
[info]                  ·gc.alloc.rate:                   784.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.252 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.885 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        789.669 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.782 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 1335001.538 ops/s
[info]                  ·gc.alloc.rate:            780.764 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.297 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.574 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 793.950 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1351038.065 ±(99.9%) 94193.399 ops/s [Average]
[info]   (min, avg, max) = (1332085.121, 1351038.065, 1391716.589), stdev = 24461.727
[info]   CI (99.9%): [1256844.667, 1445231.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   790.098 ±(99.9%) 54.699 MB/sec [Average]
[info]   (min, avg, max) = (778.827, 790.098, 813.503), stdev = 14.205
[info]   CI (99.9%): [735.400, 844.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.325 ±(99.9%) 1.402 B/op [Average]
[info]   (min, avg, max) = (920.007, 920.325, 920.944), stdev = 0.364
[info]   CI (99.9%): [918.923, 921.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   807.956 ±(99.9%) 1160.463 MB/sec [Average]
[info]   (min, avg, max) = (672.784, 807.956, 1347.060), stdev = 301.369
[info]   CI (99.9%): [≈ 0, 1968.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   943.566 ±(99.9%) 1395.477 B/op [Average]
[info]   (min, avg, max) = (760.865, 943.566, 1591.449), stdev = 362.401
[info]   CI (99.9%): [≈ 0, 2339.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.307 ±(99.9%) 1.619 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.307, 0.782), stdev = 0.421
[info]   CI (99.9%): [≈ 0, 1.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.800, 18.000), stdev = 4.025
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.40% complete, ETA 01:37:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1764711.641 ops/s
[info] # Warmup Iteration   2: 2563301.079 ops/s
[info] # Warmup Iteration   3: 2742861.184 ops/s
[info] # Warmup Iteration   4: 2702539.903 ops/s
[info] # Warmup Iteration   5: 2765536.598 ops/s
[info] Iteration   1: 2763680.739 ops/s
[info]                  ·gc.alloc.rate:            941.045 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 383.903 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 2725998.369 ops/s
[info]                  ·gc.alloc.rate:            931.674 MB/sec
[info]                  ·gc.alloc.rate.norm:       537.785 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.570 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 778.428 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 2739085.466 ops/s
[info]                  ·gc.alloc.rate:            932.876 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.114 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 387.351 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 2719378.568 ops/s
[info]                  ·gc.alloc.rate:            926.448 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 780.297 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   5: 2759769.912 ops/s
[info]                  ·gc.alloc.rate:            939.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 384.448 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2741582.611 ±(99.9%) 76074.074 ops/s [Average]
[info]   (min, avg, max) = (2719378.568, 2741582.611, 2763680.739), stdev = 19756.195
[info]   CI (99.9%): [2665508.537, 2817656.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   934.362 ±(99.9%) 23.259 MB/sec [Average]
[info]   (min, avg, max) = (926.448, 934.362, 941.045), stdev = 6.040
[info]   CI (99.9%): [911.103, 957.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.380 ±(99.9%) 3.031 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.380, 537.785), stdev = 0.787
[info]   CI (99.9%): [533.349, 539.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   943.870 ±(99.9%) 1422.810 MB/sec [Average]
[info]   (min, avg, max) = (674.011, 943.870, 1348.703), stdev = 369.499
[info]   CI (99.9%): [≈ 0, 2366.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   542.885 ±(99.9%) 831.270 B/op [Average]
[info]   (min, avg, max) = (383.903, 542.885, 780.297), stdev = 215.878
[info]   CI (99.9%): [≈ 0, 1374.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 10.600, 15.000), stdev = 4.037
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 16.63% complete, ETA 01:36:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1853778.773 ops/s
[info] # Warmup Iteration   2: 2900383.454 ops/s
[info] # Warmup Iteration   3: 3050164.694 ops/s
[info] # Warmup Iteration   4: 3078771.316 ops/s
[info] # Warmup Iteration   5: 3078819.131 ops/s
[info] Iteration   1: 3077502.775 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3079449.456 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3078640.082 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3076497.231 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3078412.732 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3078100.455 ±(99.9%) 4363.335 ops/s [Average]
[info]   (min, avg, max) = (3076497.231, 3078100.455, 3079449.456), stdev = 1133.144
[info]   CI (99.9%): [3073737.120, 3082463.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.86% complete, ETA 01:36:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111704.783 ops/s
[info] # Warmup Iteration   2: 251156.978 ops/s
[info] # Warmup Iteration   3: 258710.836 ops/s
[info] # Warmup Iteration   4: 258524.434 ops/s
[info] # Warmup Iteration   5: 255603.148 ops/s
[info] Iteration   1: 260648.880 ops/s
[info]                  ·gc.alloc.rate:                                  2130.494 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.854 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.122 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12312.102 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.133 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 258481.058 ops/s
[info]                  ·gc.alloc.rate:                                  2116.772 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12890.732 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12448.233 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 258106.209 ops/s
[info]                  ·gc.alloc.rate:            2110.197 MB/sec
[info]                  ·gc.alloc.rate.norm:       12867.772 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12466.026 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 258167.322 ops/s
[info]                  ·gc.alloc.rate:            2122.332 MB/sec
[info]                  ·gc.alloc.rate.norm:       12939.846 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12463.033 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 260101.441 ops/s
[info]                  ·gc.alloc.rate:                                  2125.781 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.209 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12370.378 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   259100.982 ±(99.9%) 4573.403 ops/s [Average]
[info]   (min, avg, max) = (258106.209, 259100.982, 260648.880), stdev = 1187.698
[info]   CI (99.9%): [254527.579, 263674.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2121.115 ±(99.9%) 30.398 MB/sec [Average]
[info]   (min, avg, max) = (2110.197, 2121.115, 2130.494), stdev = 7.894
[info]   CI (99.9%): [2090.718, 2151.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   12885.441 ±(99.9%) 124.531 B/op [Average]
[info]   (min, avg, max) = (12864.002, 12885.441, 12939.846), stdev = 32.340
[info]   CI (99.9%): [12760.910, 13009.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.025 ±(99.9%) 0.209 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.122), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   2043.143 ±(99.9%) 9.020 MB/sec [Average]
[info]   (min, avg, max) = (2038.955, 2043.143, 2044.315), stdev = 2.343
[info]   CI (99.9%): [2034.123, 2052.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   12411.954 ±(99.9%) 262.211 B/op [Average]
[info]   (min, avg, max) = (12312.102, 12411.954, 12466.026), stdev = 68.095
[info]   CI (99.9%): [12149.743, 12674.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.827 ±(99.9%) 41.559 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.827, 24.133), stdev = 10.793
[info]   CI (99.9%): [≈ 0, 46.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.09% complete, ETA 01:36:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10077.475 ops/s
[info] # Warmup Iteration   2: 23575.417 ops/s
[info] # Warmup Iteration   3: 23255.977 ops/s
[info] # Warmup Iteration   4: 23131.305 ops/s
[info] # Warmup Iteration   5: 23253.177 ops/s
[info] Iteration   1: 23586.255 ops/s
[info]                  ·gc.alloc.rate:            1350.815 MB/sec
[info]                  ·gc.alloc.rate.norm:       90125.609 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 89874.133 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 24297.819 ops/s
[info]                  ·gc.alloc.rate:                   1389.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              89994.832 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.529 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        87284.255 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 43.146 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 23702.130 ops/s
[info]                  ·gc.alloc.rate:                   1358.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              90180.980 B/op
[info]                  ·gc.churn.G1_Old_Gen:             856.922 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        56883.014 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 309.628 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 24476.261 ops/s
[info]                  ·gc.alloc.rate:                   1399.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              89957.266 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2040.851 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        131200.502 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 214.170 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 24393.546 ops/s
[info]                  ·gc.alloc.rate:                                  1397.604 MB/sec
[info]                  ·gc.alloc.rate.norm:                             90156.136 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.443 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.194 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87936.488 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   24091.202 ±(99.9%) 1597.810 ops/s [Average]
[info]   (min, avg, max) = (23586.255, 24091.202, 24476.261), stdev = 414.946
[info]   CI (99.9%): [22493.392, 25689.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1379.129 ±(99.9%) 87.782 MB/sec [Average]
[info]   (min, avg, max) = (1350.815, 1379.129, 1399.304), stdev = 22.797
[info]   CI (99.9%): [1291.347, 1466.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   90082.964 ±(99.9%) 386.732 B/op [Average]
[info]   (min, avg, max) = (89957.266, 90082.964, 90180.980), stdev = 100.433
[info]   CI (99.9%): [89696.232, 90469.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.039 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.289 ±(99.9%) 2.485 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.289, 1.443), stdev = 0.645
[info]   CI (99.9%): [≈ 0, 2.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1391.109 ±(99.9%) 1624.749 MB/sec [Average]
[info]   (min, avg, max) = (856.922, 1391.109, 2040.851), stdev = 421.942
[info]   CI (99.9%): [≈ 0, 3015.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   90635.678 ±(99.9%) 101948.386 B/op [Average]
[info]   (min, avg, max) = (56883.014, 90635.678, 131200.502), stdev = 26475.672
[info]   CI (99.9%): [≈ 0, 192584.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 8.235 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.664), stdev = 2.139
[info]   CI (99.9%): [≈ 0, 9.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   113.389 ±(99.9%) 542.226 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 113.389, 309.628), stdev = 140.814
[info]   CI (99.9%): [≈ 0, 655.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.800, 16.000), stdev = 5.357
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 17.32% complete, ETA 01:36:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.893 ops/s
[info] # Warmup Iteration   2: 77307.320 ops/s
[info] # Warmup Iteration   3: 84534.441 ops/s
[info] # Warmup Iteration   4: 84861.574 ops/s
[info] # Warmup Iteration   5: 84851.630 ops/s
[info] Iteration   1: 83898.504 ops/s
[info]                  ·gc.alloc.rate:                   757.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              14201.417 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1341.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        25155.927 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.497 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 84925.944 ops/s
[info]                  ·gc.alloc.rate:            764.933 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.822 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12431.902 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 84838.727 ops/s
[info]                  ·gc.alloc.rate:            764.859 MB/sec
[info]                  ·gc.alloc.rate.norm:       14185.243 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12444.649 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 84996.702 ops/s
[info]                  ·gc.alloc.rate:            765.652 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.899 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12421.665 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 84880.926 ops/s
[info]                  ·gc.alloc.rate:            764.594 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.880 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12438.492 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   84708.161 ±(99.9%) 1757.350 ops/s [Average]
[info]   (min, avg, max) = (83898.504, 84708.161, 84996.702), stdev = 456.378
[info]   CI (99.9%): [82950.810, 86465.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   763.418 ±(99.9%) 13.786 MB/sec [Average]
[info]   (min, avg, max) = (757.052, 763.418, 765.652), stdev = 3.580
[info]   CI (99.9%): [749.632, 777.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14182.935 ±(99.9%) 42.662 B/op [Average]
[info]   (min, avg, max) = (14176.005, 14182.935, 14201.417), stdev = 11.079
[info]   CI (99.9%): [14140.273, 14225.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   804.925 ±(99.9%) 1153.978 MB/sec [Average]
[info]   (min, avg, max) = (670.822, 804.925, 1341.017), stdev = 299.685
[info]   CI (99.9%): [≈ 0, 1958.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   14978.527 ±(99.9%) 21907.645 B/op [Average]
[info]   (min, avg, max) = (12421.665, 14978.527, 25155.927), stdev = 5689.346
[info]   CI (99.9%): [≈ 0, 36886.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   2.499 ±(99.9%) 21.520 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.499, 12.497), stdev = 5.589
[info]   CI (99.9%): [≈ 0, 24.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 12.400, 20.000), stdev = 4.278
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.55% complete, ETA 01:35:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14320.074 ops/s
[info] # Warmup Iteration   2: 50952.423 ops/s
[info] # Warmup Iteration   3: 52228.169 ops/s
[info] # Warmup Iteration   4: 54027.547 ops/s
[info] # Warmup Iteration   5: 53673.364 ops/s
[info] Iteration   1: 53230.580 ops/s
[info]                  ·gc.alloc.rate:            878.559 MB/sec
[info]                  ·gc.alloc.rate.norm:       25974.671 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39785.186 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 53580.509 ops/s
[info]                  ·gc.alloc.rate:            883.381 MB/sec
[info]                  ·gc.alloc.rate.norm:       25950.876 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19762.671 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 53591.872 ops/s
[info]                  ·gc.alloc.rate:            883.203 MB/sec
[info]                  ·gc.alloc.rate.norm:       25936.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.831 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19758.246 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 53120.196 ops/s
[info]                  ·gc.alloc.rate:            875.645 MB/sec
[info]                  ·gc.alloc.rate.norm:       25936.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39867.559 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   5: 53574.018 ops/s
[info]                  ·gc.alloc.rate:            882.932 MB/sec
[info]                  ·gc.alloc.rate.norm:       25936.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19764.515 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   53419.435 ±(99.9%) 871.270 ops/s [Average]
[info]   (min, avg, max) = (53120.196, 53419.435, 53591.872), stdev = 226.266
[info]   CI (99.9%): [52548.165, 54290.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   880.744 ±(99.9%) 13.418 MB/sec [Average]
[info]   (min, avg, max) = (875.645, 880.744, 883.381), stdev = 3.485
[info]   CI (99.9%): [867.326, 894.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   25946.715 ±(99.9%) 65.085 B/op [Average]
[info]   (min, avg, max) = (25936.008, 25946.715, 25974.671), stdev = 16.902
[info]   CI (99.9%): [25881.629, 26011.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   942.016 ±(99.9%) 1419.498 MB/sec [Average]
[info]   (min, avg, max) = (672.732, 942.016, 1345.998), stdev = 368.639
[info]   CI (99.9%): [≈ 0, 2361.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   27787.635 ±(99.9%) 42318.006 B/op [Average]
[info]   (min, avg, max) = (19758.246, 27787.635, 39867.559), stdev = 10989.852
[info]   CI (99.9%): [≈ 0, 70105.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   65.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.000, 19.000), stdev = 5.477
[info]   CI (99.9%): [65.000, 65.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.78% complete, ETA 01:35:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93570.840 ops/s
[info] # Warmup Iteration   2: 128429.123 ops/s
[info] # Warmup Iteration   3: 133576.092 ops/s
[info] # Warmup Iteration   4: 134878.977 ops/s
[info] # Warmup Iteration   5: 134324.185 ops/s
[info] Iteration   1: 135639.959 ops/s
[info]                  ·gc.alloc.rate:            874.119 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7822.079 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 135694.381 ops/s
[info]                  ·gc.alloc.rate:            875.610 MB/sec
[info]                  ·gc.alloc.rate.norm:       10157.433 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7818.909 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 134509.431 ops/s
[info]                  ·gc.alloc.rate:            866.996 MB/sec
[info]                  ·gc.alloc.rate.norm:       10145.809 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15776.030 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   4: 135537.933 ops/s
[info]                  ·gc.alloc.rate:            873.508 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7828.023 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 135618.004 ops/s
[info]                  ·gc.alloc.rate:            874.319 MB/sec
[info]                  ·gc.alloc.rate.norm:       10146.585 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7823.290 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   135399.942 ±(99.9%) 1929.078 ops/s [Average]
[info]   (min, avg, max) = (134509.431, 135399.942, 135694.381), stdev = 500.975
[info]   CI (99.9%): [133470.864, 137329.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   872.910 ±(99.9%) 13.067 MB/sec [Average]
[info]   (min, avg, max) = (866.996, 872.910, 875.610), stdev = 3.394
[info]   CI (99.9%): [859.843, 885.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10147.567 ±(99.9%) 21.680 B/op [Average]
[info]   (min, avg, max) = (10144.003, 10147.567, 10157.433), stdev = 5.630
[info]   CI (99.9%): [10125.887, 10169.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.875 ±(99.9%) 1160.764 MB/sec [Average]
[info]   (min, avg, max) = (674.020, 808.875, 1348.119), stdev = 301.447
[info]   CI (99.9%): [≈ 0, 1969.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   9413.666 ±(99.9%) 13695.474 B/op [Average]
[info]   (min, avg, max) = (7818.909, 9413.666, 15776.030), stdev = 3556.671
[info]   CI (99.9%): [≈ 0, 23109.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.200, 16.000), stdev = 3.834
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.01% complete, ETA 01:35:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6419.986 ops/s
[info] # Warmup Iteration   2: 28765.011 ops/s
[info] # Warmup Iteration   3: 28958.976 ops/s
[info] # Warmup Iteration   4: 28948.073 ops/s
[info] # Warmup Iteration   5: 29062.587 ops/s
[info] Iteration   1: 29776.339 ops/s
[info]                  ·gc.alloc.rate:            1438.980 MB/sec
[info]                  ·gc.alloc.rate.norm:       76075.342 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.221 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71118.541 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 29668.579 ops/s
[info]                  ·gc.alloc.rate:                   1433.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              76064.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        71417.521 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 176.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 29797.233 ops/s
[info]                  ·gc.alloc.rate:                   1446.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              76421.702 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.640 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        71493.019 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 211.101 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 30027.204 ops/s
[info]                  ·gc.alloc.rate:                   1451.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              76064.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1361.890 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        71366.853 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.333 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 69.831 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 30057.141 ops/s
[info]                  ·gc.alloc.rate:            1452.817 MB/sec
[info]                  ·gc.alloc.rate.norm:       76064.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71365.395 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   29865.299 ±(99.9%) 650.810 ops/s [Average]
[info]   (min, avg, max) = (29668.579, 29865.299, 30057.141), stdev = 169.013
[info]   CI (99.9%): [29214.489, 30516.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1444.841 ±(99.9%) 31.424 MB/sec [Average]
[info]   (min, avg, max) = (1433.921, 1444.841, 1452.817), stdev = 8.161
[info]   CI (99.9%): [1413.417, 1476.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   76137.817 ±(99.9%) 611.375 B/op [Average]
[info]   (min, avg, max) = (76064.014, 76137.817, 76421.702), stdev = 158.772
[info]   CI (99.9%): [75526.443, 76749.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1354.031 ±(99.9%) 32.254 MB/sec [Average]
[info]   (min, avg, max) = (1345.221, 1354.031, 1363.074), stdev = 8.376
[info]   CI (99.9%): [1321.777, 1386.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   71352.266 ±(99.9%) 541.429 B/op [Average]
[info]   (min, avg, max) = (71118.541, 71352.266, 71493.019), stdev = 140.607
[info]   CI (99.9%): [70810.837, 71893.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 7.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 3.997), stdev = 1.860
[info]   CI (99.9%): [≈ 0, 8.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   91.524 ±(99.9%) 379.125 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 91.524, 211.101), stdev = 98.458
[info]   CI (99.9%): [≈ 0, 470.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.000, 19.000), stdev = 7.517
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.24% complete, ETA 01:35:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13727.341 ops/s
[info] # Warmup Iteration   2: 28506.738 ops/s
[info] # Warmup Iteration   3: 29115.223 ops/s
[info] # Warmup Iteration   4: 30264.718 ops/s
[info] # Warmup Iteration   5: 29208.423 ops/s
[info] Iteration   1: 30171.422 ops/s
[info]                  ·gc.alloc.rate:      344.602 MB/sec
[info]                  ·gc.alloc.rate.norm: 17976.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 29848.392 ops/s
[info]                  ·gc.alloc.rate:                   341.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              17988.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        35507.447 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 35.121 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 29888.856 ops/s
[info]                  ·gc.alloc.rate:      349.139 MB/sec
[info]                  ·gc.alloc.rate.norm: 18380.456 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 29751.480 ops/s
[info]                  ·gc.alloc.rate:            341.385 MB/sec
[info]                  ·gc.alloc.rate.norm:       18056.701 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.236 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35662.015 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 30257.279 ops/s
[info]                  ·gc.alloc.rate:      345.597 MB/sec
[info]                  ·gc.alloc.rate.norm: 17976.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   29983.486 ±(99.9%) 842.126 ops/s [Average]
[info]   (min, avg, max) = (29751.480, 29983.486, 30257.279), stdev = 218.697
[info]   CI (99.9%): [29141.360, 30825.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   344.369 ±(99.9%) 12.739 MB/sec [Average]
[info]   (min, avg, max) = (341.120, 344.369, 349.139), stdev = 3.308
[info]   CI (99.9%): [331.630, 357.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   18075.449 ±(99.9%) 669.149 B/op [Average]
[info]   (min, avg, max) = (17976.013, 18075.449, 18380.456), stdev = 173.776
[info]   CI (99.9%): [17406.301, 18744.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   269.518 ±(99.9%) 1421.089 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.518, 674.236), stdev = 369.052
[info]   CI (99.9%): [≈ 0, 1690.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   14233.892 ±(99.9%) 75051.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14233.892, 35662.015), stdev = 19490.636
[info]   CI (99.9%): [≈ 0, 89285.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   7.024 ±(99.9%) 60.481 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.024, 35.121), stdev = 15.707
[info]   CI (99.9%): [≈ 0, 67.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 8.000), stdev = 4.382
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.48% complete, ETA 01:34:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12420.719 ops/s
[info] # Warmup Iteration   2: 28824.946 ops/s
[info] # Warmup Iteration   3: 29237.694 ops/s
[info] # Warmup Iteration   4: 29686.714 ops/s
[info] # Warmup Iteration   5: 29152.391 ops/s
[info] Iteration   1: 29648.386 ops/s
[info]                  ·gc.alloc.rate:      331.532 MB/sec
[info]                  ·gc.alloc.rate.norm: 17600.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 29349.630 ops/s
[info]                  ·gc.alloc.rate:            328.458 MB/sec
[info]                  ·gc.alloc.rate.norm:       17614.139 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36114.681 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 29552.820 ops/s
[info]                  ·gc.alloc.rate:      330.777 MB/sec
[info]                  ·gc.alloc.rate.norm: 17618.786 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 29382.404 ops/s
[info]                  ·gc.alloc.rate:                   330.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              17684.622 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36038.444 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 35.682 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 29633.060 ops/s
[info]                  ·gc.alloc.rate:      331.726 MB/sec
[info]                  ·gc.alloc.rate.norm: 17616.192 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   29513.260 ±(99.9%) 537.968 ops/s [Average]
[info]   (min, avg, max) = (29349.630, 29513.260, 29648.386), stdev = 139.709
[info]   CI (99.9%): [28975.292, 30051.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   330.527 ±(99.9%) 5.071 MB/sec [Average]
[info]   (min, avg, max) = (328.458, 330.527, 331.726), stdev = 1.317
[info]   CI (99.9%): [325.457, 335.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   17626.751 ±(99.9%) 127.681 B/op [Average]
[info]   (min, avg, max) = (17600.014, 17626.751, 17684.622), stdev = 33.158
[info]   CI (99.9%): [17499.069, 17754.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   269.245 ±(99.9%) 1419.652 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.245, 673.446), stdev = 368.679
[info]   CI (99.9%): [≈ 0, 1688.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   14430.625 ±(99.9%) 76088.591 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14430.625, 36114.681), stdev = 19759.965
[info]   CI (99.9%): [≈ 0, 90519.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.136 ±(99.9%) 61.446 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.136, 35.682), stdev = 15.957
[info]   CI (99.9%): [≈ 0, 68.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 9.000), stdev = 4.930
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.71% complete, ETA 01:34:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22746.774 ops/s
[info] # Warmup Iteration   2: 32265.355 ops/s
[info] # Warmup Iteration   3: 32860.981 ops/s
[info] # Warmup Iteration   4: 31936.959 ops/s
[info] # Warmup Iteration   5: 32751.010 ops/s
[info] Iteration   1: 32527.301 ops/s
[info]                  ·gc.alloc.rate:            357.260 MB/sec
[info]                  ·gc.alloc.rate.norm:       17288.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32617.924 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 32739.069 ops/s
[info]                  ·gc.alloc.rate:      362.785 MB/sec
[info]                  ·gc.alloc.rate.norm: 17442.452 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 32268.638 ops/s
[info]                  ·gc.alloc.rate:            357.308 MB/sec
[info]                  ·gc.alloc.rate.norm:       17430.851 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32879.684 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 32706.118 ops/s
[info]                  ·gc.alloc.rate:      359.220 MB/sec
[info]                  ·gc.alloc.rate.norm: 17288.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 32491.620 ops/s
[info]                  ·gc.alloc.rate:            358.233 MB/sec
[info]                  ·gc.alloc.rate.norm:       17353.598 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32653.053 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   32546.549 ±(99.9%) 728.445 ops/s [Average]
[info]   (min, avg, max) = (32268.638, 32546.549, 32739.069), stdev = 189.175
[info]   CI (99.9%): [31818.104, 33274.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   358.961 ±(99.9%) 8.790 MB/sec [Average]
[info]   (min, avg, max) = (357.260, 358.961, 362.785), stdev = 2.283
[info]   CI (99.9%): [350.171, 367.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   17360.585 ±(99.9%) 287.008 B/op [Average]
[info]   (min, avg, max) = (17288.012, 17360.585, 17442.452), stdev = 74.535
[info]   CI (99.9%): [17073.577, 17647.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.421 ±(99.9%) 1421.597 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.421, 674.062), stdev = 369.184
[info]   CI (99.9%): [≈ 0, 1826.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   19630.132 ±(99.9%) 69003.764 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19630.132, 32879.684), stdev = 17920.058
[info]   CI (99.9%): [≈ 0, 88633.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 8.000), stdev = 4.219
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 18.94% complete, ETA 01:34:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22810.003 ops/s
[info] # Warmup Iteration   2: 32561.443 ops/s
[info] # Warmup Iteration   3: 32389.327 ops/s
[info] # Warmup Iteration   4: 32508.803 ops/s
[info] # Warmup Iteration   5: 31495.264 ops/s
[info] Iteration   1: 30306.668 ops/s
[info]                  ·gc.alloc.rate:      313.433 MB/sec
[info]                  ·gc.alloc.rate.norm: 16278.685 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 32458.705 ops/s
[info]                  ·gc.alloc.rate:            319.425 MB/sec
[info]                  ·gc.alloc.rate.norm:       15488.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32684.231 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 32727.374 ops/s
[info]                  ·gc.alloc.rate:      322.045 MB/sec
[info]                  ·gc.alloc.rate.norm: 15488.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 31470.680 ops/s
[info]                  ·gc.alloc.rate:            309.875 MB/sec
[info]                  ·gc.alloc.rate.norm:       15496.521 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33712.200 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 32768.582 ops/s
[info]                  ·gc.alloc.rate:      322.592 MB/sec
[info]                  ·gc.alloc.rate.norm: 15493.574 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   31946.402 ±(99.9%) 4067.577 ops/s [Average]
[info]   (min, avg, max) = (30306.668, 31946.402, 32768.582), stdev = 1056.337
[info]   CI (99.9%): [27878.825, 36013.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   317.474 ±(99.9%) 21.524 MB/sec [Average]
[info]   (min, avg, max) = (309.875, 317.474, 322.592), stdev = 5.590
[info]   CI (99.9%): [295.950, 338.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   15648.961 ±(99.9%) 1355.601 B/op [Average]
[info]   (min, avg, max) = (15488.012, 15648.961, 16278.685), stdev = 352.045
[info]   CI (99.9%): [14293.360, 17004.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   269.640 ±(99.9%) 1421.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.640, 674.123), stdev = 369.220
[info]   CI (99.9%): [≈ 0, 1691.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   13279.286 ±(99.9%) 70031.827 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13279.286, 33712.200), stdev = 18187.043
[info]   CI (99.9%): [≈ 0, 83311.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 8.000), stdev = 4.123
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.17% complete, ETA 01:34:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3876.967 ops/s
[info] # Warmup Iteration   2: 18167.255 ops/s
[info] # Warmup Iteration   3: 20325.988 ops/s
[info] # Warmup Iteration   4: 20006.679 ops/s
[info] # Warmup Iteration   5: 20441.479 ops/s
[info] Iteration   1: 20434.152 ops/s
[info]                  ·gc.alloc.rate:            720.124 MB/sec
[info]                  ·gc.alloc.rate.norm:       55461.229 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.489 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 51869.573 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 20687.399 ops/s
[info]                  ·gc.alloc.rate:            729.320 MB/sec
[info]                  ·gc.alloc.rate.norm:       55484.148 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.942 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 102470.672 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   3: 21011.698 ops/s
[info]                  ·gc.alloc.rate:                   733.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              54912.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.505 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        50445.412 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 49.897 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 21048.405 ops/s
[info]                  ·gc.alloc.rate:            734.584 MB/sec
[info]                  ·gc.alloc.rate.norm:       54912.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.281 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50404.166 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 21111.880 ops/s
[info]                  ·gc.alloc.rate:            736.649 MB/sec
[info]                  ·gc.alloc.rate.norm:       54912.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.524 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50206.504 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   20858.707 ±(99.9%) 1111.165 ops/s [Average]
[info]   (min, avg, max) = (20434.152, 20858.707, 21111.880), stdev = 288.566
[info]   CI (99.9%): [19747.542, 21969.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   730.763 ±(99.9%) 25.115 MB/sec [Average]
[info]   (min, avg, max) = (720.124, 730.763, 736.649), stdev = 6.522
[info]   CI (99.9%): [705.649, 755.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   55136.287 ±(99.9%) 1182.909 B/op [Average]
[info]   (min, avg, max) = (54912.019, 55136.287, 55484.148), stdev = 307.198
[info]   CI (99.9%): [53953.379, 56319.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   808.348 ±(99.9%) 1159.364 MB/sec [Average]
[info]   (min, avg, max) = (673.489, 808.348, 1346.942), stdev = 301.083
[info]   CI (99.9%): [≈ 0, 1967.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   61079.266 ±(99.9%) 89134.724 B/op [Average]
[info]   (min, avg, max) = (50206.504, 61079.266, 102470.672), stdev = 23148.005
[info]   CI (99.9%): [≈ 0, 150213.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   9.979 ±(99.9%) 85.925 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.979, 49.897), stdev = 22.314
[info]   CI (99.9%): [≈ 0, 95.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.800, 17.000), stdev = 4.025
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.40% complete, ETA 01:33:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5740.815 ops/s
[info] # Warmup Iteration   2: 17233.663 ops/s
[info] # Warmup Iteration   3: 18613.087 ops/s
[info] # Warmup Iteration   4: 17466.400 ops/s
[info] # Warmup Iteration   5: 18328.615 ops/s
[info] Iteration   1: 18376.389 ops/s
[info]                  ·gc.alloc.rate:            522.388 MB/sec
[info]                  ·gc.alloc.rate.norm:       44738.664 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.837 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57623.470 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 18289.822 ops/s
[info]                  ·gc.alloc.rate:            521.131 MB/sec
[info]                  ·gc.alloc.rate.norm:       44842.457 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57894.373 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 18468.101 ops/s
[info]                  ·gc.alloc.rate:      523.395 MB/sec
[info]                  ·gc.alloc.rate.norm: 44608.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 18340.719 ops/s
[info]                  ·gc.alloc.rate:            519.849 MB/sec
[info]                  ·gc.alloc.rate.norm:       44611.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57730.268 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 18312.113 ops/s
[info]                  ·gc.alloc.rate:            519.067 MB/sec
[info]                  ·gc.alloc.rate.norm:       44608.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.861 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57824.830 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   18357.429 ±(99.9%) 268.934 ops/s [Average]
[info]   (min, avg, max) = (18289.822, 18357.429, 18468.101), stdev = 69.841
[info]   CI (99.9%): [18088.494, 18626.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   521.166 ±(99.9%) 6.835 MB/sec [Average]
[info]   (min, avg, max) = (519.067, 521.166, 523.395), stdev = 1.775
[info]   CI (99.9%): [514.331, 528.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44681.653 ±(99.9%) 408.102 B/op [Average]
[info]   (min, avg, max) = (44608.022, 44681.653, 44842.457), stdev = 105.983
[info]   CI (99.9%): [44273.551, 45089.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.247 ±(99.9%) 1158.617 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.247, 672.861), stdev = 300.889
[info]   CI (99.9%): [≈ 0, 1696.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   46214.588 ±(99.9%) 99481.159 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46214.588, 57894.373), stdev = 25834.941
[info]   CI (99.9%): [≈ 0, 145695.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.600, 10.000), stdev = 4.278
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.63% complete, ETA 01:33:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74949.597 ops/s
[info] # Warmup Iteration   2: 95378.763 ops/s
[info] # Warmup Iteration   3: 98606.288 ops/s
[info] # Warmup Iteration   4: 100959.130 ops/s
[info] # Warmup Iteration   5: 101015.777 ops/s
[info] Iteration   1: 100095.025 ops/s
[info]                  ·gc.alloc.rate:            260.618 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.542 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10609.450 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 100957.830 ops/s
[info]                  ·gc.alloc.rate:      262.775 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 99984.280 ops/s
[info]                  ·gc.alloc.rate:            263.260 MB/sec
[info]                  ·gc.alloc.rate.norm:       4142.675 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10611.483 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 101052.317 ops/s
[info]                  ·gc.alloc.rate:      263.008 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 100997.215 ops/s
[info]                  ·gc.alloc.rate:      262.807 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   100617.333 ±(99.9%) 2040.315 ops/s [Average]
[info]   (min, avg, max) = (99984.280, 100617.333, 101052.317), stdev = 529.863
[info]   CI (99.9%): [98577.018, 102657.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   262.494 ±(99.9%) 4.105 MB/sec [Average]
[info]   (min, avg, max) = (260.618, 262.494, 263.260), stdev = 1.066
[info]   CI (99.9%): [258.388, 266.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4105.446 ±(99.9%) 80.143 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4105.446, 4142.675), stdev = 20.813
[info]   CI (99.9%): [4025.303, 4185.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.861 ±(99.9%) 1422.900 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.861, 674.964), stdev = 369.522
[info]   CI (99.9%): [≈ 0, 1692.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4244.187 ±(99.9%) 22378.371 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4244.187, 10611.483), stdev = 5811.592
[info]   CI (99.9%): [≈ 0, 26622.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 8.000), stdev = 4.123
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 19.86% complete, ETA 01:33:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2399.559 ops/s
[info] # Warmup Iteration   2: 14426.749 ops/s
[info] # Warmup Iteration   3: 14673.302 ops/s
[info] # Warmup Iteration   4: 15288.653 ops/s
[info] # Warmup Iteration   5: 15217.301 ops/s
[info] Iteration   1: 15007.247 ops/s
[info]                  ·gc.alloc.rate:                   917.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              96193.434 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        141184.017 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 69.858 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 15318.263 ops/s
[info]                  ·gc.alloc.rate:            933.051 MB/sec
[info]                  ·gc.alloc.rate.norm:       95864.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69193.286 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 14888.651 ops/s
[info]                  ·gc.alloc.rate:            916.270 MB/sec
[info]                  ·gc.alloc.rate.norm:       96824.620 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 142241.859 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   4: 14989.161 ops/s
[info]                  ·gc.alloc.rate:                   928.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              97505.075 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        70641.793 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 69.942 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 15379.360 ops/s
[info]                  ·gc.alloc.rate:            937.170 MB/sec
[info]                  ·gc.alloc.rate.norm:       95881.469 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.631 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68918.888 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   15116.536 ±(99.9%) 838.942 ops/s [Average]
[info]   (min, avg, max) = (14888.651, 15116.536, 15379.360), stdev = 217.871
[info]   CI (99.9%): [14277.594, 15955.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   926.418 ±(99.9%) 36.240 MB/sec [Average]
[info]   (min, avg, max) = (916.270, 926.418, 937.170), stdev = 9.411
[info]   CI (99.9%): [890.177, 962.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   96453.725 ±(99.9%) 2713.183 B/op [Average]
[info]   (min, avg, max) = (95864.027, 96453.725, 97505.075), stdev = 704.605
[info]   CI (99.9%): [93740.542, 99166.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   942.373 ±(99.9%) 1418.916 MB/sec [Average]
[info]   (min, avg, max) = (672.708, 942.373, 1346.062), stdev = 368.488
[info]   CI (99.9%): [≈ 0, 2361.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   98435.969 ±(99.9%) 152152.342 B/op [Average]
[info]   (min, avg, max) = (68918.888, 98435.969, 142241.859), stdev = 39513.480
[info]   CI (99.9%): [≈ 0, 250588.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   27.960 ±(99.9%) 147.426 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.960, 69.942), stdev = 38.286
[info]   CI (99.9%): [≈ 0, 175.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   65.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.000, 19.000), stdev = 5.050
[info]   CI (99.9%): [65.000, 65.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.09% complete, ETA 01:32:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20509.651 ops/s
[info] # Warmup Iteration   2: 40828.708 ops/s
[info] # Warmup Iteration   3: 42343.532 ops/s
[info] # Warmup Iteration   4: 42850.544 ops/s
[info] # Warmup Iteration   5: 43082.466 ops/s
[info] Iteration   1: 42955.990 ops/s
[info]                  ·gc.alloc.rate:                   650.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              23824.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24674.961 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 24.406 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 42702.084 ops/s
[info]                  ·gc.alloc.rate:            647.530 MB/sec
[info]                  ·gc.alloc.rate.norm:       23867.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24846.260 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 42724.658 ops/s
[info]                  ·gc.alloc.rate:            646.963 MB/sec
[info]                  ·gc.alloc.rate.norm:       23834.167 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24832.306 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 42899.032 ops/s
[info]                  ·gc.alloc.rate:                   649.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              23824.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24707.741 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 24.439 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 41853.516 ops/s
[info]                  ·gc.alloc.rate:            645.785 MB/sec
[info]                  ·gc.alloc.rate.norm:       24285.751 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25350.795 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   42627.056 ±(99.9%) 1717.414 ops/s [Average]
[info]   (min, avg, max) = (41853.516, 42627.056, 42955.990), stdev = 446.007
[info]   CI (99.9%): [40909.642, 44344.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   648.001 ±(99.9%) 7.020 MB/sec [Average]
[info]   (min, avg, max) = (645.785, 648.001, 650.128), stdev = 1.823
[info]   CI (99.9%): [640.982, 655.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23927.006 ±(99.9%) 775.221 B/op [Average]
[info]   (min, avg, max) = (23824.009, 23927.006, 24285.751), stdev = 201.322
[info]   CI (99.9%): [23151.785, 24702.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   673.861 ±(99.9%) 1.280 MB/sec [Average]
[info]   (min, avg, max) = (673.350, 673.861, 674.106), stdev = 0.332
[info]   CI (99.9%): [672.581, 675.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   24882.412 ±(99.9%) 1048.807 B/op [Average]
[info]   (min, avg, max) = (24674.961, 24882.412, 25350.795), stdev = 272.372
[info]   CI (99.9%): [23833.605, 25931.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   9.769 ±(99.9%) 51.510 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.769, 24.439), stdev = 13.377
[info]   CI (99.9%): [≈ 0, 61.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.32% complete, ETA 01:32:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22678.780 ops/s
[info] # Warmup Iteration   2: 55836.218 ops/s
[info] # Warmup Iteration   3: 57485.030 ops/s
[info] # Warmup Iteration   4: 57752.014 ops/s
[info] # Warmup Iteration   5: 57081.520 ops/s
[info] Iteration   1: 57007.063 ops/s
[info]                  ·gc.alloc.rate:                   677.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              18701.422 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18574.491 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.391 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 56844.681 ops/s
[info]                  ·gc.alloc.rate:            674.420 MB/sec
[info]                  ·gc.alloc.rate.norm:       18672.886 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.467 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18646.515 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 56947.502 ops/s
[info]                  ·gc.alloc.rate:            675.256 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18612.468 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 57788.276 ops/s
[info]                  ·gc.alloc.rate:            685.238 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.388 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18323.819 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 57930.608 ops/s
[info]                  ·gc.alloc.rate:                   686.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18278.279 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.097 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   57303.626 ±(99.9%) 1976.056 ops/s [Average]
[info]   (min, avg, max) = (56844.681, 57303.626, 57930.608), stdev = 513.176
[info]   CI (99.9%): [55327.570, 59279.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   679.818 ±(99.9%) 22.404 MB/sec [Average]
[info]   (min, avg, max) = (674.420, 679.818, 686.871), stdev = 5.818
[info]   CI (99.9%): [657.414, 702.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   18673.342 ±(99.9%) 62.183 B/op [Average]
[info]   (min, avg, max) = (18664.007, 18673.342, 18701.422), stdev = 16.149
[info]   CI (99.9%): [18611.159, 18735.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.995 ±(99.9%) 1.533 MB/sec [Average]
[info]   (min, avg, max) = (672.676, 672.995, 673.467), stdev = 0.398
[info]   CI (99.9%): [671.462, 674.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   18487.114 ±(99.9%) 664.263 B/op [Average]
[info]   (min, avg, max) = (18278.279, 18487.114, 18646.515), stdev = 172.507
[info]   CI (99.9%): [17822.852, 19151.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.298 ±(99.9%) 38.480 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.298, 18.391), stdev = 9.993
[info]   CI (99.9%): [≈ 0, 45.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.55% complete, ETA 01:32:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 123423.683 ops/s
[info] # Warmup Iteration   2: 167801.924 ops/s
[info] # Warmup Iteration   3: 164742.580 ops/s
[info] # Warmup Iteration   4: 168760.527 ops/s
[info] # Warmup Iteration   5: 167416.135 ops/s
[info] Iteration   1: 169099.129 ops/s
[info]                  ·gc.alloc.rate:      268.136 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 168721.444 ops/s
[info]                  ·gc.alloc.rate:      267.702 MB/sec
[info]                  ·gc.alloc.rate.norm: 2497.590 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 167268.039 ops/s
[info]                  ·gc.alloc.rate:            266.915 MB/sec
[info]                  ·gc.alloc.rate.norm:       2511.378 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.146 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6342.964 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 169161.031 ops/s
[info]                  ·gc.alloc.rate:      268.287 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 166097.161 ops/s
[info]                  ·gc.alloc.rate:            263.465 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.262 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6387.829 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   168069.361 ±(99.9%) 5169.434 ops/s [Average]
[info]   (min, avg, max) = (166097.161, 168069.361, 169161.031), stdev = 1342.486
[info]   CI (99.9%): [162899.927, 173238.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   266.901 ±(99.9%) 7.676 MB/sec [Average]
[info]   (min, avg, max) = (263.465, 266.901, 268.287), stdev = 1.993
[info]   CI (99.9%): [259.225, 274.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2499.397 ±(99.9%) 25.924 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2499.397, 2511.378), stdev = 6.732
[info]   CI (99.9%): [2473.473, 2525.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.682 ±(99.9%) 1421.953 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.682, 674.262), stdev = 369.277
[info]   CI (99.9%): [≈ 0, 1691.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2546.159 ±(99.9%) 13425.299 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2546.159, 6387.829), stdev = 3486.507
[info]   CI (99.9%): [≈ 0, 15971.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 8.000), stdev = 4.123
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 20.79% complete, ETA 01:32:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 127981.248 ops/s
[info] # Warmup Iteration   2: 171291.598 ops/s
[info] # Warmup Iteration   3: 176454.758 ops/s
[info] # Warmup Iteration   4: 176632.200 ops/s
[info] # Warmup Iteration   5: 176879.826 ops/s
[info] Iteration   1: 176243.189 ops/s
[info]                  ·gc.alloc.rate:      4.814 MB/sec
[info]                  ·gc.alloc.rate.norm: 42.992 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 176296.528 ops/s
[info]                  ·gc.alloc.rate:      0.582 MB/sec
[info]                  ·gc.alloc.rate.norm: 5.199 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 176273.140 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 176242.502 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 176358.218 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.521 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   176282.715 ±(99.9%) 184.294 ops/s [Average]
[info]   (min, avg, max) = (176242.502, 176282.715, 176358.218), stdev = 47.861
[info]   CI (99.9%): [176098.421, 176467.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.113 ±(99.9%) 8.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.113, 4.814), stdev = 2.082
[info]   CI (99.9%): [≈ 0, 9.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   9.943 ±(99.9%) 71.609 B/op [Average]
[info]   (min, avg, max) = (0.002, 9.943, 42.992), stdev = 18.597
[info]   CI (99.9%): [≈ 0, 81.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.02% complete, ETA 01:31:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20373.214 ops/s
[info] # Warmup Iteration   2: 52017.381 ops/s
[info] # Warmup Iteration   3: 51334.144 ops/s
[info] # Warmup Iteration   4: 52806.215 ops/s
[info] # Warmup Iteration   5: 53095.910 ops/s
[info] Iteration   1: 53177.402 ops/s
[info]                  ·gc.alloc.rate:                   830.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              24592.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19912.042 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.715 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 53311.388 ops/s
[info]                  ·gc.alloc.rate:            829.727 MB/sec
[info]                  ·gc.alloc.rate.norm:       24496.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19881.666 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 53388.197 ops/s
[info]                  ·gc.alloc.rate:            830.906 MB/sec
[info]                  ·gc.alloc.rate.norm:       24496.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19852.997 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 52847.611 ops/s
[info]                  ·gc.alloc.rate:            822.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       24501.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40113.909 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   5: 52979.524 ops/s
[info]                  ·gc.alloc.rate:            824.579 MB/sec
[info]                  ·gc.alloc.rate.norm:       24499.142 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20006.989 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   53140.824 ±(99.9%) 868.777 ops/s [Average]
[info]   (min, avg, max) = (52847.611, 53140.824, 53388.197), stdev = 225.619
[info]   CI (99.9%): [52272.048, 54009.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   827.751 ±(99.9%) 14.652 MB/sec [Average]
[info]   (min, avg, max) = (822.767, 827.751, 830.906), stdev = 3.805
[info]   CI (99.9%): [813.099, 842.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24516.867 ±(99.9%) 162.146 B/op [Average]
[info]   (min, avg, max) = (24496.008, 24516.867, 24592.094), stdev = 42.109
[info]   CI (99.9%): [24354.720, 24679.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   807.993 ±(99.9%) 1160.382 MB/sec [Average]
[info]   (min, avg, max) = (672.675, 807.993, 1347.059), stdev = 301.348
[info]   CI (99.9%): [≈ 0, 1968.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   23953.521 ±(99.9%) 34787.170 B/op [Average]
[info]   (min, avg, max) = (19852.997, 23953.521, 40113.909), stdev = 9034.117
[info]   CI (99.9%): [≈ 0, 58740.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.943 ±(99.9%) 33.950 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.943, 19.715), stdev = 8.817
[info]   CI (99.9%): [≈ 0, 37.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.600, 17.000), stdev = 3.578
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.25% complete, ETA 01:31:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32245.003 ops/s
[info] # Warmup Iteration   2: 78213.637 ops/s
[info] # Warmup Iteration   3: 81519.884 ops/s
[info] # Warmup Iteration   4: 85153.797 ops/s
[info] # Warmup Iteration   5: 82560.482 ops/s
[info] Iteration   1: 83691.394 ops/s
[info]                  ·gc.alloc.rate:                   1746.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              32846.381 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        25329.678 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 50.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 85647.051 ops/s
[info]                  ·gc.alloc.rate:                   1778.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              32684.146 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        37382.258 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 97.923 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 86791.482 ops/s
[info]                  ·gc.alloc.rate:                                  1802.161 MB/sec
[info]                  ·gc.alloc.rate.norm:                             32680.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       37071.662 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 86854.107 ops/s
[info]                  ·gc.alloc.rate:            1803.778 MB/sec
[info]                  ·gc.alloc.rate.norm:       32682.108 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24696.802 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 86436.105 ops/s
[info]                  ·gc.alloc.rate:            1794.591 MB/sec
[info]                  ·gc.alloc.rate.norm:       32681.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37224.321 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   85884.028 ±(99.9%) 5069.530 ops/s [Average]
[info]   (min, avg, max) = (83691.394, 85884.028, 86854.107), stdev = 1316.541
[info]   CI (99.9%): [80814.498, 90953.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1785.185 ±(99.9%) 91.246 MB/sec [Average]
[info]   (min, avg, max) = (1746.693, 1785.185, 1803.778), stdev = 23.696
[info]   CI (99.9%): [1693.938, 1876.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32714.749 ±(99.9%) 283.408 B/op [Average]
[info]   (min, avg, max) = (32680.005, 32714.749, 32846.381), stdev = 73.600
[info]   CI (99.9%): [32431.341, 32998.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.020 ±(99.9%) 0.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.098), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1766.563 ±(99.9%) 1446.899 MB/sec [Average]
[info]   (min, avg, max) = (1346.972, 1766.563, 2044.342), stdev = 375.755
[info]   CI (99.9%): [319.664, 3213.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   32340.944 ±(99.9%) 25775.788 B/op [Average]
[info]   (min, avg, max) = (24696.802, 32340.944, 37382.258), stdev = 6693.890
[info]   CI (99.9%): [6565.156, 58116.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 9.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 5.329), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   29.606 ±(99.9%) 169.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.606, 97.923), stdev = 43.924
[info]   CI (99.9%): [≈ 0, 198.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 17.000), stdev = 6.380
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.48% complete, ETA 01:31:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37842.979 ops/s
[info] # Warmup Iteration   2: 95430.797 ops/s
[info] # Warmup Iteration   3: 97162.621 ops/s
[info] # Warmup Iteration   4: 98774.104 ops/s
[info] # Warmup Iteration   5: 98800.079 ops/s
[info] Iteration   1: 98357.321 ops/s
[info]                  ·gc.alloc.rate:                   1288.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              20624.657 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21543.089 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.660 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 98468.524 ops/s
[info]                  ·gc.alloc.rate:            1290.142 MB/sec
[info]                  ·gc.alloc.rate.norm:       20616.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21529.454 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 97731.353 ops/s
[info]                  ·gc.alloc.rate:                   1280.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              20627.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.799 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21723.530 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 75.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 99658.900 ops/s
[info]                  ·gc.alloc.rate:                   1305.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              20617.292 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21449.963 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 63.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 99397.900 ops/s
[info]                  ·gc.alloc.rate:                                  1301.765 MB/sec
[info]                  ·gc.alloc.rate.norm:                             20616.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.180 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21580.977 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   98722.800 ±(99.9%) 3052.252 ops/s [Average]
[info]   (min, avg, max) = (97731.353, 98722.800, 99658.900), stdev = 792.660
[info]   CI (99.9%): [95670.548, 101775.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1293.368 ±(99.9%) 39.004 MB/sec [Average]
[info]   (min, avg, max) = (1280.718, 1293.368, 1305.519), stdev = 10.129
[info]   CI (99.9%): [1254.363, 1332.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20620.198 ±(99.9%) 20.212 B/op [Average]
[info]   (min, avg, max) = (20616.004, 20620.198, 20627.032), stdev = 5.249
[info]   CI (99.9%): [20599.986, 20640.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.036 ±(99.9%) 0.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.180), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1352.626 ±(99.9%) 28.477 MB/sec [Average]
[info]   (min, avg, max) = (1346.082, 1352.626, 1362.696), stdev = 7.395
[info]   CI (99.9%): [1324.148, 1381.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   21565.402 ±(99.9%) 386.809 B/op [Average]
[info]   (min, avg, max) = (21449.963, 21565.402, 21723.530), stdev = 100.453
[info]   CI (99.9%): [21178.593, 21952.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 8.773 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 4.663), stdev = 2.278
[info]   CI (99.9%): [≈ 0, 10.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   29.774 ±(99.9%) 140.220 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.774, 75.094), stdev = 36.415
[info]   CI (99.9%): [≈ 0, 169.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.600, 19.000), stdev = 7.266
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.71% complete, ETA 01:31:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129802.996 ops/s
[info] # Warmup Iteration   2: 189166.027 ops/s
[info] # Warmup Iteration   3: 191897.941 ops/s
[info] # Warmup Iteration   4: 192003.170 ops/s
[info] # Warmup Iteration   5: 178481.743 ops/s
[info] Iteration   1: 186781.486 ops/s
[info]                  ·gc.alloc.rate:      121.539 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 186157.096 ops/s
[info]                  ·gc.alloc.rate:      121.649 MB/sec
[info]                  ·gc.alloc.rate.norm: 1028.475 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 186411.370 ops/s
[info]                  ·gc.alloc.rate:      121.302 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 186344.727 ops/s
[info]                  ·gc.alloc.rate:      121.240 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 185466.005 ops/s
[info]                  ·gc.alloc.rate:      120.658 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   186232.137 ±(99.9%) 1865.849 ops/s [Average]
[info]   (min, avg, max) = (185466.005, 186232.137, 186781.486), stdev = 484.555
[info]   CI (99.9%): [184366.288, 188097.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   121.278 ±(99.9%) 1.482 MB/sec [Average]
[info]   (min, avg, max) = (120.658, 121.278, 121.649), stdev = 0.385
[info]   CI (99.9%): [119.796, 122.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.897 ±(99.9%) 7.702 B/op [Average]
[info]   (min, avg, max) = (1024.002, 1024.897, 1028.475), stdev = 2.000
[info]   CI (99.9%): [1017.195, 1032.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.94% complete, ETA 01:30:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4092.665 ops/s
[info] # Warmup Iteration   2: 34925.554 ops/s
[info] # Warmup Iteration   3: 39990.031 ops/s
[info] # Warmup Iteration   4: 39590.038 ops/s
[info] # Warmup Iteration   5: 40725.665 ops/s
[info] Iteration   1: 42056.293 ops/s
[info]                  ·gc.alloc.rate:                   2157.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              80725.292 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2025.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        75800.975 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.327 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 274.190 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 41350.970 ops/s
[info]                  ·gc.alloc.rate:                                  2121.699 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80729.595 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.580 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77752.106 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     1.333 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                50.702 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 41668.245 ops/s
[info]                  ·gc.alloc.rate:                                  2137.913 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80742.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.294 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.153 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       102957.960 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 41511.092 ops/s
[info]                  ·gc.alloc.rate:            2128.894 MB/sec
[info]                  ·gc.alloc.rate.norm:       80720.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77512.338 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 41748.300 ops/s
[info]                  ·gc.alloc.rate:            2140.894 MB/sec
[info]                  ·gc.alloc.rate.norm:       80720.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.100 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77070.524 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   41666.980 ±(99.9%) 1023.037 ops/s [Average]
[info]   (min, avg, max) = (41350.970, 41666.980, 42056.293), stdev = 265.679
[info]   CI (99.9%): [40643.943, 42690.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2137.340 ±(99.9%) 51.924 MB/sec [Average]
[info]   (min, avg, max) = (2121.699, 2137.340, 2157.300), stdev = 13.484
[info]   CI (99.9%): [2085.416, 2189.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80727.386 ±(99.9%) 35.097 B/op [Average]
[info]   (min, avg, max) = (80720.010, 80727.386, 80742.022), stdev = 9.115
[info]   CI (99.9%): [80692.289, 80762.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.375 ±(99.9%) 2.640 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.375, 1.580), stdev = 0.686
[info]   CI (99.9%): [≈ 0, 3.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2176.739 ±(99.9%) 1183.047 MB/sec [Average]
[info]   (min, avg, max) = (2025.702, 2176.739, 2726.153), stdev = 307.233
[info]   CI (99.9%): [993.693, 3359.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   82218.781 ±(99.9%) 44736.633 B/op [Average]
[info]   (min, avg, max) = (75800.975, 82218.781, 102957.960), stdev = 11617.962
[info]   CI (99.9%): [37482.147, 126955.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 12.248 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 7.327), stdev = 3.181
[info]   CI (99.9%): [≈ 0, 13.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   64.978 ±(99.9%) 458.209 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 64.978, 274.190), stdev = 118.996
[info]   CI (99.9%): [≈ 0, 523.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.800, 21.000), stdev = 6.760
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.17% complete, ETA 01:30:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89396.759 ops/s
[info] # Warmup Iteration   2: 159012.324 ops/s
[info] # Warmup Iteration   3: 160663.205 ops/s
[info] # Warmup Iteration   4: 162984.233 ops/s
[info] # Warmup Iteration   5: 160303.523 ops/s
[info] Iteration   1: 165622.369 ops/s
[info]                  ·gc.alloc.rate:                   573.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              5450.602 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.583 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6399.816 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.330 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 164891.035 ops/s
[info]                  ·gc.alloc.rate:            579.453 MB/sec
[info]                  ·gc.alloc.rate.norm:       5530.729 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6433.879 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 163914.204 ops/s
[info]                  ·gc.alloc.rate:            575.609 MB/sec
[info]                  ·gc.alloc.rate.norm:       5527.313 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6472.889 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 165159.617 ops/s
[info]                  ·gc.alloc.rate:            572.765 MB/sec
[info]                  ·gc.alloc.rate.norm:       5458.749 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6424.025 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 167119.596 ops/s
[info]                  ·gc.alloc.rate:      578.450 MB/sec
[info]                  ·gc.alloc.rate.norm: 5448.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   165341.364 ±(99.9%) 4520.895 ops/s [Average]
[info]   (min, avg, max) = (163914.204, 165341.364, 167119.596), stdev = 1174.062
[info]   CI (99.9%): [160820.469, 169862.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   575.991 ±(99.9%) 11.216 MB/sec [Average]
[info]   (min, avg, max) = (572.765, 575.991, 579.453), stdev = 2.913
[info]   CI (99.9%): [564.775, 587.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5483.079 ±(99.9%) 162.280 B/op [Average]
[info]   (min, avg, max) = (5448.002, 5483.079, 5530.729), stdev = 42.143
[info]   CI (99.9%): [5320.800, 5645.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   539.157 ±(99.9%) 1160.577 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.157, 674.080), stdev = 301.398
[info]   CI (99.9%): [≈ 0, 1699.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5146.122 ±(99.9%) 11077.879 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5146.122, 6472.889), stdev = 2876.890
[info]   CI (99.9%): [≈ 0, 16224.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.266 ±(99.9%) 10.901 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.266, 6.330), stdev = 2.831
[info]   CI (99.9%): [≈ 0, 12.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.400, 8.000), stdev = 3.578
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.40% complete, ETA 01:30:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 165364.578 ops/s
[info] # Warmup Iteration   2: 356417.275 ops/s
[info] # Warmup Iteration   3: 359727.861 ops/s
[info] # Warmup Iteration   4: 370357.006 ops/s
[info] # Warmup Iteration   5: 375093.652 ops/s
[info] Iteration   1: 370100.710 ops/s
[info]                  ·gc.alloc.rate:            375.097 MB/sec
[info]                  ·gc.alloc.rate.norm:       1594.922 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.532 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2863.870 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 374357.891 ops/s
[info]                  ·gc.alloc.rate:      378.914 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.717 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 372312.139 ops/s
[info]                  ·gc.alloc.rate:            376.804 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.703 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.514 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2846.859 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 355565.404 ops/s
[info]                  ·gc.alloc.rate:      367.445 MB/sec
[info]                  ·gc.alloc.rate.norm: 1626.614 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 356908.961 ops/s
[info]                  ·gc.alloc.rate:            362.340 MB/sec
[info]                  ·gc.alloc.rate.norm:       1597.977 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2969.763 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   365849.021 ±(99.9%) 34329.471 ops/s [Average]
[info]   (min, avg, max) = (355565.404, 365849.021, 374357.891), stdev = 8915.255
[info]   CI (99.9%): [331519.550, 400178.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   372.120 ±(99.9%) 26.849 MB/sec [Average]
[info]   (min, avg, max) = (362.340, 372.120, 378.914), stdev = 6.973
[info]   CI (99.9%): [345.271, 398.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1600.987 ±(99.9%) 55.788 B/op [Average]
[info]   (min, avg, max) = (1592.703, 1600.987, 1626.614), stdev = 14.488
[info]   CI (99.9%): [1545.199, 1656.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   404.087 ±(99.9%) 1420.424 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.087, 673.532), stdev = 368.880
[info]   CI (99.9%): [≈ 0, 1824.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1736.098 ±(99.9%) 6105.324 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1736.098, 2969.763), stdev = 1585.533
[info]   CI (99.9%): [≈ 0, 7841.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.200, 9.000), stdev = 4.764
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.63% complete, ETA 01:30:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 457923.986 ops/s
[info] # Warmup Iteration   2: 592974.360 ops/s
[info] # Warmup Iteration   3: 641067.863 ops/s
[info] # Warmup Iteration   4: 645621.720 ops/s
[info] # Warmup Iteration   5: 614020.353 ops/s
[info] Iteration   1: 630840.094 ops/s
[info]                  ·gc.alloc.rate:            485.528 MB/sec
[info]                  ·gc.alloc.rate.norm:       1211.410 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1681.891 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 635695.849 ops/s
[info]                  ·gc.alloc.rate:            487.852 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1669.108 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 640799.668 ops/s
[info]                  ·gc.alloc.rate:      491.812 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 636569.566 ops/s
[info]                  ·gc.alloc.rate:            490.264 MB/sec
[info]                  ·gc.alloc.rate.norm:       1212.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1666.780 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 639996.203 ops/s
[info]                  ·gc.alloc.rate:            491.272 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.231 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1657.885 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   636780.276 ±(99.9%) 15282.236 ops/s [Average]
[info]   (min, avg, max) = (630840.094, 636780.276, 640799.668), stdev = 3968.748
[info]   CI (99.9%): [621498.040, 652062.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   489.345 ±(99.9%) 10.085 MB/sec [Average]
[info]   (min, avg, max) = (485.528, 489.345, 491.812), stdev = 2.619
[info]   CI (99.9%): [479.260, 499.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1209.505 ±(99.9%) 7.988 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1209.505, 1212.112), stdev = 2.074
[info]   CI (99.9%): [1201.517, 1217.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.312 ±(99.9%) 1160.910 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.312, 674.231), stdev = 301.485
[info]   CI (99.9%): [≈ 0, 1700.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1335.133 ±(99.9%) 2874.164 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1335.133, 1681.891), stdev = 746.411
[info]   CI (99.9%): [≈ 0, 4209.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.200, 8.000), stdev = 3.493
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 22.86% complete, ETA 01:29:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 493426.705 ops/s
[info] # Warmup Iteration   2: 681323.063 ops/s
[info] # Warmup Iteration   3: 703962.612 ops/s
[info] # Warmup Iteration   4: 702274.697 ops/s
[info] # Warmup Iteration   5: 702521.786 ops/s
[info] Iteration   1: 702423.781 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 702199.156 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.382 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 702726.256 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 701799.314 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 702348.575 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   702299.416 ±(99.9%) 1306.143 ops/s [Average]
[info]   (min, avg, max) = (701799.314, 702299.416, 702726.256), stdev = 339.201
[info]   CI (99.9%): [700993.274, 703605.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.034 ±(99.9%) 0.293 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.034, 0.170), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.077 ±(99.9%) 0.657 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.077, 0.382), stdev = 0.171
[info]   CI (99.9%): [≈ 0, 0.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.09% complete, ETA 01:29:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112480.736 ops/s
[info] # Warmup Iteration   2: 245160.217 ops/s
[info] # Warmup Iteration   3: 243405.353 ops/s
[info] # Warmup Iteration   4: 250800.083 ops/s
[info] # Warmup Iteration   5: 247669.648 ops/s
[info] Iteration   1: 251676.416 ops/s
[info]                  ·gc.alloc.rate:            693.310 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4211.550 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 250145.381 ops/s
[info]                  ·gc.alloc.rate:            691.192 MB/sec
[info]                  ·gc.alloc.rate.norm:       4348.964 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4237.373 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 242818.514 ops/s
[info]                  ·gc.alloc.rate:                   670.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              4347.413 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.861 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4360.737 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.318 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 243803.931 ops/s
[info]                  ·gc.alloc.rate:            671.574 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4347.423 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 251853.516 ops/s
[info]                  ·gc.alloc.rate:            694.027 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.415 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.908 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4204.461 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   248059.551 ±(99.9%) 16939.041 ops/s [Average]
[info]   (min, avg, max) = (242818.514, 248059.551, 251853.516), stdev = 4399.015
[info]   CI (99.9%): [231120.510, 264998.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   684.182 ±(99.9%) 45.857 MB/sec [Average]
[info]   (min, avg, max) = (670.805, 684.182, 694.027), stdev = 11.909
[info]   CI (99.9%): [638.325, 730.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4340.960 ±(99.9%) 25.507 B/op [Average]
[info]   (min, avg, max) = (4336.002, 4340.960, 4348.964), stdev = 6.624
[info]   CI (99.9%): [4315.453, 4366.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   673.196 ±(99.9%) 1.107 MB/sec [Average]
[info]   (min, avg, max) = (672.861, 673.196, 673.457), stdev = 0.287
[info]   CI (99.9%): [672.089, 674.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4272.309 ±(99.9%) 291.844 B/op [Average]
[info]   (min, avg, max) = (4204.461, 4272.309, 4360.737), stdev = 75.791
[info]   CI (99.9%): [3980.465, 4564.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.864 ±(99.9%) 7.435 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.864, 4.318), stdev = 1.931
[info]   CI (99.9%): [≈ 0, 8.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.33% complete, ETA 01:29:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16164.551 ops/s
[info] # Warmup Iteration   2: 33698.256 ops/s
[info] # Warmup Iteration   3: 33885.951 ops/s
[info] # Warmup Iteration   4: 33887.407 ops/s
[info] # Warmup Iteration   5: 34643.278 ops/s
[info] Iteration   1: 34498.901 ops/s
[info]                  ·gc.alloc.rate:            1599.229 MB/sec
[info]                  ·gc.alloc.rate.norm:       72964.824 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61507.545 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 34474.860 ops/s
[info]                  ·gc.alloc.rate:                   1600.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              73076.670 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2028.562 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        92624.264 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      6.660 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 304.085 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 34615.331 ops/s
[info]                  ·gc.alloc.rate:                   1604.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              72962.191 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1362.188 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        61939.281 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 30.288 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 35114.534 ops/s
[info]                  ·gc.alloc.rate:            1627.837 MB/sec
[info]                  ·gc.alloc.rate.norm:       72960.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.901 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61085.575 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 35003.011 ops/s
[info]                  ·gc.alloc.rate:                                  1622.719 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72960.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.489 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.503 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       91924.124 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   34741.328 ±(99.9%) 1144.574 ops/s [Average]
[info]   (min, avg, max) = (34474.860, 34741.328, 35114.534), stdev = 297.242
[info]   CI (99.9%): [33596.753, 35885.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1610.969 ±(99.9%) 51.357 MB/sec [Average]
[info]   (min, avg, max) = (1599.229, 1610.969, 1627.837), stdev = 13.337
[info]   CI (99.9%): [1559.612, 1662.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   72984.754 ±(99.9%) 197.999 B/op [Average]
[info]   (min, avg, max) = (72960.026, 72984.754, 73076.670), stdev = 51.420
[info]   CI (99.9%): [72786.755, 73182.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.019 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.098 ±(99.9%) 0.842 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.098, 0.489), stdev = 0.219
[info]   CI (99.9%): [≈ 0, 0.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1629.253 ±(99.9%) 1431.990 MB/sec [Average]
[info]   (min, avg, max) = (1348.110, 1629.253, 2044.503), stdev = 371.883
[info]   CI (99.9%): [197.263, 3061.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   73816.158 ±(99.9%) 64900.007 B/op [Average]
[info]   (min, avg, max) = (61085.575, 73816.158, 92624.264), stdev = 16854.326
[info]   CI (99.9%): [8916.151, 138716.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 11.237 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 6.660), stdev = 2.918
[info]   CI (99.9%): [≈ 0, 12.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   66.875 ±(99.9%) 513.104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 66.875, 304.085), stdev = 133.252
[info]   CI (99.9%): [≈ 0, 579.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 17.000), stdev = 7.050
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 23.56% complete, ETA 01:28:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.905 ops/s
[info] # Warmup Iteration   2: 270857.377 ops/s
[info] # Warmup Iteration   3: 279437.995 ops/s
[info] # Warmup Iteration   4: 285239.346 ops/s
[info] # Warmup Iteration   5: 283036.354 ops/s
[info] Iteration   1: 285204.595 ops/s
[info]                  ·gc.alloc.rate:      295.801 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 283261.463 ops/s
[info]                  ·gc.alloc.rate:            294.996 MB/sec
[info]                  ·gc.alloc.rate.norm:       1638.777 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.937 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3727.227 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 287313.461 ops/s
[info]                  ·gc.alloc.rate:      297.947 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 286553.009 ops/s
[info]                  ·gc.alloc.rate:      297.207 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 276196.008 ops/s
[info]                  ·gc.alloc.rate:            287.787 MB/sec
[info]                  ·gc.alloc.rate.norm:       1639.721 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.898 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3822.570 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   283705.707 ±(99.9%) 17216.579 ops/s [Average]
[info]   (min, avg, max) = (276196.008, 283705.707, 287313.461), stdev = 4471.091
[info]   CI (99.9%): [266489.128, 300922.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   294.747 ±(99.9%) 15.630 MB/sec [Average]
[info]   (min, avg, max) = (287.787, 294.747, 297.947), stdev = 4.059
[info]   CI (99.9%): [279.117, 310.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1634.901 ±(99.9%) 15.340 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1634.901, 1639.721), stdev = 3.984
[info]   CI (99.9%): [1619.561, 1650.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   268.367 ±(99.9%) 1415.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.367, 670.937), stdev = 367.477
[info]   CI (99.9%): [≈ 0, 1683.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1509.959 ±(99.9%) 7962.638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1509.959, 3822.570), stdev = 2067.872
[info]   CI (99.9%): [≈ 0, 9472.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 10.000), stdev = 5.477
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.79% complete, ETA 01:28:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26669.550 ops/s
[info] # Warmup Iteration   2: 88104.301 ops/s
[info] # Warmup Iteration   3: 90191.836 ops/s
[info] # Warmup Iteration   4: 90493.471 ops/s
[info] # Warmup Iteration   5: 92738.556 ops/s
[info] Iteration   1: 94671.445 ops/s
[info]                  ·gc.alloc.rate:                   1041.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              17320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22380.814 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 93092.131 ops/s
[info]                  ·gc.alloc.rate:            1024.764 MB/sec
[info]                  ·gc.alloc.rate.norm:       17324.511 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.832 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11374.796 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 94932.475 ops/s
[info]                  ·gc.alloc.rate:            1044.872 MB/sec
[info]                  ·gc.alloc.rate.norm:       17324.578 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.502 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22309.188 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   4: 95786.937 ops/s
[info]                  ·gc.alloc.rate:            1054.064 MB/sec
[info]                  ·gc.alloc.rate.norm:       17320.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11054.578 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 94050.154 ops/s
[info]                  ·gc.alloc.rate:                   1039.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              17402.077 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.807 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22574.355 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 78.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   94506.629 ±(99.9%) 3877.922 ops/s [Average]
[info]   (min, avg, max) = (93092.131, 94506.629, 95786.937), stdev = 1007.084
[info]   CI (99.9%): [90628.706, 98384.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1041.024 ±(99.9%) 40.898 MB/sec [Average]
[info]   (min, avg, max) = (1024.764, 1041.024, 1054.064), stdev = 10.621
[info]   CI (99.9%): [1000.127, 1081.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17338.235 ±(99.9%) 137.702 B/op [Average]
[info]   (min, avg, max) = (17320.004, 17338.235, 17402.077), stdev = 35.761
[info]   CI (99.9%): [17200.533, 17475.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1077.185 ±(99.9%) 1421.490 MB/sec [Average]
[info]   (min, avg, max) = (672.761, 1077.185, 1348.807), stdev = 369.156
[info]   CI (99.9%): [≈ 0, 2498.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17938.746 ±(99.9%) 23642.985 B/op [Average]
[info]   (min, avg, max) = (11054.578, 17938.746, 22574.355), stdev = 6140.008
[info]   CI (99.9%): [≈ 0, 41581.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   17.822 ±(99.9%) 130.922 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.822, 78.035), stdev = 34.000
[info]   CI (99.9%): [≈ 0, 148.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   70.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 14.000, 19.000), stdev = 4.796
[info]   CI (99.9%): [70.000, 70.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.02% complete, ETA 01:28:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 340815.612 ops/s
[info] # Warmup Iteration   2: 412720.158 ops/s
[info] # Warmup Iteration   3: 420047.645 ops/s
[info] # Warmup Iteration   4: 426174.077 ops/s
[info] # Warmup Iteration   5: 422680.658 ops/s
[info] Iteration   1: 423593.831 ops/s
[info]                  ·gc.alloc.rate:      283.410 MB/sec
[info]                  ·gc.alloc.rate.norm: 1052.862 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 426333.457 ops/s
[info]                  ·gc.alloc.rate:      277.416 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 415532.630 ops/s
[info]                  ·gc.alloc.rate:            270.432 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.206 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.197 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2553.385 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 423947.235 ops/s
[info]                  ·gc.alloc.rate:      276.466 MB/sec
[info]                  ·gc.alloc.rate.norm: 1026.515 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 423040.144 ops/s
[info]                  ·gc.alloc.rate:            275.285 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2507.879 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   422489.459 ±(99.9%) 15738.467 ops/s [Average]
[info]   (min, avg, max) = (415532.630, 422489.459, 426333.457), stdev = 4087.230
[info]   CI (99.9%): [406750.992, 438227.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   276.602 ±(99.9%) 17.942 MB/sec [Average]
[info]   (min, avg, max) = (270.432, 276.602, 283.410), stdev = 4.659
[info]   CI (99.9%): [258.660, 294.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1030.317 ±(99.9%) 48.702 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1030.317, 1052.862), stdev = 12.648
[info]   CI (99.9%): [981.615, 1079.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.679 ±(99.9%) 1421.940 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.679, 674.199), stdev = 369.273
[info]   CI (99.9%): [≈ 0, 1691.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1012.253 ±(99.9%) 5337.677 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1012.253, 2553.385), stdev = 1386.178
[info]   CI (99.9%): [≈ 0, 6349.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 8.000), stdev = 4.123
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.25% complete, ETA 01:28:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6206.510 ops/s
[info] # Warmup Iteration   2: 30638.454 ops/s
[info] # Warmup Iteration   3: 31832.742 ops/s
[info] # Warmup Iteration   4: 31159.591 ops/s
[info] # Warmup Iteration   5: 31669.414 ops/s
[info] Iteration   1: 31930.338 ops/s
[info]                  ·gc.alloc.rate:            1524.223 MB/sec
[info]                  ·gc.alloc.rate.norm:       75129.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2018.253 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 99479.782 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  28.000 ms
[info] Iteration   2: 32482.449 ops/s
[info]                  ·gc.alloc.rate:                   1550.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              75118.343 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        65358.483 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 225.931 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 32727.144 ops/s
[info]                  ·gc.alloc.rate:                   1561.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              75118.531 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.489 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        65285.733 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 192.205 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 32794.500 ops/s
[info]                  ·gc.alloc.rate:                                  1565.053 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75115.931 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.957 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65406.131 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 31819.797 ops/s
[info]                  ·gc.alloc.rate:                                  1526.786 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75506.652 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.178 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.811 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       101117.981 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   32350.846 ±(99.9%) 1737.691 ops/s [Average]
[info]   (min, avg, max) = (31819.797, 32350.846, 32794.500), stdev = 451.273
[info]   CI (99.9%): [30613.154, 34088.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1545.632 ±(99.9%) 73.998 MB/sec [Average]
[info]   (min, avg, max) = (1524.223, 1545.632, 1565.053), stdev = 19.217
[info]   CI (99.9%): [1471.634, 1619.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   75197.699 ±(99.9%) 665.330 B/op [Average]
[info]   (min, avg, max) = (75115.931, 75197.699, 75506.652), stdev = 172.784
[info]   CI (99.9%): [74532.369, 75863.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.044 ±(99.9%) 0.297 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.178), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.154 ±(99.9%) 14.698 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.154, 8.811), stdev = 3.817
[info]   CI (99.9%): [≈ 0, 16.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1626.380 ±(99.9%) 1424.488 MB/sec [Average]
[info]   (min, avg, max) = (1348.748, 1626.380, 2044.661), stdev = 369.935
[info]   CI (99.9%): [201.892, 3050.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   79329.622 ±(99.9%) 73743.820 B/op [Average]
[info]   (min, avg, max) = (65285.733, 79329.622, 101117.981), stdev = 19151.036
[info]   CI (99.9%): [5585.802, 153073.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.662), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   83.627 ±(99.9%) 443.326 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 83.627, 225.931), stdev = 115.130
[info]   CI (99.9%): [≈ 0, 526.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.800, 28.000), stdev = 10.134
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.48% complete, ETA 01:27:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38654.856 ops/s
[info] # Warmup Iteration   2: 67731.778 ops/s
[info] # Warmup Iteration   3: 69267.028 ops/s
[info] # Warmup Iteration   4: 70358.828 ops/s
[info] # Warmup Iteration   5: 69242.861 ops/s
[info] Iteration   1: 70010.178 ops/s
[info]                  ·gc.alloc.rate:      348.052 MB/sec
[info]                  ·gc.alloc.rate.norm: 7824.425 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 69541.725 ops/s
[info]                  ·gc.alloc.rate:            334.079 MB/sec
[info]                  ·gc.alloc.rate.norm:       7560.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.548 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15241.982 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 70606.261 ops/s
[info]                  ·gc.alloc.rate:      339.171 MB/sec
[info]                  ·gc.alloc.rate.norm: 7560.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 70077.468 ops/s
[info]                  ·gc.alloc.rate:            336.630 MB/sec
[info]                  ·gc.alloc.rate.norm:       7560.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.490 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15125.203 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 70714.242 ops/s
[info]                  ·gc.alloc.rate:      339.656 MB/sec
[info]                  ·gc.alloc.rate.norm: 7560.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   70189.975 ±(99.9%) 1840.030 ops/s [Average]
[info]   (min, avg, max) = (69541.725, 70189.975, 70714.242), stdev = 477.850
[info]   CI (99.9%): [68349.945, 72030.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   339.518 ±(99.9%) 20.275 MB/sec [Average]
[info]   (min, avg, max) = (334.079, 339.518, 348.052), stdev = 5.265
[info]   CI (99.9%): [319.242, 359.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7612.890 ±(99.9%) 455.347 B/op [Average]
[info]   (min, avg, max) = (7560.006, 7612.890, 7824.425), stdev = 118.252
[info]   CI (99.9%): [7157.543, 8068.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   269.408 ±(99.9%) 1420.509 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.408, 673.548), stdev = 368.902
[info]   CI (99.9%): [≈ 0, 1689.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6073.437 ±(99.9%) 32023.875 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6073.437, 15241.982), stdev = 8316.499
[info]   CI (99.9%): [≈ 0, 38097.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 8.000), stdev = 4.123
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.71% complete, ETA 01:27:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.824 ops/s
[info] # Warmup Iteration   2: 78158.311 ops/s
[info] # Warmup Iteration   3: 79971.601 ops/s
[info] # Warmup Iteration   4: 80450.840 ops/s
[info] # Warmup Iteration   5: 81354.707 ops/s
[info] Iteration   1: 80334.852 ops/s
[info]                  ·gc.alloc.rate:            402.662 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.520 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13154.834 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 81595.062 ops/s
[info]                  ·gc.alloc.rate:      408.999 MB/sec
[info]                  ·gc.alloc.rate.norm: 7888.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 79358.916 ops/s
[info]                  ·gc.alloc.rate:            399.046 MB/sec
[info]                  ·gc.alloc.rate.norm:       7914.863 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13303.382 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 80236.055 ops/s
[info]                  ·gc.alloc.rate:            402.235 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13157.996 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 80551.010 ops/s
[info]                  ·gc.alloc.rate:      403.673 MB/sec
[info]                  ·gc.alloc.rate.norm: 7888.191 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   80415.179 ±(99.9%) 3083.404 ops/s [Average]
[info]   (min, avg, max) = (79358.916, 80415.179, 81595.062), stdev = 800.750
[info]   CI (99.9%): [77331.775, 83498.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   403.323 ±(99.9%) 13.918 MB/sec [Average]
[info]   (min, avg, max) = (399.046, 403.323, 408.999), stdev = 3.614
[info]   CI (99.9%): [389.405, 417.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   7893.414 ±(99.9%) 46.172 B/op [Average]
[info]   (min, avg, max) = (7888.005, 7893.414, 7914.863), stdev = 11.991
[info]   CI (99.9%): [7847.242, 7939.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   402.642 ±(99.9%) 1415.343 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.642, 671.520), stdev = 367.560
[info]   CI (99.9%): [≈ 0, 1817.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   7923.242 ±(99.9%) 27852.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7923.242, 13303.382), stdev = 7233.147
[info]   CI (99.9%): [≈ 0, 35775.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.200, 12.000), stdev = 6.573
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.94% complete, ETA 01:27:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38735.023 ops/s
[info] # Warmup Iteration   2: 69316.510 ops/s
[info] # Warmup Iteration   3: 69873.497 ops/s
[info] # Warmup Iteration   4: 69844.406 ops/s
[info] # Warmup Iteration   5: 70707.228 ops/s
[info] Iteration   1: 70124.727 ops/s
[info]                  ·gc.alloc.rate:            368.500 MB/sec
[info]                  ·gc.alloc.rate.norm:       8272.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15114.851 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 70785.212 ops/s
[info]                  ·gc.alloc.rate:      372.029 MB/sec
[info]                  ·gc.alloc.rate.norm: 8272.964 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 70065.399 ops/s
[info]                  ·gc.alloc.rate:            368.247 MB/sec
[info]                  ·gc.alloc.rate.norm:       8272.775 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15127.361 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 69992.654 ops/s
[info]                  ·gc.alloc.rate:      374.128 MB/sec
[info]                  ·gc.alloc.rate.norm: 8412.522 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 69867.708 ops/s
[info]                  ·gc.alloc.rate:            368.998 MB/sec
[info]                  ·gc.alloc.rate.norm:       8311.382 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.518 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15170.440 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   70167.140 ±(99.9%) 1380.696 ops/s [Average]
[info]   (min, avg, max) = (69867.708, 70167.140, 70785.212), stdev = 358.562
[info]   CI (99.9%): [68786.444, 71547.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   370.381 ±(99.9%) 9.960 MB/sec [Average]
[info]   (min, avg, max) = (368.247, 370.381, 374.128), stdev = 2.587
[info]   CI (99.9%): [360.421, 380.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   8308.330 ±(99.9%) 233.430 B/op [Average]
[info]   (min, avg, max) = (8272.006, 8308.330, 8412.522), stdev = 60.621
[info]   CI (99.9%): [8074.900, 8541.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   404.044 ±(99.9%) 1420.270 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.044, 673.518), stdev = 368.840
[info]   CI (99.9%): [≈ 0, 1824.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   9082.530 ±(99.9%) 31926.473 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9082.530, 15170.440), stdev = 8291.204
[info]   CI (99.9%): [≈ 0, 41009.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.200, 9.000), stdev = 4.764
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.17% complete, ETA 01:27:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56856.911 ops/s
[info] # Warmup Iteration   2: 78344.851 ops/s
[info] # Warmup Iteration   3: 78737.542 ops/s
[info] # Warmup Iteration   4: 80066.222 ops/s
[info] # Warmup Iteration   5: 80868.843 ops/s
[info] Iteration   1: 79739.299 ops/s
[info]                  ·gc.alloc.rate:            399.684 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.209 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13305.901 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 79858.596 ops/s
[info]                  ·gc.alloc.rate:            400.208 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13285.910 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 80287.764 ops/s
[info]                  ·gc.alloc.rate:      403.114 MB/sec
[info]                  ·gc.alloc.rate.norm: 7899.609 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 79768.910 ops/s
[info]                  ·gc.alloc.rate:            402.921 MB/sec
[info]                  ·gc.alloc.rate.norm:       7950.070 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13300.898 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 80496.901 ops/s
[info]                  ·gc.alloc.rate:      403.460 MB/sec
[info]                  ·gc.alloc.rate.norm: 7888.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   80030.294 ±(99.9%) 1315.000 ops/s [Average]
[info]   (min, avg, max) = (79739.299, 80030.294, 80496.901), stdev = 341.501
[info]   CI (99.9%): [78715.294, 81345.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   401.878 ±(99.9%) 6.866 MB/sec [Average]
[info]   (min, avg, max) = (399.684, 401.878, 403.460), stdev = 1.783
[info]   CI (99.9%): [395.011, 408.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   7902.739 ±(99.9%) 103.704 B/op [Average]
[info]   (min, avg, max) = (7888.005, 7902.739, 7950.070), stdev = 26.932
[info]   CI (99.9%): [7799.035, 8006.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.479 ±(99.9%) 1421.801 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.479, 674.209), stdev = 369.237
[info]   CI (99.9%): [≈ 0, 1826.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   7978.542 ±(99.9%) 28045.713 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7978.542, 13305.901), stdev = 7283.382
[info]   CI (99.9%): [≈ 0, 36024.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 8.000), stdev = 4.219
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.40% complete, ETA 01:26:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56180.764 ops/s
[info] # Warmup Iteration   2: 78922.063 ops/s
[info] # Warmup Iteration   3: 80728.997 ops/s
[info] # Warmup Iteration   4: 81657.546 ops/s
[info] # Warmup Iteration   5: 81714.491 ops/s
[info] Iteration   1: 80740.187 ops/s
[info]                  ·gc.alloc.rate:            341.424 MB/sec
[info]                  ·gc.alloc.rate.norm:       6653.523 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13140.799 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 79507.131 ops/s
[info]                  ·gc.alloc.rate:      335.834 MB/sec
[info]                  ·gc.alloc.rate.norm: 6648.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 81111.421 ops/s
[info]                  ·gc.alloc.rate:            342.644 MB/sec
[info]                  ·gc.alloc.rate.norm:       6648.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.158 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13080.058 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 82552.182 ops/s
[info]                  ·gc.alloc.rate:      348.663 MB/sec
[info]                  ·gc.alloc.rate.norm: 6648.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 81692.880 ops/s
[info]                  ·gc.alloc.rate:            346.740 MB/sec
[info]                  ·gc.alloc.rate.norm:       6678.404 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.274 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12986.892 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   81120.760 ±(99.9%) 4358.639 ops/s [Average]
[info]   (min, avg, max) = (79507.131, 81120.760, 82552.182), stdev = 1131.925
[info]   CI (99.9%): [76762.122, 85479.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   343.061 ±(99.9%) 19.253 MB/sec [Average]
[info]   (min, avg, max) = (335.834, 343.061, 348.663), stdev = 5.000
[info]   CI (99.9%): [323.808, 362.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   6655.188 ±(99.9%) 50.813 B/op [Average]
[info]   (min, avg, max) = (6648.005, 6655.188, 6678.404), stdev = 13.196
[info]   CI (99.9%): [6604.376, 6706.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   404.550 ±(99.9%) 1422.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.550, 674.317), stdev = 369.302
[info]   CI (99.9%): [≈ 0, 1826.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   7841.550 ±(99.9%) 27564.960 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7841.550, 13140.799), stdev = 7158.533
[info]   CI (99.9%): [≈ 0, 35406.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.800, 8.000), stdev = 4.382
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 25.64% complete, ETA 01:26:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2813.374 ops/s
[info] # Warmup Iteration   2: 8089.835 ops/s
[info] # Warmup Iteration   3: 8269.938 ops/s
[info] # Warmup Iteration   4: 8409.573 ops/s
[info] # Warmup Iteration   5: 8427.829 ops/s
[info] Iteration   1: 8325.693 ops/s
[info]                  ·gc.alloc.rate:            1407.164 MB/sec
[info]                  ·gc.alloc.rate.norm:       266008.573 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.919 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 254619.992 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 8364.125 ops/s
[info]                  ·gc.alloc.rate:                   1415.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              266263.865 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        253558.361 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 125.338 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 8401.320 ops/s
[info]                  ·gc.alloc.rate:                   1420.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              266147.896 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        253065.825 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 748.715 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 8412.807 ops/s
[info]                  ·gc.alloc.rate:                   1412.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              266165.401 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1849.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        348569.892 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.307 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 623.114 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 8530.109 ops/s
[info]                  ·gc.alloc.rate:            1441.729 MB/sec
[info]                  ·gc.alloc.rate.norm:       266024.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.594 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 251422.301 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   8406.811 ±(99.9%) 296.217 ops/s [Average]
[info]   (min, avg, max) = (8325.693, 8406.811, 8530.109), stdev = 76.927
[info]   CI (99.9%): [8110.594, 8703.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1419.490 ±(99.9%) 51.501 MB/sec [Average]
[info]   (min, avg, max) = (1407.164, 1419.490, 1441.729), stdev = 13.375
[info]   CI (99.9%): [1367.989, 1470.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   266121.957 ±(99.9%) 409.059 B/op [Average]
[info]   (min, avg, max) = (266008.573, 266121.957, 266263.865), stdev = 106.231
[info]   CI (99.9%): [265712.897, 266531.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1451.601 ±(99.9%) 857.453 MB/sec [Average]
[info]   (min, avg, max) = (1346.919, 1451.601, 1849.781), stdev = 222.678
[info]   CI (99.9%): [594.147, 2309.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   272247.274 ±(99.9%) 164350.179 B/op [Average]
[info]   (min, avg, max) = (251422.301, 272247.274, 348569.892), stdev = 42681.220
[info]   CI (99.9%): [107897.095, 436597.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.594 ±(99.9%) 7.369 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.594, 3.997), stdev = 1.914
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   299.433 ±(99.9%) 1383.359 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 299.433, 748.715), stdev = 359.254
[info]   CI (99.9%): [≈ 0, 1682.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.600, 17.000), stdev = 5.595
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.87% complete, ETA 01:26:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1746.652 ops/s
[info] # Warmup Iteration   2: 6302.405 ops/s
[info] # Warmup Iteration   3: 6336.737 ops/s
[info] # Warmup Iteration   4: 6247.169 ops/s
[info] # Warmup Iteration   5: 6860.501 ops/s
[info] Iteration   1: 6674.016 ops/s
[info]                  ·gc.alloc.rate:            1080.201 MB/sec
[info]                  ·gc.alloc.rate.norm:       254688.076 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.515 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 317478.966 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 6802.131 ops/s
[info]                  ·gc.alloc.rate:            1101.060 MB/sec
[info]                  ·gc.alloc.rate.norm:       254750.572 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 311259.885 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 6853.950 ops/s
[info]                  ·gc.alloc.rate:                   1109.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              254712.286 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        154472.252 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 152.943 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 6793.566 ops/s
[info]                  ·gc.alloc.rate:                   1099.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              254688.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        311872.273 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 771.579 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   5: 6797.986 ops/s
[info]                  ·gc.alloc.rate:                   1101.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              255079.535 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        313385.267 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 925.350 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   6784.330 ±(99.9%) 255.457 ops/s [Average]
[info]   (min, avg, max) = (6674.016, 6784.330, 6853.950), stdev = 66.341
[info]   CI (99.9%): [6528.873, 7039.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1098.360 ±(99.9%) 41.733 MB/sec [Average]
[info]   (min, avg, max) = (1080.201, 1098.360, 1109.305), stdev = 10.838
[info]   CI (99.9%): [1056.626, 1140.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   254783.707 ±(99.9%) 644.353 B/op [Average]
[info]   (min, avg, max) = (254688.065, 254783.707, 255079.535), stdev = 167.337
[info]   CI (99.9%): [254139.353, 255428.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1212.899 ±(99.9%) 1162.789 MB/sec [Average]
[info]   (min, avg, max) = (672.747, 1212.899, 1353.661), stdev = 301.973
[info]   CI (99.9%): [50.110, 2375.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   281693.729 ±(99.9%) 274012.909 B/op [Average]
[info]   (min, avg, max) = (154472.252, 281693.729, 317478.966), stdev = 71160.282
[info]   CI (99.9%): [7680.820, 555706.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 7.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 3.997), stdev = 1.919
[info]   CI (99.9%): [≈ 0, 8.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   369.974 ±(99.9%) 1711.906 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 369.974, 925.350), stdev = 444.577
[info]   CI (99.9%): [≈ 0, 2081.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   76.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 15.200, 19.000), stdev = 4.817
[info]   CI (99.9%): [76.000, 76.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.10% complete, ETA 01:26:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108702.216 ops/s
[info] # Warmup Iteration   2: 137419.118 ops/s
[info] # Warmup Iteration   3: 142312.609 ops/s
[info] # Warmup Iteration   4: 141033.766 ops/s
[info] # Warmup Iteration   5: 142853.189 ops/s
[info] Iteration   1: 136699.624 ops/s
[info]                  ·gc.alloc.rate:            355.702 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7761.662 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 140825.694 ops/s
[info]                  ·gc.alloc.rate:      366.444 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 136951.023 ops/s
[info]                  ·gc.alloc.rate:            356.507 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7747.269 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 135780.224 ops/s
[info]                  ·gc.alloc.rate:      353.369 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 139109.638 ops/s
[info]                  ·gc.alloc.rate:            364.093 MB/sec
[info]                  ·gc.alloc.rate.norm:       4119.677 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7626.775 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   137873.241 ±(99.9%) 7904.201 ops/s [Average]
[info]   (min, avg, max) = (135780.224, 137873.241, 140825.694), stdev = 2052.696
[info]   CI (99.9%): [129969.040, 145777.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   359.223 ±(99.9%) 21.942 MB/sec [Average]
[info]   (min, avg, max) = (353.369, 359.223, 366.444), stdev = 5.698
[info]   CI (99.9%): [337.281, 381.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4100.738 ±(99.9%) 40.768 B/op [Average]
[info]   (min, avg, max) = (4096.003, 4100.738, 4119.677), stdev = 10.587
[info]   CI (99.9%): [4059.970, 4141.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.477 ±(99.9%) 1421.793 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.477, 674.305), stdev = 369.235
[info]   CI (99.9%): [≈ 0, 1826.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4627.141 ±(99.9%) 16266.303 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4627.141, 7761.662), stdev = 4224.307
[info]   CI (99.9%): [≈ 0, 20893.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 8.000), stdev = 4.037
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.33% complete, ETA 01:25:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 436.551 ops/s
[info] # Warmup Iteration   2: 3671.136 ops/s
[info] # Warmup Iteration   3: 4011.742 ops/s
[info] # Warmup Iteration   4: 4109.537 ops/s
[info] # Warmup Iteration   5: 4124.698 ops/s
[info] Iteration   1: 4166.215 ops/s
[info]                  ·gc.alloc.rate:            1163.464 MB/sec
[info]                  ·gc.alloc.rate.norm:       439585.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 254154.490 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 4129.128 ops/s
[info]                  ·gc.alloc.rate:            1152.859 MB/sec
[info]                  ·gc.alloc.rate.norm:       439440.099 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.482 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 512862.838 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 4123.717 ops/s
[info]                  ·gc.alloc.rate:                   1151.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              439440.107 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        513738.690 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 254.200 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   4: 4122.526 ops/s
[info]                  ·gc.alloc.rate:                   1151.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              439468.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.166 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        514880.310 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1779.833 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 4197.881 ops/s
[info]                  ·gc.alloc.rate:                   1172.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              439470.670 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        253965.657 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1248.602 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   4147.893 ±(99.9%) 127.924 ops/s [Average]
[info]   (min, avg, max) = (4122.526, 4147.893, 4197.881), stdev = 33.221
[info]   CI (99.9%): [4019.970, 4275.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1158.359 ±(99.9%) 35.409 MB/sec [Average]
[info]   (min, avg, max) = (1151.559, 1158.359, 1172.199), stdev = 9.196
[info]   CI (99.9%): [1122.950, 1193.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   439480.784 ±(99.9%) 231.327 B/op [Average]
[info]   (min, avg, max) = (439440.099, 439480.784, 439585.002), stdev = 60.075
[info]   CI (99.9%): [439249.457, 439712.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1078.234 ±(99.9%) 1417.306 MB/sec [Average]
[info]   (min, avg, max) = (672.679, 1078.234, 1349.166), stdev = 368.070
[info]   CI (99.9%): [≈ 0, 2495.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   409920.397 ±(99.9%) 547877.983 B/op [Average]
[info]   (min, avg, max) = (253965.657, 409920.397, 514880.310), stdev = 142282.172
[info]   CI (99.9%): [≈ 0, 957798.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 8.233 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.664), stdev = 2.138
[info]   CI (99.9%): [≈ 0, 9.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   656.527 ±(99.9%) 3126.080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 656.527, 1779.833), stdev = 811.833
[info]   CI (99.9%): [≈ 0, 3782.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   66.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 13.200, 19.000), stdev = 6.458
[info]   CI (99.9%): [66.000, 66.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.56% complete, ETA 01:25:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6888.118 ops/s
[info] # Warmup Iteration   2: 18783.838 ops/s
[info] # Warmup Iteration   3: 19567.895 ops/s
[info] # Warmup Iteration   4: 19416.553 ops/s
[info] # Warmup Iteration   5: 19599.776 ops/s
[info] Iteration   1: 19321.842 ops/s
[info]                  ·gc.alloc.rate:                   1043.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              84957.938 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        109713.877 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 54.260 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 19323.791 ops/s
[info]                  ·gc.alloc.rate:            1041.464 MB/sec
[info]                  ·gc.alloc.rate.norm:       84818.175 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.540 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 109745.421 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   3: 19774.254 ops/s
[info]                  ·gc.alloc.rate:                   1063.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              84672.413 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        53597.772 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 53.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 19615.274 ops/s
[info]                  ·gc.alloc.rate:                   1055.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              84664.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.549 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        108123.210 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 267.235 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 19901.327 ops/s
[info]                  ·gc.alloc.rate:                   1071.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              84684.292 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        53519.201 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.333 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 105.353 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   19587.298 ±(99.9%) 1008.273 ops/s [Average]
[info]   (min, avg, max) = (19321.842, 19587.298, 19901.327), stdev = 261.845
[info]   CI (99.9%): [18579.024, 20595.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1054.981 ±(99.9%) 49.421 MB/sec [Average]
[info]   (min, avg, max) = (1041.464, 1054.981, 1071.197), stdev = 12.834
[info]   CI (99.9%): [1005.560, 1104.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   84759.368 ±(99.9%) 491.530 B/op [Average]
[info]   (min, avg, max) = (84664.021, 84759.368, 84957.938), stdev = 127.649
[info]   CI (99.9%): [84267.838, 85250.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1078.551 ±(99.9%) 1417.948 MB/sec [Average]
[info]   (min, avg, max) = (673.360, 1078.551, 1347.549), stdev = 368.236
[info]   CI (99.9%): [≈ 0, 2496.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   86939.896 ±(99.9%) 117367.586 B/op [Average]
[info]   (min, avg, max) = (53519.201, 86939.896, 109745.421), stdev = 30479.989
[info]   CI (99.9%): [≈ 0, 204307.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 4.934 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 3.331), stdev = 1.281
[info]   CI (99.9%): [≈ 0, 6.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   95.972 ±(99.9%) 395.581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 95.972, 267.235), stdev = 102.731
[info]   CI (99.9%): [≈ 0, 491.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 12.600, 17.000), stdev = 5.177
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.79% complete, ETA 01:25:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8075.293 ops/s
[info] # Warmup Iteration   2: 21195.257 ops/s
[info] # Warmup Iteration   3: 21472.080 ops/s
[info] # Warmup Iteration   4: 22053.092 ops/s
[info] # Warmup Iteration   5: 21857.748 ops/s
[info] Iteration   1: 21757.759 ops/s
[info]                  ·gc.alloc.rate:                   1150.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              83215.290 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        97383.948 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 48.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 21445.377 ops/s
[info]                  ·gc.alloc.rate:            1147.465 MB/sec
[info]                  ·gc.alloc.rate.norm:       84206.433 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 98849.395 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 22137.828 ops/s
[info]                  ·gc.alloc.rate:            1168.643 MB/sec
[info]                  ·gc.alloc.rate.norm:       83088.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47830.447 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 21983.310 ops/s
[info]                  ·gc.alloc.rate:                   1160.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              83103.982 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.857 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        96569.329 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 333.820 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 22136.786 ops/s
[info]                  ·gc.alloc.rate:                   1168.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              83088.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        96565.036 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 284.154 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   21892.212 ±(99.9%) 1132.805 ops/s [Average]
[info]   (min, avg, max) = (21445.377, 21892.212, 22137.828), stdev = 294.186
[info]   CI (99.9%): [20759.407, 23025.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1159.212 ±(99.9%) 38.367 MB/sec [Average]
[info]   (min, avg, max) = (1147.465, 1159.212, 1168.737), stdev = 9.964
[info]   CI (99.9%): [1120.845, 1197.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   83340.349 ±(99.9%) 1875.536 B/op [Average]
[info]   (min, avg, max) = (83088.018, 83340.349, 84206.433), stdev = 487.071
[info]   CI (99.9%): [81464.813, 85215.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1214.645 ±(99.9%) 1166.637 MB/sec [Average]
[info]   (min, avg, max) = (672.741, 1214.645, 1358.309), stdev = 302.972
[info]   CI (99.9%): [48.008, 2381.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   87439.631 ±(99.9%) 85337.255 B/op [Average]
[info]   (min, avg, max) = (47830.447, 87439.631, 98849.395), stdev = 22161.814
[info]   CI (99.9%): [2102.376, 172776.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 8.774 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 4.663), stdev = 2.278
[info]   CI (99.9%): [≈ 0, 10.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   133.232 ±(99.9%) 626.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 133.232, 333.820), stdev = 162.594
[info]   CI (99.9%): [≈ 0, 759.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   68.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 13.600, 18.000), stdev = 4.930
[info]   CI (99.9%): [68.000, 68.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.02% complete, ETA 01:24:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102300.759 ops/s
[info] # Warmup Iteration   2: 127647.567 ops/s
[info] # Warmup Iteration   3: 123775.205 ops/s
[info] # Warmup Iteration   4: 130631.044 ops/s
[info] # Warmup Iteration   5: 128070.415 ops/s
[info] Iteration   1: 127879.078 ops/s
[info]                  ·gc.alloc.rate:      282.790 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 126275.633 ops/s
[info]                  ·gc.alloc.rate:            280.919 MB/sec
[info]                  ·gc.alloc.rate.norm:       3500.369 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8402.291 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 130656.053 ops/s
[info]                  ·gc.alloc.rate:      288.911 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 130250.290 ops/s
[info]                  ·gc.alloc.rate:      288.101 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 124806.313 ops/s
[info]                  ·gc.alloc.rate:            275.975 MB/sec
[info]                  ·gc.alloc.rate.norm:       3480.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8501.037 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   127973.474 ±(99.9%) 9684.696 ops/s [Average]
[info]   (min, avg, max) = (124806.313, 127973.474, 130656.053), stdev = 2515.085
[info]   CI (99.9%): [118288.778, 137658.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   283.339 ±(99.9%) 20.568 MB/sec [Average]
[info]   (min, avg, max) = (275.975, 283.339, 288.911), stdev = 5.341
[info]   CI (99.9%): [262.772, 303.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3484.077 ±(99.9%) 35.071 B/op [Average]
[info]   (min, avg, max) = (3480.003, 3484.077, 3500.369), stdev = 9.108
[info]   CI (99.9%): [3449.006, 3519.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.695 ±(99.9%) 1422.025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.695, 674.319), stdev = 369.295
[info]   CI (99.9%): [≈ 0, 1691.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3380.666 ±(99.9%) 17825.780 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3380.666, 8501.037), stdev = 4629.299
[info]   CI (99.9%): [≈ 0, 21206.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 8.000), stdev = 4.123
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.25% complete, ETA 01:24:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109789.469 ops/s
[info] # Warmup Iteration   2: 134255.396 ops/s
[info] # Warmup Iteration   3: 137098.750 ops/s
[info] # Warmup Iteration   4: 137045.174 ops/s
[info] # Warmup Iteration   5: 137149.758 ops/s
[info] Iteration   1: 136505.238 ops/s
[info]                  ·gc.alloc.rate:      1.303 MB/sec
[info]                  ·gc.alloc.rate.norm: 15.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 136949.416 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 136875.117 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 136944.709 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 136970.396 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   136848.975 ±(99.9%) 752.687 ops/s [Average]
[info]   (min, avg, max) = (136505.238, 136848.975, 136970.396), stdev = 195.470
[info]   CI (99.9%): [136096.288, 137601.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.261 ±(99.9%) 2.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.261, 1.303), stdev = 0.582
[info]   CI (99.9%): [≈ 0, 2.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3.007 ±(99.9%) 25.860 B/op [Average]
[info]   (min, avg, max) = (0.003, 3.007, 15.020), stdev = 6.716
[info]   CI (99.9%): [≈ 0, 28.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 27.48% complete, ETA 01:24:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10634.282 ops/s
[info] # Warmup Iteration   2: 21099.688 ops/s
[info] # Warmup Iteration   3: 21437.704 ops/s
[info] # Warmup Iteration   4: 21713.879 ops/s
[info] # Warmup Iteration   5: 21471.038 ops/s
[info] Iteration   1: 21337.424 ops/s
[info]                  ·gc.alloc.rate:            1172.441 MB/sec
[info]                  ·gc.alloc.rate.norm:       86457.537 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.269 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 99349.640 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 21207.579 ops/s
[info]                  ·gc.alloc.rate:            1157.306 MB/sec
[info]                  ·gc.alloc.rate.norm:       85879.920 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 99958.544 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 21334.320 ops/s
[info]                  ·gc.alloc.rate:            1163.952 MB/sec
[info]                  ·gc.alloc.rate.norm:       85864.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.777 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49630.337 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 21115.838 ops/s
[info]                  ·gc.alloc.rate:                   1152.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              85885.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.162 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        100538.182 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 347.539 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 21289.125 ops/s
[info]                  ·gc.alloc.rate:                   1161.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              85876.536 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.216 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        100410.767 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 295.471 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   21256.857 ±(99.9%) 364.529 ops/s [Average]
[info]   (min, avg, max) = (21115.838, 21256.857, 21337.424), stdev = 94.667
[info]   CI (99.9%): [20892.329, 21621.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1161.568 ±(99.9%) 28.806 MB/sec [Average]
[info]   (min, avg, max) = (1152.525, 1161.568, 1172.441), stdev = 7.481
[info]   CI (99.9%): [1132.763, 1190.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85992.603 ±(99.9%) 1001.250 B/op [Average]
[info]   (min, avg, max) = (85864.019, 85992.603, 86457.537), stdev = 260.021
[info]   CI (99.9%): [84991.352, 86993.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1214.890 ±(99.9%) 1167.074 MB/sec [Average]
[info]   (min, avg, max) = (672.777, 1214.890, 1358.216), stdev = 303.085
[info]   CI (99.9%): [47.817, 2381.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   89977.494 ±(99.9%) 86868.788 B/op [Average]
[info]   (min, avg, max) = (49630.337, 89977.494, 100538.182), stdev = 22559.548
[info]   CI (99.9%): [3108.706, 176846.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.664), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   128.602 ±(99.9%) 681.776 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 128.602, 347.539), stdev = 177.055
[info]   CI (99.9%): [≈ 0, 810.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   67.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 13.400, 18.000), stdev = 5.550
[info]   CI (99.9%): [67.000, 67.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.71% complete, ETA 01:24:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64121.649 ops/s
[info] # Warmup Iteration   2: 111547.252 ops/s
[info] # Warmup Iteration   3: 113736.043 ops/s
[info] # Warmup Iteration   4: 113279.429 ops/s
[info] # Warmup Iteration   5: 113947.227 ops/s
[info] Iteration   1: 117397.941 ops/s
[info]                  ·gc.alloc.rate:            1514.449 MB/sec
[info]                  ·gc.alloc.rate.norm:       20304.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.885 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18057.494 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 116769.488 ops/s
[info]                  ·gc.alloc.rate:                   1507.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              20310.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18163.107 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 44.892 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 115507.084 ops/s
[info]                  ·gc.alloc.rate:                   1495.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              20371.227 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18525.853 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 63.538 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 115411.320 ops/s
[info]                  ·gc.alloc.rate:            1489.053 MB/sec
[info]                  ·gc.alloc.rate.norm:       20304.510 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.577 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27879.542 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 115669.845 ops/s
[info]                  ·gc.alloc.rate:                                  1492.461 MB/sec
[info]                  ·gc.alloc.rate.norm:                             20309.357 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.810 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18545.071 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   116151.136 ±(99.9%) 3406.598 ops/s [Average]
[info]   (min, avg, max) = (115411.320, 116151.136, 117397.941), stdev = 884.683
[info]   CI (99.9%): [112744.538, 119557.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1499.663 ±(99.9%) 41.245 MB/sec [Average]
[info]   (min, avg, max) = (1489.053, 1499.663, 1514.449), stdev = 10.711
[info]   CI (99.9%): [1458.418, 1540.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20319.831 ±(99.9%) 111.137 B/op [Average]
[info]   (min, avg, max) = (20304.003, 20319.831, 20371.227), stdev = 28.862
[info]   CI (99.9%): [20208.694, 20430.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1492.372 ±(99.9%) 1188.973 MB/sec [Average]
[info]   (min, avg, max) = (1346.885, 1492.372, 2044.577), stdev = 308.773
[info]   CI (99.9%): [303.398, 2681.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   20234.213 ±(99.9%) 16478.139 B/op [Average]
[info]   (min, avg, max) = (18057.494, 20234.213, 27879.542), stdev = 4279.320
[info]   CI (99.9%): [3756.074, 36712.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.624 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.664), stdev = 2.240
[info]   CI (99.9%): [≈ 0, 10.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   21.686 ±(99.9%) 117.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.686, 63.538), stdev = 30.418
[info]   CI (99.9%): [≈ 0, 138.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.800, 16.000), stdev = 6.140
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 27.94% complete, ETA 01:23:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.831 ops/s
[info] # Warmup Iteration   2: 485660.099 ops/s
[info] # Warmup Iteration   3: 515661.236 ops/s
[info] # Warmup Iteration   4: 490192.356 ops/s
[info] # Warmup Iteration   5: 517505.980 ops/s
[info] Iteration   1: 515490.031 ops/s
[info]                  ·gc.alloc.rate:            534.522 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2048.135 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 514195.901 ops/s
[info]                  ·gc.alloc.rate:            534.565 MB/sec
[info]                  ·gc.alloc.rate.norm:       1636.146 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.854 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2053.289 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 520000.258 ops/s
[info]                  ·gc.alloc.rate:      539.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 514520.913 ops/s
[info]                  ·gc.alloc.rate:            533.802 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.921 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.799 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2052.000 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 514128.360 ops/s
[info]                  ·gc.alloc.rate:            533.147 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.866 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2053.568 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   515667.093 ±(99.9%) 9559.666 ops/s [Average]
[info]   (min, avg, max) = (514128.360, 515667.093, 520000.258), stdev = 2482.615
[info]   CI (99.9%): [506107.427, 525226.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   535.041 ±(99.9%) 9.166 MB/sec [Average]
[info]   (min, avg, max) = (533.147, 535.041, 539.170), stdev = 2.380
[info]   CI (99.9%): [525.875, 544.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1633.014 ±(99.9%) 6.915 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1633.014, 1636.146), stdev = 1.796
[info]   CI (99.9%): [1626.099, 1639.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   536.667 ±(99.9%) 1155.216 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.667, 670.866), stdev = 300.006
[info]   CI (99.9%): [≈ 0, 1691.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1641.398 ±(99.9%) 3533.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1641.398, 2053.568), stdev = 917.572
[info]   CI (99.9%): [≈ 0, 5174.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 8.000, 11.000), stdev = 4.528
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.18% complete, ETA 01:23:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128266.194 ops/s
[info] # Warmup Iteration   2: 251223.180 ops/s
[info] # Warmup Iteration   3: 263464.106 ops/s
[info] # Warmup Iteration   4: 262549.149 ops/s
[info] # Warmup Iteration   5: 265502.772 ops/s
[info] Iteration   1: 263231.769 ops/s
[info]                  ·gc.alloc.rate:            365.266 MB/sec
[info]                  ·gc.alloc.rate.norm:       2184.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4026.658 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 265732.749 ops/s
[info]                  ·gc.alloc.rate:      368.828 MB/sec
[info]                  ·gc.alloc.rate.norm: 2184.390 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 262993.299 ops/s
[info]                  ·gc.alloc.rate:            365.161 MB/sec
[info]                  ·gc.alloc.rate.norm:       2185.369 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4030.225 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 265651.463 ops/s
[info]                  ·gc.alloc.rate:      368.916 MB/sec
[info]                  ·gc.alloc.rate.norm: 2185.387 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 252116.133 ops/s
[info]                  ·gc.alloc.rate:            358.371 MB/sec
[info]                  ·gc.alloc.rate.norm:       2236.647 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.614 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4204.118 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   261945.083 ±(99.9%) 21735.363 ops/s [Average]
[info]   (min, avg, max) = (252116.133, 261945.083, 265732.749), stdev = 5644.605
[info]   CI (99.9%): [240209.720, 283680.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   365.308 ±(99.9%) 16.511 MB/sec [Average]
[info]   (min, avg, max) = (358.371, 365.308, 368.916), stdev = 4.288
[info]   CI (99.9%): [348.797, 381.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2195.159 ±(99.9%) 89.337 B/op [Average]
[info]   (min, avg, max) = (2184.002, 2195.159, 2236.647), stdev = 23.201
[info]   CI (99.9%): [2105.822, 2284.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   404.096 ±(99.9%) 1420.455 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.096, 673.614), stdev = 368.888
[info]   CI (99.9%): [≈ 0, 1824.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2452.200 ±(99.9%) 8624.253 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2452.200, 4204.118), stdev = 2239.691
[info]   CI (99.9%): [≈ 0, 11076.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.400, 9.000), stdev = 4.930
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.41% complete, ETA 01:23:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 549725.044 ops/s
[info] # Warmup Iteration   2: 643027.755 ops/s
[info] # Warmup Iteration   3: 684576.250 ops/s
[info] # Warmup Iteration   4: 702087.749 ops/s
[info] # Warmup Iteration   5: 683708.485 ops/s
[info] Iteration   1: 701789.889 ops/s
[info]                  ·gc.alloc.rate:            457.038 MB/sec
[info]                  ·gc.alloc.rate.norm:       1025.093 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1511.909 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 707176.591 ops/s
[info]                  ·gc.alloc.rate:      460.116 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 702942.235 ops/s
[info]                  ·gc.alloc.rate:            457.415 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.238 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1509.395 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 676897.424 ops/s
[info]                  ·gc.alloc.rate:                   442.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              1029.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1567.371 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.549 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 686460.765 ops/s
[info]                  ·gc.alloc.rate:      446.766 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   695053.381 ±(99.9%) 49389.617 ops/s [Average]
[info]   (min, avg, max) = (676897.424, 695053.381, 707176.591), stdev = 12826.327
[info]   CI (99.9%): [645663.764, 744442.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   452.764 ±(99.9%) 29.551 MB/sec [Average]
[info]   (min, avg, max) = (442.485, 452.764, 460.116), stdev = 7.674
[info]   CI (99.9%): [423.213, 482.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1025.225 ±(99.9%) 8.388 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1025.225, 1029.028), stdev = 2.178
[info]   CI (99.9%): [1016.837, 1033.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.459 ±(99.9%) 1421.732 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.459, 674.238), stdev = 369.219
[info]   CI (99.9%): [≈ 0, 1826.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   917.735 ±(99.9%) 3227.202 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 917.735, 1567.371), stdev = 838.094
[info]   CI (99.9%): [≈ 0, 4144.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.310 ±(99.9%) 2.667 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.310, 1.549), stdev = 0.693
[info]   CI (99.9%): [≈ 0, 2.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 8.000), stdev = 4.037
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.64% complete, ETA 01:23:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16638.167 ops/s
[info] # Warmup Iteration   2: 52430.031 ops/s
[info] # Warmup Iteration   3: 51032.219 ops/s
[info] # Warmup Iteration   4: 52356.552 ops/s
[info] # Warmup Iteration   5: 52131.152 ops/s
[info] Iteration   1: 53202.884 ops/s
[info]                  ·gc.alloc.rate:                   2120.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              62740.186 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        60182.126 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 157.648 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 54684.840 ops/s
[info]                  ·gc.alloc.rate:                                  2180.998 MB/sec
[info]                  ·gc.alloc.rate.norm:                             62776.135 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.481 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.515 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78449.090 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 54075.325 ops/s
[info]                  ·gc.alloc.rate:            2156.078 MB/sec
[info]                  ·gc.alloc.rate.norm:       62751.437 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59500.411 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 54361.478 ops/s
[info]                  ·gc.alloc.rate:                                  2166.702 MB/sec
[info]                  ·gc.alloc.rate.norm:                             62737.397 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59186.341 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   5: 55342.431 ops/s
[info]                  ·gc.alloc.rate:            2206.842 MB/sec
[info]                  ·gc.alloc.rate.norm:       62745.850 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58137.404 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   54333.392 ±(99.9%) 3036.343 ops/s [Average]
[info]   (min, avg, max) = (53202.884, 54333.392, 55342.431), stdev = 788.529
[info]   CI (99.9%): [51297.048, 57369.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2166.273 ±(99.9%) 122.372 MB/sec [Average]
[info]   (min, avg, max) = (2120.743, 2166.273, 2206.842), stdev = 31.780
[info]   CI (99.9%): [2043.901, 2288.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   62750.201 ±(99.9%) 59.568 B/op [Average]
[info]   (min, avg, max) = (62737.397, 62750.201, 62776.135), stdev = 15.470
[info]   CI (99.9%): [62690.633, 62809.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.017), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.110 ±(99.9%) 0.807 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.110, 0.481), stdev = 0.210
[info]   CI (99.9%): [≈ 0, 0.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2178.597 ±(99.9%) 1177.404 MB/sec [Average]
[info]   (min, avg, max) = (2034.276, 2178.597, 2725.515), stdev = 305.768
[info]   CI (99.9%): [1001.194, 3356.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   63091.075 ±(99.9%) 33180.916 B/op [Average]
[info]   (min, avg, max) = (58137.404, 63091.075, 78449.090), stdev = 8616.979
[info]   CI (99.9%): [29910.158, 96271.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.329), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   31.530 ±(99.9%) 271.479 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.530, 157.648), stdev = 70.502
[info]   CI (99.9%): [≈ 0, 303.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 13.000), stdev = 3.962
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.87% complete, ETA 01:22:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88833.798 ops/s
[info] # Warmup Iteration   2: 168654.075 ops/s
[info] # Warmup Iteration   3: 171749.202 ops/s
[info] # Warmup Iteration   4: 171880.799 ops/s
[info] # Warmup Iteration   5: 170948.599 ops/s
[info] Iteration   1: 168538.914 ops/s
[info]                  ·gc.alloc.rate:            844.671 MB/sec
[info]                  ·gc.alloc.rate.norm:       7887.748 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.288 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12590.651 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 167992.689 ops/s
[info]                  ·gc.alloc.rate:            835.328 MB/sec
[info]                  ·gc.alloc.rate.norm:       7826.909 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6315.745 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 171698.215 ops/s
[info]                  ·gc.alloc.rate:                   852.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              7816.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6173.123 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.106 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 169604.232 ops/s
[info]                  ·gc.alloc.rate:            850.972 MB/sec
[info]                  ·gc.alloc.rate.norm:       7895.565 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.233 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6255.727 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 170263.397 ops/s
[info]                  ·gc.alloc.rate:                   846.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              7825.458 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12457.097 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.158 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   169619.489 ±(99.9%) 5629.739 ops/s [Average]
[info]   (min, avg, max) = (167992.689, 169619.489, 171698.215), stdev = 1462.025
[info]   CI (99.9%): [163989.750, 175249.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   846.036 ±(99.9%) 26.078 MB/sec [Average]
[info]   (min, avg, max) = (835.328, 846.036, 852.527), stdev = 6.772
[info]   CI (99.9%): [819.958, 872.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7850.337 ±(99.9%) 146.526 B/op [Average]
[info]   (min, avg, max) = (7816.003, 7850.337, 7895.565), stdev = 38.052
[info]   CI (99.9%): [7703.811, 7996.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   943.541 ±(99.9%) 1421.892 MB/sec [Average]
[info]   (min, avg, max) = (673.331, 943.541, 1348.288), stdev = 369.261
[info]   CI (99.9%): [≈ 0, 2365.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8758.468 ±(99.9%) 13238.615 B/op [Average]
[info]   (min, avg, max) = (6173.123, 8758.468, 12590.651), stdev = 3438.026
[info]   CI (99.9%): [≈ 0, 21997.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.453 ±(99.9%) 12.933 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.453, 6.158), stdev = 3.359
[info]   CI (99.9%): [≈ 0, 15.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 11.200, 17.000), stdev = 4.868
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 29.10% complete, ETA 01:22:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.867 ops/s
[info] # Warmup Iteration   2: 597722.699 ops/s
[info] # Warmup Iteration   3: 606466.704 ops/s
[info] # Warmup Iteration   4: 623603.874 ops/s
[info] # Warmup Iteration   5: 615377.223 ops/s
[info] Iteration   1: 622546.705 ops/s
[info]                  ·gc.alloc.rate:      339.216 MB/sec
[info]                  ·gc.alloc.rate.norm: 857.537 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 615999.736 ops/s
[info]                  ·gc.alloc.rate:            335.915 MB/sec
[info]                  ·gc.alloc.rate.norm:       858.238 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.805 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1713.854 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 619292.100 ops/s
[info]                  ·gc.alloc.rate:      339.196 MB/sec
[info]                  ·gc.alloc.rate.norm: 861.919 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 616847.220 ops/s
[info]                  ·gc.alloc.rate:            335.516 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.843 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1711.518 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 622937.588 ops/s
[info]                  ·gc.alloc.rate:      338.809 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   619524.670 ±(99.9%) 12241.882 ops/s [Average]
[info]   (min, avg, max) = (615999.736, 619524.670, 622937.588), stdev = 3179.178
[info]   CI (99.9%): [607282.787, 631766.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   337.730 ±(99.9%) 7.130 MB/sec [Average]
[info]   (min, avg, max) = (335.516, 337.730, 339.216), stdev = 1.852
[info]   CI (99.9%): [330.601, 344.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   857.939 ±(99.9%) 9.354 B/op [Average]
[info]   (min, avg, max) = (856.001, 857.939, 861.919), stdev = 2.429
[info]   CI (99.9%): [848.585, 867.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   268.330 ±(99.9%) 1414.825 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.330, 670.843), stdev = 367.425
[info]   CI (99.9%): [≈ 0, 1683.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   685.075 ±(99.9%) 3612.202 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 685.075, 1713.854), stdev = 938.077
[info]   CI (99.9%): [≈ 0, 4297.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 12.000), stdev = 6.309
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.33% complete, ETA 01:22:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 358422.903 ops/s
[info] # Warmup Iteration   2: 596743.497 ops/s
[info] # Warmup Iteration   3: 623331.898 ops/s
[info] # Warmup Iteration   4: 619964.959 ops/s
[info] # Warmup Iteration   5: 618130.625 ops/s
[info] Iteration   1: 613500.634 ops/s
[info]                  ·gc.alloc.rate:            485.022 MB/sec
[info]                  ·gc.alloc.rate.norm:       1244.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.576 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1727.676 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 621445.776 ops/s
[info]                  ·gc.alloc.rate:      490.034 MB/sec
[info]                  ·gc.alloc.rate.norm: 1240.852 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 615356.059 ops/s
[info]                  ·gc.alloc.rate:            484.760 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1722.477 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 592544.116 ops/s
[info]                  ·gc.alloc.rate:            475.001 MB/sec
[info]                  ·gc.alloc.rate.norm:       1261.423 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.596 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1788.817 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 615039.925 ops/s
[info]                  ·gc.alloc.rate:            484.644 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.565 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1723.370 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   611577.302 ±(99.9%) 42602.155 ops/s [Average]
[info]   (min, avg, max) = (592544.116, 611577.302, 621445.776), stdev = 11063.644
[info]   CI (99.9%): [568975.147, 654179.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   483.892 ±(99.9%) 21.035 MB/sec [Average]
[info]   (min, avg, max) = (475.001, 483.892, 490.034), stdev = 5.463
[info]   CI (99.9%): [462.857, 504.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1245.265 ±(99.9%) 35.369 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1245.265, 1261.423), stdev = 9.185
[info]   CI (99.9%): [1209.897, 1280.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.823 ±(99.9%) 1159.857 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.823, 673.596), stdev = 301.211
[info]   CI (99.9%): [≈ 0, 1698.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1392.468 ±(99.9%) 2999.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1392.468, 1788.817), stdev = 778.914
[info]   CI (99.9%): [≈ 0, 4391.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.200, 9.000), stdev = 4.025
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.56% complete, ETA 01:22:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 757026.822 ops/s
[info] # Warmup Iteration   2: 892095.995 ops/s
[info] # Warmup Iteration   3: 993060.432 ops/s
[info] # Warmup Iteration   4: 991198.063 ops/s
[info] # Warmup Iteration   5: 1001370.047 ops/s
[info] Iteration   1: 983833.425 ops/s
[info]                  ·gc.alloc.rate:            535.125 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.166 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1078.415 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 958231.573 ops/s
[info]                  ·gc.alloc.rate:            524.972 MB/sec
[info]                  ·gc.alloc.rate.norm:       862.396 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1107.200 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 986289.505 ops/s
[info]                  ·gc.alloc.rate:            537.884 MB/sec
[info]                  ·gc.alloc.rate.norm:       858.434 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1075.713 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 987321.296 ops/s
[info]                  ·gc.alloc.rate:            538.222 MB/sec
[info]                  ·gc.alloc.rate.norm:       857.934 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.151 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1074.607 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 998906.479 ops/s
[info]                  ·gc.alloc.rate:      543.423 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   982916.455 ±(99.9%) 57651.908 ops/s [Average]
[info]   (min, avg, max) = (958231.573, 982916.455, 998906.479), stdev = 14972.017
[info]   CI (99.9%): [925264.548, 1040568.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   535.925 ±(99.9%) 26.253 MB/sec [Average]
[info]   (min, avg, max) = (524.972, 535.925, 543.423), stdev = 6.818
[info]   CI (99.9%): [509.672, 562.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   858.153 ±(99.9%) 10.078 B/op [Average]
[info]   (min, avg, max) = (856.000, 858.153, 862.396), stdev = 2.617
[info]   CI (99.9%): [848.075, 868.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.268 ±(99.9%) 1160.814 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.268, 674.166), stdev = 301.460
[info]   CI (99.9%): [≈ 0, 1700.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   867.187 ±(99.9%) 1867.406 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 867.187, 1107.200), stdev = 484.959
[info]   CI (99.9%): [≈ 0, 2734.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.000, 8.000), stdev = 3.391
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 29.79% complete, ETA 01:21:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 810233.653 ops/s
[info] # Warmup Iteration   2: 1015627.608 ops/s
[info] # Warmup Iteration   3: 1056469.084 ops/s
[info] # Warmup Iteration   4: 1055954.404 ops/s
[info] # Warmup Iteration   5: 1044743.182 ops/s
[info] Iteration   1: 1058011.937 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1057130.993 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1054070.163 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1056982.262 ops/s
[info]                  ·gc.alloc.rate:      0.100 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.149 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1051379.284 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1055514.928 ±(99.9%) 10578.885 ops/s [Average]
[info]   (min, avg, max) = (1051379.284, 1055514.928, 1058011.937), stdev = 2747.303
[info]   CI (99.9%): [1044936.042, 1066093.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.020 ±(99.9%) 0.172 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.020, 0.100), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.030 ±(99.9%) 0.257 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.030, 0.149), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.02% complete, ETA 01:21:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12636.891 ops/s
[info] # Warmup Iteration   2: 30779.995 ops/s
[info] # Warmup Iteration   3: 31055.074 ops/s
[info] # Warmup Iteration   4: 31976.623 ops/s
[info] # Warmup Iteration   5: 31863.708 ops/s
[info] Iteration   1: 32022.117 ops/s
[info]                  ·gc.alloc.rate:            1618.667 MB/sec
[info]                  ·gc.alloc.rate.norm:       79528.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2021.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 99298.458 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  27.000 ms
[info] Iteration   2: 32470.802 ops/s
[info]                  ·gc.alloc.rate:                   1641.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              79534.857 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        65380.620 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 226.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 32476.432 ops/s
[info]                  ·gc.alloc.rate:                                  1645.280 MB/sec
[info]                  ·gc.alloc.rate.norm:                             79741.377 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.090 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.354 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2039.475 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       98846.737 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                193.691 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 32697.935 ops/s
[info]                  ·gc.alloc.rate:                                  1654.073 MB/sec
[info]                  ·gc.alloc.rate.norm:                             79622.235 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.488 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65600.125 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 32609.443 ops/s
[info]                  ·gc.alloc.rate:            1648.005 MB/sec
[info]                  ·gc.alloc.rate.norm:       79528.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 98671.728 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   32455.346 ±(99.9%) 1002.214 ops/s [Average]
[info]   (min, avg, max) = (32022.117, 32455.346, 32697.935), stdev = 260.272
[info]   CI (99.9%): [31453.131, 33457.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1641.412 ±(99.9%) 52.240 MB/sec [Average]
[info]   (min, avg, max) = (1618.667, 1641.412, 1654.073), stdev = 13.567
[info]   CI (99.9%): [1589.172, 1693.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   79590.899 ±(99.9%) 358.519 B/op [Average]
[info]   (min, avg, max) = (79528.013, 79590.899, 79741.377), stdev = 93.106
[info]   CI (99.9%): [79232.380, 79949.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.151 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.090), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.968 ±(99.9%) 7.334 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.968, 4.354), stdev = 1.905
[info]   CI (99.9%): [≈ 0, 8.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1763.403 ±(99.9%) 1433.004 MB/sec [Average]
[info]   (min, avg, max) = (1348.993, 1763.403, 2044.707), stdev = 372.147
[info]   CI (99.9%): [330.399, 3196.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   85559.534 ±(99.9%) 70552.056 B/op [Average]
[info]   (min, avg, max) = (65380.620, 85559.534, 99298.458), stdev = 18322.145
[info]   CI (99.9%): [15007.477, 156111.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   83.940 ±(99.9%) 444.770 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 83.940, 226.007), stdev = 115.505
[info]   CI (99.9%): [≈ 0, 528.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   65.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 13.000, 27.000), stdev = 8.972
[info]   CI (99.9%): [65.000, 65.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.25% complete, ETA 01:21:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46079.781 ops/s
[info] # Warmup Iteration   2: 109281.033 ops/s
[info] # Warmup Iteration   3: 115905.815 ops/s
[info] # Warmup Iteration   4: 117145.807 ops/s
[info] # Warmup Iteration   5: 117544.110 ops/s
[info] Iteration   1: 119048.494 ops/s
[info]                  ·gc.alloc.rate:            1313.110 MB/sec
[info]                  ·gc.alloc.rate.norm:       17362.630 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17816.061 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 119477.809 ops/s
[info]                  ·gc.alloc.rate:            1318.670 MB/sec
[info]                  ·gc.alloc.rate.norm:       17372.623 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17743.175 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   3: 120422.031 ops/s
[info]                  ·gc.alloc.rate:                   1328.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              17367.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.225 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17647.196 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 60.942 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 121506.302 ops/s
[info]                  ·gc.alloc.rate:                   1340.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.772 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17601.954 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 43.142 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 121899.383 ops/s
[info]                  ·gc.alloc.rate:                                  1344.425 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17360.622 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.282 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17596.530 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   120470.804 ±(99.9%) 4764.724 ops/s [Average]
[info]   (min, avg, max) = (119048.494, 120470.804, 121899.383), stdev = 1237.384
[info]   CI (99.9%): [115706.079, 125235.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1329.019 ±(99.9%) 51.671 MB/sec [Average]
[info]   (min, avg, max) = (1313.110, 1329.019, 1344.425), stdev = 13.419
[info]   CI (99.9%): [1277.347, 1380.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   17364.593 ±(99.9%) 20.320 B/op [Average]
[info]   (min, avg, max) = (17360.003, 17364.593, 17372.623), stdev = 5.277
[info]   CI (99.9%): [17344.273, 17384.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.038 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.056 ±(99.9%) 0.486 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.282), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1353.178 ±(99.9%) 27.542 MB/sec [Average]
[info]   (min, avg, max) = (1346.797, 1353.178, 1362.694), stdev = 7.153
[info]   CI (99.9%): [1325.636, 1380.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   17680.983 ±(99.9%) 368.503 B/op [Average]
[info]   (min, avg, max) = (17596.530, 17680.983, 17816.061), stdev = 95.699
[info]   CI (99.9%): [17312.480, 18049.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.663), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   20.817 ±(99.9%) 112.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.817, 60.942), stdev = 29.191
[info]   CI (99.9%): [≈ 0, 133.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 11.400, 17.000), stdev = 6.427
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.48% complete, ETA 01:20:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50954.094 ops/s
[info] # Warmup Iteration   2: 134035.005 ops/s
[info] # Warmup Iteration   3: 140869.192 ops/s
[info] # Warmup Iteration   4: 144926.496 ops/s
[info] # Warmup Iteration   5: 143328.900 ops/s
[info] Iteration   1: 144654.063 ops/s
[info]                  ·gc.alloc.rate:            765.312 MB/sec
[info]                  ·gc.alloc.rate.norm:       8328.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7320.282 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 144816.167 ops/s
[info]                  ·gc.alloc.rate:                   766.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7312.044 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.240 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 145321.501 ops/s
[info]                  ·gc.alloc.rate:            768.967 MB/sec
[info]                  ·gc.alloc.rate.norm:       8329.145 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7293.802 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 145016.059 ops/s
[info]                  ·gc.alloc.rate:            767.247 MB/sec
[info]                  ·gc.alloc.rate.norm:       8328.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7309.140 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 144779.781 ops/s
[info]                  ·gc.alloc.rate:            766.168 MB/sec
[info]                  ·gc.alloc.rate.norm:       8328.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.831 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7313.457 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   144917.514 ±(99.9%) 1003.322 ops/s [Average]
[info]   (min, avg, max) = (144654.063, 144917.514, 145321.501), stdev = 260.559
[info]   CI (99.9%): [143914.193, 145920.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   766.779 ±(99.9%) 5.399 MB/sec [Average]
[info]   (min, avg, max) = (765.312, 766.779, 768.967), stdev = 1.402
[info]   CI (99.9%): [761.379, 772.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8328.231 ±(99.9%) 1.967 B/op [Average]
[info]   (min, avg, max) = (8328.003, 8328.231, 8329.145), stdev = 0.511
[info]   CI (99.9%): [8326.264, 8330.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   673.006 ±(99.9%) 1.331 MB/sec [Average]
[info]   (min, avg, max) = (672.706, 673.006, 673.382), stdev = 0.346
[info]   CI (99.9%): [671.675, 674.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7309.745 ±(99.9%) 37.760 B/op [Average]
[info]   (min, avg, max) = (7293.802, 7309.745, 7320.282), stdev = 9.806
[info]   CI (99.9%): [7271.985, 7347.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.448 ±(99.9%) 12.467 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.448, 7.240), stdev = 3.238
[info]   CI (99.9%): [≈ 0, 13.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.72% complete, ETA 01:20:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134889.801 ops/s
[info] # Warmup Iteration   2: 187056.090 ops/s
[info] # Warmup Iteration   3: 188271.236 ops/s
[info] # Warmup Iteration   4: 193613.974 ops/s
[info] # Warmup Iteration   5: 192351.359 ops/s
[info] Iteration   1: 193491.645 ops/s
[info]                  ·gc.alloc.rate:            881.396 MB/sec
[info]                  ·gc.alloc.rate.norm:       7169.819 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.100 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5483.544 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 193682.491 ops/s
[info]                  ·gc.alloc.rate:            882.122 MB/sec
[info]                  ·gc.alloc.rate.norm:       7168.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.153 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5478.080 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 183544.337 ops/s
[info]                  ·gc.alloc.rate:            843.127 MB/sec
[info]                  ·gc.alloc.rate.norm:       7230.783 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11561.228 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   4: 191804.105 ops/s
[info]                  ·gc.alloc.rate:            873.622 MB/sec
[info]                  ·gc.alloc.rate.norm:       7168.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.176 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5531.565 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 193614.261 ops/s
[info]                  ·gc.alloc.rate:            881.875 MB/sec
[info]                  ·gc.alloc.rate.norm:       7168.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.201 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5480.004 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   191227.368 ±(99.9%) 16808.118 ops/s [Average]
[info]   (min, avg, max) = (183544.337, 191227.368, 193682.491), stdev = 4365.015
[info]   CI (99.9%): [174419.250, 208035.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   872.428 ±(99.9%) 64.537 MB/sec [Average]
[info]   (min, avg, max) = (843.127, 872.428, 882.122), stdev = 16.760
[info]   CI (99.9%): [807.891, 936.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   7180.922 ±(99.9%) 107.373 B/op [Average]
[info]   (min, avg, max) = (7168.002, 7180.922, 7230.783), stdev = 27.885
[info]   CI (99.9%): [7073.548, 7288.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.940 ±(99.9%) 1160.513 MB/sec [Average]
[info]   (min, avg, max) = (674.100, 808.940, 1348.068), stdev = 301.382
[info]   CI (99.9%): [≈ 0, 1969.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   6706.884 ±(99.9%) 10449.691 B/op [Average]
[info]   (min, avg, max) = (5478.080, 6706.884, 11561.228), stdev = 2713.752
[info]   CI (99.9%): [≈ 0, 17156.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.800, 15.000), stdev = 3.493
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.95% complete, ETA 01:20:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9987.263 ops/s
[info] # Warmup Iteration   2: 47488.615 ops/s
[info] # Warmup Iteration   3: 46697.875 ops/s
[info] # Warmup Iteration   4: 49626.326 ops/s
[info] # Warmup Iteration   5: 50103.326 ops/s
[info] Iteration   1: 51175.182 ops/s
[info]                  ·gc.alloc.rate:                   1958.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              60224.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.926 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        41484.964 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 122.918 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 51224.650 ops/s
[info]                  ·gc.alloc.rate:                                  1960.764 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60235.381 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.114 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62628.434 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                143.268 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 50683.616 ops/s
[info]                  ·gc.alloc.rate:                                  1939.552 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60226.539 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.143 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63482.990 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 50032.500 ops/s
[info]                  ·gc.alloc.rate:            1914.060 MB/sec
[info]                  ·gc.alloc.rate.norm:       60224.123 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2043.882 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64308.862 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 49784.210 ops/s
[info]                  ·gc.alloc.rate:                                  1905.660 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60225.850 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64629.160 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   50580.032 ±(99.9%) 2520.327 ops/s [Average]
[info]   (min, avg, max) = (49784.210, 50580.032, 51224.650), stdev = 654.521
[info]   CI (99.9%): [48059.705, 53100.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1935.656 ±(99.9%) 96.689 MB/sec [Average]
[info]   (min, avg, max) = (1905.660, 1935.656, 1960.764), stdev = 25.110
[info]   CI (99.9%): [1838.967, 2032.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   60227.180 ±(99.9%) 18.148 B/op [Average]
[info]   (min, avg, max) = (60224.009, 60227.180, 60235.381), stdev = 4.713
[info]   CI (99.9%): [60209.033, 60245.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.071 ±(99.9%) 0.257 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.143), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1904.177 ±(99.9%) 1195.259 MB/sec [Average]
[info]   (min, avg, max) = (1348.926, 1904.177, 2044.989), stdev = 310.405
[info]   CI (99.9%): [708.918, 3099.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   59306.882 ±(99.9%) 38479.465 B/op [Average]
[info]   (min, avg, max) = (41484.964, 59306.882, 64629.160), stdev = 9992.995
[info]   CI (99.9%): [20827.417, 97786.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.664), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   53.237 ±(99.9%) 282.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.237, 143.268), stdev = 73.252
[info]   CI (99.9%): [≈ 0, 335.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 16.000), stdev = 5.273
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.18% complete, ETA 01:20:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77768.802 ops/s
[info] # Warmup Iteration   2: 158691.823 ops/s
[info] # Warmup Iteration   3: 161143.099 ops/s
[info] # Warmup Iteration   4: 162421.962 ops/s
[info] # Warmup Iteration   5: 162281.840 ops/s
[info] Iteration   1: 162974.129 ops/s
[info]                  ·gc.alloc.rate:            566.694 MB/sec
[info]                  ·gc.alloc.rate.norm:       5471.975 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.551 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6503.784 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 163412.025 ops/s
[info]                  ·gc.alloc.rate:            565.641 MB/sec
[info]                  ·gc.alloc.rate.norm:       5448.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6486.394 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 163307.858 ops/s
[info]                  ·gc.alloc.rate:                   565.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.547 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6490.683 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.420 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 162779.049 ops/s
[info]                  ·gc.alloc.rate:            563.585 MB/sec
[info]                  ·gc.alloc.rate.norm:       5448.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6518.215 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 163650.518 ops/s
[info]                  ·gc.alloc.rate:            566.791 MB/sec
[info]                  ·gc.alloc.rate.norm:       5449.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6477.160 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   163224.716 ±(99.9%) 1340.441 ops/s [Average]
[info]   (min, avg, max) = (162779.049, 163224.716, 163650.518), stdev = 348.108
[info]   CI (99.9%): [161884.274, 164565.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   565.611 ±(99.9%) 4.999 MB/sec [Average]
[info]   (min, avg, max) = (563.585, 565.611, 566.791), stdev = 1.298
[info]   CI (99.9%): [560.612, 570.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5453.000 ±(99.9%) 40.879 B/op [Average]
[info]   (min, avg, max) = (5448.002, 5453.000, 5471.975), stdev = 10.616
[info]   CI (99.9%): [5412.121, 5493.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   673.716 ±(99.9%) 1.308 MB/sec [Average]
[info]   (min, avg, max) = (673.452, 673.716, 674.296), stdev = 0.340
[info]   CI (99.9%): [672.408, 675.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6495.247 ±(99.9%) 61.693 B/op [Average]
[info]   (min, avg, max) = (6477.160, 6495.247, 6518.215), stdev = 16.021
[info]   CI (99.9%): [6433.554, 6556.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.284 ±(99.9%) 11.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.284, 6.420), stdev = 2.871
[info]   CI (99.9%): [≈ 0, 12.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.41% complete, ETA 01:19:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 334851.296 ops/s
[info] # Warmup Iteration   2: 660351.368 ops/s
[info] # Warmup Iteration   3: 669610.902 ops/s
[info] # Warmup Iteration   4: 670050.607 ops/s
[info] # Warmup Iteration   5: 675863.792 ops/s
[info] Iteration   1: 669152.896 ops/s
[info]                  ·gc.alloc.rate:                   678.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              1595.463 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.868 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1582.472 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.567 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 675732.540 ops/s
[info]                  ·gc.alloc.rate:            683.489 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.438 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1568.589 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 681818.883 ops/s
[info]                  ·gc.alloc.rate:            689.677 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1553.034 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 682069.117 ops/s
[info]                  ·gc.alloc.rate:                   690.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1552.483 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.537 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 675066.422 ops/s
[info]                  ·gc.alloc.rate:            682.876 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1570.164 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   676767.972 ±(99.9%) 20697.938 ops/s [Average]
[info]   (min, avg, max) = (669152.896, 676767.972, 682069.117), stdev = 5375.189
[info]   CI (99.9%): [656070.034, 697465.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   684.902 ±(99.9%) 19.065 MB/sec [Average]
[info]   (min, avg, max) = (678.391, 684.902, 690.075), stdev = 4.951
[info]   CI (99.9%): [665.837, 703.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.693 ±(99.9%) 5.962 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.693, 1595.463), stdev = 1.548
[info]   CI (99.9%): [1586.731, 1598.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   673.111 ±(99.9%) 1.293 MB/sec [Average]
[info]   (min, avg, max) = (672.796, 673.111, 673.509), stdev = 0.336
[info]   CI (99.9%): [671.818, 674.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1565.348 ±(99.9%) 48.863 B/op [Average]
[info]   (min, avg, max) = (1552.483, 1565.348, 1582.472), stdev = 12.690
[info]   CI (99.9%): [1516.485, 1614.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.621 ±(99.9%) 3.273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.621, 1.567), stdev = 0.850
[info]   CI (99.9%): [≈ 0, 3.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.64% complete, ETA 01:19:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 490899.460 ops/s
[info] # Warmup Iteration   2: 637001.225 ops/s
[info] # Warmup Iteration   3: 623035.191 ops/s
[info] # Warmup Iteration   4: 627884.651 ops/s
[info] # Warmup Iteration   5: 618165.188 ops/s
[info] Iteration   1: 623965.482 ops/s
[info]                  ·gc.alloc.rate:            479.068 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1700.474 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 622647.445 ops/s
[info]                  ·gc.alloc.rate:            479.623 MB/sec
[info]                  ·gc.alloc.rate.norm:       1212.453 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.100 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1704.079 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 630286.617 ops/s
[info]                  ·gc.alloc.rate:      483.835 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 607110.718 ops/s
[info]                  ·gc.alloc.rate:            469.637 MB/sec
[info]                  ·gc.alloc.rate.norm:       1217.364 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.214 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1747.655 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 615224.708 ops/s
[info]                  ·gc.alloc.rate:            472.371 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1724.646 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   619846.994 ±(99.9%) 34299.299 ops/s [Average]
[info]   (min, avg, max) = (607110.718, 619846.994, 630286.617), stdev = 8907.419
[info]   CI (99.9%): [585547.695, 654146.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   476.907 ±(99.9%) 22.243 MB/sec [Average]
[info]   (min, avg, max) = (469.637, 476.907, 483.835), stdev = 5.776
[info]   CI (99.9%): [454.664, 499.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1210.782 ±(99.9%) 15.973 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1210.782, 1217.364), stdev = 4.148
[info]   CI (99.9%): [1194.809, 1226.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.407 ±(99.9%) 1161.114 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.407, 674.398), stdev = 301.538
[info]   CI (99.9%): [≈ 0, 1700.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1375.371 ±(99.9%) 2961.477 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1375.371, 1747.655), stdev = 769.086
[info]   CI (99.9%): [≈ 0, 4336.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.200, 8.000), stdev = 3.493
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 31.87% complete, ETA 01:19:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 531212.677 ops/s
[info] # Warmup Iteration   2: 681536.149 ops/s
[info] # Warmup Iteration   3: 699627.525 ops/s
[info] # Warmup Iteration   4: 701199.026 ops/s
[info] # Warmup Iteration   5: 691995.166 ops/s
[info] Iteration   1: 701665.857 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 695145.459 ops/s
[info]                  ·gc.alloc.rate:      2.051 MB/sec
[info]                  ·gc.alloc.rate.norm: 4.645 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 694856.817 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 696656.514 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 696570.780 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   696979.086 ±(99.9%) 10563.475 ops/s [Average]
[info]   (min, avg, max) = (694856.817, 696979.086, 701665.857), stdev = 2743.301
[info]   CI (99.9%): [686415.610, 707542.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.411 ±(99.9%) 3.532 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.411, 2.051), stdev = 0.917
[info]   CI (99.9%): [≈ 0, 3.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.930 ±(99.9%) 7.998 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.930, 4.645), stdev = 2.077
[info]   CI (99.9%): [≈ 0, 8.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.10% complete, ETA 01:19:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85975.146 ops/s
[info] # Warmup Iteration   2: 295027.930 ops/s
[info] # Warmup Iteration   3: 306512.373 ops/s
[info] # Warmup Iteration   4: 310000.853 ops/s
[info] # Warmup Iteration   5: 311075.960 ops/s
[info] Iteration   1: 311035.578 ops/s
[info]                  ·gc.alloc.rate:            848.906 MB/sec
[info]                  ·gc.alloc.rate.norm:       4296.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3404.369 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 307661.360 ops/s
[info]                  ·gc.alloc.rate:            839.851 MB/sec
[info]                  ·gc.alloc.rate.norm:       4296.359 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.581 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6883.483 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 310166.747 ops/s
[info]                  ·gc.alloc.rate:            853.203 MB/sec
[info]                  ·gc.alloc.rate.norm:       4329.185 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.836 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3413.994 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 308299.058 ops/s
[info]                  ·gc.alloc.rate:            843.455 MB/sec
[info]                  ·gc.alloc.rate.norm:       4304.619 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3434.598 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 309223.103 ops/s
[info]                  ·gc.alloc.rate:            844.020 MB/sec
[info]                  ·gc.alloc.rate.norm:       4296.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.767 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3424.337 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   309277.169 ±(99.9%) 5256.451 ops/s [Average]
[info]   (min, avg, max) = (307661.360, 309277.169, 311035.578), stdev = 1365.084
[info]   CI (99.9%): [304020.718, 314533.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   845.887 ±(99.9%) 20.053 MB/sec [Average]
[info]   (min, avg, max) = (839.851, 845.887, 853.203), stdev = 5.208
[info]   CI (99.9%): [825.834, 865.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4304.433 ±(99.9%) 55.135 B/op [Average]
[info]   (min, avg, max) = (4296.001, 4304.433, 4329.185), stdev = 14.318
[info]   CI (99.9%): [4249.298, 4359.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   807.376 ±(99.9%) 1158.525 MB/sec [Average]
[info]   (min, avg, max) = (672.716, 807.376, 1345.581), stdev = 300.865
[info]   CI (99.9%): [≈ 0, 1965.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4112.156 ±(99.9%) 5965.649 B/op [Average]
[info]   (min, avg, max) = (3404.369, 4112.156, 6883.483), stdev = 1549.260
[info]   CI (99.9%): [≈ 0, 10077.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.400, 19.000), stdev = 4.278
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.33% complete, ETA 01:18:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2783.416 ops/s
[info] # Warmup Iteration   2: 8174.444 ops/s
[info] # Warmup Iteration   3: 8679.617 ops/s
[info] # Warmup Iteration   4: 8258.688 ops/s
[info] # Warmup Iteration   5: 8259.721 ops/s
[info] Iteration   1: 8601.344 ops/s
[info]                  ·gc.alloc.rate:            1161.566 MB/sec
[info]                  ·gc.alloc.rate.norm:       212488.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.613 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 123225.658 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 8629.434 ops/s
[info]                  ·gc.alloc.rate:                   1164.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              212488.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.458 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        245773.288 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 121.490 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 8606.151 ops/s
[info]                  ·gc.alloc.rate:            1166.289 MB/sec
[info]                  ·gc.alloc.rate.norm:       213293.562 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 246308.164 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   4: 8413.117 ops/s
[info]                  ·gc.alloc.rate:                   1137.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              212736.150 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        252580.339 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 872.256 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 8572.266 ops/s
[info]                  ·gc.alloc.rate:                   1160.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              213006.630 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        124484.008 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 489.132 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   8564.462 ±(99.9%) 335.061 ops/s [Average]
[info]   (min, avg, max) = (8413.117, 8564.462, 8629.434), stdev = 87.014
[info]   CI (99.9%): [8229.402, 8899.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1158.006 ±(99.9%) 45.998 MB/sec [Average]
[info]   (min, avg, max) = (1137.110, 1158.006, 1166.289), stdev = 11.946
[info]   CI (99.9%): [1112.008, 1204.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   212802.490 ±(99.9%) 1340.786 B/op [Average]
[info]   (min, avg, max) = (212488.047, 212802.490, 213293.562), stdev = 348.198
[info]   CI (99.9%): [211461.703, 214143.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1079.188 ±(99.9%) 1418.009 MB/sec [Average]
[info]   (min, avg, max) = (673.613, 1079.188, 1350.084), stdev = 368.253
[info]   CI (99.9%): [≈ 0, 2497.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   198474.291 ±(99.9%) 262505.895 B/op [Average]
[info]   (min, avg, max) = (123225.658, 198474.291, 252580.339), stdev = 68171.947
[info]   CI (99.9%): [≈ 0, 460980.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.598 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.598, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 9.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   296.575 ±(99.9%) 1460.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 296.575, 872.256), stdev = 379.162
[info]   CI (99.9%): [≈ 0, 1756.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   58.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 11.600, 17.000), stdev = 5.505
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.56% complete, ETA 01:18:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2492.613 ops/s
[info] # Warmup Iteration   2: 6827.912 ops/s
[info] # Warmup Iteration   3: 7538.053 ops/s
[info] # Warmup Iteration   4: 7519.214 ops/s
[info] # Warmup Iteration   5: 7472.503 ops/s
[info] Iteration   1: 7567.646 ops/s
[info]                  ·gc.alloc.rate:            970.292 MB/sec
[info]                  ·gc.alloc.rate.norm:       201805.915 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 139920.962 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 7420.714 ops/s
[info]                  ·gc.alloc.rate:            951.868 MB/sec
[info]                  ·gc.alloc.rate.norm:       201851.243 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 285384.468 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 7463.531 ops/s
[info]                  ·gc.alloc.rate:                   956.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              201792.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        141870.296 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 140.466 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 7310.455 ops/s
[info]                  ·gc.alloc.rate:            937.447 MB/sec
[info]                  ·gc.alloc.rate.norm:       201815.159 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 289781.498 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   5: 7554.693 ops/s
[info]                  ·gc.alloc.rate:                   968.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              201843.453 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        140161.694 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 693.870 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   7463.408 ±(99.9%) 405.763 ops/s [Average]
[info]   (min, avg, max) = (7310.455, 7463.408, 7567.646), stdev = 105.375
[info]   CI (99.9%): [7057.645, 7869.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   957.044 ±(99.9%) 51.790 MB/sec [Average]
[info]   (min, avg, max) = (937.447, 957.044, 970.292), stdev = 13.450
[info]   CI (99.9%): [905.254, 1008.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   201821.565 ±(99.9%) 96.587 B/op [Average]
[info]   (min, avg, max) = (201792.055, 201821.565, 201851.243), stdev = 25.083
[info]   CI (99.9%): [201724.978, 201918.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   942.004 ±(99.9%) 1419.823 MB/sec [Average]
[info]   (min, avg, max) = (672.713, 942.004, 1346.057), stdev = 368.724
[info]   CI (99.9%): [≈ 0, 2361.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   199423.784 ±(99.9%) 309963.328 B/op [Average]
[info]   (min, avg, max) = (139920.962, 199423.784, 289781.498), stdev = 80496.492
[info]   CI (99.9%): [≈ 0, 509387.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   166.867 ±(99.9%) 1158.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 166.867, 693.870), stdev = 300.817
[info]   CI (99.9%): [≈ 0, 1325.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   66.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.200, 19.000), stdev = 5.310
[info]   CI (99.9%): [66.000, 66.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.79% complete, ETA 01:18:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 170545.637 ops/s
[info] # Warmup Iteration   2: 225623.596 ops/s
[info] # Warmup Iteration   3: 239471.589 ops/s
[info] # Warmup Iteration   4: 247264.033 ops/s
[info] # Warmup Iteration   5: 239298.936 ops/s
[info] Iteration   1: 245455.419 ops/s
[info]                  ·gc.alloc.rate:                   1596.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.221 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8645.231 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.271 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 246001.902 ops/s
[info]                  ·gc.alloc.rate:                   1600.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              10242.271 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1352.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8651.371 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.571 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 248916.313 ops/s
[info]                  ·gc.alloc.rate:                                  1620.377 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10245.546 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.358 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12909.348 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                16.847 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 248029.159 ops/s
[info]                  ·gc.alloc.rate:            1615.701 MB/sec
[info]                  ·gc.alloc.rate.norm:       10251.824 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8648.241 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 249632.176 ops/s
[info]                  ·gc.alloc.rate:            1624.290 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.940 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8592.372 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   247606.994 ±(99.9%) 6994.909 ops/s [Average]
[info]   (min, avg, max) = (245455.419, 247606.994, 249632.176), stdev = 1816.556
[info]   CI (99.9%): [240612.084, 254601.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1611.658 ±(99.9%) 46.476 MB/sec [Average]
[info]   (min, avg, max) = (1596.925, 1611.658, 1624.290), stdev = 12.070
[info]   CI (99.9%): [1565.182, 1658.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10243.929 ±(99.9%) 19.112 B/op [Average]
[info]   (min, avg, max) = (10240.002, 10243.929, 10251.824), stdev = 4.963
[info]   CI (99.9%): [10224.817, 10263.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.072 ±(99.9%) 0.616 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.072, 0.358), stdev = 0.160
[info]   CI (99.9%): [≈ 0, 0.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1493.624 ±(99.9%) 1179.973 MB/sec [Average]
[info]   (min, avg, max) = (1348.221, 1493.624, 2041.669), stdev = 306.435
[info]   CI (99.9%): [313.651, 2673.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   9489.313 ±(99.9%) 7362.478 B/op [Average]
[info]   (min, avg, max) = (8592.372, 9489.313, 12909.348), stdev = 1912.012
[info]   CI (99.9%): [2126.834, 16851.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 8.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   9.338 ±(99.9%) 43.902 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.338, 25.571), stdev = 11.401
[info]   CI (99.9%): [≈ 0, 53.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 15.000), stdev = 5.831
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.03% complete, ETA 01:18:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 641.385 ops/s
[info] # Warmup Iteration   2: 5234.754 ops/s
[info] # Warmup Iteration   3: 5553.932 ops/s
[info] # Warmup Iteration   4: 5885.716 ops/s
[info] # Warmup Iteration   5: 5883.829 ops/s
[info] Iteration   1: 5877.267 ops/s
[info]                  ·gc.alloc.rate:            1165.593 MB/sec
[info]                  ·gc.alloc.rate.norm:       311452.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1339.240 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 357851.583 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 5925.452 ops/s
[info]                  ·gc.alloc.rate:            1174.081 MB/sec
[info]                  ·gc.alloc.rate.norm:       311818.918 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 178684.285 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 5873.691 ops/s
[info]                  ·gc.alloc.rate:                   1162.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              311424.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.579 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        360531.663 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 178.481 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   4: 5885.940 ops/s
[info]                  ·gc.alloc.rate:                   1165.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              311481.322 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.809 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        360804.174 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1068.522 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 5971.964 ops/s
[info]                  ·gc.alloc.rate:                   1181.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              311445.572 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.449 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        178537.049 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 702.211 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   5906.863 ±(99.9%) 161.058 ops/s [Average]
[info]   (min, avg, max) = (5873.691, 5906.863, 5971.964), stdev = 41.826
[info]   CI (99.9%): [5745.805, 6067.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1169.804 ±(99.9%) 30.790 MB/sec [Average]
[info]   (min, avg, max) = (1162.300, 1169.804, 1181.762), stdev = 7.996
[info]   CI (99.9%): [1139.014, 1200.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   311524.397 ±(99.9%) 638.857 B/op [Average]
[info]   (min, avg, max) = (311424.069, 311524.397, 311818.918), stdev = 165.909
[info]   CI (99.9%): [310885.540, 312163.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1076.974 ±(99.9%) 1412.659 MB/sec [Average]
[info]   (min, avg, max) = (672.794, 1076.974, 1349.809), stdev = 366.863
[info]   CI (99.9%): [≈ 0, 2489.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   287281.751 ±(99.9%) 382020.060 B/op [Average]
[info]   (min, avg, max) = (178537.049, 287281.751, 360804.174), stdev = 99209.396
[info]   CI (99.9%): [≈ 0, 669301.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 8.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   389.843 ±(99.9%) 1833.415 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 389.843, 1068.522), stdev = 476.132
[info]   CI (99.9%): [≈ 0, 2223.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   68.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 13.600, 19.000), stdev = 6.504
[info]   CI (99.9%): [68.000, 68.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.26% complete, ETA 01:17:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7549.584 ops/s
[info] # Warmup Iteration   2: 23615.159 ops/s
[info] # Warmup Iteration   3: 24067.981 ops/s
[info] # Warmup Iteration   4: 23467.216 ops/s
[info] # Warmup Iteration   5: 23532.908 ops/s
[info] Iteration   1: 23948.896 ops/s
[info]                  ·gc.alloc.rate:            961.634 MB/sec
[info]                  ·gc.alloc.rate.norm:       63186.155 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.564 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 44257.936 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 23571.605 ops/s
[info]                  ·gc.alloc.rate:                   944.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              62984.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1342.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        89482.378 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 44.233 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 24049.068 ops/s
[info]                  ·gc.alloc.rate:            964.916 MB/sec
[info]                  ·gc.alloc.rate.norm:       63136.393 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.584 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 44073.934 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 23947.917 ops/s
[info]                  ·gc.alloc.rate:            958.841 MB/sec
[info]                  ·gc.alloc.rate.norm:       62998.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.641 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 44259.784 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 23916.715 ops/s
[info]                  ·gc.alloc.rate:                   957.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              63006.807 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        88630.577 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 219.166 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   23886.840 ±(99.9%) 705.217 ops/s [Average]
[info]   (min, avg, max) = (23571.605, 23886.840, 24049.068), stdev = 183.143
[info]   CI (99.9%): [23181.623, 24592.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   957.594 ±(99.9%) 29.318 MB/sec [Average]
[info]   (min, avg, max) = (944.930, 957.594, 964.916), stdev = 7.614
[info]   CI (99.9%): [928.276, 986.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   63062.294 ±(99.9%) 355.843 B/op [Average]
[info]   (min, avg, max) = (62984.017, 63062.294, 63186.155), stdev = 92.411
[info]   CI (99.9%): [62706.451, 63418.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   942.075 ±(99.9%) 1415.624 MB/sec [Average]
[info]   (min, avg, max) = (673.564, 942.075, 1347.109), stdev = 367.633
[info]   CI (99.9%): [≈ 0, 2357.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   62140.922 ±(99.9%) 94619.524 B/op [Average]
[info]   (min, avg, max) = (44073.934, 62140.922, 89482.378), stdev = 24572.390
[info]   CI (99.9%): [≈ 0, 156760.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   52.680 ±(99.9%) 365.884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.680, 219.166), stdev = 95.019
[info]   CI (99.9%): [≈ 0, 418.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   58.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.600, 17.000), stdev = 4.506
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.49% complete, ETA 01:17:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10443.441 ops/s
[info] # Warmup Iteration   2: 27095.961 ops/s
[info] # Warmup Iteration   3: 27603.589 ops/s
[info] # Warmup Iteration   4: 27267.032 ops/s
[info] # Warmup Iteration   5: 27312.479 ops/s
[info] Iteration   1: 27669.694 ops/s
[info]                  ·gc.alloc.rate:            1064.569 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.479 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38307.087 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 27409.119 ops/s
[info]                  ·gc.alloc.rate:                   1054.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              60572.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        77264.300 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 38.250 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 26945.529 ops/s
[info]                  ·gc.alloc.rate:            1036.981 MB/sec
[info]                  ·gc.alloc.rate.norm:       60561.962 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.515 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39334.731 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 27238.248 ops/s
[info]                  ·gc.alloc.rate:                   1047.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              60558.108 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        77746.422 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 192.442 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   5: 27747.712 ops/s
[info]                  ·gc.alloc.rate:                   1067.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        38350.556 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.333 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 75.568 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   27402.060 ±(99.9%) 1257.232 ops/s [Average]
[info]   (min, avg, max) = (26945.529, 27402.060, 27747.712), stdev = 326.499
[info]   CI (99.9%): [26144.828, 28659.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1054.459 ±(99.9%) 48.296 MB/sec [Average]
[info]   (min, avg, max) = (1036.981, 1054.459, 1067.832), stdev = 12.542
[info]   CI (99.9%): [1006.162, 1102.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60559.226 ±(99.9%) 32.026 B/op [Average]
[info]   (min, avg, max) = (60552.015, 60559.226, 60572.031), stdev = 8.317
[info]   CI (99.9%): [60527.201, 60591.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   942.876 ±(99.9%) 1415.421 MB/sec [Average]
[info]   (min, avg, max) = (673.479, 942.876, 1345.694), stdev = 367.580
[info]   CI (99.9%): [≈ 0, 2358.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   54200.619 ±(99.9%) 81937.362 B/op [Average]
[info]   (min, avg, max) = (38307.087, 54200.619, 77746.422), stdev = 21278.873
[info]   CI (99.9%): [≈ 0, 136137.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 5.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.330), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   61.252 ±(99.9%) 307.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61.252, 192.442), stdev = 79.763
[info]   CI (99.9%): [≈ 0, 368.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   61.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 12.200, 19.000), stdev = 5.891
[info]   CI (99.9%): [61.000, 61.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.72% complete, ETA 01:17:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261872.532 ops/s
[info] # Warmup Iteration   2: 369983.498 ops/s
[info] # Warmup Iteration   3: 374291.035 ops/s
[info] # Warmup Iteration   4: 374663.141 ops/s
[info] # Warmup Iteration   5: 361280.072 ops/s
[info] Iteration   1: 377728.997 ops/s
[info]                  ·gc.alloc.rate:            682.419 MB/sec
[info]                  ·gc.alloc.rate.norm:       2843.428 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2808.852 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 374415.667 ops/s
[info]                  ·gc.alloc.rate:            677.613 MB/sec
[info]                  ·gc.alloc.rate.norm:       2848.828 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2833.671 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 376024.636 ops/s
[info]                  ·gc.alloc.rate:            680.435 MB/sec
[info]                  ·gc.alloc.rate.norm:       2847.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2821.503 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 379027.944 ops/s
[info]                  ·gc.alloc.rate:            683.949 MB/sec
[info]                  ·gc.alloc.rate.norm:       2840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2799.168 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 377888.617 ops/s
[info]                  ·gc.alloc.rate:            682.164 MB/sec
[info]                  ·gc.alloc.rate.norm:       2840.440 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2807.767 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   377017.172 ±(99.9%) 6958.453 ops/s [Average]
[info]   (min, avg, max) = (374415.667, 377017.172, 379027.944), stdev = 1807.088
[info]   CI (99.9%): [370058.720, 383975.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   681.316 ±(99.9%) 9.305 MB/sec [Average]
[info]   (min, avg, max) = (677.613, 681.316, 683.949), stdev = 2.416
[info]   CI (99.9%): [672.012, 690.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2843.950 ±(99.9%) 15.113 B/op [Average]
[info]   (min, avg, max) = (2840.001, 2843.950, 2848.828), stdev = 3.925
[info]   CI (99.9%): [2828.837, 2859.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.178 ±(99.9%) 0.538 MB/sec [Average]
[info]   (min, avg, max) = (674.008, 674.178, 674.329), stdev = 0.140
[info]   CI (99.9%): [673.640, 674.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2814.192 ±(99.9%) 51.963 B/op [Average]
[info]   (min, avg, max) = (2799.168, 2814.192, 2833.671), stdev = 13.495
[info]   CI (99.9%): [2762.229, 2866.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 33.95% complete, ETA 01:16:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 384125.815 ops/s
[info] # Warmup Iteration   2: 517675.499 ops/s
[info] # Warmup Iteration   3: 526483.465 ops/s
[info] # Warmup Iteration   4: 527442.026 ops/s
[info] # Warmup Iteration   5: 528058.179 ops/s
[info] Iteration   1: 528313.842 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 527727.358 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 527789.434 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 527544.676 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 527355.228 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   527746.108 ±(99.9%) 1385.580 ops/s [Average]
[info]   (min, avg, max) = (527355.228, 527746.108, 528313.842), stdev = 359.831
[info]   CI (99.9%): [526360.527, 529131.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.18% complete, ETA 01:16:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13552.026 ops/s
[info] # Warmup Iteration   2: 22104.340 ops/s
[info] # Warmup Iteration   3: 24882.065 ops/s
[info] # Warmup Iteration   4: 25650.021 ops/s
[info] # Warmup Iteration   5: 25622.199 ops/s
[info] Iteration   1: 26330.967 ops/s
[info]                  ·gc.alloc.rate:                   1058.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              63296.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.177 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        80469.797 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.817 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 26667.046 ops/s
[info]                  ·gc.alloc.rate:            1072.432 MB/sec
[info]                  ·gc.alloc.rate.norm:       63296.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39746.188 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 26345.363 ops/s
[info]                  ·gc.alloc.rate:                   1059.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              63296.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.209 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        80423.988 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.794 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   4: 26610.881 ops/s
[info]                  ·gc.alloc.rate:            1070.484 MB/sec
[info]                  ·gc.alloc.rate.norm:       63302.366 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.548 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39829.814 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 26405.698 ops/s
[info]                  ·gc.alloc.rate:                   1063.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              63377.698 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.833 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        80436.749 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 238.213 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   26471.991 ±(99.9%) 601.657 ops/s [Average]
[info]   (min, avg, max) = (26330.967, 26471.991, 26667.046), stdev = 156.248
[info]   CI (99.9%): [25870.334, 27073.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1064.972 ±(99.9%) 23.974 MB/sec [Average]
[info]   (min, avg, max) = (1058.877, 1064.972, 1072.432), stdev = 6.226
[info]   CI (99.9%): [1040.997, 1088.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   63313.622 ±(99.9%) 138.334 B/op [Average]
[info]   (min, avg, max) = (63296.015, 63313.622, 63377.698), stdev = 35.925
[info]   CI (99.9%): [63175.288, 63451.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1077.838 ±(99.9%) 1421.366 MB/sec [Average]
[info]   (min, avg, max) = (673.425, 1077.838, 1349.833), stdev = 369.124
[info]   CI (99.9%): [≈ 0, 2499.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   64181.307 ±(99.9%) 85746.007 B/op [Average]
[info]   (min, avg, max) = (39746.188, 64181.307, 80469.797), stdev = 22267.966
[info]   CI (99.9%): [≈ 0, 149927.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.439 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.998), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   63.565 ±(99.9%) 383.676 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 63.565, 238.213), stdev = 99.640
[info]   CI (99.9%): [≈ 0, 447.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   68.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.600, 18.000), stdev = 4.336
[info]   CI (99.9%): [68.000, 68.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 34.41% complete, ETA 01:16:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9802.386 ops/s
[info] # Warmup Iteration   2: 24929.751 ops/s
[info] # Warmup Iteration   3: 24947.912 ops/s
[info] # Warmup Iteration   4: 25837.337 ops/s
[info] # Warmup Iteration   5: 25082.868 ops/s
[info] Iteration   1: 25534.521 ops/s
[info]                  ·gc.alloc.rate:            1352.769 MB/sec
[info]                  ·gc.alloc.rate.norm:       83389.483 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83059.996 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 26050.097 ops/s
[info]                  ·gc.alloc.rate:                   1380.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              83409.692 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.544 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        81415.055 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 40.245 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 25608.270 ops/s
[info]                  ·gc.alloc.rate:                   1356.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              83389.702 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        82983.780 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 286.574 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 26341.964 ops/s
[info]                  ·gc.alloc.rate:                   1395.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              83376.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        81229.120 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 198.993 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 26051.019 ops/s
[info]                  ·gc.alloc.rate:                                  1380.177 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83376.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.375 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.933 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82334.363 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   25917.174 ±(99.9%) 1302.796 ops/s [Average]
[info]   (min, avg, max) = (25534.521, 25917.174, 26341.964), stdev = 338.332
[info]   CI (99.9%): [24614.378, 27219.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1373.157 ±(99.9%) 69.222 MB/sec [Average]
[info]   (min, avg, max) = (1352.769, 1373.157, 1395.571), stdev = 17.977
[info]   CI (99.9%): [1303.934, 1442.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   83388.183 ±(99.9%) 53.168 B/op [Average]
[info]   (min, avg, max) = (83376.016, 83388.183, 83409.692), stdev = 13.808
[info]   CI (99.9%): [83335.014, 83441.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.675 ±(99.9%) 5.813 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.675, 3.375), stdev = 1.510
[info]   CI (99.9%): [≈ 0, 6.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1353.528 ±(99.9%) 27.938 MB/sec [Average]
[info]   (min, avg, max) = (1347.424, 1353.528, 1362.933), stdev = 7.255
[info]   CI (99.9%): [1325.591, 1381.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   82204.463 ±(99.9%) 3295.961 B/op [Average]
[info]   (min, avg, max) = (81229.120, 82204.463, 83059.996), stdev = 855.951
[info]   CI (99.9%): [78908.501, 85500.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 8.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.662), stdev = 2.138
[info]   CI (99.9%): [≈ 0, 9.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   105.163 ±(99.9%) 502.237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 105.163, 286.574), stdev = 130.429
[info]   CI (99.9%): [≈ 0, 607.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.200, 17.000), stdev = 6.301
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.64% complete, ETA 01:16:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6911.579 ops/s
[info] # Warmup Iteration   2: 23582.378 ops/s
[info] # Warmup Iteration   3: 24175.681 ops/s
[info] # Warmup Iteration   4: 24413.081 ops/s
[info] # Warmup Iteration   5: 24109.890 ops/s
[info] Iteration   1: 24329.541 ops/s
[info]                  ·gc.alloc.rate:            1116.803 MB/sec
[info]                  ·gc.alloc.rate.norm:       72037.379 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1338.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86306.593 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   2: 24600.122 ops/s
[info]                  ·gc.alloc.rate:            1122.422 MB/sec
[info]                  ·gc.alloc.rate.norm:       71816.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 43042.543 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 24237.985 ops/s
[info]                  ·gc.alloc.rate:            1108.254 MB/sec
[info]                  ·gc.alloc.rate.norm:       71948.229 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.867 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 87374.124 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   4: 23821.109 ops/s
[info]                  ·gc.alloc.rate:                   1087.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              71816.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        44447.969 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 220.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 24484.403 ops/s
[info]                  ·gc.alloc.rate:                   1117.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              71821.256 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        87006.674 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 256.909 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   24294.632 ±(99.9%) 1151.962 ops/s [Average]
[info]   (min, avg, max) = (23821.109, 24294.632, 24600.122), stdev = 299.161
[info]   CI (99.9%): [23142.670, 25446.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1110.440 ±(99.9%) 53.464 MB/sec [Average]
[info]   (min, avg, max) = (1087.332, 1110.440, 1122.422), stdev = 13.885
[info]   CI (99.9%): [1056.976, 1163.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71887.779 ±(99.9%) 388.702 B/op [Average]
[info]   (min, avg, max) = (71816.017, 71887.779, 72037.379), stdev = 100.945
[info]   CI (99.9%): [71499.078, 72276.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1076.643 ±(99.9%) 1419.578 MB/sec [Average]
[info]   (min, avg, max) = (672.718, 1076.643, 1353.643), stdev = 368.660
[info]   CI (99.9%): [≈ 0, 2496.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   69635.581 ±(99.9%) 91040.227 B/op [Average]
[info]   (min, avg, max) = (43042.543, 69635.581, 87374.124), stdev = 23642.858
[info]   CI (99.9%): [≈ 0, 160675.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 7.781 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 3.997), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 9.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   95.390 ±(99.9%) 505.461 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 95.390, 256.909), stdev = 131.267
[info]   CI (99.9%): [≈ 0, 600.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   67.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.400, 20.000), stdev = 5.177
[info]   CI (99.9%): [67.000, 67.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.87% complete, ETA 01:15:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 321791.686 ops/s
[info] # Warmup Iteration   2: 390585.403 ops/s
[info] # Warmup Iteration   3: 404746.930 ops/s
[info] # Warmup Iteration   4: 402946.020 ops/s
[info] # Warmup Iteration   5: 410651.568 ops/s
[info] Iteration   1: 407562.194 ops/s
[info]                  ·gc.alloc.rate:            1060.436 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.937 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5206.494 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 407800.675 ops/s
[info]                  ·gc.alloc.rate:            1062.457 MB/sec
[info]                  ·gc.alloc.rate.norm:       4101.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2601.690 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 406235.822 ops/s
[info]                  ·gc.alloc.rate:                   1057.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5226.015 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.581 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 409142.775 ops/s
[info]                  ·gc.alloc.rate:            1065.167 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.407 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.273 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2593.113 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 407679.918 ops/s
[info]                  ·gc.alloc.rate:                   1061.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.546 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1351.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5217.832 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.430 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   407684.277 ±(99.9%) 3970.884 ops/s [Average]
[info]   (min, avg, max) = (406235.822, 407684.277, 409142.775), stdev = 1031.226
[info]   CI (99.9%): [403713.392, 411655.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1061.353 ±(99.9%) 10.770 MB/sec [Average]
[info]   (min, avg, max) = (1057.524, 1061.353, 1065.167), stdev = 2.797
[info]   CI (99.9%): [1050.583, 1072.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4097.193 ±(99.9%) 8.266 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4097.193, 4101.008), stdev = 2.147
[info]   CI (99.9%): [4088.927, 4105.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1079.431 ±(99.9%) 1424.633 MB/sec [Average]
[info]   (min, avg, max) = (674.025, 1079.431, 1351.644), stdev = 369.973
[info]   CI (99.9%): [≈ 0, 2504.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4169.029 ±(99.9%) 5524.569 B/op [Average]
[info]   (min, avg, max) = (2593.113, 4169.029, 5226.015), stdev = 1434.713
[info]   CI (99.9%): [≈ 0, 9693.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.602 ±(99.9%) 25.821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.602, 15.430), stdev = 6.706
[info]   CI (99.9%): [≈ 0, 29.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   58.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 11.600, 15.000), stdev = 3.847
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.10% complete, ETA 01:15:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3048.031 ops/s
[info] # Warmup Iteration   2: 11968.310 ops/s
[info] # Warmup Iteration   3: 13245.702 ops/s
[info] # Warmup Iteration   4: 13183.539 ops/s
[info] # Warmup Iteration   5: 13347.512 ops/s
[info] Iteration   1: 13226.761 ops/s
[info]                  ·gc.alloc.rate:            1352.016 MB/sec
[info]                  ·gc.alloc.rate.norm:       160886.638 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.406 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 160100.039 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 13296.437 ops/s
[info]                  ·gc.alloc.rate:            1343.023 MB/sec
[info]                  ·gc.alloc.rate.norm:       158912.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.942 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 159257.408 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 13342.630 ops/s
[info]                  ·gc.alloc.rate:                   1350.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              159317.366 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.801 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        159113.256 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 550.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 13259.656 ops/s
[info]                  ·gc.alloc.rate:                   1346.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              159824.435 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        161203.835 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 474.361 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 13367.350 ops/s
[info]                  ·gc.alloc.rate:            1354.724 MB/sec
[info]                  ·gc.alloc.rate.norm:       159462.554 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.220 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 160462.715 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   13298.567 ±(99.9%) 222.435 ops/s [Average]
[info]   (min, avg, max) = (13226.761, 13298.567, 13367.350), stdev = 57.766
[info]   CI (99.9%): [13076.132, 13521.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1349.349 ±(99.9%) 17.835 MB/sec [Average]
[info]   (min, avg, max) = (1343.023, 1349.349, 1354.724), stdev = 4.632
[info]   CI (99.9%): [1331.514, 1367.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   159680.605 ±(99.9%) 2885.029 B/op [Average]
[info]   (min, avg, max) = (158912.031, 159680.605, 160886.638), stdev = 749.233
[info]   CI (99.9%): [156795.576, 162565.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1352.288 ±(99.9%) 30.611 MB/sec [Average]
[info]   (min, avg, max) = (1345.406, 1352.288, 1363.220), stdev = 7.950
[info]   CI (99.9%): [1321.677, 1382.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   160027.450 ±(99.9%) 3338.823 B/op [Average]
[info]   (min, avg, max) = (159113.256, 160027.450, 161203.835), stdev = 867.082
[info]   CI (99.9%): [156688.628, 163366.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   204.877 ±(99.9%) 1085.154 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 204.877, 550.021), stdev = 281.811
[info]   CI (99.9%): [≈ 0, 1290.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   65.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 13.000, 19.000), stdev = 7.036
[info]   CI (99.9%): [65.000, 65.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.33% complete, ETA 01:15:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24316.075 ops/s
[info] # Warmup Iteration   2: 49469.369 ops/s
[info] # Warmup Iteration   3: 49425.630 ops/s
[info] # Warmup Iteration   4: 51393.468 ops/s
[info] # Warmup Iteration   5: 51234.895 ops/s
[info] Iteration   1: 50841.302 ops/s
[info]                  ·gc.alloc.rate:            1143.047 MB/sec
[info]                  ·gc.alloc.rate.norm:       35382.554 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41716.209 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 51021.698 ops/s
[info]                  ·gc.alloc.rate:            1140.120 MB/sec
[info]                  ·gc.alloc.rate.norm:       35169.572 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.858 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41546.886 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   3: 51419.304 ops/s
[info]                  ·gc.alloc.rate:            1147.593 MB/sec
[info]                  ·gc.alloc.rate.norm:       35128.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20613.486 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 50948.177 ops/s
[info]                  ·gc.alloc.rate:                   1139.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              35193.452 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.304 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        41710.105 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 144.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 51539.312 ops/s
[info]                  ·gc.alloc.rate:                   1150.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              35134.810 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        41497.149 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 101.709 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   51153.959 ±(99.9%) 1181.368 ops/s [Average]
[info]   (min, avg, max) = (50841.302, 51153.959, 51539.312), stdev = 306.798
[info]   CI (99.9%): [49972.590, 52335.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1144.093 ±(99.9%) 18.380 MB/sec [Average]
[info]   (min, avg, max) = (1139.337, 1144.093, 1150.369), stdev = 4.773
[info]   CI (99.9%): [1125.713, 1162.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   35201.679 ±(99.9%) 402.540 B/op [Average]
[info]   (min, avg, max) = (35128.008, 35201.679, 35382.554), stdev = 104.538
[info]   CI (99.9%): [34799.139, 35604.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1215.384 ±(99.9%) 1166.759 MB/sec [Average]
[info]   (min, avg, max) = (673.420, 1215.384, 1358.682), stdev = 303.004
[info]   CI (99.9%): [48.626, 2382.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   37416.767 ±(99.9%) 36172.267 B/op [Average]
[info]   (min, avg, max) = (20613.486, 37416.767, 41716.209), stdev = 9393.823
[info]   CI (99.9%): [1244.500, 73589.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.663), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   49.150 ±(99.9%) 265.484 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49.150, 144.041), stdev = 68.945
[info]   CI (99.9%): [≈ 0, 314.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 12.600, 17.000), stdev = 4.827
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.57% complete, ETA 01:15:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48654.399 ops/s
[info] # Warmup Iteration   2: 117837.926 ops/s
[info] # Warmup Iteration   3: 119680.787 ops/s
[info] # Warmup Iteration   4: 116303.017 ops/s
[info] # Warmup Iteration   5: 115259.691 ops/s
[info] Iteration   1: 119548.727 ops/s
[info]                  ·gc.alloc.rate:                   1246.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              16416.281 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17722.979 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.769 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 119880.931 ops/s
[info]                  ·gc.alloc.rate:            1249.934 MB/sec
[info]                  ·gc.alloc.rate.norm:       16410.878 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8832.507 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 119053.182 ops/s
[info]                  ·gc.alloc.rate:                   1241.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              16410.956 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17788.445 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 44.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   4: 119218.745 ops/s
[info]                  ·gc.alloc.rate:                   1245.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              16436.558 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.933 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17869.357 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 52.764 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 117514.104 ops/s
[info]                  ·gc.alloc.rate:                   1224.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              16408.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1361.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18235.794 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.843 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   119043.138 ±(99.9%) 3511.484 ops/s [Average]
[info]   (min, avg, max) = (117514.104, 119043.138, 119880.931), stdev = 911.921
[info]   CI (99.9%): [115531.654, 122554.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1241.711 ±(99.9%) 37.837 MB/sec [Average]
[info]   (min, avg, max) = (1224.982, 1241.711, 1249.934), stdev = 9.826
[info]   CI (99.9%): [1203.874, 1279.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   16416.535 ±(99.9%) 44.611 B/op [Average]
[info]   (min, avg, max) = (16408.003, 16416.535, 16436.558), stdev = 11.585
[info]   CI (99.9%): [16371.924, 16461.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1215.964 ±(99.9%) 1169.622 MB/sec [Average]
[info]   (min, avg, max) = (672.728, 1215.964, 1361.441), stdev = 303.747
[info]   CI (99.9%): [46.341, 2385.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   16089.817 ±(99.9%) 15640.570 B/op [Average]
[info]   (min, avg, max) = (8832.507, 16089.817, 18235.794), stdev = 4061.806
[info]   CI (99.9%): [449.246, 31730.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 6.641 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 3.998), stdev = 1.725
[info]   CI (99.9%): [≈ 0, 8.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   24.681 ±(99.9%) 87.642 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.681, 52.764), stdev = 22.760
[info]   CI (99.9%): [≈ 0, 112.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 11.800, 18.000), stdev = 6.099
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.80% complete, ETA 01:14:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 628497.573 ops/s
[info] # Warmup Iteration   2: 837018.808 ops/s
[info] # Warmup Iteration   3: 832091.605 ops/s
[info] # Warmup Iteration   4: 845639.826 ops/s
[info] # Warmup Iteration   5: 850415.205 ops/s
[info] Iteration   1: 844656.899 ops/s
[info]                  ·gc.alloc.rate:            905.708 MB/sec
[info]                  ·gc.alloc.rate.norm:       1688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1256.111 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 837374.799 ops/s
[info]                  ·gc.alloc.rate:            900.207 MB/sec
[info]                  ·gc.alloc.rate.norm:       1691.868 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2534.059 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 842427.871 ops/s
[info]                  ·gc.alloc.rate:            906.714 MB/sec
[info]                  ·gc.alloc.rate.norm:       1693.877 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.163 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1259.437 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 845169.613 ops/s
[info]                  ·gc.alloc.rate:            906.822 MB/sec
[info]                  ·gc.alloc.rate.norm:       1688.399 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1255.389 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 835215.319 ops/s
[info]                  ·gc.alloc.rate:            895.769 MB/sec
[info]                  ·gc.alloc.rate.norm:       1688.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.270 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2540.703 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   840968.900 ±(99.9%) 17155.600 ops/s [Average]
[info]   (min, avg, max) = (835215.319, 840968.900, 845169.613), stdev = 4455.255
[info]   CI (99.9%): [823813.300, 858124.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   903.044 ±(99.9%) 18.846 MB/sec [Average]
[info]   (min, avg, max) = (895.769, 903.044, 906.822), stdev = 4.894
[info]   CI (99.9%): [884.198, 921.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1690.030 ±(99.9%) 10.381 B/op [Average]
[info]   (min, avg, max) = (1688.001, 1690.030, 1693.877), stdev = 2.696
[info]   CI (99.9%): [1679.649, 1700.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   943.797 ±(99.9%) 1421.867 MB/sec [Average]
[info]   (min, avg, max) = (673.975, 943.797, 1348.319), stdev = 369.254
[info]   CI (99.9%): [≈ 0, 2365.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1769.140 ±(99.9%) 2700.498 B/op [Average]
[info]   (min, avg, max) = (1255.389, 1769.140, 2540.703), stdev = 701.311
[info]   CI (99.9%): [≈ 0, 4469.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.800, 15.000), stdev = 3.834
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.03% complete, ETA 01:14:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 684734.698 ops/s
[info] # Warmup Iteration   2: 935743.925 ops/s
[info] # Warmup Iteration   3: 942257.936 ops/s
[info] # Warmup Iteration   4: 943519.033 ops/s
[info] # Warmup Iteration   5: 943107.305 ops/s
[info] Iteration   1: 942676.499 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 943855.649 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 944485.409 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 946971.578 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 946891.419 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   944976.111 ±(99.9%) 7314.889 ops/s [Average]
[info]   (min, avg, max) = (942676.499, 944976.111, 946971.578), stdev = 1899.653
[info]   CI (99.9%): [937661.222, 952291.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.26% complete, ETA 01:14:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26382.332 ops/s
[info] # Warmup Iteration   2: 60619.996 ops/s
[info] # Warmup Iteration   3: 60203.785 ops/s
[info] # Warmup Iteration   4: 61609.080 ops/s
[info] # Warmup Iteration   5: 61527.541 ops/s
[info] Iteration   1: 61757.399 ops/s
[info]                  ·gc.alloc.rate:            1314.295 MB/sec
[info]                  ·gc.alloc.rate.norm:       33488.260 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.133 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34324.996 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 61668.421 ops/s
[info]                  ·gc.alloc.rate:                   1312.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              33488.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        34358.081 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 61635.825 ops/s
[info]                  ·gc.alloc.rate:                   1311.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              33498.936 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.600 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        34460.963 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 102.056 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 62614.915 ops/s
[info]                  ·gc.alloc.rate:                   1332.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              33490.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.219 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        34139.917 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 100.461 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 62243.355 ops/s
[info]                  ·gc.alloc.rate:                                  1324.398 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33491.578 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.441 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.766 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       34461.826 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   61983.983 ±(99.9%) 1653.405 ops/s [Average]
[info]   (min, avg, max) = (61635.825, 61983.983, 62614.915), stdev = 429.384
[info]   CI (99.9%): [60330.578, 63637.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1319.008 ±(99.9%) 34.876 MB/sec [Average]
[info]   (min, avg, max) = (1311.924, 1319.008, 1332.365), stdev = 9.057
[info]   CI (99.9%): [1284.132, 1353.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   33491.372 ±(99.9%) 17.205 B/op [Average]
[info]   (min, avg, max) = (33488.027, 33491.372, 33498.936), stdev = 4.468
[info]   CI (99.9%): [33474.166, 33508.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.288 ±(99.9%) 2.481 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.288, 1.441), stdev = 0.644
[info]   CI (99.9%): [≈ 0, 2.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1352.773 ±(99.9%) 28.248 MB/sec [Average]
[info]   (min, avg, max) = (1346.149, 1352.773, 1362.766), stdev = 7.336
[info]   CI (99.9%): [1324.525, 1381.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   34349.157 ±(99.9%) 508.079 B/op [Average]
[info]   (min, avg, max) = (34139.917, 34349.157, 34461.826), stdev = 131.946
[info]   CI (99.9%): [33841.078, 34857.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 3.997), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 9.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   43.903 ±(99.9%) 203.386 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.903, 102.056), stdev = 52.819
[info]   CI (99.9%): [≈ 0, 247.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   60.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.000, 18.000), stdev = 7.036
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.49% complete, ETA 01:13:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5439.308 ops/s
[info] # Warmup Iteration   2: 12555.570 ops/s
[info] # Warmup Iteration   3: 12810.212 ops/s
[info] # Warmup Iteration   4: 12704.154 ops/s
[info] # Warmup Iteration   5: 12644.274 ops/s
[info] Iteration   1: 12916.601 ops/s
[info]                  ·gc.alloc.rate:            1265.391 MB/sec
[info]                  ·gc.alloc.rate.norm:       154138.401 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 164116.470 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 12891.226 ops/s
[info]                  ·gc.alloc.rate:                   1260.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              153818.180 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        164515.996 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 81.323 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 12865.022 ops/s
[info]                  ·gc.alloc.rate:                   1257.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              153792.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.146 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        164942.708 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 325.974 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   4: 12889.866 ops/s
[info]                  ·gc.alloc.rate:                   1267.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              154770.481 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1352.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        165077.677 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.989 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 486.955 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 13014.753 ops/s
[info]                  ·gc.alloc.rate:                   1274.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              154184.449 B/op
[info]                  ·gc.churn.G1_Old_Gen:             680.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        82326.548 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 80.554 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   12915.493 ±(99.9%) 224.915 ops/s [Average]
[info]   (min, avg, max) = (12865.022, 12915.493, 13014.753), stdev = 58.410
[info]   CI (99.9%): [12690.578, 13140.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1265.053 ±(99.9%) 26.894 MB/sec [Average]
[info]   (min, avg, max) = (1257.007, 1265.053, 1274.910), stdev = 6.984
[info]   CI (99.9%): [1238.159, 1291.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   154140.708 ±(99.9%) 1521.044 B/op [Average]
[info]   (min, avg, max) = (153792.032, 154140.708, 154770.481), stdev = 395.010
[info]   CI (99.9%): [152619.664, 155661.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1215.244 ±(99.9%) 1150.595 MB/sec [Average]
[info]   (min, avg, max) = (680.736, 1215.244, 1352.343), stdev = 298.806
[info]   CI (99.9%): [64.649, 2365.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   148195.880 ±(99.9%) 141796.160 B/op [Average]
[info]   (min, avg, max) = (82326.548, 148195.880, 165077.677), stdev = 36824.013
[info]   CI (99.9%): [6399.719, 289992.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.597 ±(99.9%) 6.428 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.597, 3.989), stdev = 1.669
[info]   CI (99.9%): [≈ 0, 8.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   194.961 ±(99.9%) 785.468 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 194.961, 486.955), stdev = 203.983
[info]   CI (99.9%): [≈ 0, 980.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 12.400, 17.000), stdev = 6.504
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.72% complete, ETA 01:13:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2831.527 ops/s
[info] # Warmup Iteration   2: 9090.014 ops/s
[info] # Warmup Iteration   3: 9779.244 ops/s
[info] # Warmup Iteration   4: 9918.875 ops/s
[info] # Warmup Iteration   5: 9853.676 ops/s
[info] Iteration   1: 9753.594 ops/s
[info]                  ·gc.alloc.rate:            883.507 MB/sec
[info]                  ·gc.alloc.rate.norm:       142582.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 217109.832 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 9910.291 ops/s
[info]                  ·gc.alloc.rate:            896.887 MB/sec
[info]                  ·gc.alloc.rate.norm:       142442.492 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 106846.425 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 9813.824 ops/s
[info]                  ·gc.alloc.rate:            895.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       143575.353 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 107891.377 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 9815.842 ops/s
[info]                  ·gc.alloc.rate:            888.554 MB/sec
[info]                  ·gc.alloc.rate.norm:       142467.282 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.541 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 215738.798 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   5: 9916.812 ops/s
[info]                  ·gc.alloc.rate:                   897.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              142416.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        106771.021 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 105.714 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   9842.073 ±(99.9%) 269.229 ops/s [Average]
[info]   (min, avg, max) = (9753.594, 9842.073, 9916.812), stdev = 69.918
[info]   CI (99.9%): [9572.843, 10111.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   892.267 ±(99.9%) 23.165 MB/sec [Average]
[info]   (min, avg, max) = (883.507, 892.267, 897.206), stdev = 6.016
[info]   CI (99.9%): [869.102, 915.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   142696.640 ±(99.9%) 1907.141 B/op [Average]
[info]   (min, avg, max) = (142416.041, 142696.640, 143575.353), stdev = 495.278
[info]   CI (99.9%): [140789.499, 144603.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   941.791 ±(99.9%) 1418.844 MB/sec [Average]
[info]   (min, avg, max) = (672.646, 941.791, 1345.541), stdev = 368.469
[info]   CI (99.9%): [≈ 0, 2360.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   150871.491 ±(99.9%) 230441.282 B/op [Average]
[info]   (min, avg, max) = (106771.021, 150871.491, 217109.832), stdev = 59844.869
[info]   CI (99.9%): [≈ 0, 381312.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   21.143 ±(99.9%) 182.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.143, 105.714), stdev = 47.277
[info]   CI (99.9%): [≈ 0, 203.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 12.800, 18.000), stdev = 4.764
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.95% complete, ETA 01:13:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 358002.240 ops/s
[info] # Warmup Iteration   2: 529602.023 ops/s
[info] # Warmup Iteration   3: 547770.649 ops/s
[info] # Warmup Iteration   4: 548478.792 ops/s
[info] # Warmup Iteration   5: 550491.008 ops/s
[info] Iteration   1: 547392.400 ops/s
[info]                  ·gc.alloc.rate:            1425.637 MB/sec
[info]                  ·gc.alloc.rate.norm:       4099.243 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2022.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5814.909 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  22.000 ms
[info] Iteration   2: 552114.574 ops/s
[info]                  ·gc.alloc.rate:                   1437.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.483 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3843.463 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.495 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 553435.388 ops/s
[info]                  ·gc.alloc.rate:                   1443.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              4105.399 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3856.904 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.366 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 574414.215 ops/s
[info]                  ·gc.alloc.rate:                                  1494.685 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.140 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.384 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3734.231 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 571056.604 ops/s
[info]                  ·gc.alloc.rate:                                  1486.800 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4097.086 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3756.238 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   559682.636 ±(99.9%) 46913.904 ops/s [Average]
[info]   (min, avg, max) = (547392.400, 559682.636, 574414.215), stdev = 12183.392
[info]   CI (99.9%): [512768.732, 606596.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1457.604 ±(99.9%) 119.626 MB/sec [Average]
[info]   (min, avg, max) = (1425.637, 1457.604, 1494.685), stdev = 31.067
[info]   CI (99.9%): [1337.978, 1577.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4098.746 ±(99.9%) 15.201 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4098.746, 4105.399), stdev = 3.948
[info]   CI (99.9%): [4083.545, 4113.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.238 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.140), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.081 ±(99.9%) 0.653 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.081, 0.384), stdev = 0.170
[info]   CI (99.9%): [≈ 0, 0.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1490.599 ±(99.9%) 1144.781 MB/sec [Average]
[info]   (min, avg, max) = (1348.483, 1490.599, 2022.312), stdev = 297.296
[info]   CI (99.9%): [345.818, 2635.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4201.149 ±(99.9%) 3479.790 B/op [Average]
[info]   (min, avg, max) = (3734.231, 4201.149, 5814.909), stdev = 903.690
[info]   CI (99.9%): [721.359, 7680.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 7.781 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 3.997), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 9.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.172 ±(99.9%) 22.146 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.172, 11.366), stdev = 5.751
[info]   CI (99.9%): [≈ 0, 26.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.400, 22.000), stdev = 8.173
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.18% complete, ETA 01:13:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1526.039 ops/s
[info] # Warmup Iteration   2: 7408.938 ops/s
[info] # Warmup Iteration   3: 8627.444 ops/s
[info] # Warmup Iteration   4: 8639.669 ops/s
[info] # Warmup Iteration   5: 8608.830 ops/s
[info] Iteration   1: 8638.928 ops/s
[info]                  ·gc.alloc.rate:            1310.403 MB/sec
[info]                  ·gc.alloc.rate.norm:       238759.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 245124.814 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 8603.434 ops/s
[info]                  ·gc.alloc.rate:                   1305.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              238720.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        246150.322 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 121.857 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   3: 8681.783 ops/s
[info]                  ·gc.alloc.rate:                   1316.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              238745.634 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        244635.534 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 724.488 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 8824.489 ops/s
[info]                  ·gc.alloc.rate:                   1346.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              240118.111 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        242097.869 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 712.751 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 9057.171 ops/s
[info]                  ·gc.alloc.rate:                                  1374.213 MB/sec
[info]                  ·gc.alloc.rate.norm:                             238784.049 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.231 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.932 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       236823.766 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   8761.161 ±(99.9%) 714.583 ops/s [Average]
[info]   (min, avg, max) = (8603.434, 8761.161, 9057.171), stdev = 185.575
[info]   CI (99.9%): [8046.578, 9475.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1330.597 ±(99.9%) 112.193 MB/sec [Average]
[info]   (min, avg, max) = (1305.156, 1330.597, 1374.213), stdev = 29.136
[info]   CI (99.9%): [1218.404, 1442.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   239025.386 ±(99.9%) 2353.859 B/op [Average]
[info]   (min, avg, max) = (238720.047, 239025.386, 240118.111), stdev = 611.290
[info]   CI (99.9%): [236671.527, 241379.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.046 ±(99.9%) 9.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.046, 5.231), stdev = 2.339
[info]   CI (99.9%): [≈ 0, 10.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1352.170 ±(99.9%) 29.799 MB/sec [Average]
[info]   (min, avg, max) = (1345.340, 1352.170, 1362.932), stdev = 7.739
[info]   CI (99.9%): [1322.372, 1381.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   242966.461 ±(99.9%) 14416.589 B/op [Average]
[info]   (min, avg, max) = (236823.766, 242966.461, 246150.322), stdev = 3743.942
[info]   CI (99.9%): [228549.872, 257383.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 3.996), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 9.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   311.819 ±(99.9%) 1442.824 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 311.819, 724.488), stdev = 374.697
[info]   CI (99.9%): [≈ 0, 1754.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   66.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 13.200, 20.000), stdev = 7.155
[info]   CI (99.9%): [66.000, 66.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.41% complete, ETA 01:12:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18058.487 ops/s
[info] # Warmup Iteration   2: 41158.457 ops/s
[info] # Warmup Iteration   3: 41875.203 ops/s
[info] # Warmup Iteration   4: 41633.899 ops/s
[info] # Warmup Iteration   5: 42149.838 ops/s
[info] Iteration   1: 42253.848 ops/s
[info]                  ·gc.alloc.rate:            1313.242 MB/sec
[info]                  ·gc.alloc.rate.norm:       48918.293 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.837 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50169.676 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 42205.042 ops/s
[info]                  ·gc.alloc.rate:            1311.462 MB/sec
[info]                  ·gc.alloc.rate.norm:       48908.965 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50221.964 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 42310.054 ops/s
[info]                  ·gc.alloc.rate:                   1316.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              48977.346 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        50227.179 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 173.454 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 42858.342 ops/s
[info]                  ·gc.alloc.rate:                   1331.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              48907.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        49901.905 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 122.309 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 43086.509 ops/s
[info]                  ·gc.alloc.rate:                                  1340.173 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48952.292 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.609 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.940 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       49783.879 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   42542.759 ±(99.9%) 1548.575 ops/s [Average]
[info]   (min, avg, max) = (42205.042, 42542.759, 43086.509), stdev = 402.160
[info]   CI (99.9%): [40994.184, 44091.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1322.661 ±(99.9%) 48.608 MB/sec [Average]
[info]   (min, avg, max) = (1311.462, 1322.661, 1340.173), stdev = 12.623
[info]   CI (99.9%): [1274.053, 1371.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48932.780 ±(99.9%) 118.815 B/op [Average]
[info]   (min, avg, max) = (48907.004, 48932.780, 48977.346), stdev = 30.856
[info]   CI (99.9%): [48813.965, 49051.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.122 ±(99.9%) 1.048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.122, 0.609), stdev = 0.272
[info]   CI (99.9%): [≈ 0, 1.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1353.113 ±(99.9%) 28.380 MB/sec [Average]
[info]   (min, avg, max) = (1346.670, 1353.113, 1362.940), stdev = 7.370
[info]   CI (99.9%): [1324.733, 1381.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   50060.921 ±(99.9%) 787.837 B/op [Average]
[info]   (min, avg, max) = (49783.879, 50060.921, 50227.179), stdev = 204.599
[info]   CI (99.9%): [49273.083, 50848.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.623 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.663), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   59.152 ±(99.9%) 319.571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59.152, 173.454), stdev = 82.992
[info]   CI (99.9%): [≈ 0, 378.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.400, 18.000), stdev = 6.542
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.64% complete, ETA 01:12:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17413.339 ops/s
[info] # Warmup Iteration   2: 49110.388 ops/s
[info] # Warmup Iteration   3: 52655.656 ops/s
[info] # Warmup Iteration   4: 52601.013 ops/s
[info] # Warmup Iteration   5: 52353.035 ops/s
[info] Iteration   1: 52725.875 ops/s
[info]                  ·gc.alloc.rate:                   1398.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              41755.159 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.174 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        40186.830 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.885 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 52273.976 ops/s
[info]                  ·gc.alloc.rate:                   1388.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              41785.200 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        40533.493 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 100.281 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 52151.998 ops/s
[info]                  ·gc.alloc.rate:                   1391.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              41998.436 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.406 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        40846.301 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 120.609 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 53156.769 ops/s
[info]                  ·gc.alloc.rate:                                  1410.004 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41752.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.305 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       40313.158 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                39.445 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 51355.095 ops/s
[info]                  ·gc.alloc.rate:            1363.520 MB/sec
[info]                  ·gc.alloc.rate.norm:       41785.626 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.927 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41767.478 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   52332.743 ±(99.9%) 2601.316 ops/s [Average]
[info]   (min, avg, max) = (51355.095, 52332.743, 53156.769), stdev = 675.554
[info]   CI (99.9%): [49731.426, 54934.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1390.426 ±(99.9%) 66.183 MB/sec [Average]
[info]   (min, avg, max) = (1363.520, 1390.426, 1410.004), stdev = 17.188
[info]   CI (99.9%): [1324.243, 1456.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   41815.286 ±(99.9%) 399.003 B/op [Average]
[info]   (min, avg, max) = (41752.008, 41815.286, 41998.436), stdev = 103.620
[info]   CI (99.9%): [41416.283, 42214.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.261 ±(99.9%) 2.247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.261, 1.305), stdev = 0.584
[info]   CI (99.9%): [≈ 0, 2.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1354.129 ±(99.9%) 30.384 MB/sec [Average]
[info]   (min, avg, max) = (1346.174, 1354.129, 1362.927), stdev = 7.891
[info]   CI (99.9%): [1323.745, 1384.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   40729.452 ±(99.9%) 2433.298 B/op [Average]
[info]   (min, avg, max) = (40186.830, 40729.452, 41767.478), stdev = 631.920
[info]   CI (99.9%): [38296.154, 43162.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 6.640 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 3.996), stdev = 1.724
[info]   CI (99.9%): [≈ 0, 8.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   56.044 ±(99.9%) 200.543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56.044, 120.609), stdev = 52.080
[info]   CI (99.9%): [≈ 0, 256.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   60.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.000, 18.000), stdev = 6.285
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.88% complete, ETA 01:12:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 752073.142 ops/s
[info] # Warmup Iteration   2: 932614.071 ops/s
[info] # Warmup Iteration   3: 965821.869 ops/s
[info] # Warmup Iteration   4: 952467.563 ops/s
[info] # Warmup Iteration   5: 977160.393 ops/s
[info] Iteration   1: 975164.195 ops/s
[info]                  ·gc.alloc.rate:            887.485 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.294 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1088.007 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 965032.117 ops/s
[info]                  ·gc.alloc.rate:            878.097 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.289 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2198.790 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 973822.569 ops/s
[info]                  ·gc.alloc.rate:            886.069 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1089.529 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 985069.187 ops/s
[info]                  ·gc.alloc.rate:            896.677 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.559 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.173 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1077.080 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 969039.040 ops/s
[info]                  ·gc.alloc.rate:            881.879 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.172 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.174 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1094.859 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   973625.422 ±(99.9%) 29087.418 ops/s [Average]
[info]   (min, avg, max) = (965032.117, 973625.422, 985069.187), stdev = 7553.910
[info]   CI (99.9%): [944538.004, 1002712.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   886.041 ±(99.9%) 26.930 MB/sec [Average]
[info]   (min, avg, max) = (878.097, 886.041, 896.677), stdev = 6.994
[info]   CI (99.9%): [859.111, 912.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.146 ±(99.9%) 0.934 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.146, 1432.559), stdev = 0.242
[info]   CI (99.9%): [1431.213, 1433.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   809.018 ±(99.9%) 1160.821 MB/sec [Average]
[info]   (min, avg, max) = (674.160, 809.018, 1348.289), stdev = 301.462
[info]   CI (99.9%): [≈ 0, 1969.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1309.653 ±(99.9%) 1914.095 B/op [Average]
[info]   (min, avg, max) = (1077.080, 1309.653, 2198.790), stdev = 497.085
[info]   CI (99.9%): [≈ 0, 3223.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.400, 16.000), stdev = 3.715
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.11% complete, ETA 01:12:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 803461.754 ops/s
[info] # Warmup Iteration   2: 1073617.732 ops/s
[info] # Warmup Iteration   3: 1089917.098 ops/s
[info] # Warmup Iteration   4: 1090235.355 ops/s
[info] # Warmup Iteration   5: 1089696.750 ops/s
[info] Iteration   1: 1091451.753 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1091230.733 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1109866.056 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1094616.257 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1095040.738 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1096441.107 ±(99.9%) 29675.078 ops/s [Average]
[info]   (min, avg, max) = (1091230.733, 1096441.107, 1109866.056), stdev = 7706.524
[info]   CI (99.9%): [1066766.029, 1126116.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 38.34% complete, ETA 01:11:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16990.221 ops/s
[info] # Warmup Iteration   2: 36861.933 ops/s
[info] # Warmup Iteration   3: 37892.812 ops/s
[info] # Warmup Iteration   4: 38076.959 ops/s
[info] # Warmup Iteration   5: 38644.447 ops/s
[info] Iteration   1: 39141.041 ops/s
[info]                  ·gc.alloc.rate:                   1183.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              47579.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.582 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        54105.536 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.785 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 39239.972 ops/s
[info]                  ·gc.alloc.rate:                   1191.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              47641.404 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1338.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        53513.096 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.479 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 39478.356 ops/s
[info]                  ·gc.alloc.rate:            1193.094 MB/sec
[info]                  ·gc.alloc.rate.norm:       47568.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26849.112 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 39153.686 ops/s
[info]                  ·gc.alloc.rate:                   1183.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              47568.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        54221.455 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 187.432 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 39371.861 ops/s
[info]                  ·gc.alloc.rate:                   1190.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              47573.652 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        54295.456 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 159.771 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   39276.983 ±(99.9%) 560.019 ops/s [Average]
[info]   (min, avg, max) = (39141.041, 39276.983, 39478.356), stdev = 145.435
[info]   CI (99.9%): [38716.964, 39837.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1188.271 ±(99.9%) 17.570 MB/sec [Average]
[info]   (min, avg, max) = (1183.272, 1188.271, 1193.094), stdev = 4.563
[info]   CI (99.9%): [1170.701, 1205.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   47586.034 ±(99.9%) 120.499 B/op [Average]
[info]   (min, avg, max) = (47568.010, 47586.034, 47641.404), stdev = 31.293
[info]   CI (99.9%): [47465.535, 47706.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1212.905 ±(99.9%) 1161.609 MB/sec [Average]
[info]   (min, avg, max) = (673.426, 1212.905, 1358.364), stdev = 301.666
[info]   CI (99.9%): [51.296, 2374.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   48596.931 ±(99.9%) 46828.861 B/op [Average]
[info]   (min, avg, max) = (26849.112, 48596.931, 54295.456), stdev = 12161.306
[info]   CI (99.9%): [1768.070, 95425.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.998 ±(99.9%) 8.315 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.998, 4.663), stdev = 2.159
[info]   CI (99.9%): [≈ 0, 10.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   80.093 ±(99.9%) 333.483 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 80.093, 187.432), stdev = 86.605
[info]   CI (99.9%): [≈ 0, 413.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   66.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 13.200, 18.000), stdev = 5.070
[info]   CI (99.9%): [66.000, 66.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.57% complete, ETA 01:11:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68560.896 ops/s
[info] # Warmup Iteration   2: 114635.644 ops/s
[info] # Warmup Iteration   3: 118564.460 ops/s
[info] # Warmup Iteration   4: 118126.415 ops/s
[info] # Warmup Iteration   5: 121435.774 ops/s
[info] Iteration   1: 121384.184 ops/s
[info]                  ·gc.alloc.rate:                   1692.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              21951.435 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2022.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        26223.469 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 34.550 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 119220.431 ops/s
[info]                  ·gc.alloc.rate:                   1667.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              22022.785 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17887.095 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 52.764 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 118856.934 ops/s
[info]                  ·gc.alloc.rate:                   1657.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              21944.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1362.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18037.684 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.820 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 119012.992 ops/s
[info]                  ·gc.alloc.rate:            1659.350 MB/sec
[info]                  ·gc.alloc.rate.norm:       21944.637 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.273 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27035.190 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 119837.839 ops/s
[info]                  ·gc.alloc.rate:                                  1671.071 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21948.350 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17899.402 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   119662.476 ±(99.9%) 3974.361 ops/s [Average]
[info]   (min, avg, max) = (118856.934, 119662.476, 121384.184), stdev = 1032.129
[info]   CI (99.9%): [115688.115, 123636.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1669.728 ±(99.9%) 54.581 MB/sec [Average]
[info]   (min, avg, max) = (1657.331, 1669.728, 1692.910), stdev = 14.174
[info]   CI (99.9%): [1615.147, 1724.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   21962.242 ±(99.9%) 130.833 B/op [Average]
[info]   (min, avg, max) = (21944.004, 21962.242, 22022.785), stdev = 33.977
[info]   CI (99.9%): [21831.409, 22093.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.012 ±(99.9%) 0.104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.060), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1629.298 ±(99.9%) 1420.568 MB/sec [Average]
[info]   (min, avg, max) = (1354.744, 1629.298, 2044.273), stdev = 368.917
[info]   CI (99.9%): [208.731, 3049.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   21416.568 ±(99.9%) 18358.296 B/op [Average]
[info]   (min, avg, max) = (17887.095, 21416.568, 27035.190), stdev = 4767.591
[info]   CI (99.9%): [3058.272, 39774.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 8.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   19.227 ±(99.9%) 90.453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.227, 52.764), stdev = 23.490
[info]   CI (99.9%): [≈ 0, 109.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 24.000), stdev = 8.843
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 38.80% complete, ETA 01:11:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.785 ops/s
[info] # Warmup Iteration   2: 329290.854 ops/s
[info] # Warmup Iteration   3: 347409.093 ops/s
[info] # Warmup Iteration   4: 345334.363 ops/s
[info] # Warmup Iteration   5: 350116.071 ops/s
[info] Iteration   1: 343988.055 ops/s
[info]                  ·gc.alloc.rate:            690.255 MB/sec
[info]                  ·gc.alloc.rate.norm:       3158.196 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3069.122 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 339863.635 ops/s
[info]                  ·gc.alloc.rate:            681.410 MB/sec
[info]                  ·gc.alloc.rate.norm:       3156.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3106.375 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 337827.381 ops/s
[info]                  ·gc.alloc.rate:            678.937 MB/sec
[info]                  ·gc.alloc.rate.norm:       3163.326 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3125.112 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 348481.526 ops/s
[info]                  ·gc.alloc.rate:            697.812 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3029.567 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 352344.502 ops/s
[info]                  ·gc.alloc.rate:            705.725 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2996.357 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   344501.020 ±(99.9%) 23077.422 ops/s [Average]
[info]   (min, avg, max) = (337827.381, 344501.020, 352344.502), stdev = 5993.133
[info]   CI (99.9%): [321423.598, 367578.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   690.828 ±(99.9%) 43.100 MB/sec [Average]
[info]   (min, avg, max) = (678.937, 690.828, 705.725), stdev = 11.193
[info]   CI (99.9%): [647.728, 733.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3156.306 ±(99.9%) 18.266 B/op [Average]
[info]   (min, avg, max) = (3152.001, 3156.306, 3163.326), stdev = 4.744
[info]   CI (99.9%): [3138.041, 3174.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   670.760 ±(99.9%) 0.287 MB/sec [Average]
[info]   (min, avg, max) = (670.694, 670.760, 670.877), stdev = 0.075
[info]   CI (99.9%): [670.473, 671.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   3065.307 ±(99.9%) 204.749 B/op [Average]
[info]   (min, avg, max) = (2996.357, 3065.307, 3125.112), stdev = 53.173
[info]   CI (99.9%): [2860.557, 3270.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   60.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (12.000, 12.000, 12.000), stdev = 0.001
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.03% complete, ETA 01:11:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106395.190 ops/s
[info] # Warmup Iteration   2: 211105.131 ops/s
[info] # Warmup Iteration   3: 211047.699 ops/s
[info] # Warmup Iteration   4: 209080.384 ops/s
[info] # Warmup Iteration   5: 206991.920 ops/s
[info] Iteration   1: 210926.406 ops/s
[info]                  ·gc.alloc.rate:      457.778 MB/sec
[info]                  ·gc.alloc.rate.norm: 3416.044 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 208275.143 ops/s
[info]                  ·gc.alloc.rate:            455.132 MB/sec
[info]                  ·gc.alloc.rate.norm:       3439.180 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5084.261 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 209352.784 ops/s
[info]                  ·gc.alloc.rate:                   455.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              3427.821 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5057.964 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 211450.735 ops/s
[info]                  ·gc.alloc.rate:      459.080 MB/sec
[info]                  ·gc.alloc.rate.norm: 3416.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 210111.390 ops/s
[info]                  ·gc.alloc.rate:            455.969 MB/sec
[info]                  ·gc.alloc.rate.norm:       3416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5044.709 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   210023.292 ±(99.9%) 4857.987 ops/s [Average]
[info]   (min, avg, max) = (208275.143, 210023.292, 211450.735), stdev = 1261.604
[info]   CI (99.9%): [205165.305, 214881.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   456.775 ±(99.9%) 6.210 MB/sec [Average]
[info]   (min, avg, max) = (455.132, 456.775, 459.080), stdev = 1.613
[info]   CI (99.9%): [450.566, 462.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3423.010 ±(99.9%) 39.988 B/op [Average]
[info]   (min, avg, max) = (3416.002, 3423.010, 3439.180), stdev = 10.385
[info]   CI (99.9%): [3383.022, 3462.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.789 ±(99.9%) 1419.374 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 403.789, 673.369), stdev = 368.607
[info]   CI (99.9%): [≈ 0, 1823.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   3037.387 ±(99.9%) 10676.983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3037.387, 5084.261), stdev = 2772.779
[info]   CI (99.9%): [≈ 0, 13714.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.002 ±(99.9%) 8.624 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.002, 5.008), stdev = 2.240
[info]   CI (99.9%): [≈ 0, 9.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.600, 10.000), stdev = 5.128
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.26% complete, ETA 01:10:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 399581.581 ops/s
[info] # Warmup Iteration   2: 464311.503 ops/s
[info] # Warmup Iteration   3: 479570.074 ops/s
[info] # Warmup Iteration   4: 480183.622 ops/s
[info] # Warmup Iteration   5: 479516.917 ops/s
[info] Iteration   1: 480957.201 ops/s
[info]                  ·gc.alloc.rate:            607.528 MB/sec
[info]                  ·gc.alloc.rate.norm:       1988.434 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2206.023 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 478891.555 ops/s
[info]                  ·gc.alloc.rate:            603.595 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2215.451 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 478471.931 ops/s
[info]                  ·gc.alloc.rate:            603.600 MB/sec
[info]                  ·gc.alloc.rate.norm:       1985.728 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2217.451 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 478903.775 ops/s
[info]                  ·gc.alloc.rate:            603.581 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2215.437 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 482832.143 ops/s
[info]                  ·gc.alloc.rate:      608.540 MB/sec
[info]                  ·gc.alloc.rate.norm: 1984.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   480011.321 ±(99.9%) 7126.808 ops/s [Average]
[info]   (min, avg, max) = (478471.931, 480011.321, 482832.143), stdev = 1850.809
[info]   CI (99.9%): [472884.513, 487138.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   605.369 ±(99.9%) 9.469 MB/sec [Average]
[info]   (min, avg, max) = (603.581, 605.369, 608.540), stdev = 2.459
[info]   CI (99.9%): [595.900, 614.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1985.233 ±(99.9%) 7.469 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1985.233, 1988.434), stdev = 1.940
[info]   CI (99.9%): [1977.764, 1992.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.209 ±(99.9%) 1160.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.209, 674.037), stdev = 301.427
[info]   CI (99.9%): [≈ 0, 1699.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1770.872 ±(99.9%) 3811.975 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1770.872, 2217.451), stdev = 989.958
[info]   CI (99.9%): [≈ 0, 5582.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.200, 8.000), stdev = 3.493
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.49% complete, ETA 01:10:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14842.210 ops/s
[info] # Warmup Iteration   2: 51907.417 ops/s
[info] # Warmup Iteration   3: 50156.756 ops/s
[info] # Warmup Iteration   4: 52184.948 ops/s
[info] # Warmup Iteration   5: 52368.632 ops/s
[info] Iteration   1: 51719.581 ops/s
[info]                  ·gc.alloc.rate:                   2131.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              64847.282 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        61903.909 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 162.158 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 53206.628 ops/s
[info]                  ·gc.alloc.rate:                                  2168.487 MB/sec
[info]                  ·gc.alloc.rate.norm:                             64124.276 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.063 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.864 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80630.893 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 53935.521 ops/s
[info]                  ·gc.alloc.rate:            2195.798 MB/sec
[info]                  ·gc.alloc.rate.norm:       64080.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.163 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59654.829 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 52532.296 ops/s
[info]                  ·gc.alloc.rate:                                  2138.681 MB/sec
[info]                  ·gc.alloc.rate.norm:                             64080.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.184 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61246.593 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 52141.478 ops/s
[info]                  ·gc.alloc.rate:            2123.308 MB/sec
[info]                  ·gc.alloc.rate.norm:       64091.895 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.297 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61706.961 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   52707.101 ±(99.9%) 3381.242 ops/s [Average]
[info]   (min, avg, max) = (51719.581, 52707.101, 53935.521), stdev = 878.098
[info]   CI (99.9%): [49325.858, 56088.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2151.547 ±(99.9%) 115.706 MB/sec [Average]
[info]   (min, avg, max) = (2123.308, 2151.547, 2195.798), stdev = 30.048
[info]   CI (99.9%): [2035.841, 2267.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64244.694 ±(99.9%) 1298.991 B/op [Average]
[info]   (min, avg, max) = (64080.008, 64244.694, 64847.282), stdev = 337.344
[info]   CI (99.9%): [62945.703, 65543.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.106 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.410 ±(99.9%) 3.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.410, 1.864), stdev = 0.817
[info]   CI (99.9%): [≈ 0, 3.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2178.796 ±(99.9%) 1179.490 MB/sec [Average]
[info]   (min, avg, max) = (2034.714, 2178.796, 2726.690), stdev = 306.310
[info]   CI (99.9%): [999.306, 3358.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65028.637 ±(99.9%) 33756.859 B/op [Average]
[info]   (min, avg, max) = (59654.829, 65028.637, 80630.893), stdev = 8766.549
[info]   CI (99.9%): [31271.778, 98785.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.330), stdev = 2.384
[info]   CI (99.9%): [≈ 0, 10.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   32.432 ±(99.9%) 279.246 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.432, 162.158), stdev = 72.519
[info]   CI (99.9%): [≈ 0, 311.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 14.000), stdev = 4.219
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.72% complete, ETA 01:10:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58088.698 ops/s
[info] # Warmup Iteration   2: 113589.192 ops/s
[info] # Warmup Iteration   3: 118361.964 ops/s
[info] # Warmup Iteration   4: 119616.810 ops/s
[info] # Warmup Iteration   5: 118550.399 ops/s
[info] Iteration   1: 119494.673 ops/s
[info]                  ·gc.alloc.rate:            653.464 MB/sec
[info]                  ·gc.alloc.rate.norm:       8606.487 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8879.025 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 119832.894 ops/s
[info]                  ·gc.alloc.rate:            652.583 MB/sec
[info]                  ·gc.alloc.rate.norm:       8571.961 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8853.320 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 120021.848 ops/s
[info]                  ·gc.alloc.rate:            653.432 MB/sec
[info]                  ·gc.alloc.rate.norm:       8570.235 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8839.971 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 119743.755 ops/s
[info]                  ·gc.alloc.rate:            653.211 MB/sec
[info]                  ·gc.alloc.rate.norm:       8582.826 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8860.638 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 119938.760 ops/s
[info]                  ·gc.alloc.rate:            652.872 MB/sec
[info]                  ·gc.alloc.rate.norm:       8568.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8846.087 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   119806.386 ±(99.9%) 783.813 ops/s [Average]
[info]   (min, avg, max) = (119494.673, 119806.386, 120021.848), stdev = 203.554
[info]   CI (99.9%): [119022.573, 120590.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   653.112 ±(99.9%) 1.458 MB/sec [Average]
[info]   (min, avg, max) = (652.583, 653.112, 653.464), stdev = 0.379
[info]   CI (99.9%): [651.655, 654.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8579.903 ±(99.9%) 61.290 B/op [Average]
[info]   (min, avg, max) = (8568.003, 8579.903, 8606.487), stdev = 15.917
[info]   CI (99.9%): [8518.613, 8641.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   674.115 ±(99.9%) 0.573 MB/sec [Average]
[info]   (min, avg, max) = (673.998, 674.115, 674.355), stdev = 0.149
[info]   CI (99.9%): [673.542, 674.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8855.808 ±(99.9%) 58.203 B/op [Average]
[info]   (min, avg, max) = (8839.971, 8855.808, 8879.025), stdev = 15.115
[info]   CI (99.9%): [8797.605, 8914.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.95% complete, ETA 01:09:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.736 ops/s
[info] # Warmup Iteration   2: 199278.180 ops/s
[info] # Warmup Iteration   3: 204456.102 ops/s
[info] # Warmup Iteration   4: 200271.292 ops/s
[info] # Warmup Iteration   5: 205978.718 ops/s
[info] Iteration   1: 205935.315 ops/s
[info]                  ·gc.alloc.rate:      161.187 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 206030.688 ops/s
[info]                  ·gc.alloc.rate:      161.275 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 201697.329 ops/s
[info]                  ·gc.alloc.rate:            171.105 MB/sec
[info]                  ·gc.alloc.rate.norm:       1335.326 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5234.433 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 206496.373 ops/s
[info]                  ·gc.alloc.rate:      161.644 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 206760.103 ops/s
[info]                  ·gc.alloc.rate:      161.869 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   205383.962 ±(99.9%) 8041.471 ops/s [Average]
[info]   (min, avg, max) = (201697.329, 205383.962, 206760.103), stdev = 2088.345
[info]   CI (99.9%): [197342.490, 213425.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   163.416 ±(99.9%) 16.585 MB/sec [Average]
[info]   (min, avg, max) = (161.187, 163.416, 171.105), stdev = 4.307
[info]   CI (99.9%): [146.831, 180.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1252.667 ±(99.9%) 177.930 B/op [Average]
[info]   (min, avg, max) = (1232.002, 1252.667, 1335.326), stdev = 46.208
[info]   CI (99.9%): [1074.737, 1430.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   134.145 ±(99.9%) 1155.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 134.145, 670.726), stdev = 299.958
[info]   CI (99.9%): [≈ 0, 1289.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1046.887 ±(99.9%) 9014.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1046.887, 5234.433), stdev = 2340.910
[info]   CI (99.9%): [≈ 0, 10060.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 10.000), stdev = 4.472
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.18% complete, ETA 01:09:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 183113.559 ops/s
[info] # Warmup Iteration   2: 378098.366 ops/s
[info] # Warmup Iteration   3: 379332.223 ops/s
[info] # Warmup Iteration   4: 385379.285 ops/s
[info] # Warmup Iteration   5: 392240.953 ops/s
[info] Iteration   1: 387645.955 ops/s
[info]                  ·gc.alloc.rate:            380.592 MB/sec
[info]                  ·gc.alloc.rate.norm:       1544.908 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.613 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2734.343 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 388220.614 ops/s
[info]                  ·gc.alloc.rate:      380.808 MB/sec
[info]                  ·gc.alloc.rate.norm: 1544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 379447.211 ops/s
[info]                  ·gc.alloc.rate:            373.665 MB/sec
[info]                  ·gc.alloc.rate.norm:       1549.841 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.496 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2793.440 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 384278.501 ops/s
[info]                  ·gc.alloc.rate:      377.138 MB/sec
[info]                  ·gc.alloc.rate.norm: 1544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 385849.183 ops/s
[info]                  ·gc.alloc.rate:            378.535 MB/sec
[info]                  ·gc.alloc.rate.norm:       1544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.483 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2747.062 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   385088.293 ±(99.9%) 13533.464 ops/s [Average]
[info]   (min, avg, max) = (379447.211, 385088.293, 388220.614), stdev = 3514.598
[info]   CI (99.9%): [371554.828, 398621.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   378.148 ±(99.9%) 11.278 MB/sec [Average]
[info]   (min, avg, max) = (373.665, 378.148, 380.808), stdev = 2.929
[info]   CI (99.9%): [366.869, 389.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1545.351 ±(99.9%) 9.784 B/op [Average]
[info]   (min, avg, max) = (1544.001, 1545.351, 1549.841), stdev = 2.541
[info]   CI (99.9%): [1535.566, 1555.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   404.118 ±(99.9%) 1420.533 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.118, 673.613), stdev = 368.908
[info]   CI (99.9%): [≈ 0, 1824.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1654.969 ±(99.9%) 5818.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1654.969, 2793.440), stdev = 1510.933
[info]   CI (99.9%): [≈ 0, 7473.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.200, 9.000), stdev = 4.764
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.42% complete, ETA 01:09:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 348187.766 ops/s
[info] # Warmup Iteration   2: 421098.733 ops/s
[info] # Warmup Iteration   3: 428066.650 ops/s
[info] # Warmup Iteration   4: 431746.671 ops/s
[info] # Warmup Iteration   5: 433220.818 ops/s
[info] Iteration   1: 432809.968 ops/s
[info]                  ·gc.alloc.rate:            340.368 MB/sec
[info]                  ·gc.alloc.rate.norm:       1237.943 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2451.438 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 434119.703 ops/s
[info]                  ·gc.alloc.rate:      340.739 MB/sec
[info]                  ·gc.alloc.rate.norm: 1235.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 416186.190 ops/s
[info]                  ·gc.alloc.rate:            325.770 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2549.374 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 436097.676 ops/s
[info]                  ·gc.alloc.rate:      341.410 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 432045.317 ops/s
[info]                  ·gc.alloc.rate:            339.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       1236.403 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.158 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2455.778 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   430251.771 ±(99.9%) 30849.477 ops/s [Average]
[info]   (min, avg, max) = (416186.190, 430251.771, 436097.676), stdev = 8011.511
[info]   CI (99.9%): [399402.294, 461101.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   337.541 ±(99.9%) 25.488 MB/sec [Average]
[info]   (min, avg, max) = (325.770, 337.541, 341.410), stdev = 6.619
[info]   CI (99.9%): [312.052, 363.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1234.671 ±(99.9%) 10.201 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1234.671, 1237.943), stdev = 2.649
[info]   CI (99.9%): [1224.469, 1244.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.457 ±(99.9%) 1421.725 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.457, 674.158), stdev = 369.217
[info]   CI (99.9%): [≈ 0, 1826.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1491.318 ±(99.9%) 5244.357 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1491.318, 2549.374), stdev = 1361.943
[info]   CI (99.9%): [≈ 0, 6735.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 8.000), stdev = 4.037
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 40.65% complete, ETA 01:09:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 365071.861 ops/s
[info] # Warmup Iteration   2: 454038.802 ops/s
[info] # Warmup Iteration   3: 471308.476 ops/s
[info] # Warmup Iteration   4: 471468.383 ops/s
[info] # Warmup Iteration   5: 471400.308 ops/s
[info] Iteration   1: 471303.041 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 471223.756 ops/s
[info]                  ·gc.alloc.rate:      0.655 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.187 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 471166.114 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 471428.208 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 471436.496 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   471311.523 ±(99.9%) 464.288 ops/s [Average]
[info]   (min, avg, max) = (471166.114, 471311.523, 471436.496), stdev = 120.574
[info]   CI (99.9%): [470847.236, 471775.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.131 ±(99.9%) 1.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.131, 0.655), stdev = 0.293
[info]   CI (99.9%): [≈ 0, 1.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.438 ±(99.9%) 3.765 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.438, 2.187), stdev = 0.978
[info]   CI (99.9%): [≈ 0, 4.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.88% complete, ETA 01:08:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11515.576 ops/s
[info] # Warmup Iteration   2: 25505.522 ops/s
[info] # Warmup Iteration   3: 25570.637 ops/s
[info] # Warmup Iteration   4: 25584.938 ops/s
[info] # Warmup Iteration   5: 25501.437 ops/s
[info] Iteration   1: 26280.231 ops/s
[info]                  ·gc.alloc.rate:                   1298.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              77786.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        40293.021 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.894 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 26040.192 ops/s
[info]                  ·gc.alloc.rate:            1287.294 MB/sec
[info]                  ·gc.alloc.rate.norm:       77797.364 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81406.054 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 26040.832 ops/s
[info]                  ·gc.alloc.rate:                   1287.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              77776.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        81365.794 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 201.301 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   4: 26211.074 ops/s
[info]                  ·gc.alloc.rate:                   1295.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              77789.386 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.632 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        81278.140 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 279.994 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 26403.830 ops/s
[info]                  ·gc.alloc.rate:                                  1304.802 MB/sec
[info]                  ·gc.alloc.rate.norm:                             77776.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.158 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.421 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.146 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81194.166 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                39.704 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   26195.232 ±(99.9%) 605.378 ops/s [Average]
[info]   (min, avg, max) = (26040.192, 26195.232, 26403.830), stdev = 157.215
[info]   CI (99.9%): [25589.854, 26800.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1294.678 ±(99.9%) 29.375 MB/sec [Average]
[info]   (min, avg, max) = (1287.026, 1294.678, 1304.802), stdev = 7.629
[info]   CI (99.9%): [1265.303, 1324.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   77784.970 ±(99.9%) 35.219 B/op [Average]
[info]   (min, avg, max) = (77776.016, 77784.970, 77797.364), stdev = 9.146
[info]   CI (99.9%): [77749.751, 77820.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.272 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.158), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.884 ±(99.9%) 16.224 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.884, 9.421), stdev = 4.213
[info]   CI (99.9%): [≈ 0, 18.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1216.392 ±(99.9%) 1170.497 MB/sec [Average]
[info]   (min, avg, max) = (672.744, 1216.392, 1362.146), stdev = 303.974
[info]   CI (99.9%): [45.894, 2386.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   73107.435 ±(99.9%) 70636.202 B/op [Average]
[info]   (min, avg, max) = (40293.021, 73107.435, 81406.054), stdev = 18343.997
[info]   CI (99.9%): [2471.232, 143743.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 7.781 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 4.663), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 9.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   112.178 ±(99.9%) 468.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 112.178, 279.994), stdev = 121.621
[info]   CI (99.9%): [≈ 0, 580.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 11.800, 18.000), stdev = 5.805
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.11% complete, ETA 01:08:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1510.946 ops/s
[info] # Warmup Iteration   2: 5470.910 ops/s
[info] # Warmup Iteration   3: 5586.084 ops/s
[info] # Warmup Iteration   4: 5503.579 ops/s
[info] # Warmup Iteration   5: 5789.788 ops/s
[info] Iteration   1: 5808.178 ops/s
[info]                  ·gc.alloc.rate:            917.329 MB/sec
[info]                  ·gc.alloc.rate.norm:       248608.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 182494.463 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 5559.146 ops/s
[info]                  ·gc.alloc.rate:            878.054 MB/sec
[info]                  ·gc.alloc.rate.norm:       248608.079 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.828 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 381334.653 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 5556.282 ops/s
[info]                  ·gc.alloc.rate:            880.904 MB/sec
[info]                  ·gc.alloc.rate.norm:       249552.538 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.285 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 190735.937 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 5600.909 ops/s
[info]                  ·gc.alloc.rate:            885.207 MB/sec
[info]                  ·gc.alloc.rate.norm:       248760.181 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 189237.832 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 5769.280 ops/s
[info]                  ·gc.alloc.rate:            911.379 MB/sec
[info]                  ·gc.alloc.rate.norm:       248608.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.833 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 367392.250 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   5658.759 ±(99.9%) 464.923 ops/s [Average]
[info]   (min, avg, max) = (5556.282, 5658.759, 5808.178), stdev = 120.739
[info]   CI (99.9%): [5193.835, 6123.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   894.574 ±(99.9%) 70.681 MB/sec [Average]
[info]   (min, avg, max) = (878.054, 894.574, 917.329), stdev = 18.356
[info]   CI (99.9%): [823.893, 965.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   248827.391 ±(99.9%) 1581.402 B/op [Average]
[info]   (min, avg, max) = (248608.071, 248827.391, 249552.538), stdev = 410.685
[info]   CI (99.9%): [247245.989, 250408.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   942.745 ±(99.9%) 1420.419 MB/sec [Average]
[info]   (min, avg, max) = (673.285, 942.745, 1346.833), stdev = 368.878
[info]   CI (99.9%): [≈ 0, 2363.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   262239.027 ±(99.9%) 394770.967 B/op [Average]
[info]   (min, avg, max) = (182494.463, 262239.027, 381334.653), stdev = 102520.766
[info]   CI (99.9%): [≈ 0, 657009.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.200, 16.000), stdev = 4.382
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.34% complete, ETA 01:08:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1768.965 ops/s
[info] # Warmup Iteration   2: 5263.346 ops/s
[info] # Warmup Iteration   3: 5340.632 ops/s
[info] # Warmup Iteration   4: 5493.426 ops/s
[info] # Warmup Iteration   5: 5627.173 ops/s
[info] Iteration   1: 5648.387 ops/s
[info]                  ·gc.alloc.rate:            865.171 MB/sec
[info]                  ·gc.alloc.rate.norm:       241112.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.599 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 187444.559 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 5428.546 ops/s
[info]                  ·gc.alloc.rate:            832.251 MB/sec
[info]                  ·gc.alloc.rate.norm:       241279.302 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.506 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 390077.996 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 5628.465 ops/s
[info]                  ·gc.alloc.rate:            867.934 MB/sec
[info]                  ·gc.alloc.rate.norm:       242698.788 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 188110.437 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 5666.730 ops/s
[info]                  ·gc.alloc.rate:            868.119 MB/sec
[info]                  ·gc.alloc.rate.norm:       241112.078 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 186849.287 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 5606.508 ops/s
[info]                  ·gc.alloc.rate:            859.363 MB/sec
[info]                  ·gc.alloc.rate.norm:       241238.521 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.467 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 377696.776 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   5595.727 ±(99.9%) 370.103 ops/s [Average]
[info]   (min, avg, max) = (5428.546, 5595.727, 5666.730), stdev = 96.115
[info]   CI (99.9%): [5225.624, 5965.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   858.568 ±(99.9%) 58.263 MB/sec [Average]
[info]   (min, avg, max) = (832.251, 858.568, 868.119), stdev = 15.131
[info]   CI (99.9%): [800.305, 916.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   241488.157 ±(99.9%) 2621.851 B/op [Average]
[info]   (min, avg, max) = (241112.078, 241488.157, 242698.788), stdev = 680.886
[info]   CI (99.9%): [238866.306, 244110.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   941.807 ±(99.9%) 1418.991 MB/sec [Average]
[info]   (min, avg, max) = (672.599, 941.807, 1345.506), stdev = 368.508
[info]   CI (99.9%): [≈ 0, 2360.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   266035.811 ±(99.9%) 414611.231 B/op [Average]
[info]   (min, avg, max) = (186849.287, 266035.811, 390077.996), stdev = 107673.220
[info]   CI (99.9%): [≈ 0, 680647.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   65.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.000, 19.000), stdev = 5.050
[info]   CI (99.9%): [65.000, 65.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.57% complete, ETA 01:08:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119668.165 ops/s
[info] # Warmup Iteration   2: 162147.118 ops/s
[info] # Warmup Iteration   3: 166329.306 ops/s
[info] # Warmup Iteration   4: 164388.783 ops/s
[info] # Warmup Iteration   5: 164510.890 ops/s
[info] Iteration   1: 166923.973 ops/s
[info]                  ·gc.alloc.rate:            1617.127 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.186 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12712.144 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 166813.673 ops/s
[info]                  ·gc.alloc.rate:                   1616.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              15251.109 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2029.294 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19150.035 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.326 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 69.134 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 165479.848 ops/s
[info]                  ·gc.alloc.rate:            1603.010 MB/sec
[info]                  ·gc.alloc.rate.norm:       15249.621 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.585 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12962.434 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 165141.615 ops/s
[info]                  ·gc.alloc.rate:            1601.516 MB/sec
[info]                  ·gc.alloc.rate.norm:       15261.525 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12988.567 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 163476.658 ops/s
[info]                  ·gc.alloc.rate:            1583.612 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19681.963 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   165567.153 ±(99.9%) 5429.833 ops/s [Average]
[info]   (min, avg, max) = (163476.658, 165567.153, 166923.973), stdev = 1410.111
[info]   CI (99.9%): [160137.320, 170996.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1604.279 ±(99.9%) 52.442 MB/sec [Average]
[info]   (min, avg, max) = (1583.612, 1604.279, 1617.127), stdev = 13.619
[info]   CI (99.9%): [1551.837, 1656.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15251.652 ±(99.9%) 21.827 B/op [Average]
[info]   (min, avg, max) = (15248.003, 15251.652, 15261.525), stdev = 5.668
[info]   CI (99.9%): [15229.825, 15273.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1629.434 ±(99.9%) 1431.929 MB/sec [Average]
[info]   (min, avg, max) = (1348.186, 1629.434, 2044.110), stdev = 371.867
[info]   CI (99.9%): [197.505, 3061.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   15499.029 ±(99.9%) 13793.995 B/op [Average]
[info]   (min, avg, max) = (12712.144, 15499.029, 19681.963), stdev = 3582.257
[info]   CI (99.9%): [1705.033, 29293.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 12.616 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 7.326), stdev = 3.276
[info]   CI (99.9%): [≈ 0, 14.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   13.827 ±(99.9%) 119.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.827, 69.134), stdev = 30.918
[info]   CI (99.9%): [≈ 0, 132.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.600, 16.000), stdev = 6.504
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.80% complete, ETA 01:07:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1044.308 ops/s
[info] # Warmup Iteration   2: 4918.615 ops/s
[info] # Warmup Iteration   3: 5251.001 ops/s
[info] # Warmup Iteration   4: 5373.888 ops/s
[info] # Warmup Iteration   5: 5390.506 ops/s
[info] Iteration   1: 5363.827 ops/s
[info]                  ·gc.alloc.rate:            1017.623 MB/sec
[info]                  ·gc.alloc.rate.norm:       298495.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 394730.436 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 5426.066 ops/s
[info]                  ·gc.alloc.rate:            1029.278 MB/sec
[info]                  ·gc.alloc.rate.norm:       298473.555 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.834 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 195110.862 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 5369.900 ops/s
[info]                  ·gc.alloc.rate:                   1018.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              298555.663 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        394558.201 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 195.229 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   4: 5427.403 ops/s
[info]                  ·gc.alloc.rate:            1029.162 MB/sec
[info]                  ·gc.alloc.rate.norm:       298464.075 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 195074.924 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 5373.757 ops/s
[info]                  ·gc.alloc.rate:                   1019.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              298529.353 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.863 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        395044.912 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1365.587 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   5392.191 ±(99.9%) 122.203 ops/s [Average]
[info]   (min, avg, max) = (5363.827, 5392.191, 5427.403), stdev = 31.736
[info]   CI (99.9%): [5269.988, 5514.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1022.787 ±(99.9%) 22.732 MB/sec [Average]
[info]   (min, avg, max) = (1017.623, 1022.787, 1029.278), stdev = 5.903
[info]   CI (99.9%): [1000.055, 1045.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   298503.547 ±(99.9%) 148.026 B/op [Average]
[info]   (min, avg, max) = (298464.075, 298503.547, 298555.663), stdev = 38.442
[info]   CI (99.9%): [298355.521, 298651.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1077.228 ±(99.9%) 1421.821 MB/sec [Average]
[info]   (min, avg, max) = (672.656, 1077.228, 1348.863), stdev = 369.242
[info]   CI (99.9%): [≈ 0, 2499.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   314903.867 ±(99.9%) 421152.994 B/op [Average]
[info]   (min, avg, max) = (195074.924, 314903.867, 395044.912), stdev = 109372.095
[info]   CI (99.9%): [≈ 0, 736056.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   312.163 ±(99.9%) 2290.821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 312.163, 1365.587), stdev = 594.919
[info]   CI (99.9%): [≈ 0, 2602.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   72.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 14.400, 19.000), stdev = 4.278
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.03% complete, ETA 01:07:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7819.455 ops/s
[info] # Warmup Iteration   2: 19150.638 ops/s
[info] # Warmup Iteration   3: 19126.411 ops/s
[info] # Warmup Iteration   4: 19289.524 ops/s
[info] # Warmup Iteration   5: 18960.196 ops/s
[info] Iteration   1: 19198.694 ops/s
[info]                  ·gc.alloc.rate:            801.024 MB/sec
[info]                  ·gc.alloc.rate.norm:       65674.383 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55262.937 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 19057.180 ops/s
[info]                  ·gc.alloc.rate:            800.704 MB/sec
[info]                  ·gc.alloc.rate.norm:       66122.977 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55613.804 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 19214.681 ops/s
[info]                  ·gc.alloc.rate:            798.618 MB/sec
[info]                  ·gc.alloc.rate.norm:       65408.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.486 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55159.495 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 19337.105 ops/s
[info]                  ·gc.alloc.rate:            803.668 MB/sec
[info]                  ·gc.alloc.rate.norm:       65408.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54808.724 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 19121.478 ops/s
[info]                  ·gc.alloc.rate:                   795.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              65434.110 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        110916.039 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 54.828 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   19185.828 ±(99.9%) 406.485 ops/s [Average]
[info]   (min, avg, max) = (19057.180, 19185.828, 19337.105), stdev = 105.563
[info]   CI (99.9%): [18779.343, 19592.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   799.809 ±(99.9%) 12.390 MB/sec [Average]
[info]   (min, avg, max) = (795.032, 799.809, 803.668), stdev = 3.218
[info]   CI (99.9%): [787.420, 812.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   65609.503 ±(99.9%) 1186.563 B/op [Average]
[info]   (min, avg, max) = (65408.021, 65609.503, 66122.977), stdev = 308.147
[info]   CI (99.9%): [64422.940, 66796.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   808.409 ±(99.9%) 1160.742 MB/sec [Average]
[info]   (min, avg, max) = (673.435, 808.409, 1347.643), stdev = 301.441
[info]   CI (99.9%): [≈ 0, 1969.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   66352.200 ±(99.9%) 95933.389 B/op [Average]
[info]   (min, avg, max) = (54808.724, 66352.200, 110916.039), stdev = 24913.596
[info]   CI (99.9%): [≈ 0, 162285.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   10.966 ±(99.9%) 94.416 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.966, 54.828), stdev = 24.520
[info]   CI (99.9%): [≈ 0, 105.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.800, 17.000), stdev = 4.087
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.26% complete, ETA 01:07:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7847.932 ops/s
[info] # Warmup Iteration   2: 20587.322 ops/s
[info] # Warmup Iteration   3: 20931.504 ops/s
[info] # Warmup Iteration   4: 21278.614 ops/s
[info] # Warmup Iteration   5: 21228.064 ops/s
[info] Iteration   1: 21229.272 ops/s
[info]                  ·gc.alloc.rate:            821.105 MB/sec
[info]                  ·gc.alloc.rate.norm:       60882.511 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49927.487 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 21203.537 ops/s
[info]                  ·gc.alloc.rate:            817.997 MB/sec
[info]                  ·gc.alloc.rate.norm:       60720.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49932.190 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 21020.526 ops/s
[info]                  ·gc.alloc.rate:                   811.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              60720.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        100747.884 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 49.875 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   4: 21208.796 ops/s
[info]                  ·gc.alloc.rate:            818.465 MB/sec
[info]                  ·gc.alloc.rate.norm:       60720.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49976.916 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 21274.299 ops/s
[info]                  ·gc.alloc.rate:            821.063 MB/sec
[info]                  ·gc.alloc.rate.norm:       60751.986 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49824.239 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   21187.286 ±(99.9%) 374.671 ops/s [Average]
[info]   (min, avg, max) = (21020.526, 21187.286, 21274.299), stdev = 97.301
[info]   CI (99.9%): [20812.615, 21561.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   817.944 ±(99.9%) 15.755 MB/sec [Average]
[info]   (min, avg, max) = (811.091, 817.944, 821.105), stdev = 4.092
[info]   CI (99.9%): [802.189, 833.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60758.912 ±(99.9%) 271.343 B/op [Average]
[info]   (min, avg, max) = (60720.019, 60758.912, 60882.511), stdev = 70.467
[info]   CI (99.9%): [60487.569, 61030.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   807.767 ±(99.9%) 1158.111 MB/sec [Average]
[info]   (min, avg, max) = (672.667, 807.767, 1345.778), stdev = 300.758
[info]   CI (99.9%): [≈ 0, 1965.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   60081.743 ±(99.9%) 87537.200 B/op [Average]
[info]   (min, avg, max) = (49824.239, 60081.743, 100747.884), stdev = 22733.133
[info]   CI (99.9%): [≈ 0, 147618.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   9.975 ±(99.9%) 85.888 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.975, 49.875), stdev = 22.305
[info]   CI (99.9%): [≈ 0, 95.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.000, 18.000), stdev = 3.937
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.49% complete, ETA 01:07:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 216275.827 ops/s
[info] # Warmup Iteration   2: 304232.555 ops/s
[info] # Warmup Iteration   3: 304714.221 ops/s
[info] # Warmup Iteration   4: 306757.875 ops/s
[info] # Warmup Iteration   5: 307023.818 ops/s
[info] Iteration   1: 304670.872 ops/s
[info]                  ·gc.alloc.rate:            693.183 MB/sec
[info]                  ·gc.alloc.rate.norm:       3580.817 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.128 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3482.384 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 304559.143 ops/s
[info]                  ·gc.alloc.rate:            690.530 MB/sec
[info]                  ·gc.alloc.rate.norm:       3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.218 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3483.721 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 306954.817 ops/s
[info]                  ·gc.alloc.rate:            695.895 MB/sec
[info]                  ·gc.alloc.rate.norm:       3568.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3456.487 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 307117.225 ops/s
[info]                  ·gc.alloc.rate:            696.345 MB/sec
[info]                  ·gc.alloc.rate.norm:       3568.229 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.172 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3454.608 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 306838.984 ops/s
[info]                  ·gc.alloc.rate:                   695.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.479 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3454.355 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.417 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   306028.208 ±(99.9%) 4984.477 ops/s [Average]
[info]   (min, avg, max) = (304559.143, 306028.208, 307117.225), stdev = 1294.453
[info]   CI (99.9%): [301043.732, 311012.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   694.318 ±(99.9%) 9.427 MB/sec [Average]
[info]   (min, avg, max) = (690.530, 694.318, 696.345), stdev = 2.448
[info]   CI (99.9%): [684.891, 703.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3570.614 ±(99.9%) 21.965 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3570.614, 3580.817), stdev = 5.704
[info]   CI (99.9%): [3548.649, 3592.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.028 ±(99.9%) 1.189 MB/sec [Average]
[info]   (min, avg, max) = (673.479, 674.028, 674.218), stdev = 0.309
[info]   CI (99.9%): [672.839, 675.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3466.311 ±(99.9%) 58.962 B/op [Average]
[info]   (min, avg, max) = (3454.355, 3466.311, 3483.721), stdev = 15.312
[info]   CI (99.9%): [3407.349, 3525.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.683 ±(99.9%) 5.884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.683, 3.417), stdev = 1.528
[info]   CI (99.9%): [≈ 0, 6.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 42.73% complete, ETA 01:06:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 259240.718 ops/s
[info] # Warmup Iteration   2: 320128.377 ops/s
[info] # Warmup Iteration   3: 328871.695 ops/s
[info] # Warmup Iteration   4: 344184.871 ops/s
[info] # Warmup Iteration   5: 347135.378 ops/s
[info] Iteration   1: 347107.282 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 347349.718 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 347412.636 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.772 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 347724.962 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 347174.509 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   347353.821 ±(99.9%) 931.658 ops/s [Average]
[info]   (min, avg, max) = (347107.282, 347353.821, 347724.962), stdev = 241.949
[info]   CI (99.9%): [346422.164, 348285.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.034 ±(99.9%) 0.293 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.034, 0.170), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.155 ±(99.9%) 1.327 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.155, 0.772), stdev = 0.345
[info]   CI (99.9%): [≈ 0, 1.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.96% complete, ETA 01:06:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9308.845 ops/s
[info] # Warmup Iteration   2: 19522.286 ops/s
[info] # Warmup Iteration   3: 19229.837 ops/s
[info] # Warmup Iteration   4: 19155.319 ops/s
[info] # Warmup Iteration   5: 19620.363 ops/s
[info] Iteration   1: 19466.981 ops/s
[info]                  ·gc.alloc.rate:            866.012 MB/sec
[info]                  ·gc.alloc.rate.norm:       70008.321 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 108783.500 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 19880.222 ops/s
[info]                  ·gc.alloc.rate:            879.836 MB/sec
[info]                  ·gc.alloc.rate.norm:       69643.152 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.919 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53264.686 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 19905.118 ops/s
[info]                  ·gc.alloc.rate:                   878.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              69462.100 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        53195.126 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 52.668 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 19152.596 ops/s
[info]                  ·gc.alloc.rate:                   847.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              69440.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1338.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        109665.292 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 54.263 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   5: 19326.592 ops/s
[info]                  ·gc.alloc.rate:            852.763 MB/sec
[info]                  ·gc.alloc.rate.norm:       69440.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.500 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54842.749 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   19546.302 ±(99.9%) 1291.288 ops/s [Average]
[info]   (min, avg, max) = (19152.596, 19546.302, 19905.118), stdev = 335.343
[info]   CI (99.9%): [18255.014, 20837.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   864.895 ±(99.9%) 56.527 MB/sec [Average]
[info]   (min, avg, max) = (847.398, 864.895, 879.836), stdev = 14.680
[info]   CI (99.9%): [808.368, 921.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   69598.723 ±(99.9%) 940.817 B/op [Average]
[info]   (min, avg, max) = (69440.021, 69598.723, 70008.321), stdev = 244.327
[info]   CI (99.9%): [68657.906, 70539.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   940.621 ±(99.9%) 1410.843 MB/sec [Average]
[info]   (min, avg, max) = (672.742, 940.621, 1345.666), stdev = 366.391
[info]   CI (99.9%): [≈ 0, 2351.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   75950.270 ±(99.9%) 116996.913 B/op [Average]
[info]   (min, avg, max) = (53195.126, 75950.270, 109665.292), stdev = 30383.727
[info]   CI (99.9%): [≈ 0, 192947.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.401 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.364
[info]   CI (99.9%): [≈ 0, 1.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   21.386 ±(99.9%) 112.784 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.386, 54.263), stdev = 29.290
[info]   CI (99.9%): [≈ 0, 134.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 12.800, 18.000), stdev = 4.764
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 43.19% complete, ETA 01:06:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4030.983 ops/s
[info] # Warmup Iteration   2: 9495.416 ops/s
[info] # Warmup Iteration   3: 9939.129 ops/s
[info] # Warmup Iteration   4: 10121.359 ops/s
[info] # Warmup Iteration   5: 10202.904 ops/s
[info] Iteration   1: 10297.021 ops/s
[info]                  ·gc.alloc.rate:                   1115.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              170568.910 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        102933.327 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 101.813 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 10206.873 ops/s
[info]                  ·gc.alloc.rate:            1107.506 MB/sec
[info]                  ·gc.alloc.rate.norm:       170772.341 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.538 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 207784.234 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 10222.099 ops/s
[info]                  ·gc.alloc.rate:            1108.225 MB/sec
[info]                  ·gc.alloc.rate.norm:       170624.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.939 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 207376.826 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   4: 10225.143 ops/s
[info]                  ·gc.alloc.rate:                   1108.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              170624.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        103647.862 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 512.601 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 10205.235 ops/s
[info]                  ·gc.alloc.rate:                   1107.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              170818.309 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        208934.520 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 616.326 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   10231.274 ±(99.9%) 145.586 ops/s [Average]
[info]   (min, avg, max) = (10205.235, 10231.274, 10297.021), stdev = 37.808
[info]   CI (99.9%): [10085.688, 10376.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1109.563 ±(99.9%) 13.627 MB/sec [Average]
[info]   (min, avg, max) = (1107.506, 1109.563, 1115.859), stdev = 3.539
[info]   CI (99.9%): [1095.936, 1123.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   170681.529 ±(99.9%) 414.049 B/op [Average]
[info]   (min, avg, max) = (170568.910, 170681.529, 170818.309), stdev = 107.527
[info]   CI (99.9%): [170267.480, 171095.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1079.234 ±(99.9%) 1426.738 MB/sec [Average]
[info]   (min, avg, max) = (673.343, 1079.234, 1354.963), stdev = 370.519
[info]   CI (99.9%): [≈ 0, 2505.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   166135.354 ±(99.9%) 220921.276 B/op [Average]
[info]   (min, avg, max) = (102933.327, 166135.354, 208934.520), stdev = 57372.554
[info]   CI (99.9%): [≈ 0, 387056.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 7.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 3.997), stdev = 1.919
[info]   CI (99.9%): [≈ 0, 8.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   246.148 ±(99.9%) 1139.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 246.148, 616.326), stdev = 295.820
[info]   CI (99.9%): [≈ 0, 1385.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.800, 16.000), stdev = 3.899
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.42% complete, ETA 01:05:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2433.591 ops/s
[info] # Warmup Iteration   2: 7743.292 ops/s
[info] # Warmup Iteration   3: 8528.828 ops/s
[info] # Warmup Iteration   4: 8577.476 ops/s
[info] # Warmup Iteration   5: 8650.586 ops/s
[info] Iteration   1: 8562.587 ops/s
[info]                  ·gc.alloc.rate:            890.245 MB/sec
[info]                  ·gc.alloc.rate.norm:       163624.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 247328.762 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   2: 8636.707 ops/s
[info]                  ·gc.alloc.rate:            898.291 MB/sec
[info]                  ·gc.alloc.rate.norm:       163672.483 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.899 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 122604.973 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 8578.741 ops/s
[info]                  ·gc.alloc.rate:            893.880 MB/sec
[info]                  ·gc.alloc.rate.norm:       163952.099 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.892 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 123419.387 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 8480.524 ops/s
[info]                  ·gc.alloc.rate:            885.344 MB/sec
[info]                  ·gc.alloc.rate.norm:       164292.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 249719.821 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   5: 8594.676 ops/s
[info]                  ·gc.alloc.rate:            893.608 MB/sec
[info]                  ·gc.alloc.rate.norm:       163640.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 123204.020 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   8570.647 ±(99.9%) 221.152 ops/s [Average]
[info]   (min, avg, max) = (8480.524, 8570.647, 8636.707), stdev = 57.432
[info]   CI (99.9%): [8349.495, 8791.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   892.274 ±(99.9%) 18.539 MB/sec [Average]
[info]   (min, avg, max) = (885.344, 892.274, 898.291), stdev = 4.814
[info]   CI (99.9%): [873.735, 910.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   163836.148 ±(99.9%) 1108.574 B/op [Average]
[info]   (min, avg, max) = (163624.048, 163836.148, 164292.061), stdev = 287.893
[info]   CI (99.9%): [162727.573, 164944.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   941.990 ±(99.9%) 1419.036 MB/sec [Average]
[info]   (min, avg, max) = (672.794, 941.990, 1345.700), stdev = 368.519
[info]   CI (99.9%): [≈ 0, 2361.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   173255.393 ±(99.9%) 264603.303 B/op [Average]
[info]   (min, avg, max) = (122604.973, 173255.393, 249719.821), stdev = 68716.638
[info]   CI (99.9%): [≈ 0, 437858.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   66.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.200, 20.000), stdev = 5.762
[info]   CI (99.9%): [66.000, 66.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.65% complete, ETA 01:05:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 176691.912 ops/s
[info] # Warmup Iteration   2: 241446.653 ops/s
[info] # Warmup Iteration   3: 248910.980 ops/s
[info] # Warmup Iteration   4: 248033.668 ops/s
[info] # Warmup Iteration   5: 250132.355 ops/s
[info] Iteration   1: 250056.865 ops/s
[info]                  ·gc.alloc.rate:            1446.438 MB/sec
[info]                  ·gc.alloc.rate.norm:       9106.212 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.898 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8485.843 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 248010.259 ops/s
[info]                  ·gc.alloc.rate:                   1441.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              9148.525 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8556.043 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 249968.802 ops/s
[info]                  ·gc.alloc.rate:                   1446.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              9108.562 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.464 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8535.272 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.165 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 252643.846 ops/s
[info]                  ·gc.alloc.rate:                                  1461.290 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.321 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.772 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8490.225 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 251981.660 ops/s
[info]                  ·gc.alloc.rate:            1458.683 MB/sec
[info]                  ·gc.alloc.rate.norm:       9110.130 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8512.290 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   250532.286 ±(99.9%) 7064.523 ops/s [Average]
[info]   (min, avg, max) = (248010.259, 250532.286, 252643.846), stdev = 1834.634
[info]   CI (99.9%): [243467.763, 257596.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1450.851 ±(99.9%) 33.303 MB/sec [Average]
[info]   (min, avg, max) = (1441.336, 1450.851, 1461.290), stdev = 8.649
[info]   CI (99.9%): [1417.548, 1484.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9115.486 ±(99.9%) 71.680 B/op [Average]
[info]   (min, avg, max) = (9104.002, 9115.486, 9148.525), stdev = 18.615
[info]   CI (99.9%): [9043.806, 9187.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.089 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.064 ±(99.9%) 0.552 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.321), stdev = 0.143
[info]   CI (99.9%): [≈ 0, 0.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1355.417 ±(99.9%) 28.729 MB/sec [Average]
[info]   (min, avg, max) = (1347.898, 1355.417, 1362.959), stdev = 7.461
[info]   CI (99.9%): [1326.688, 1384.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   8515.935 ±(99.9%) 114.914 B/op [Average]
[info]   (min, avg, max) = (8485.843, 8515.935, 8556.043), stdev = 29.843
[info]   CI (99.9%): [8401.021, 8630.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 7.779 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 3.996), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 9.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   9.260 ±(99.9%) 49.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.260, 25.165), stdev = 12.760
[info]   CI (99.9%): [≈ 0, 58.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 15.000), stdev = 5.762
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.88% complete, ETA 01:05:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 548.592 ops/s
[info] # Warmup Iteration   2: 7382.589 ops/s
[info] # Warmup Iteration   3: 8580.974 ops/s
[info] # Warmup Iteration   4: 8574.187 ops/s
[info] # Warmup Iteration   5: 8632.700 ops/s
[info] Iteration   1: 8640.279 ops/s
[info]                  ·gc.alloc.rate:            1169.928 MB/sec
[info]                  ·gc.alloc.rate.norm:       212579.129 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1338.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 243127.126 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 8701.474 ops/s
[info]                  ·gc.alloc.rate:            1175.019 MB/sec
[info]                  ·gc.alloc.rate.norm:       212560.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 121689.275 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 8319.836 ops/s
[info]                  ·gc.alloc.rate:            1125.243 MB/sec
[info]                  ·gc.alloc.rate.norm:       212846.934 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.558 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 254520.971 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   4: 8627.278 ops/s
[info]                  ·gc.alloc.rate:                   1165.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              212603.134 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        245951.770 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 729.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 8750.321 ops/s
[info]                  ·gc.alloc.rate:                   1181.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              212600.150 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        121726.830 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 599.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   8607.838 ±(99.9%) 648.478 ops/s [Average]
[info]   (min, avg, max) = (8319.836, 8607.838, 8750.321), stdev = 168.408
[info]   CI (99.9%): [7959.360, 9256.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1163.528 ±(99.9%) 85.715 MB/sec [Average]
[info]   (min, avg, max) = (1125.243, 1163.528, 1181.950), stdev = 22.260
[info]   CI (99.9%): [1077.813, 1249.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   212637.879 ±(99.9%) 454.980 B/op [Average]
[info]   (min, avg, max) = (212560.047, 212637.879, 212846.934), stdev = 118.157
[info]   CI (99.9%): [212182.899, 213092.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1076.271 ±(99.9%) 1411.609 MB/sec [Average]
[info]   (min, avg, max) = (672.691, 1076.271, 1348.317), stdev = 366.590
[info]   CI (99.9%): [≈ 0, 2487.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   197403.194 ±(99.9%) 266569.098 B/op [Average]
[info]   (min, avg, max) = (121689.275, 197403.194, 254520.971), stdev = 69227.148
[info]   CI (99.9%): [≈ 0, 463972.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 7.780 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 3.997), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 9.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   265.631 ±(99.9%) 1411.743 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 265.631, 729.106), stdev = 366.625
[info]   CI (99.9%): [≈ 0, 1677.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   69.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 13.800, 19.000), stdev = 6.140
[info]   CI (99.9%): [69.000, 69.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.11% complete, ETA 01:05:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11819.469 ops/s
[info] # Warmup Iteration   2: 28162.048 ops/s
[info] # Warmup Iteration   3: 29444.658 ops/s
[info] # Warmup Iteration   4: 29283.304 ops/s
[info] # Warmup Iteration   5: 29152.097 ops/s
[info] Iteration   1: 29653.563 ops/s
[info]                  ·gc.alloc.rate:            969.378 MB/sec
[info]                  ·gc.alloc.rate.norm:       51441.441 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.557 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35743.293 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 29194.439 ops/s
[info]                  ·gc.alloc.rate:            954.098 MB/sec
[info]                  ·gc.alloc.rate.norm:       51438.547 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72610.297 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   3: 29581.730 ops/s
[info]                  ·gc.alloc.rate:                   966.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              51432.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.529 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        35829.064 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 35.439 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 28664.351 ops/s
[info]                  ·gc.alloc.rate:            936.718 MB/sec
[info]                  ·gc.alloc.rate.norm:       51437.804 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74025.735 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   5: 28859.768 ops/s
[info]                  ·gc.alloc.rate:                   943.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              51432.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36727.769 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 145.313 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   29190.770 ±(99.9%) 1671.507 ops/s [Average]
[info]   (min, avg, max) = (28664.351, 29190.770, 29653.563), stdev = 434.085
[info]   CI (99.9%): [27519.263, 30862.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   954.009 ±(99.9%) 55.158 MB/sec [Average]
[info]   (min, avg, max) = (936.718, 954.009, 969.378), stdev = 14.324
[info]   CI (99.9%): [898.852, 1009.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   51436.364 ±(99.9%) 16.160 B/op [Average]
[info]   (min, avg, max) = (51432.014, 51436.364, 51441.441), stdev = 4.197
[info]   CI (99.9%): [51420.204, 51452.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   943.071 ±(99.9%) 1421.376 MB/sec [Average]
[info]   (min, avg, max) = (673.409, 943.071, 1348.059), stdev = 369.127
[info]   CI (99.9%): [≈ 0, 2364.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   50987.232 ±(99.9%) 78533.540 B/op [Average]
[info]   (min, avg, max) = (35743.293, 50987.232, 74025.735), stdev = 20394.911
[info]   CI (99.9%): [≈ 0, 129520.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 4.442 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 2.664), stdev = 1.154
[info]   CI (99.9%): [≈ 0, 5.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   36.150 ±(99.9%) 242.296 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.150, 145.313), stdev = 62.923
[info]   CI (99.9%): [≈ 0, 278.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   60.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 12.000, 17.000), stdev = 4.583
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.34% complete, ETA 01:04:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24249.085 ops/s
[info] # Warmup Iteration   2: 65265.460 ops/s
[info] # Warmup Iteration   3: 66413.966 ops/s
[info] # Warmup Iteration   4: 66048.489 ops/s
[info] # Warmup Iteration   5: 66955.186 ops/s
[info] Iteration   1: 66978.381 ops/s
[info]                  ·gc.alloc.rate:            1458.232 MB/sec
[info]                  ·gc.alloc.rate.norm:       34274.626 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.578 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31650.281 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 66913.906 ops/s
[info]                  ·gc.alloc.rate:                   1457.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              34292.515 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.189 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        31663.934 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 78.337 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 66704.590 ops/s
[info]                  ·gc.alloc.rate:                   1461.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              34495.343 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        48001.905 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 125.742 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 68137.825 ops/s
[info]                  ·gc.alloc.rate:                                  1483.686 MB/sec
[info]                  ·gc.alloc.rate.norm:                             34275.360 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.130 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       31480.821 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 67724.481 ops/s
[info]                  ·gc.alloc.rate:            1474.533 MB/sec
[info]                  ·gc.alloc.rate.norm:       34272.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31673.234 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   67291.837 ±(99.9%) 2349.227 ops/s [Average]
[info]   (min, avg, max) = (66704.590, 67291.837, 68137.825), stdev = 610.087
[info]   CI (99.9%): [64942.610, 69641.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1467.244 ±(99.9%) 43.927 MB/sec [Average]
[info]   (min, avg, max) = (1457.943, 1467.244, 1483.686), stdev = 11.408
[info]   CI (99.9%): [1423.317, 1511.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   34321.975 ±(99.9%) 374.493 B/op [Average]
[info]   (min, avg, max) = (34272.029, 34321.975, 34495.343), stdev = 97.255
[info]   CI (99.9%): [33947.481, 34696.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.224 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.130), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1490.481 ±(99.9%) 1170.815 MB/sec [Average]
[info]   (min, avg, max) = (1346.189, 1490.481, 2034.199), stdev = 304.057
[info]   CI (99.9%): [319.666, 2661.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   34894.035 ±(99.9%) 28217.322 B/op [Average]
[info]   (min, avg, max) = (31480.821, 34894.035, 48001.905), stdev = 7327.949
[info]   CI (99.9%): [6676.713, 63111.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.528 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 5.329), stdev = 2.474
[info]   CI (99.9%): [≈ 0, 11.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   40.816 ±(99.9%) 224.678 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.816, 125.742), stdev = 58.348
[info]   CI (99.9%): [≈ 0, 265.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.000, 18.000), stdev = 7.583
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.57% complete, ETA 01:04:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 330307.566 ops/s
[info] # Warmup Iteration   2: 480456.298 ops/s
[info] # Warmup Iteration   3: 477902.727 ops/s
[info] # Warmup Iteration   4: 461801.823 ops/s
[info] # Warmup Iteration   5: 482704.529 ops/s
[info] Iteration   1: 482213.528 ops/s
[info]                  ·gc.alloc.rate:            663.312 MB/sec
[info]                  ·gc.alloc.rate.norm:       2164.422 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.281 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2200.214 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 488147.479 ops/s
[info]                  ·gc.alloc.rate:            670.236 MB/sec
[info]                  ·gc.alloc.rate.norm:       2161.220 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2173.513 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 485956.468 ops/s
[info]                  ·gc.alloc.rate:            667.519 MB/sec
[info]                  ·gc.alloc.rate.norm:       2161.732 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.171 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2183.275 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 487308.936 ops/s
[info]                  ·gc.alloc.rate:            670.165 MB/sec
[info]                  ·gc.alloc.rate.norm:       2164.611 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2177.174 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 489782.349 ops/s
[info]                  ·gc.alloc.rate:            672.362 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2166.183 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   486681.752 ±(99.9%) 11000.730 ops/s [Average]
[info]   (min, avg, max) = (482213.528, 486681.752, 489782.349), stdev = 2856.855
[info]   CI (99.9%): [475681.022, 497682.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   668.719 ±(99.9%) 13.386 MB/sec [Average]
[info]   (min, avg, max) = (663.312, 668.719, 672.362), stdev = 3.476
[info]   CI (99.9%): [655.333, 682.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2162.397 ±(99.9%) 7.837 B/op [Average]
[info]   (min, avg, max) = (2160.001, 2162.397, 2164.611), stdev = 2.035
[info]   CI (99.9%): [2154.560, 2170.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.168 ±(99.9%) 0.447 MB/sec [Average]
[info]   (min, avg, max) = (674.049, 674.168, 674.287), stdev = 0.116
[info]   CI (99.9%): [673.721, 674.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2180.072 ±(99.9%) 49.473 B/op [Average]
[info]   (min, avg, max) = (2166.183, 2180.072, 2200.214), stdev = 12.848
[info]   CI (99.9%): [2130.598, 2229.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 44.80% complete, ETA 01:04:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 525406.485 ops/s
[info] # Warmup Iteration   2: 623591.222 ops/s
[info] # Warmup Iteration   3: 657370.037 ops/s
[info] # Warmup Iteration   4: 635522.728 ops/s
[info] # Warmup Iteration   5: 659492.289 ops/s
[info] Iteration   1: 659628.371 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 656425.235 ops/s
[info]                  ·gc.alloc.rate:      0.462 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.109 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 657865.151 ops/s
[info]                  ·gc.alloc.rate:      0.159 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.380 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 658166.095 ops/s
[info]                  ·gc.alloc.rate:      0.001 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 657613.233 ops/s
[info]                  ·gc.alloc.rate:      0.077 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.183 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   657939.617 ±(99.9%) 4436.020 ops/s [Average]
[info]   (min, avg, max) = (656425.235, 657939.617, 659628.371), stdev = 1152.020
[info]   CI (99.9%): [653503.597, 662375.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.140 ±(99.9%) 0.739 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.140, 0.462), stdev = 0.192
[info]   CI (99.9%): [≈ 0, 0.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.335 ±(99.9%) 1.772 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.335, 1.109), stdev = 0.460
[info]   CI (99.9%): [≈ 0, 2.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.03% complete, ETA 01:04:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17337.155 ops/s
[info] # Warmup Iteration   2: 63773.574 ops/s
[info] # Warmup Iteration   3: 65576.398 ops/s
[info] # Warmup Iteration   4: 65210.728 ops/s
[info] # Warmup Iteration   5: 66069.498 ops/s
[info] Iteration   1: 66339.260 ops/s
[info]                  ·gc.alloc.rate:            1429.864 MB/sec
[info]                  ·gc.alloc.rate.norm:       33931.315 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.254 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31923.489 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 65980.837 ops/s
[info]                  ·gc.alloc.rate:                   1422.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              33928.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.849 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        32096.671 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 79.447 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 64468.237 ops/s
[info]                  ·gc.alloc.rate:                   1390.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              33939.553 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        33041.380 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 97.563 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 67785.044 ops/s
[info]                  ·gc.alloc.rate:                   1461.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              33928.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1361.616 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        31612.403 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 30.932 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 67152.273 ops/s
[info]                  ·gc.alloc.rate:                                  1447.486 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33928.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.134 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       31942.031 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   66345.130 ±(99.9%) 4863.221 ops/s [Average]
[info]   (min, avg, max) = (64468.237, 66345.130, 67785.044), stdev = 1262.963
[info]   CI (99.9%): [61481.909, 71208.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1430.289 ±(99.9%) 104.298 MB/sec [Average]
[info]   (min, avg, max) = (1390.101, 1430.289, 1461.354), stdev = 27.086
[info]   CI (99.9%): [1325.990, 1534.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   33930.977 ±(99.9%) 19.267 B/op [Average]
[info]   (min, avg, max) = (33928.006, 33930.977, 33939.553), stdev = 5.003
[info]   CI (99.9%): [33911.711, 33950.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.027 ±(99.9%) 0.231 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.134), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1353.758 ±(99.9%) 32.090 MB/sec [Average]
[info]   (min, avg, max) = (1345.254, 1353.758, 1362.757), stdev = 8.334
[info]   CI (99.9%): [1321.668, 1385.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   32123.195 ±(99.9%) 2089.110 B/op [Average]
[info]   (min, avg, max) = (31612.403, 32123.195, 33041.380), stdev = 542.535
[info]   CI (99.9%): [30034.085, 34212.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 7.163 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 3.996), stdev = 1.860
[info]   CI (99.9%): [≈ 0, 8.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   41.588 ±(99.9%) 173.698 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.588, 97.563), stdev = 45.109
[info]   CI (99.9%): [≈ 0, 215.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.400, 19.000), stdev = 7.537
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 45.27% complete, ETA 01:03:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2171.568 ops/s
[info] # Warmup Iteration   2: 16582.565 ops/s
[info] # Warmup Iteration   3: 18243.257 ops/s
[info] # Warmup Iteration   4: 18819.780 ops/s
[info] # Warmup Iteration   5: 18763.471 ops/s
[info] Iteration   1: 18943.671 ops/s
[info]                  ·gc.alloc.rate:            661.989 MB/sec
[info]                  ·gc.alloc.rate.norm:       54994.388 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56003.742 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 18447.935 ops/s
[info]                  ·gc.alloc.rate:                   660.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              56333.220 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        57455.441 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 56.830 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 18935.131 ops/s
[info]                  ·gc.alloc.rate:            660.666 MB/sec
[info]                  ·gc.alloc.rate.norm:       54895.340 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56030.356 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 18934.964 ops/s
[info]                  ·gc.alloc.rate:            659.796 MB/sec
[info]                  ·gc.alloc.rate.norm:       54840.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56030.356 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 18990.754 ops/s
[info]                  ·gc.alloc.rate:            661.650 MB/sec
[info]                  ·gc.alloc.rate.norm:       54840.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55868.112 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   18850.491 ±(99.9%) 871.105 ops/s [Average]
[info]   (min, avg, max) = (18447.935, 18850.491, 18990.754), stdev = 226.223
[info]   CI (99.9%): [17979.386, 19721.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   660.868 ±(99.9%) 3.579 MB/sec [Average]
[info]   (min, avg, max) = (659.796, 660.868, 661.989), stdev = 0.929
[info]   CI (99.9%): [657.289, 664.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   55180.599 ±(99.9%) 2492.952 B/op [Average]
[info]   (min, avg, max) = (54840.021, 55180.599, 56333.220), stdev = 647.412
[info]   CI (99.9%): [52687.646, 57673.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   674.005 ±(99.9%) 1.381 MB/sec [Average]
[info]   (min, avg, max) = (673.390, 674.005, 674.326), stdev = 0.359
[info]   CI (99.9%): [672.624, 675.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   56277.601 ±(99.9%) 2548.596 B/op [Average]
[info]   (min, avg, max) = (55868.112, 56277.601, 57455.441), stdev = 661.862
[info]   CI (99.9%): [53729.005, 58826.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   11.366 ±(99.9%) 97.865 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.366, 56.830), stdev = 25.415
[info]   CI (99.9%): [≈ 0, 109.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.200, 9.000), stdev = 0.837
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.50% complete, ETA 01:03:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7337.113 ops/s
[info] # Warmup Iteration   2: 17374.275 ops/s
[info] # Warmup Iteration   3: 17685.091 ops/s
[info] # Warmup Iteration   4: 18500.057 ops/s
[info] # Warmup Iteration   5: 18296.465 ops/s
[info] Iteration   1: 17731.571 ops/s
[info]                  ·gc.alloc.rate:            499.170 MB/sec
[info]                  ·gc.alloc.rate.norm:       44305.106 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59712.548 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 18241.105 ops/s
[info]                  ·gc.alloc.rate:            515.838 MB/sec
[info]                  ·gc.alloc.rate.norm:       44509.934 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58046.685 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 18689.866 ops/s
[info]                  ·gc.alloc.rate:      522.761 MB/sec
[info]                  ·gc.alloc.rate.norm: 44016.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 18512.296 ops/s
[info]                  ·gc.alloc.rate:            517.877 MB/sec
[info]                  ·gc.alloc.rate.norm:       44024.991 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57194.025 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 18470.914 ops/s
[info]                  ·gc.alloc.rate:            516.545 MB/sec
[info]                  ·gc.alloc.rate.norm:       44016.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57320.944 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   18329.150 ±(99.9%) 1426.048 ops/s [Average]
[info]   (min, avg, max) = (17731.571, 18329.150, 18689.866), stdev = 370.340
[info]   CI (99.9%): [16903.102, 19755.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   514.438 ±(99.9%) 34.475 MB/sec [Average]
[info]   (min, avg, max) = (499.170, 514.438, 522.761), stdev = 8.953
[info]   CI (99.9%): [479.964, 548.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44174.416 ±(99.9%) 865.661 B/op [Average]
[info]   (min, avg, max) = (44016.022, 44174.416, 44509.934), stdev = 224.809
[info]   CI (99.9%): [43308.754, 45040.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.190 ±(99.9%) 1158.495 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.190, 672.788), stdev = 300.857
[info]   CI (99.9%): [≈ 0, 1696.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   46454.840 ±(99.9%) 100072.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46454.840, 59712.548), stdev = 25988.421
[info]   CI (99.9%): [≈ 0, 146526.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.600, 10.000), stdev = 4.278
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.73% complete, ETA 01:03:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90458.259 ops/s
[info] # Warmup Iteration   2: 109013.453 ops/s
[info] # Warmup Iteration   3: 112485.212 ops/s
[info] # Warmup Iteration   4: 113667.806 ops/s
[info] # Warmup Iteration   5: 110023.254 ops/s
[info] Iteration   1: 114315.508 ops/s
[info]                  ·gc.alloc.rate:      287.249 MB/sec
[info]                  ·gc.alloc.rate.norm: 3954.347 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 113726.428 ops/s
[info]                  ·gc.alloc.rate:            285.783 MB/sec
[info]                  ·gc.alloc.rate.norm:       3952.476 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9307.432 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 114488.509 ops/s
[info]                  ·gc.alloc.rate:      287.466 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 114532.979 ops/s
[info]                  ·gc.alloc.rate:      287.565 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 113372.572 ops/s
[info]                  ·gc.alloc.rate:            284.649 MB/sec
[info]                  ·gc.alloc.rate.norm:       3952.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9358.158 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   114087.199 ±(99.9%) 1975.442 ops/s [Average]
[info]   (min, avg, max) = (113372.572, 114087.199, 114532.979), stdev = 513.016
[info]   CI (99.9%): [112111.757, 116062.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   286.543 ±(99.9%) 4.931 MB/sec [Average]
[info]   (min, avg, max) = (284.649, 286.543, 287.565), stdev = 1.281
[info]   CI (99.9%): [281.611, 291.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3952.567 ±(99.9%) 3.912 B/op [Average]
[info]   (min, avg, max) = (3952.004, 3952.567, 3954.347), stdev = 1.016
[info]   CI (99.9%): [3948.655, 3956.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.402 ±(99.9%) 1420.478 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.402, 674.036), stdev = 368.894
[info]   CI (99.9%): [≈ 0, 1689.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3733.118 ±(99.9%) 19683.774 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3733.118, 9358.158), stdev = 5111.814
[info]   CI (99.9%): [≈ 0, 23416.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 7.000), stdev = 3.834
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.96% complete, ETA 01:02:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3657.780 ops/s
[info] # Warmup Iteration   2: 13583.696 ops/s
[info] # Warmup Iteration   3: 14910.300 ops/s
[info] # Warmup Iteration   4: 15109.667 ops/s
[info] # Warmup Iteration   5: 15154.354 ops/s
[info] Iteration   1: 14950.934 ops/s
[info]                  ·gc.alloc.rate:                   905.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              95306.339 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        141712.725 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 70.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 15202.381 ops/s
[info]                  ·gc.alloc.rate:            920.328 MB/sec
[info]                  ·gc.alloc.rate.norm:       95272.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.507 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69721.166 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 14859.545 ops/s
[info]                  ·gc.alloc.rate:            907.930 MB/sec
[info]                  ·gc.alloc.rate.norm:       96156.192 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 142519.413 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   4: 14460.609 ops/s
[info]                  ·gc.alloc.rate:                   882.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              96042.683 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.939 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        73220.531 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 72.496 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 14712.328 ops/s
[info]                  ·gc.alloc.rate:            895.534 MB/sec
[info]                  ·gc.alloc.rate.norm:       95818.656 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72042.836 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   14837.159 ±(99.9%) 1061.908 ops/s [Average]
[info]   (min, avg, max) = (14460.609, 14837.159, 15202.381), stdev = 275.774
[info]   CI (99.9%): [13775.251, 15899.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   902.355 ±(99.9%) 54.322 MB/sec [Average]
[info]   (min, avg, max) = (882.688, 902.355, 920.328), stdev = 14.107
[info]   CI (99.9%): [848.032, 956.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   95719.179 ±(99.9%) 1582.882 B/op [Average]
[info]   (min, avg, max) = (95272.027, 95719.179, 96156.192), stdev = 411.069
[info]   CI (99.9%): [94136.297, 97302.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   942.313 ±(99.9%) 1418.662 MB/sec [Average]
[info]   (min, avg, max) = (672.939, 942.313, 1346.096), stdev = 368.422
[info]   CI (99.9%): [≈ 0, 2360.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   99843.334 ±(99.9%) 148677.745 B/op [Average]
[info]   (min, avg, max) = (69721.166, 99843.334, 142519.413), stdev = 38611.138
[info]   CI (99.9%): [≈ 0, 248521.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   28.523 ±(99.9%) 150.429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.523, 72.496), stdev = 39.066
[info]   CI (99.9%): [≈ 0, 178.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 12.800, 18.000), stdev = 4.764
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.19% complete, ETA 01:02:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19964.622 ops/s
[info] # Warmup Iteration   2: 47679.136 ops/s
[info] # Warmup Iteration   3: 46213.017 ops/s
[info] # Warmup Iteration   4: 48057.671 ops/s
[info] # Warmup Iteration   5: 47390.245 ops/s
[info] Iteration   1: 47140.923 ops/s
[info]                  ·gc.alloc.rate:            842.575 MB/sec
[info]                  ·gc.alloc.rate.norm:       28135.196 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22506.499 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 46833.111 ops/s
[info]                  ·gc.alloc.rate:            838.103 MB/sec
[info]                  ·gc.alloc.rate.norm:       28163.563 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.934 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 45262.273 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   3: 47633.225 ops/s
[info]                  ·gc.alloc.rate:                   848.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              28048.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22252.059 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 22.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 47571.159 ops/s
[info]                  ·gc.alloc.rate:            848.028 MB/sec
[info]                  ·gc.alloc.rate.norm:       28048.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22303.563 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 47419.578 ops/s
[info]                  ·gc.alloc.rate:            845.333 MB/sec
[info]                  ·gc.alloc.rate.norm:       28058.534 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22351.993 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   47319.599 ±(99.9%) 1277.456 ops/s [Average]
[info]   (min, avg, max) = (46833.111, 47319.599, 47633.225), stdev = 331.751
[info]   CI (99.9%): [46042.144, 48597.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   844.569 ±(99.9%) 16.815 MB/sec [Average]
[info]   (min, avg, max) = (838.103, 844.569, 848.805), stdev = 4.367
[info]   CI (99.9%): [827.754, 861.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   28090.662 ±(99.9%) 210.633 B/op [Average]
[info]   (min, avg, max) = (28048.009, 28090.662, 28163.563), stdev = 54.701
[info]   CI (99.9%): [27880.029, 28301.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   808.421 ±(99.9%) 1159.191 MB/sec [Average]
[info]   (min, avg, max) = (673.405, 808.421, 1346.934), stdev = 301.038
[info]   CI (99.9%): [≈ 0, 1967.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   26935.277 ±(99.9%) 39451.941 B/op [Average]
[info]   (min, avg, max) = (22252.059, 26935.277, 45262.273), stdev = 10245.544
[info]   CI (99.9%): [≈ 0, 66387.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.402 ±(99.9%) 37.902 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.402, 22.010), stdev = 9.843
[info]   CI (99.9%): [≈ 0, 42.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.800, 17.000), stdev = 4.025
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.42% complete, ETA 01:02:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28820.013 ops/s
[info] # Warmup Iteration   2: 67631.155 ops/s
[info] # Warmup Iteration   3: 69483.264 ops/s
[info] # Warmup Iteration   4: 69121.268 ops/s
[info] # Warmup Iteration   5: 68649.729 ops/s
[info] Iteration   1: 69365.533 ops/s
[info]                  ·gc.alloc.rate:            992.053 MB/sec
[info]                  ·gc.alloc.rate.norm:       22512.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30561.739 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 69334.255 ops/s
[info]                  ·gc.alloc.rate:                   998.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              22657.585 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        15272.139 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.121 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 69237.709 ops/s
[info]                  ·gc.alloc.rate:            990.348 MB/sec
[info]                  ·gc.alloc.rate.norm:       22514.402 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30603.531 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   4: 69714.732 ops/s
[info]                  ·gc.alloc.rate:                   997.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              22512.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.848 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        15188.472 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 68187.003 ops/s
[info]                  ·gc.alloc.rate:                   975.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              22519.546 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        31166.526 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 92.254 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   69167.846 ±(99.9%) 2222.718 ops/s [Average]
[info]   (min, avg, max) = (68187.003, 69167.846, 69714.732), stdev = 577.233
[info]   CI (99.9%): [66945.128, 71390.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   990.810 ±(99.9%) 34.670 MB/sec [Average]
[info]   (min, avg, max) = (975.907, 990.810, 998.463), stdev = 9.004
[info]   CI (99.9%): [956.140, 1025.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22543.109 ±(99.9%) 246.703 B/op [Average]
[info]   (min, avg, max) = (22512.006, 22543.109, 22657.585), stdev = 64.068
[info]   CI (99.9%): [22296.407, 22789.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1077.888 ±(99.9%) 1423.511 MB/sec [Average]
[info]   (min, avg, max) = (672.848, 1077.888, 1350.633), stdev = 369.681
[info]   CI (99.9%): [≈ 0, 2501.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   24558.481 ±(99.9%) 32802.944 B/op [Average]
[info]   (min, avg, max) = (15188.472, 24558.481, 31166.526), stdev = 8518.821
[info]   CI (99.9%): [≈ 0, 57361.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.440 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.998), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   24.483 ±(99.9%) 148.744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.483, 92.254), stdev = 38.628
[info]   CI (99.9%): [≈ 0, 173.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   69.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.800, 18.000), stdev = 4.550
[info]   CI (99.9%): [69.000, 69.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.65% complete, ETA 01:02:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 207363.129 ops/s
[info] # Warmup Iteration   2: 280930.129 ops/s
[info] # Warmup Iteration   3: 288324.862 ops/s
[info] # Warmup Iteration   4: 290418.949 ops/s
[info] # Warmup Iteration   5: 290185.421 ops/s
[info] Iteration   1: 291253.340 ops/s
[info]                  ·gc.alloc.rate:      558.068 MB/sec
[info]                  ·gc.alloc.rate.norm: 3016.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 288013.895 ops/s
[info]                  ·gc.alloc.rate:                   552.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              3018.764 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3680.044 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.640 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 288660.933 ops/s
[info]                  ·gc.alloc.rate:            554.446 MB/sec
[info]                  ·gc.alloc.rate.norm:       3023.389 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3675.684 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 288173.965 ops/s
[info]                  ·gc.alloc.rate:            553.303 MB/sec
[info]                  ·gc.alloc.rate.norm:       3022.156 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3681.742 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 289800.763 ops/s
[info]                  ·gc.alloc.rate:            555.683 MB/sec
[info]                  ·gc.alloc.rate.norm:       3018.211 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3660.923 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   289180.579 ±(99.9%) 5210.983 ops/s [Average]
[info]   (min, avg, max) = (288013.895, 289180.579, 291253.340), stdev = 1353.276
[info]   CI (99.9%): [283969.596, 294391.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   554.775 ±(99.9%) 8.546 MB/sec [Average]
[info]   (min, avg, max) = (552.375, 554.775, 558.068), stdev = 2.219
[info]   CI (99.9%): [546.229, 563.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3019.704 ±(99.9%) 11.617 B/op [Average]
[info]   (min, avg, max) = (3016.002, 3019.704, 3023.389), stdev = 3.017
[info]   CI (99.9%): [3008.087, 3031.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.104 ±(99.9%) 1160.462 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.104, 674.068), stdev = 301.368
[info]   CI (99.9%): [≈ 0, 1699.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2939.679 ±(99.9%) 6327.959 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2939.679, 3681.742), stdev = 1643.351
[info]   CI (99.9%): [≈ 0, 9267.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.728 ±(99.9%) 6.268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.728, 3.640), stdev = 1.628
[info]   CI (99.9%): [≈ 0, 6.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.200, 8.000), stdev = 3.493
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 46.88% complete, ETA 01:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 244546.398 ops/s
[info] # Warmup Iteration   2: 321917.746 ops/s
[info] # Warmup Iteration   3: 328090.598 ops/s
[info] # Warmup Iteration   4: 329267.649 ops/s
[info] # Warmup Iteration   5: 312764.939 ops/s
[info] Iteration   1: 327327.020 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 324661.752 ops/s
[info]                  ·gc.alloc.rate:      0.012 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.056 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 326822.821 ops/s
[info]                  ·gc.alloc.rate:      0.663 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.195 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 327274.287 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 327182.546 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   326653.685 ±(99.9%) 4354.219 ops/s [Average]
[info]   (min, avg, max) = (324661.752, 326653.685, 327327.020), stdev = 1130.777
[info]   CI (99.9%): [322299.466, 331007.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.135 ±(99.9%) 1.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.135, 0.663), stdev = 0.295
[info]   CI (99.9%): [≈ 0, 1.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.651 ±(99.9%) 5.476 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.651, 3.195), stdev = 1.422
[info]   CI (99.9%): [≈ 0, 6.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 47.11% complete, ETA 01:01:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30143.130 ops/s
[info] # Warmup Iteration   2: 55357.953 ops/s
[info] # Warmup Iteration   3: 57333.437 ops/s
[info] # Warmup Iteration   4: 56989.820 ops/s
[info] # Warmup Iteration   5: 57333.902 ops/s
[info] Iteration   1: 57848.091 ops/s
[info]                  ·gc.alloc.rate:            1035.851 MB/sec
[info]                  ·gc.alloc.rate.norm:       28184.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18322.623 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 57038.140 ops/s
[info]                  ·gc.alloc.rate:            1022.753 MB/sec
[info]                  ·gc.alloc.rate.norm:       28218.359 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37165.557 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 57749.673 ops/s
[info]                  ·gc.alloc.rate:                   1034.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              28184.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18335.557 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.154 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 58112.984 ops/s
[info]                  ·gc.alloc.rate:                   1040.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              28192.801 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36480.053 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 72.166 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   5: 58667.237 ops/s
[info]                  ·gc.alloc.rate:                   1055.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              28316.476 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.151 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18138.052 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 35.740 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   57883.225 ±(99.9%) 2278.645 ops/s [Average]
[info]   (min, avg, max) = (57038.140, 57883.225, 58667.237), stdev = 591.757
[info]   CI (99.9%): [55604.581, 60161.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1037.801 ±(99.9%) 45.956 MB/sec [Average]
[info]   (min, avg, max) = (1022.753, 1037.801, 1055.583), stdev = 11.935
[info]   CI (99.9%): [991.845, 1083.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28219.134 ±(99.9%) 216.425 B/op [Average]
[info]   (min, avg, max) = (28184.008, 28219.134, 28316.476), stdev = 56.205
[info]   CI (99.9%): [28002.709, 28435.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   943.209 ±(99.9%) 1419.008 MB/sec [Average]
[info]   (min, avg, max) = (672.697, 943.209, 1347.038), stdev = 368.512
[info]   CI (99.9%): [≈ 0, 2362.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   25688.368 ±(99.9%) 39151.393 B/op [Average]
[info]   (min, avg, max) = (18138.052, 25688.368, 37165.557), stdev = 10167.492
[info]   CI (99.9%): [≈ 0, 64839.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 4.292 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 2.664), stdev = 1.115
[info]   CI (99.9%): [≈ 0, 5.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   25.212 ±(99.9%) 116.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.212, 72.166), stdev = 30.152
[info]   CI (99.9%): [≈ 0, 141.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 11.800, 18.000), stdev = 5.762
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.34% complete, ETA 01:01:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65077.179 ops/s
[info] # Warmup Iteration   2: 123437.780 ops/s
[info] # Warmup Iteration   3: 132660.265 ops/s
[info] # Warmup Iteration   4: 130431.134 ops/s
[info] # Warmup Iteration   5: 130381.345 ops/s
[info] Iteration   1: 132616.033 ops/s
[info]                  ·gc.alloc.rate:                   1623.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              19266.515 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2022.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        23993.879 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.529 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 133453.338 ops/s
[info]                  ·gc.alloc.rate:                   1633.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              19263.844 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.824 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        15979.289 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 47.137 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 135064.699 ops/s
[info]                  ·gc.alloc.rate:                   1652.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              19256.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2043.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        23814.690 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.762 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 136808.250 ops/s
[info]                  ·gc.alloc.rate:            1673.998 MB/sec
[info]                  ·gc.alloc.rate.norm:       19256.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15679.097 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 136181.340 ops/s
[info]                  ·gc.alloc.rate:            1666.212 MB/sec
[info]                  ·gc.alloc.rate.norm:       19256.557 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.940 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15751.621 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   134824.732 ±(99.9%) 6831.878 ops/s [Average]
[info]   (min, avg, max) = (132616.033, 134824.732, 136808.250), stdev = 1774.217
[info]   CI (99.9%): [127992.854, 141656.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1649.953 ±(99.9%) 82.053 MB/sec [Average]
[info]   (min, avg, max) = (1623.686, 1649.953, 1673.998), stdev = 21.309
[info]   CI (99.9%): [1567.900, 1732.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19259.784 ±(99.9%) 19.329 B/op [Average]
[info]   (min, avg, max) = (19256.003, 19259.784, 19266.515), stdev = 5.020
[info]   CI (99.9%): [19240.455, 19279.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1629.336 ±(99.9%) 1419.077 MB/sec [Average]
[info]   (min, avg, max) = (1354.824, 1629.336, 2043.787), stdev = 368.530
[info]   CI (99.9%): [210.259, 3048.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   19043.715 ±(99.9%) 17092.649 B/op [Average]
[info]   (min, avg, max) = (15679.097, 19043.715, 23993.879), stdev = 4438.907
[info]   CI (99.9%): [1951.066, 36136.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 7.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 3.997), stdev = 1.919
[info]   CI (99.9%): [≈ 0, 8.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   18.885 ±(99.9%) 87.413 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.885, 47.137), stdev = 22.701
[info]   CI (99.9%): [≈ 0, 106.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 24.000), stdev = 9.017
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 47.58% complete, ETA 01:01:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.830 ops/s
[info] # Warmup Iteration   2: 714353.461 ops/s
[info] # Warmup Iteration   3: 754246.767 ops/s
[info] # Warmup Iteration   4: 753628.050 ops/s
[info] # Warmup Iteration   5: 768707.635 ops/s
[info] Iteration   1: 763381.557 ops/s
[info]                  ·gc.alloc.rate:            422.961 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.809 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1382.980 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 756648.527 ops/s
[info]                  ·gc.alloc.rate:            421.771 MB/sec
[info]                  ·gc.alloc.rate.norm:       877.226 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.849 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1395.273 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 764674.815 ops/s
[info]                  ·gc.alloc.rate:      426.045 MB/sec
[info]                  ·gc.alloc.rate.norm: 876.796 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 752637.014 ops/s
[info]                  ·gc.alloc.rate:            419.210 MB/sec
[info]                  ·gc.alloc.rate.norm:       876.495 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.899 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1402.733 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 756018.301 ops/s
[info]                  ·gc.alloc.rate:            418.935 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.901 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1396.461 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   758672.043 ±(99.9%) 19801.011 ops/s [Average]
[info]   (min, avg, max) = (752637.014, 758672.043, 764674.815), stdev = 5142.260
[info]   CI (99.9%): [738871.032, 778473.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   421.784 ±(99.9%) 11.273 MB/sec [Average]
[info]   (min, avg, max) = (418.935, 421.784, 426.045), stdev = 2.928
[info]   CI (99.9%): [410.511, 433.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   874.904 ±(99.9%) 10.253 B/op [Average]
[info]   (min, avg, max) = (872.001, 874.904, 877.226), stdev = 2.663
[info]   CI (99.9%): [864.650, 885.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   536.692 ±(99.9%) 1155.269 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.692, 670.901), stdev = 300.020
[info]   CI (99.9%): [≈ 0, 1691.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1115.489 ±(99.9%) 2401.333 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1115.489, 1402.733), stdev = 623.619
[info]   CI (99.9%): [≈ 0, 3516.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 8.000, 10.000), stdev = 4.472
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.81% complete, ETA 01:00:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126535.203 ops/s
[info] # Warmup Iteration   2: 295199.212 ops/s
[info] # Warmup Iteration   3: 295080.258 ops/s
[info] # Warmup Iteration   4: 301163.089 ops/s
[info] # Warmup Iteration   5: 297573.171 ops/s
[info] Iteration   1: 300799.991 ops/s
[info]                  ·gc.alloc.rate:      307.873 MB/sec
[info]                  ·gc.alloc.rate.norm: 1610.973 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 297173.425 ops/s
[info]                  ·gc.alloc.rate:            304.525 MB/sec
[info]                  ·gc.alloc.rate.norm:       1613.140 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3566.693 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 299235.029 ops/s
[info]                  ·gc.alloc.rate:      305.768 MB/sec
[info]                  ·gc.alloc.rate.norm: 1608.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 297606.464 ops/s
[info]                  ·gc.alloc.rate:            304.605 MB/sec
[info]                  ·gc.alloc.rate.norm:       1610.242 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.523 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3555.175 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 301082.308 ops/s
[info]                  ·gc.alloc.rate:      307.641 MB/sec
[info]                  ·gc.alloc.rate.norm: 1608.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   299179.444 ±(99.9%) 6874.378 ops/s [Average]
[info]   (min, avg, max) = (297173.425, 299179.444, 301082.308), stdev = 1785.254
[info]   CI (99.9%): [292305.066, 306053.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   306.082 ±(99.9%) 6.192 MB/sec [Average]
[info]   (min, avg, max) = (304.525, 306.082, 307.873), stdev = 1.608
[info]   CI (99.9%): [299.891, 312.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1610.072 ±(99.9%) 8.355 B/op [Average]
[info]   (min, avg, max) = (1608.001, 1610.072, 1613.140), stdev = 2.170
[info]   CI (99.9%): [1601.717, 1618.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   269.167 ±(99.9%) 1419.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.167, 673.312), stdev = 368.572
[info]   CI (99.9%): [≈ 0, 1688.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1424.374 ±(99.9%) 7510.327 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1424.374, 3566.693), stdev = 1950.408
[info]   CI (99.9%): [≈ 0, 8934.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 9.000), stdev = 4.930
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.04% complete, ETA 01:00:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 850902.339 ops/s
[info] # Warmup Iteration   2: 1022125.961 ops/s
[info] # Warmup Iteration   3: 1077268.465 ops/s
[info] # Warmup Iteration   4: 1090074.083 ops/s
[info] # Warmup Iteration   5: 1099492.788 ops/s
[info] Iteration   1: 1055696.235 ops/s
[info]                  ·gc.alloc.rate:            366.558 MB/sec
[info]                  ·gc.alloc.rate.norm:       546.444 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.171 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1005.017 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 1094027.992 ops/s
[info]                  ·gc.alloc.rate:      378.371 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.275 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1087966.849 ops/s
[info]                  ·gc.alloc.rate:            376.477 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.437 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 975.205 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1090268.687 ops/s
[info]                  ·gc.alloc.rate:            376.809 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 973.172 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 1097266.835 ops/s
[info]                  ·gc.alloc.rate:      379.384 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   1085045.320 ±(99.9%) 64641.565 ops/s [Average]
[info]   (min, avg, max) = (1055696.235, 1085045.320, 1097266.835), stdev = 16787.209
[info]   CI (99.9%): [1020403.755, 1149686.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   375.520 ±(99.9%) 19.819 MB/sec [Average]
[info]   (min, avg, max) = (366.558, 375.520, 379.384), stdev = 5.147
[info]   CI (99.9%): [355.701, 395.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.631 ±(99.9%) 3.967 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.631, 546.444), stdev = 1.030
[info]   CI (99.9%): [540.664, 548.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.521 ±(99.9%) 1421.947 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.521, 674.352), stdev = 369.275
[info]   CI (99.9%): [≈ 0, 1826.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   590.679 ±(99.9%) 2076.887 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 590.679, 1005.017), stdev = 539.361
[info]   CI (99.9%): [≈ 0, 2667.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 8.000), stdev = 4.037
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.27% complete, ETA 01:00:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18471.894 ops/s
[info] # Warmup Iteration   2: 53024.076 ops/s
[info] # Warmup Iteration   3: 53541.525 ops/s
[info] # Warmup Iteration   4: 56183.105 ops/s
[info] # Warmup Iteration   5: 55525.881 ops/s
[info] Iteration   1: 56904.946 ops/s
[info]                  ·gc.alloc.rate:                   2217.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              61323.916 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2039.953 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        56415.865 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 110.547 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 56482.401 ops/s
[info]                  ·gc.alloc.rate:            2207.233 MB/sec
[info]                  ·gc.alloc.rate.norm:       61496.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56966.238 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 57011.586 ops/s
[info]                  ·gc.alloc.rate:            2221.026 MB/sec
[info]                  ·gc.alloc.rate.norm:       61320.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.189 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56437.737 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 56966.380 ops/s
[info]                  ·gc.alloc.rate:            2224.787 MB/sec
[info]                  ·gc.alloc.rate.norm:       61473.733 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.525 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75309.750 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 57036.263 ops/s
[info]                  ·gc.alloc.rate:            2222.829 MB/sec
[info]                  ·gc.alloc.rate.norm:       61331.812 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.487 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56411.025 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   56880.315 ±(99.9%) 877.874 ops/s [Average]
[info]   (min, avg, max) = (56482.401, 56880.315, 57036.263), stdev = 227.981
[info]   CI (99.9%): [56002.442, 57758.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2218.660 ±(99.9%) 26.722 MB/sec [Average]
[info]   (min, avg, max) = (2207.233, 2218.660, 2224.787), stdev = 6.940
[info]   CI (99.9%): [2191.938, 2245.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   61389.111 ±(99.9%) 338.519 B/op [Average]
[info]   (min, avg, max) = (61320.007, 61389.111, 61496.090), stdev = 87.912
[info]   CI (99.9%): [61050.593, 61727.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2179.760 ±(99.9%) 1174.824 MB/sec [Average]
[info]   (min, avg, max) = (2039.953, 2179.760, 2725.525), stdev = 305.098
[info]   CI (99.9%): [1004.936, 3354.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   60308.123 ±(99.9%) 32304.925 B/op [Average]
[info]   (min, avg, max) = (56411.025, 60308.123, 75309.750), stdev = 8389.487
[info]   CI (99.9%): [28003.198, 92613.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   22.109 ±(99.9%) 190.369 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.109, 110.547), stdev = 49.438
[info]   CI (99.9%): [≈ 0, 212.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 9.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.50% complete, ETA 01:00:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 123463.280 ops/s
[info] # Warmup Iteration   2: 237371.329 ops/s
[info] # Warmup Iteration   3: 231353.431 ops/s
[info] # Warmup Iteration   4: 242725.831 ops/s
[info] # Warmup Iteration   5: 238317.029 ops/s
[info] Iteration   1: 239689.099 ops/s
[info]                  ·gc.alloc.rate:                   1092.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              7176.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8848.946 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.374 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 241649.434 ops/s
[info]                  ·gc.alloc.rate:            1109.812 MB/sec
[info]                  ·gc.alloc.rate.norm:       7228.603 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4390.760 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 239441.442 ops/s
[info]                  ·gc.alloc.rate:            1091.977 MB/sec
[info]                  ·gc.alloc.rate.norm:       7177.939 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.258 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8862.562 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   4: 236091.554 ops/s
[info]                  ·gc.alloc.rate:                   1076.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              7176.943 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.131 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9001.510 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.086 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 243779.759 ops/s
[info]                  ·gc.alloc.rate:                   1111.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              7176.528 B/op
[info]                  ·gc.churn.G1_Old_Gen:             678.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4377.990 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.202 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   240130.258 ±(99.9%) 10994.073 ops/s [Average]
[info]   (min, avg, max) = (236091.554, 240130.258, 243779.759), stdev = 2855.126
[info]   CI (99.9%): [229136.185, 251124.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1096.567 ±(99.9%) 56.262 MB/sec [Average]
[info]   (min, avg, max) = (1076.465, 1096.567, 1111.982), stdev = 14.611
[info]   CI (99.9%): [1040.305, 1152.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7187.208 ±(99.9%) 89.147 B/op [Average]
[info]   (min, avg, max) = (7176.027, 7187.208, 7228.603), stdev = 23.151
[info]   CI (99.9%): [7098.061, 7276.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1079.635 ±(99.9%) 1418.020 MB/sec [Average]
[info]   (min, avg, max) = (674.116, 1079.635, 1350.131), stdev = 368.255
[info]   CI (99.9%): [≈ 0, 2497.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7096.354 ±(99.9%) 9535.774 B/op [Average]
[info]   (min, avg, max) = (4377.990, 7096.354, 9001.510), stdev = 2476.410
[info]   CI (99.9%): [≈ 0, 16632.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 9.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   10.532 ±(99.9%) 51.902 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.532, 31.086), stdev = 13.479
[info]   CI (99.9%): [≈ 0, 62.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 11.400, 16.000), stdev = 5.273
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48.73% complete, ETA 00:59:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.767 ops/s
[info] # Warmup Iteration   2: 1106633.002 ops/s
[info] # Warmup Iteration   3: 1125199.227 ops/s
[info] # Warmup Iteration   4: 1146562.498 ops/s
[info] # Warmup Iteration   5: 1159737.494 ops/s
[info] Iteration   1: 1148218.611 ops/s
[info]                  ·gc.alloc.rate:            391.072 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.851 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 919.463 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 1162166.652 ops/s
[info]                  ·gc.alloc.rate:      395.879 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1144832.385 ops/s
[info]                  ·gc.alloc.rate:            393.147 MB/sec
[info]                  ·gc.alloc.rate.norm:       540.482 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 922.172 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 1149853.477 ops/s
[info]                  ·gc.alloc.rate:            391.636 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.868 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 918.162 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 1162907.000 ops/s
[info]                  ·gc.alloc.rate:      396.053 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1153595.625 ±(99.9%) 32209.581 ops/s [Average]
[info]   (min, avg, max) = (1144832.385, 1153595.625, 1162907.000), stdev = 8364.726
[info]   CI (99.9%): [1121386.045, 1185805.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   393.557 ±(99.9%) 8.959 MB/sec [Average]
[info]   (min, avg, max) = (391.072, 393.557, 396.053), stdev = 2.327
[info]   CI (99.9%): [384.598, 402.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   536.897 ±(99.9%) 7.718 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.897, 540.482), stdev = 2.004
[info]   CI (99.9%): [529.179, 544.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   402.501 ±(99.9%) 1414.849 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.501, 670.868), stdev = 367.432
[info]   CI (99.9%): [≈ 0, 1817.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   551.959 ±(99.9%) 1940.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 551.959, 922.172), stdev = 503.870
[info]   CI (99.9%): [≈ 0, 2492.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.000, 10.000), stdev = 5.477
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.96% complete, ETA 00:59:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 375625.033 ops/s
[info] # Warmup Iteration   2: 889387.905 ops/s
[info] # Warmup Iteration   3: 905157.000 ops/s
[info] # Warmup Iteration   4: 906235.128 ops/s
[info] # Warmup Iteration   5: 900750.845 ops/s
[info] Iteration   1: 888578.235 ops/s
[info]                  ·gc.alloc.rate:            524.971 MB/sec
[info]                  ·gc.alloc.rate.norm:       929.873 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1192.836 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 879220.125 ops/s
[info]                  ·gc.alloc.rate:            513.942 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1205.520 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 885545.008 ops/s
[info]                  ·gc.alloc.rate:      517.655 MB/sec
[info]                  ·gc.alloc.rate.norm: 920.029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 861608.650 ops/s
[info]                  ·gc.alloc.rate:            510.105 MB/sec
[info]                  ·gc.alloc.rate.norm:       931.740 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.504 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1230.199 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 875228.193 ops/s
[info]                  ·gc.alloc.rate:            511.652 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1211.036 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   878036.042 ±(99.9%) 40690.744 ops/s [Average]
[info]   (min, avg, max) = (861608.650, 878036.042, 888578.235), stdev = 10567.257
[info]   CI (99.9%): [837345.298, 918726.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   515.665 ±(99.9%) 22.824 MB/sec [Average]
[info]   (min, avg, max) = (510.105, 515.665, 524.971), stdev = 5.927
[info]   CI (99.9%): [492.840, 538.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   924.331 ±(99.9%) 22.907 B/op [Average]
[info]   (min, avg, max) = (920.000, 924.331, 931.740), stdev = 5.949
[info]   CI (99.9%): [901.424, 947.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.776 ±(99.9%) 1159.755 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.776, 673.509), stdev = 301.185
[info]   CI (99.9%): [≈ 0, 1698.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   967.918 ±(99.9%) 2084.160 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 967.918, 1230.199), stdev = 541.250
[info]   CI (99.9%): [≈ 0, 3052.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.200, 9.000), stdev = 4.025
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.19% complete, ETA 00:59:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1290039.200 ops/s
[info] # Warmup Iteration   2: 1723379.024 ops/s
[info] # Warmup Iteration   3: 1747868.605 ops/s
[info] # Warmup Iteration   4: 1750666.645 ops/s
[info] # Warmup Iteration   5: 1719525.253 ops/s
[info] Iteration   1: 1738837.742 ops/s
[info]                  ·gc.alloc.rate:            594.083 MB/sec
[info]                  ·gc.alloc.rate.norm:       537.642 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.227 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 610.171 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1758544.956 ops/s
[info]                  ·gc.alloc.rate:            598.925 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.153 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 603.335 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 1752947.629 ops/s
[info]                  ·gc.alloc.rate:            598.056 MB/sec
[info]                  ·gc.alloc.rate.norm:       537.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 605.261 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1765916.612 ops/s
[info]                  ·gc.alloc.rate:      603.366 MB/sec
[info]                  ·gc.alloc.rate.norm: 537.772 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1757437.353 ops/s
[info]                  ·gc.alloc.rate:            598.540 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.152 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 603.712 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1754736.858 ±(99.9%) 38639.269 ops/s [Average]
[info]   (min, avg, max) = (1738837.742, 1754736.858, 1765916.612), stdev = 10034.496
[info]   CI (99.9%): [1716097.589, 1793376.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   598.594 ±(99.9%) 12.702 MB/sec [Average]
[info]   (min, avg, max) = (594.083, 598.594, 603.366), stdev = 3.299
[info]   CI (99.9%): [585.893, 611.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.916 ±(99.9%) 3.158 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.916, 537.772), stdev = 0.820
[info]   CI (99.9%): [533.758, 540.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.283 ±(99.9%) 1160.848 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.283, 674.227), stdev = 301.469
[info]   CI (99.9%): [≈ 0, 1700.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   484.496 ±(99.9%) 1042.967 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 484.496, 610.171), stdev = 270.855
[info]   CI (99.9%): [≈ 0, 1527.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.200, 8.000), stdev = 3.493
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 49.42% complete, ETA 00:58:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1231649.655 ops/s
[info] # Warmup Iteration   2: 1822161.820 ops/s
[info] # Warmup Iteration   3: 1858668.260 ops/s
[info] # Warmup Iteration   4: 1836939.199 ops/s
[info] # Warmup Iteration   5: 1853677.271 ops/s
[info] Iteration   1: 1857748.085 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1850747.018 ops/s
[info]                  ·gc.alloc.rate:      0.040 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.034 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1830341.560 ops/s
[info]                  ·gc.alloc.rate:      4.275 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.677 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1852031.402 ops/s
[info]                  ·gc.alloc.rate:      0.447 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.380 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1863928.010 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1850959.215 ±(99.9%) 48728.553 ops/s [Average]
[info]   (min, avg, max) = (1830341.560, 1850959.215, 1863928.010), stdev = 12654.650
[info]   CI (99.9%): [1802230.662, 1899687.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.953 ±(99.9%) 7.189 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.953, 4.275), stdev = 1.867
[info]   CI (99.9%): [≈ 0, 8.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.818 ±(99.9%) 6.184 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.818, 3.677), stdev = 1.606
[info]   CI (99.9%): [≈ 0, 7.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.65% complete, ETA 00:58:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15996.786 ops/s
[info] # Warmup Iteration   2: 37119.877 ops/s
[info] # Warmup Iteration   3: 37612.592 ops/s
[info] # Warmup Iteration   4: 38084.414 ops/s
[info] # Warmup Iteration   5: 38023.453 ops/s
[info] Iteration   1: 38295.487 ops/s
[info]                  ·gc.alloc.rate:                   1714.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              70496.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.584 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        55355.351 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 109.506 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 38292.138 ops/s
[info]                  ·gc.alloc.rate:                   1716.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              70523.977 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2035.641 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        83641.862 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 219.029 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 38877.471 ops/s
[info]                  ·gc.alloc.rate:                                  1742.153 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70521.828 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.708 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55174.017 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 38611.164 ops/s
[info]                  ·gc.alloc.rate:                                  1729.230 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70496.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.237 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83333.240 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 38662.470 ops/s
[info]                  ·gc.alloc.rate:            1731.954 MB/sec
[info]                  ·gc.alloc.rate.norm:       70498.264 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55480.786 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   38547.746 ±(99.9%) 971.996 ops/s [Average]
[info]   (min, avg, max) = (38292.138, 38547.746, 38877.471), stdev = 252.424
[info]   CI (99.9%): [37575.749, 39519.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1726.924 ±(99.9%) 43.832 MB/sec [Average]
[info]   (min, avg, max) = (1714.898, 1726.924, 1742.153), stdev = 11.383
[info]   CI (99.9%): [1683.092, 1770.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   70507.218 ±(99.9%) 55.324 B/op [Average]
[info]   (min, avg, max) = (70496.011, 70507.218, 70523.977), stdev = 14.368
[info]   CI (99.9%): [70451.894, 70562.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.189 ±(99.9%) 1.185 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.189, 0.708), stdev = 0.308
[info]   CI (99.9%): [≈ 0, 1.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.473 ±(99.9%) 1439.404 MB/sec [Average]
[info]   (min, avg, max) = (1346.584, 1630.473, 2044.121), stdev = 373.809
[info]   CI (99.9%): [191.069, 3069.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66597.051 ±(99.9%) 59375.459 B/op [Average]
[info]   (min, avg, max) = (55174.017, 66597.051, 83641.862), stdev = 15419.618
[info]   CI (99.9%): [7221.593, 125972.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 9.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 5.331), stdev = 2.384
[info]   CI (99.9%): [≈ 0, 10.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   65.707 ±(99.9%) 377.178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 65.707, 219.029), stdev = 97.952
[info]   CI (99.9%): [≈ 0, 442.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 18.000), stdev = 6.731
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.88% complete, ETA 00:58:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20439.389 ops/s
[info] # Warmup Iteration   2: 33869.974 ops/s
[info] # Warmup Iteration   3: 36875.703 ops/s
[info] # Warmup Iteration   4: 35317.072 ops/s
[info] # Warmup Iteration   5: 37391.592 ops/s
[info] Iteration   1: 37235.581 ops/s
[info]                  ·gc.alloc.rate:            694.827 MB/sec
[info]                  ·gc.alloc.rate.norm:       29369.472 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28492.077 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 36624.727 ops/s
[info]                  ·gc.alloc.rate:            689.705 MB/sec
[info]                  ·gc.alloc.rate.norm:       29640.479 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28966.504 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 37133.101 ops/s
[info]                  ·gc.alloc.rate:            693.961 MB/sec
[info]                  ·gc.alloc.rate.norm:       29412.610 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28571.861 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 37489.828 ops/s
[info]                  ·gc.alloc.rate:            699.313 MB/sec
[info]                  ·gc.alloc.rate.norm:       29360.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28298.326 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 36821.005 ops/s
[info]                  ·gc.alloc.rate:            686.991 MB/sec
[info]                  ·gc.alloc.rate.norm:       29364.524 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.256 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57629.398 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   37060.848 ±(99.9%) 1316.423 ops/s [Average]
[info]   (min, avg, max) = (36624.727, 37060.848, 37489.828), stdev = 341.871
[info]   CI (99.9%): [35744.425, 38377.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   692.959 ±(99.9%) 18.373 MB/sec [Average]
[info]   (min, avg, max) = (686.991, 692.959, 699.313), stdev = 4.771
[info]   CI (99.9%): [674.587, 711.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   29429.419 ±(99.9%) 461.481 B/op [Average]
[info]   (min, avg, max) = (29360.011, 29429.419, 29640.479), stdev = 119.845
[info]   CI (99.9%): [28967.938, 29890.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   808.899 ±(99.9%) 1161.006 MB/sec [Average]
[info]   (min, avg, max) = (674.022, 808.899, 1348.256), stdev = 301.510
[info]   CI (99.9%): [≈ 0, 1969.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   34391.633 ±(99.9%) 50029.803 B/op [Average]
[info]   (min, avg, max) = (28298.326, 34391.633, 57629.398), stdev = 12992.581
[info]   CI (99.9%): [≈ 0, 84421.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.200, 15.000), stdev = 3.271
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.12% complete, ETA 00:58:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27770.202 ops/s
[info] # Warmup Iteration   2: 56150.635 ops/s
[info] # Warmup Iteration   3: 57952.227 ops/s
[info] # Warmup Iteration   4: 59168.833 ops/s
[info] # Warmup Iteration   5: 58994.757 ops/s
[info] Iteration   1: 58272.819 ops/s
[info]                  ·gc.alloc.rate:                   616.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              16648.986 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18170.712 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.991 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 59449.051 ops/s
[info]                  ·gc.alloc.rate:            623.916 MB/sec
[info]                  ·gc.alloc.rate.norm:       16520.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17829.566 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 59602.660 ops/s
[info]                  ·gc.alloc.rate:            625.658 MB/sec
[info]                  ·gc.alloc.rate.norm:       16520.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.844 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17765.916 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 60204.583 ops/s
[info]                  ·gc.alloc.rate:      631.817 MB/sec
[info]                  ·gc.alloc.rate.norm: 16520.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 59683.454 ops/s
[info]                  ·gc.alloc.rate:            626.481 MB/sec
[info]                  ·gc.alloc.rate.norm:       16520.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17741.511 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   59442.513 ±(99.9%) 2744.969 ops/s [Average]
[info]   (min, avg, max) = (58272.819, 59442.513, 60204.583), stdev = 712.860
[info]   CI (99.9%): [56697.544, 62187.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   624.841 ±(99.9%) 21.550 MB/sec [Average]
[info]   (min, avg, max) = (616.332, 624.841, 631.817), stdev = 5.596
[info]   CI (99.9%): [603.291, 646.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16545.803 ±(99.9%) 222.110 B/op [Average]
[info]   (min, avg, max) = (16520.007, 16545.803, 16648.986), stdev = 57.681
[info]   CI (99.9%): [16323.693, 16767.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.337 ±(99.9%) 1158.812 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.337, 673.375), stdev = 300.940
[info]   CI (99.9%): [≈ 0, 1697.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   14301.541 ±(99.9%) 30792.321 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14301.541, 18170.712), stdev = 7996.668
[info]   CI (99.9%): [≈ 0, 45093.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.598 ±(99.9%) 30.981 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.598, 17.991), stdev = 8.046
[info]   CI (99.9%): [≈ 0, 34.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.200, 9.000), stdev = 4.025
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.35% complete, ETA 00:57:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145922.003 ops/s
[info] # Warmup Iteration   2: 178425.510 ops/s
[info] # Warmup Iteration   3: 188861.197 ops/s
[info] # Warmup Iteration   4: 187892.762 ops/s
[info] # Warmup Iteration   5: 185665.824 ops/s
[info] Iteration   1: 193439.005 ops/s
[info]                  ·gc.alloc.rate:            629.581 MB/sec
[info]                  ·gc.alloc.rate.norm:       5122.462 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5484.847 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 189307.881 ops/s
[info]                  ·gc.alloc.rate:            629.431 MB/sec
[info]                  ·gc.alloc.rate.norm:       5233.818 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5604.663 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 193283.901 ops/s
[info]                  ·gc.alloc.rate:            629.079 MB/sec
[info]                  ·gc.alloc.rate.norm:       5121.821 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.211 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5489.274 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 194462.815 ops/s
[info]                  ·gc.alloc.rate:            632.647 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.178 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5456.110 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 192378.470 ops/s
[info]                  ·gc.alloc.rate:            627.691 MB/sec
[info]                  ·gc.alloc.rate.norm:       5135.224 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5514.834 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   192574.414 ±(99.9%) 7586.253 ops/s [Average]
[info]   (min, avg, max) = (189307.881, 192574.414, 194462.815), stdev = 1970.126
[info]   CI (99.9%): [184988.161, 200160.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   629.686 ±(99.9%) 6.993 MB/sec [Average]
[info]   (min, avg, max) = (627.691, 629.686, 632.647), stdev = 1.816
[info]   CI (99.9%): [622.693, 636.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5146.665 ±(99.9%) 189.040 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5146.665, 5233.818), stdev = 49.093
[info]   CI (99.9%): [4957.626, 5335.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.126 ±(99.9%) 0.275 MB/sec [Average]
[info]   (min, avg, max) = (674.030, 674.126, 674.211), stdev = 0.071
[info]   CI (99.9%): [673.851, 674.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5509.946 ±(99.9%) 219.105 B/op [Average]
[info]   (min, avg, max) = (5456.110, 5509.946, 5604.663), stdev = 56.901
[info]   CI (99.9%): [5290.841, 5729.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.58% complete, ETA 00:57:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5042.154 ops/s
[info] # Warmup Iteration   2: 18926.834 ops/s
[info] # Warmup Iteration   3: 21069.004 ops/s
[info] # Warmup Iteration   4: 21228.229 ops/s
[info] # Warmup Iteration   5: 21715.920 ops/s
[info] Iteration   1: 20873.329 ops/s
[info]                  ·gc.alloc.rate:                   1069.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              80680.853 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.302 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        101457.275 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 50.226 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 21171.957 ops/s
[info]                  ·gc.alloc.rate:            1059.578 MB/sec
[info]                  ·gc.alloc.rate.norm:       78763.294 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.467 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50061.878 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 21525.015 ops/s
[info]                  ·gc.alloc.rate:                   1067.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              78032.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.502 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        98384.668 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 48.705 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   4: 20949.509 ops/s
[info]                  ·gc.alloc.rate:                   1038.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              78032.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        101134.490 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 250.209 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   5: 21247.525 ops/s
[info]                  ·gc.alloc.rate:                   1053.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              78042.475 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.220 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        50082.567 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.999 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 148.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   21153.467 ±(99.9%) 995.436 ops/s [Average]
[info]   (min, avg, max) = (20873.329, 21153.467, 21525.015), stdev = 258.512
[info]   CI (99.9%): [20158.032, 22148.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1057.776 ±(99.9%) 47.958 MB/sec [Average]
[info]   (min, avg, max) = (1038.593, 1057.776, 1069.811), stdev = 12.454
[info]   CI (99.9%): [1009.818, 1105.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78710.132 ±(99.9%) 4412.310 B/op [Average]
[info]   (min, avg, max) = (78032.019, 78710.132, 80680.853), stdev = 1145.863
[info]   CI (99.9%): [74297.822, 83122.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1077.315 ±(99.9%) 1414.749 MB/sec [Average]
[info]   (min, avg, max) = (673.467, 1077.315, 1346.083), stdev = 367.406
[info]   CI (99.9%): [≈ 0, 2492.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   80224.176 ±(99.9%) 106088.034 B/op [Average]
[info]   (min, avg, max) = (50061.878, 80224.176, 101457.275), stdev = 27550.726
[info]   CI (99.9%): [≈ 0, 186312.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 5.130 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 3.330), stdev = 1.332
[info]   CI (99.9%): [≈ 0, 6.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   99.434 ±(99.9%) 384.950 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 99.434, 250.209), stdev = 99.970
[info]   CI (99.9%): [≈ 0, 484.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   71.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 14.200, 19.000), stdev = 6.723
[info]   CI (99.9%): [71.000, 71.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.81% complete, ETA 00:57:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26315.732 ops/s
[info] # Warmup Iteration   2: 45293.915 ops/s
[info] # Warmup Iteration   3: 43653.984 ops/s
[info] # Warmup Iteration   4: 45371.881 ops/s
[info] # Warmup Iteration   5: 45167.477 ops/s
[info] Iteration   1: 45531.993 ops/s
[info]                  ·gc.alloc.rate:            674.376 MB/sec
[info]                  ·gc.alloc.rate.norm:       23305.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.277 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23301.689 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 45546.144 ops/s
[info]                  ·gc.alloc.rate:            674.426 MB/sec
[info]                  ·gc.alloc.rate.norm:       23304.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23292.482 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 45286.562 ops/s
[info]                  ·gc.alloc.rate:            672.880 MB/sec
[info]                  ·gc.alloc.rate.norm:       23386.701 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23428.245 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 45454.450 ops/s
[info]                  ·gc.alloc.rate:            672.956 MB/sec
[info]                  ·gc.alloc.rate.norm:       23304.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23341.668 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 45539.871 ops/s
[info]                  ·gc.alloc.rate:            674.238 MB/sec
[info]                  ·gc.alloc.rate.norm:       23304.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23297.596 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   45471.804 ±(99.9%) 423.562 ops/s [Average]
[info]   (min, avg, max) = (45286.562, 45471.804, 45546.144), stdev = 109.998
[info]   CI (99.9%): [45048.243, 45895.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   673.775 ±(99.9%) 3.026 MB/sec [Average]
[info]   (min, avg, max) = (672.880, 673.775, 674.426), stdev = 0.786
[info]   CI (99.9%): [670.749, 676.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23320.764 ±(99.9%) 141.945 B/op [Average]
[info]   (min, avg, max) = (23304.009, 23320.764, 23386.701), stdev = 36.863
[info]   CI (99.9%): [23178.819, 23462.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   674.108 ±(99.9%) 0.371 MB/sec [Average]
[info]   (min, avg, max) = (674.043, 674.108, 674.277), stdev = 0.096
[info]   CI (99.9%): [673.737, 674.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   23332.336 ±(99.9%) 219.689 B/op [Average]
[info]   (min, avg, max) = (23292.482, 23332.336, 23428.245), stdev = 57.053
[info]   CI (99.9%): [23112.647, 23552.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.04% complete, ETA 00:57:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28257.777 ops/s
[info] # Warmup Iteration   2: 93189.828 ops/s
[info] # Warmup Iteration   3: 95486.479 ops/s
[info] # Warmup Iteration   4: 95159.883 ops/s
[info] # Warmup Iteration   5: 95352.899 ops/s
[info] Iteration   1: 95517.432 ops/s
[info]                  ·gc.alloc.rate:                   1308.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              21561.721 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.908 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22172.107 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.976 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 95871.913 ops/s
[info]                  ·gc.alloc.rate:            1313.191 MB/sec
[info]                  ·gc.alloc.rate.norm:       21560.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22100.954 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 94252.556 ops/s
[info]                  ·gc.alloc.rate:                   1292.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              21586.424 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22525.263 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 77.865 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 94861.417 ops/s
[info]                  ·gc.alloc.rate:                   1299.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              21564.201 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.187 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22534.454 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 66.310 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 95620.415 ops/s
[info]                  ·gc.alloc.rate:                                  1309.721 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21560.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.529 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.772 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22433.303 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   95224.747 ±(99.9%) 2538.364 ops/s [Average]
[info]   (min, avg, max) = (94252.556, 95224.747, 95871.913), stdev = 659.205
[info]   CI (99.9%): [92686.383, 97763.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1304.841 ±(99.9%) 32.375 MB/sec [Average]
[info]   (min, avg, max) = (1292.727, 1304.841, 1313.191), stdev = 8.408
[info]   CI (99.9%): [1272.466, 1337.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21566.471 ±(99.9%) 43.457 B/op [Average]
[info]   (min, avg, max) = (21560.004, 21566.471, 21586.424), stdev = 11.286
[info]   CI (99.9%): [21523.013, 21609.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.055 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.106 ±(99.9%) 0.912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.106, 0.529), stdev = 0.237
[info]   CI (99.9%): [≈ 0, 1.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1352.391 ±(99.9%) 29.471 MB/sec [Average]
[info]   (min, avg, max) = (1345.908, 1352.391, 1362.772), stdev = 7.654
[info]   CI (99.9%): [1322.920, 1381.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22353.216 ±(99.9%) 782.775 B/op [Average]
[info]   (min, avg, max) = (22100.954, 22353.216, 22534.454), stdev = 203.284
[info]   CI (99.9%): [21570.441, 23135.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 8.774 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 4.663), stdev = 2.278
[info]   CI (99.9%): [≈ 0, 10.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   31.030 ±(99.9%) 146.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.030, 77.865), stdev = 37.967
[info]   CI (99.9%): [≈ 0, 177.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 12.600, 19.000), stdev = 6.731
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.27% complete, ETA 00:56:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120851.911 ops/s
[info] # Warmup Iteration   2: 165328.047 ops/s
[info] # Warmup Iteration   3: 174642.482 ops/s
[info] # Warmup Iteration   4: 173627.620 ops/s
[info] # Warmup Iteration   5: 173704.858 ops/s
[info] Iteration   1: 177291.205 ops/s
[info]                  ·gc.alloc.rate:      564.969 MB/sec
[info]                  ·gc.alloc.rate.norm: 5016.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 175394.893 ops/s
[info]                  ·gc.alloc.rate:            560.566 MB/sec
[info]                  ·gc.alloc.rate.norm:       5030.937 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6049.040 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 170302.367 ops/s
[info]                  ·gc.alloc.rate:            549.115 MB/sec
[info]                  ·gc.alloc.rate.norm:       5075.596 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6229.945 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 174041.266 ops/s
[info]                  ·gc.alloc.rate:            557.661 MB/sec
[info]                  ·gc.alloc.rate.norm:       5043.689 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6096.197 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 174112.072 ops/s
[info]                  ·gc.alloc.rate:            555.006 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.955 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6093.432 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   174228.361 ±(99.9%) 9855.649 ops/s [Average]
[info]   (min, avg, max) = (170302.367, 174228.361, 177291.205), stdev = 2559.481
[info]   CI (99.9%): [164372.711, 184084.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   557.464 ±(99.9%) 22.921 MB/sec [Average]
[info]   (min, avg, max) = (549.115, 557.464, 564.969), stdev = 5.953
[info]   CI (99.9%): [534.542, 580.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5036.636 ±(99.9%) 94.580 B/op [Average]
[info]   (min, avg, max) = (5016.003, 5036.636, 5075.596), stdev = 24.562
[info]   CI (99.9%): [4942.056, 5131.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.227 ±(99.9%) 1160.726 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.227, 674.092), stdev = 301.437
[info]   CI (99.9%): [≈ 0, 1699.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4893.723 ±(99.9%) 10537.337 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4893.723, 6229.945), stdev = 2736.513
[info]   CI (99.9%): [≈ 0, 15431.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.200, 8.000), stdev = 3.493
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 51.50% complete, ETA 00:56:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 157642.434 ops/s
[info] # Warmup Iteration   2: 187723.464 ops/s
[info] # Warmup Iteration   3: 180305.200 ops/s
[info] # Warmup Iteration   4: 192487.119 ops/s
[info] # Warmup Iteration   5: 193246.104 ops/s
[info] Iteration   1: 192822.384 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.391 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 192678.444 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 193197.376 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 192929.377 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 192914.419 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   192908.400 ±(99.9%) 731.273 ops/s [Average]
[info]   (min, avg, max) = (192678.444, 192908.400, 193197.376), stdev = 189.909
[info]   CI (99.9%): [192177.127, 193639.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.034 ±(99.9%) 0.293 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.034, 0.170), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.280 ±(99.9%) 2.392 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.280, 1.391), stdev = 0.621
[info]   CI (99.9%): [≈ 0, 2.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.73% complete, ETA 00:56:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36600.021 ops/s
[info] # Warmup Iteration   2: 63627.038 ops/s
[info] # Warmup Iteration   3: 64887.660 ops/s
[info] # Warmup Iteration   4: 64441.671 ops/s
[info] # Warmup Iteration   5: 66894.206 ops/s
[info] Iteration   1: 67534.438 ops/s
[info]                  ·gc.alloc.rate:            999.036 MB/sec
[info]                  ·gc.alloc.rate.norm:       23282.350 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.481 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15695.340 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 68398.196 ops/s
[info]                  ·gc.alloc.rate:            1013.022 MB/sec
[info]                  ·gc.alloc.rate.norm:       23305.922 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.203 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30994.206 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 67363.245 ops/s
[info]                  ·gc.alloc.rate:            998.619 MB/sec
[info]                  ·gc.alloc.rate.norm:       23330.588 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.503 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15734.943 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 68570.499 ops/s
[info]                  ·gc.alloc.rate:            1014.284 MB/sec
[info]                  ·gc.alloc.rate.norm:       23280.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30915.570 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   5: 69205.725 ops/s
[info]                  ·gc.alloc.rate:                   1023.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              23280.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        15316.415 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 60.599 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   68214.421 ±(99.9%) 2938.955 ops/s [Average]
[info]   (min, avg, max) = (67363.245, 68214.421, 69205.725), stdev = 763.237
[info]   CI (99.9%): [65275.465, 71153.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1009.707 ±(99.9%) 41.341 MB/sec [Average]
[info]   (min, avg, max) = (998.619, 1009.707, 1023.575), stdev = 10.736
[info]   CI (99.9%): [968.366, 1051.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23295.780 ±(99.9%) 85.920 B/op [Average]
[info]   (min, avg, max) = (23280.006, 23295.780, 23330.588), stdev = 22.313
[info]   CI (99.9%): [23209.860, 23381.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   942.915 ±(99.9%) 1420.695 MB/sec [Average]
[info]   (min, avg, max) = (673.432, 942.915, 1347.203), stdev = 368.950
[info]   CI (99.9%): [≈ 0, 2363.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   21731.295 ±(99.9%) 32428.509 B/op [Average]
[info]   (min, avg, max) = (15316.415, 21731.295, 30994.206), stdev = 8421.581
[info]   CI (99.9%): [≈ 0, 54159.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   12.120 ±(99.9%) 104.355 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.120, 60.599), stdev = 27.101
[info]   CI (99.9%): [≈ 0, 116.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 12.400, 18.000), stdev = 4.669
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.96% complete, ETA 00:55:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7826.423 ops/s
[info] # Warmup Iteration   2: 19473.776 ops/s
[info] # Warmup Iteration   3: 19406.944 ops/s
[info] # Warmup Iteration   4: 19313.447 ops/s
[info] # Warmup Iteration   5: 19655.213 ops/s
[info] Iteration   1: 19243.346 ops/s
[info]                  ·gc.alloc.rate:            1154.025 MB/sec
[info]                  ·gc.alloc.rate.norm:       94371.837 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 110158.501 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 19541.214 ops/s
[info]                  ·gc.alloc.rate:            1160.700 MB/sec
[info]                  ·gc.alloc.rate.norm:       93492.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.830 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 108484.480 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 18982.485 ops/s
[info]                  ·gc.alloc.rate:                   1124.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              93216.783 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        111672.847 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 55.229 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 19755.071 ops/s
[info]                  ·gc.alloc.rate:                   1169.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              93208.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        53705.092 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 212.273 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 19703.774 ops/s
[info]                  ·gc.alloc.rate:                   1167.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              93257.584 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.640 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        108225.685 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 319.250 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   19445.178 ±(99.9%) 1258.031 ops/s [Average]
[info]   (min, avg, max) = (18982.485, 19445.178, 19755.071), stdev = 326.707
[info]   CI (99.9%): [18187.147, 20703.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1155.271 ±(99.9%) 70.332 MB/sec [Average]
[info]   (min, avg, max) = (1124.502, 1155.271, 1169.841), stdev = 18.265
[info]   CI (99.9%): [1084.939, 1225.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   93509.258 ±(99.9%) 1909.822 B/op [Average]
[info]   (min, avg, max) = (93208.022, 93509.258, 94371.837), stdev = 495.975
[info]   CI (99.9%): [91599.436, 95419.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1213.946 ±(99.9%) 1162.248 MB/sec [Average]
[info]   (min, avg, max) = (674.045, 1213.946, 1354.640), stdev = 301.832
[info]   CI (99.9%): [51.699, 2376.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   98449.321 ±(99.9%) 96464.093 B/op [Average]
[info]   (min, avg, max) = (53705.092, 98449.321, 111672.847), stdev = 25051.419
[info]   CI (99.9%): [1985.228, 194913.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 8.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   117.350 ±(99.9%) 548.548 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 117.350, 319.250), stdev = 142.456
[info]   CI (99.9%): [≈ 0, 665.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   66.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 13.200, 16.000), stdev = 3.899
[info]   CI (99.9%): [66.000, 66.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.19% complete, ETA 00:55:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4889.594 ops/s
[info] # Warmup Iteration   2: 14580.095 ops/s
[info] # Warmup Iteration   3: 15574.280 ops/s
[info] # Warmup Iteration   4: 15595.333 ops/s
[info] # Warmup Iteration   5: 15266.177 ops/s
[info] Iteration   1: 15658.343 ops/s
[info]                  ·gc.alloc.rate:            713.971 MB/sec
[info]                  ·gc.alloc.rate.norm:       71760.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.821 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67624.147 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 15615.025 ops/s
[info]                  ·gc.alloc.rate:            712.007 MB/sec
[info]                  ·gc.alloc.rate.norm:       71760.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.818 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67810.332 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 15637.907 ops/s
[info]                  ·gc.alloc.rate:            715.534 MB/sec
[info]                  ·gc.alloc.rate.norm:       72006.438 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.846 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67710.617 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 15651.587 ops/s
[info]                  ·gc.alloc.rate:            713.597 MB/sec
[info]                  ·gc.alloc.rate.norm:       71770.648 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67654.386 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 15522.799 ops/s
[info]                  ·gc.alloc.rate:            707.673 MB/sec
[info]                  ·gc.alloc.rate.norm:       71760.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.456 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 136433.077 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   15617.132 ±(99.9%) 212.835 ops/s [Average]
[info]   (min, avg, max) = (15522.799, 15617.132, 15658.343), stdev = 55.273
[info]   CI (99.9%): [15404.297, 15829.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   712.556 ±(99.9%) 11.568 MB/sec [Average]
[info]   (min, avg, max) = (707.673, 712.556, 715.534), stdev = 3.004
[info]   CI (99.9%): [700.988, 724.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71811.433 ±(99.9%) 420.138 B/op [Average]
[info]   (min, avg, max) = (71760.026, 71811.433, 72006.438), stdev = 109.108
[info]   CI (99.9%): [71391.295, 72231.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   807.322 ±(99.9%) 1158.374 MB/sec [Average]
[info]   (min, avg, max) = (672.670, 807.322, 1345.456), stdev = 300.826
[info]   CI (99.9%): [≈ 0, 1965.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   81446.512 ±(99.9%) 118363.043 B/op [Average]
[info]   (min, avg, max) = (67624.147, 81446.512, 136433.077), stdev = 30738.506
[info]   CI (99.9%): [≈ 0, 199809.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.200, 19.000), stdev = 4.382
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.42% complete, ETA 00:55:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 354222.737 ops/s
[info] # Warmup Iteration   2: 459709.704 ops/s
[info] # Warmup Iteration   3: 479898.982 ops/s
[info] # Warmup Iteration   4: 482313.121 ops/s
[info] # Warmup Iteration   5: 488761.252 ops/s
[info] Iteration   1: 483619.193 ops/s
[info]                  ·gc.alloc.rate:                   1259.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              4099.671 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.891 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4387.674 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.168 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 478943.657 ops/s
[info]                  ·gc.alloc.rate:            1246.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.673 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.783 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4432.850 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 481366.109 ops/s
[info]                  ·gc.alloc.rate:                   1252.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.346 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4408.106 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.890 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 483106.375 ops/s
[info]                  ·gc.alloc.rate:                   1257.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.727 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.165 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4418.365 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.851 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 485532.086 ops/s
[info]                  ·gc.alloc.rate:                                  1263.523 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.128 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.414 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4415.789 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.159 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   482513.484 ±(99.9%) 9577.621 ops/s [Average]
[info]   (min, avg, max) = (478943.657, 482513.484, 485532.086), stdev = 2487.278
[info]   CI (99.9%): [472935.863, 492091.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1255.915 ±(99.9%) 25.217 MB/sec [Average]
[info]   (min, avg, max) = (1246.494, 1255.915, 1263.523), stdev = 6.549
[info]   CI (99.9%): [1230.698, 1281.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4097.084 ±(99.9%) 5.682 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4097.084, 4099.671), stdev = 1.476
[info]   CI (99.9%): [4091.401, 4102.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.220 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.128), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.083 ±(99.9%) 0.712 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.414), stdev = 0.185
[info]   CI (99.9%): [≈ 0, 0.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1352.610 ±(99.9%) 24.493 MB/sec [Average]
[info]   (min, avg, max) = (1347.891, 1352.610, 1362.170), stdev = 6.361
[info]   CI (99.9%): [1328.117, 1377.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4412.557 ±(99.9%) 63.710 B/op [Average]
[info]   (min, avg, max) = (4387.674, 4412.557, 4432.850), stdev = 16.545
[info]   CI (99.9%): [4348.847, 4476.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 6.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 3.330), stdev = 1.604
[info]   CI (99.9%): [≈ 0, 7.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.213 ±(99.9%) 20.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.213, 10.890), stdev = 5.239
[info]   CI (99.9%): [≈ 0, 25.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 11.400, 16.000), stdev = 5.177
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.66% complete, ETA 00:55:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 969.377 ops/s
[info] # Warmup Iteration   2: 13632.434 ops/s
[info] # Warmup Iteration   3: 16196.906 ops/s
[info] # Warmup Iteration   4: 16708.943 ops/s
[info] # Warmup Iteration   5: 16496.875 ops/s
[info] Iteration   1: 16675.370 ops/s
[info]                  ·gc.alloc.rate:            1311.596 MB/sec
[info]                  ·gc.alloc.rate.norm:       123761.998 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.842 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 126993.436 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 16250.688 ops/s
[info]                  ·gc.alloc.rate:            1295.026 MB/sec
[info]                  ·gc.alloc.rate.norm:       125419.698 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.562 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130313.985 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 16280.543 ops/s
[info]                  ·gc.alloc.rate:                   1288.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              124512.905 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        130073.908 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 257.572 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   4: 16786.739 ops/s
[info]                  ·gc.alloc.rate:                   1320.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              123765.447 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1352.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        126840.849 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 437.167 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 16896.062 ops/s
[info]                  ·gc.alloc.rate:                                  1328.655 MB/sec
[info]                  ·gc.alloc.rate.norm:                             123752.024 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.572 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.775 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       126836.865 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                124.107 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   16577.880 ±(99.9%) 1138.759 ops/s [Average]
[info]   (min, avg, max) = (16250.688, 16577.880, 16896.062), stdev = 295.732
[info]   CI (99.9%): [15439.122, 17716.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1308.717 ±(99.9%) 65.235 MB/sec [Average]
[info]   (min, avg, max) = (1288.137, 1308.717, 1328.655), stdev = 16.941
[info]   CI (99.9%): [1243.483, 1373.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   124242.415 ±(99.9%) 2828.286 B/op [Average]
[info]   (min, avg, max) = (123752.024, 124242.415, 125419.698), stdev = 734.497
[info]   CI (99.9%): [121414.129, 127070.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.011 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.114 ±(99.9%) 0.985 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.114, 0.572), stdev = 0.256
[info]   CI (99.9%): [≈ 0, 1.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1350.365 ±(99.9%) 27.404 MB/sec [Average]
[info]   (min, avg, max) = (1345.562, 1350.365, 1361.775), stdev = 7.117
[info]   CI (99.9%): [1322.960, 1377.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   128211.809 ±(99.9%) 6979.390 B/op [Average]
[info]   (min, avg, max) = (126836.865, 128211.809, 130313.985), stdev = 1812.525
[info]   CI (99.9%): [121232.419, 135191.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 7.609 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 1.976
[info]   CI (99.9%): [≈ 0, 9.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   163.769 ±(99.9%) 717.190 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 163.769, 437.167), stdev = 186.252
[info]   CI (99.9%): [≈ 0, 880.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   74.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 14.800, 20.000), stdev = 6.573
[info]   CI (99.9%): [74.000, 74.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.89% complete, ETA 00:54:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34371.648 ops/s
[info] # Warmup Iteration   2: 63915.294 ops/s
[info] # Warmup Iteration   3: 66967.066 ops/s
[info] # Warmup Iteration   4: 67168.649 ops/s
[info] # Warmup Iteration   5: 67619.180 ops/s
[info] Iteration   1: 67781.812 ops/s
[info]                  ·gc.alloc.rate:            1301.108 MB/sec
[info]                  ·gc.alloc.rate.norm:       30216.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31290.849 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 66642.961 ops/s
[info]                  ·gc.alloc.rate:            1280.361 MB/sec
[info]                  ·gc.alloc.rate.norm:       30229.899 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31809.354 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 67656.090 ops/s
[info]                  ·gc.alloc.rate:                   1300.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              30264.104 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.179 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        31411.101 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 108.474 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 67992.675 ops/s
[info]                  ·gc.alloc.rate:                   1310.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              30319.705 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.233 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        31455.892 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 77.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 67950.605 ops/s
[info]                  ·gc.alloc.rate:                                  1304.485 MB/sec
[info]                  ·gc.alloc.rate.norm:                             30216.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.359 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.850 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       31567.907 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   67604.829 ±(99.9%) 2134.527 ops/s [Average]
[info]   (min, avg, max) = (66642.961, 67604.829, 67992.675), stdev = 554.330
[info]   CI (99.9%): [65470.302, 69739.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1299.394 ±(99.9%) 43.426 MB/sec [Average]
[info]   (min, avg, max) = (1280.361, 1299.394, 1310.138), stdev = 11.278
[info]   CI (99.9%): [1255.968, 1342.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   30249.144 ±(99.9%) 169.704 B/op [Average]
[info]   (min, avg, max) = (30216.006, 30249.144, 30319.705), stdev = 44.072
[info]   CI (99.9%): [30079.440, 30418.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.072 ±(99.9%) 0.618 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.072, 0.359), stdev = 0.161
[info]   CI (99.9%): [≈ 0, 0.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1353.382 ±(99.9%) 27.737 MB/sec [Average]
[info]   (min, avg, max) = (1347.257, 1353.382, 1362.850), stdev = 7.203
[info]   CI (99.9%): [1325.645, 1381.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   31507.021 ±(99.9%) 754.710 B/op [Average]
[info]   (min, avg, max) = (31290.849, 31507.021, 31809.354), stdev = 195.996
[info]   CI (99.9%): [30752.311, 32261.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.623 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.663), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   37.114 ±(99.9%) 200.302 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.114, 108.474), stdev = 52.018
[info]   CI (99.9%): [≈ 0, 237.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.000, 16.000), stdev = 5.788
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.12% complete, ETA 00:54:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77895.651 ops/s
[info] # Warmup Iteration   2: 147205.706 ops/s
[info] # Warmup Iteration   3: 151807.615 ops/s
[info] # Warmup Iteration   4: 152424.562 ops/s
[info] # Warmup Iteration   5: 149740.711 ops/s
[info] Iteration   1: 148219.594 ops/s
[info]                  ·gc.alloc.rate:            1134.495 MB/sec
[info]                  ·gc.alloc.rate.norm:       12045.479 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14302.043 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 153200.398 ops/s
[info]                  ·gc.alloc.rate:                   1163.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              11949.684 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.495 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13831.272 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.844 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 154834.118 ops/s
[info]                  ·gc.alloc.rate:            1173.499 MB/sec
[info]                  ·gc.alloc.rate.norm:       11928.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.522 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6846.003 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 153198.404 ops/s
[info]                  ·gc.alloc.rate:                   1162.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              11941.476 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.516 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13865.038 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.061 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 150913.691 ops/s
[info]                  ·gc.alloc.rate:                   1143.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              11930.325 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14165.909 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.685 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   152073.241 ±(99.9%) 9883.874 ops/s [Average]
[info]   (min, avg, max) = (148219.594, 152073.241, 154834.118), stdev = 2566.811
[info]   CI (99.9%): [142189.368, 161957.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1155.518 ±(99.9%) 61.038 MB/sec [Average]
[info]   (min, avg, max) = (1134.495, 1155.518, 1173.499), stdev = 15.851
[info]   CI (99.9%): [1094.479, 1216.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   11958.993 ±(99.9%) 189.188 B/op [Average]
[info]   (min, avg, max) = (11928.003, 11958.993, 12045.479), stdev = 49.132
[info]   CI (99.9%): [11769.805, 12148.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1214.982 ±(99.9%) 1165.678 MB/sec [Average]
[info]   (min, avg, max) = (673.522, 1214.982, 1358.350), stdev = 302.723
[info]   CI (99.9%): [49.305, 2380.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   12602.053 ±(99.9%) 12414.048 B/op [Average]
[info]   (min, avg, max) = (6846.003, 12602.053, 14302.043), stdev = 3223.889
[info]   CI (99.9%): [188.005, 25016.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 3.997), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 9.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   17.918 ±(99.9%) 83.151 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.918, 41.685), stdev = 21.594
[info]   CI (99.9%): [≈ 0, 101.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   66.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 13.200, 18.000), stdev = 4.919
[info]   CI (99.9%): [66.000, 66.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.35% complete, ETA 00:54:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 759808.595 ops/s
[info] # Warmup Iteration   2: 1029459.402 ops/s
[info] # Warmup Iteration   3: 1052828.896 ops/s
[info] # Warmup Iteration   4: 1057792.267 ops/s
[info] # Warmup Iteration   5: 1057247.180 ops/s
[info] Iteration   1: 1063986.420 ops/s
[info]                  ·gc.alloc.rate:            882.820 MB/sec
[info]                  ·gc.alloc.rate.norm:       1305.920 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 997.204 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 1068536.210 ops/s
[info]                  ·gc.alloc.rate:            885.082 MB/sec
[info]                  ·gc.alloc.rate.norm:       1304.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.953 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 992.949 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1044638.387 ops/s
[info]                  ·gc.alloc.rate:            865.774 MB/sec
[info]                  ·gc.alloc.rate.norm:       1304.601 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2031.406 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   4: 1069005.034 ops/s
[info]                  ·gc.alloc.rate:            885.661 MB/sec
[info]                  ·gc.alloc.rate.norm:       1304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 992.500 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1059055.735 ops/s
[info]                  ·gc.alloc.rate:            877.599 MB/sec
[info]                  ·gc.alloc.rate.norm:       1304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1001.828 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1061044.357 ±(99.9%) 38567.348 ops/s [Average]
[info]   (min, avg, max) = (1044638.387, 1061044.357, 1069005.034), stdev = 10015.818
[info]   CI (99.9%): [1022477.009, 1099611.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   879.387 ±(99.9%) 31.759 MB/sec [Average]
[info]   (min, avg, max) = (865.774, 879.387, 885.661), stdev = 8.248
[info]   CI (99.9%): [847.628, 911.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1304.506 ±(99.9%) 3.203 B/op [Average]
[info]   (min, avg, max) = (1304.000, 1304.506, 1305.920), stdev = 0.832
[info]   CI (99.9%): [1301.303, 1307.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.902 ±(99.9%) 1160.673 MB/sec [Average]
[info]   (min, avg, max) = (673.953, 808.902, 1348.104), stdev = 301.423
[info]   CI (99.9%): [≈ 0, 1969.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1203.177 ±(99.9%) 1782.884 B/op [Average]
[info]   (min, avg, max) = (992.500, 1203.177, 2031.406), stdev = 463.009
[info]   CI (99.9%): [≈ 0, 2986.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.200, 15.000), stdev = 3.271
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 53.58% complete, ETA 00:54:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 884570.211 ops/s
[info] # Warmup Iteration   2: 1169291.825 ops/s
[info] # Warmup Iteration   3: 1156408.661 ops/s
[info] # Warmup Iteration   4: 1181591.254 ops/s
[info] # Warmup Iteration   5: 1178247.018 ops/s
[info] Iteration   1: 1181882.311 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1170526.397 ops/s
[info]                  ·gc.alloc.rate:      2.917 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.921 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1178061.348 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1178278.269 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1176614.352 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.228 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1177072.535 ±(99.9%) 15949.680 ops/s [Average]
[info]   (min, avg, max) = (1170526.397, 1177072.535, 1181882.311), stdev = 4142.081
[info]   CI (99.9%): [1161122.856, 1193022.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.618 ±(99.9%) 4.957 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.618, 2.917), stdev = 1.287
[info]   CI (99.9%): [≈ 0, 5.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.830 ±(99.9%) 6.664 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.830, 3.921), stdev = 1.731
[info]   CI (99.9%): [≈ 0, 7.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.81% complete, ETA 00:53:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37256.942 ops/s
[info] # Warmup Iteration   2: 110090.719 ops/s
[info] # Warmup Iteration   3: 115413.243 ops/s
[info] # Warmup Iteration   4: 116404.717 ops/s
[info] # Warmup Iteration   5: 116820.654 ops/s
[info] Iteration   1: 114164.485 ops/s
[info]                  ·gc.alloc.rate:            1299.460 MB/sec
[info]                  ·gc.alloc.rate.norm:       17915.654 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.489 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18550.253 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 116253.471 ops/s
[info]                  ·gc.alloc.rate:                   1309.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              17728.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.789 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18216.500 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 112108.415 ops/s
[info]                  ·gc.alloc.rate:                   1263.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              17731.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.554 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18945.324 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 46.755 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 116090.973 ops/s
[info]                  ·gc.alloc.rate:                   1307.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              17729.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.859 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18396.387 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 63.218 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 116566.246 ops/s
[info]                  ·gc.alloc.rate:                                  1313.258 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17729.910 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.102 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18403.013 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   115036.718 ±(99.9%) 7272.302 ops/s [Average]
[info]   (min, avg, max) = (112108.415, 115036.718, 116566.246), stdev = 1888.594
[info]   CI (99.9%): [107764.416, 122309.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1298.623 ±(99.9%) 79.012 MB/sec [Average]
[info]   (min, avg, max) = (1263.054, 1298.623, 1313.258), stdev = 20.519
[info]   CI (99.9%): [1219.611, 1377.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   17766.738 ±(99.9%) 320.580 B/op [Average]
[info]   (min, avg, max) = (17728.004, 17766.738, 17915.654), stdev = 83.254
[info]   CI (99.9%): [17446.159, 18087.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.020 ±(99.9%) 0.175 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.102), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1352.161 ±(99.9%) 29.450 MB/sec [Average]
[info]   (min, avg, max) = (1345.489, 1352.161, 1363.115), stdev = 7.648
[info]   CI (99.9%): [1322.711, 1381.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   18502.295 ±(99.9%) 1056.872 B/op [Average]
[info]   (min, avg, max) = (18216.500, 18502.295, 18945.324), stdev = 274.466
[info]   CI (99.9%): [17445.424, 19559.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 8.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.138
[info]   CI (99.9%): [≈ 0, 9.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   23.798 ±(99.9%) 112.793 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.798, 63.218), stdev = 29.292
[info]   CI (99.9%): [≈ 0, 136.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.800, 19.000), stdev = 6.979
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.04% complete, ETA 00:53:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9556.016 ops/s
[info] # Warmup Iteration   2: 28456.196 ops/s
[info] # Warmup Iteration   3: 28505.226 ops/s
[info] # Warmup Iteration   4: 28270.136 ops/s
[info] # Warmup Iteration   5: 28567.885 ops/s
[info] Iteration   1: 28913.081 ops/s
[info]                  ·gc.alloc.rate:            1225.527 MB/sec
[info]                  ·gc.alloc.rate.norm:       66701.760 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.905 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36624.192 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 28567.032 ops/s
[info]                  ·gc.alloc.rate:            1213.030 MB/sec
[info]                  ·gc.alloc.rate.norm:       66824.457 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.648 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74130.246 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 28364.285 ops/s
[info]                  ·gc.alloc.rate:                   1201.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        74660.681 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 184.804 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   4: 28417.390 ops/s
[info]                  ·gc.alloc.rate:                   1206.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              66809.373 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        74964.164 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 221.351 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 28776.768 ops/s
[info]                  ·gc.alloc.rate:                                  1219.868 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66696.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.104 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.681 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74466.310 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     1.333 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                72.863 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   28607.711 ±(99.9%) 900.927 ops/s [Average]
[info]   (min, avg, max) = (28364.285, 28607.711, 28913.081), stdev = 233.968
[info]   CI (99.9%): [27706.784, 29508.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1213.354 ±(99.9%) 36.998 MB/sec [Average]
[info]   (min, avg, max) = (1201.943, 1213.354, 1225.527), stdev = 9.608
[info]   CI (99.9%): [1176.356, 1250.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   66745.524 ±(99.9%) 251.950 B/op [Average]
[info]   (min, avg, max) = (66696.014, 66745.524, 66824.457), stdev = 65.431
[info]   CI (99.9%): [66493.573, 66997.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.136 ±(99.9%) 9.784 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.136, 5.681), stdev = 2.541
[info]   CI (99.9%): [≈ 0, 10.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1215.934 ±(99.9%) 1169.204 MB/sec [Average]
[info]   (min, avg, max) = (672.905, 1215.934, 1361.986), stdev = 303.639
[info]   CI (99.9%): [46.730, 2385.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   66969.119 ±(99.9%) 65330.151 B/op [Average]
[info]   (min, avg, max) = (36624.192, 66969.119, 74964.164), stdev = 16966.033
[info]   CI (99.9%): [1638.967, 132299.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 7.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 3.997), stdev = 1.860
[info]   CI (99.9%): [≈ 0, 8.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   95.804 ±(99.9%) 397.224 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 95.804, 221.351), stdev = 103.158
[info]   CI (99.9%): [≈ 0, 493.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 12.800, 19.000), stdev = 5.891
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.27% complete, ETA 00:53:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 449670.837 ops/s
[info] # Warmup Iteration   2: 629207.562 ops/s
[info] # Warmup Iteration   3: 649242.543 ops/s
[info] # Warmup Iteration   4: 650744.331 ops/s
[info] # Warmup Iteration   5: 654065.435 ops/s
[info] Iteration   1: 656791.719 ops/s
[info]                  ·gc.alloc.rate:            1282.940 MB/sec
[info]                  ·gc.alloc.rate.norm:       3074.925 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1615.414 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 632969.208 ops/s
[info]                  ·gc.alloc.rate:            1235.430 MB/sec
[info]                  ·gc.alloc.rate.norm:       3072.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3352.411 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 632931.972 ops/s
[info]                  ·gc.alloc.rate:                   1235.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3352.565 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.282 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 635865.749 ops/s
[info]                  ·gc.alloc.rate:                   1241.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072.973 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3355.029 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.892 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 647956.465 ops/s
[info]                  ·gc.alloc.rate:                                  1270.093 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3085.457 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.084 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.204 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3310.557 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   641303.023 ±(99.9%) 40989.869 ops/s [Average]
[info]   (min, avg, max) = (632931.972, 641303.023, 656791.719), stdev = 10644.939
[info]   CI (99.9%): [600313.153, 682292.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1253.021 ±(99.9%) 84.967 MB/sec [Average]
[info]   (min, avg, max) = (1235.212, 1253.021, 1282.940), stdev = 22.066
[info]   CI (99.9%): [1168.054, 1337.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3075.471 ±(99.9%) 21.981 B/op [Average]
[info]   (min, avg, max) = (3072.001, 3075.471, 3085.457), stdev = 5.708
[info]   CI (99.9%): [3053.490, 3097.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.145 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.084), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.041 ±(99.9%) 0.351 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.204), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1217.669 ±(99.9%) 1170.536 MB/sec [Average]
[info]   (min, avg, max) = (673.993, 1217.669, 1362.753), stdev = 303.984
[info]   CI (99.9%): [47.133, 2388.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2997.195 ±(99.9%) 2975.246 B/op [Average]
[info]   (min, avg, max) = (1615.414, 2997.195, 3355.029), stdev = 772.662
[info]   CI (99.9%): [21.949, 5972.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 7.779 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 3.996), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 9.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.635 ±(99.9%) 19.290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.635, 9.892), stdev = 5.010
[info]   CI (99.9%): [≈ 0, 22.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.400, 15.000), stdev = 4.336
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.50% complete, ETA 00:53:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3347.007 ops/s
[info] # Warmup Iteration   2: 19000.020 ops/s
[info] # Warmup Iteration   3: 20837.918 ops/s
[info] # Warmup Iteration   4: 21327.807 ops/s
[info] # Warmup Iteration   5: 21252.045 ops/s
[info] Iteration   1: 21372.458 ops/s
[info]                  ·gc.alloc.rate:            1617.154 MB/sec
[info]                  ·gc.alloc.rate.norm:       119077.555 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.631 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 99084.227 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   2: 21533.108 ops/s
[info]                  ·gc.alloc.rate:                   1626.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              118857.942 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.267 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        98542.872 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 292.123 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 21528.914 ops/s
[info]                  ·gc.alloc.rate:                   1624.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              118747.699 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2038.541 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        149010.475 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 340.874 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 21812.279 ops/s
[info]                  ·gc.alloc.rate:                                  1644.736 MB/sec
[info]                  ·gc.alloc.rate.norm:                             118637.910 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.207 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.274 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       98335.541 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 21021.291 ops/s
[info]                  ·gc.alloc.rate:            1589.755 MB/sec
[info]                  ·gc.alloc.rate.norm:       119040.440 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.171 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 153066.959 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   21453.610 ±(99.9%) 1112.895 ops/s [Average]
[info]   (min, avg, max) = (21021.291, 21453.610, 21812.279), stdev = 289.015
[info]   CI (99.9%): [20340.715, 22566.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1620.479 ±(99.9%) 76.839 MB/sec [Average]
[info]   (min, avg, max) = (1589.755, 1620.479, 1644.736), stdev = 19.955
[info]   CI (99.9%): [1543.640, 1697.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   118872.309 ±(99.9%) 723.139 B/op [Average]
[info]   (min, avg, max) = (118637.910, 118872.309, 119077.555), stdev = 187.797
[info]   CI (99.9%): [118149.170, 119595.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.241 ±(99.9%) 2.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.241, 1.207), stdev = 0.540
[info]   CI (99.9%): [≈ 0, 2.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1627.977 ±(99.9%) 1453.337 MB/sec [Average]
[info]   (min, avg, max) = (1345.631, 1627.977, 2044.171), stdev = 377.427
[info]   CI (99.9%): [174.639, 3081.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   119608.015 ±(99.9%) 110626.291 B/op [Average]
[info]   (min, avg, max) = (98335.541, 119608.015, 153066.959), stdev = 28729.296
[info]   CI (99.9%): [8981.724, 230234.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   126.599 ±(99.9%) 670.813 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 126.599, 340.874), stdev = 174.208
[info]   CI (99.9%): [≈ 0, 797.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.600, 20.000), stdev = 7.403
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.73% complete, ETA 00:52:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 164296.636 ops/s
[info] # Warmup Iteration   2: 292340.749 ops/s
[info] # Warmup Iteration   3: 305734.668 ops/s
[info] # Warmup Iteration   4: 305635.651 ops/s
[info] # Warmup Iteration   5: 306272.745 ops/s
[info] Iteration   1: 303198.130 ops/s
[info]                  ·gc.alloc.rate:            843.185 MB/sec
[info]                  ·gc.alloc.rate.norm:       4377.703 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.938 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6987.925 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 306864.833 ops/s
[info]                  ·gc.alloc.rate:                   853.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3450.645 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.416 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 305794.559 ops/s
[info]                  ·gc.alloc.rate:            850.122 MB/sec
[info]                  ·gc.alloc.rate.norm:       4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3466.089 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 306333.455 ops/s
[info]                  ·gc.alloc.rate:            851.682 MB/sec
[info]                  ·gc.alloc.rate.norm:       4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3460.003 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 301311.747 ops/s
[info]                  ·gc.alloc.rate:            839.005 MB/sec
[info]                  ·gc.alloc.rate.norm:       4382.154 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7035.485 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   304700.545 ±(99.9%) 9089.601 ops/s [Average]
[info]   (min, avg, max) = (301311.747, 304700.545, 306864.833), stdev = 2360.541
[info]   CI (99.9%): [295610.944, 313790.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   847.422 ±(99.9%) 23.317 MB/sec [Average]
[info]   (min, avg, max) = (839.005, 847.422, 853.118), stdev = 6.055
[info]   CI (99.9%): [824.105, 870.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4377.572 ±(99.9%) 10.262 B/op [Average]
[info]   (min, avg, max) = (4376.001, 4377.572, 4382.154), stdev = 2.665
[info]   CI (99.9%): [4367.310, 4387.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   942.485 ±(99.9%) 1420.081 MB/sec [Average]
[info]   (min, avg, max) = (672.716, 942.485, 1347.011), stdev = 368.791
[info]   CI (99.9%): [≈ 0, 2362.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   4880.029 ±(99.9%) 7493.449 B/op [Average]
[info]   (min, avg, max) = (3450.645, 4880.029, 7035.485), stdev = 1946.025
[info]   CI (99.9%): [≈ 0, 12373.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.683 ±(99.9%) 5.883 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.683, 3.416), stdev = 1.528
[info]   CI (99.9%): [≈ 0, 6.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 12.600, 19.000), stdev = 5.413
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.97% complete, ETA 00:52:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1054489.935 ops/s
[info] # Warmup Iteration   2: 1427643.367 ops/s
[info] # Warmup Iteration   3: 1424091.347 ops/s
[info] # Warmup Iteration   4: 1426219.916 ops/s
[info] # Warmup Iteration   5: 1399183.676 ops/s
[info] Iteration   1: 1407567.096 ops/s
[info]                  ·gc.alloc.rate:            823.101 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.363 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 753.772 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1369122.314 ops/s
[info]                  ·gc.alloc.rate:            801.264 MB/sec
[info]                  ·gc.alloc.rate.norm:       921.296 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 774.961 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 1373457.204 ops/s
[info]                  ·gc.alloc.rate:            802.731 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 772.536 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1383013.714 ops/s
[info]                  ·gc.alloc.rate:            808.296 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 767.167 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1370709.729 ops/s
[info]                  ·gc.alloc.rate:            801.622 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.196 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1548.133 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1380774.011 ±(99.9%) 61292.803 ops/s [Average]
[info]   (min, avg, max) = (1369122.314, 1380774.011, 1407567.096), stdev = 15917.546
[info]   CI (99.9%): [1319481.208, 1442066.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   807.403 ±(99.9%) 35.509 MB/sec [Average]
[info]   (min, avg, max) = (801.264, 807.403, 823.101), stdev = 9.221
[info]   CI (99.9%): [771.894, 842.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   920.371 ±(99.9%) 2.075 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.371, 921.296), stdev = 0.539
[info]   CI (99.9%): [918.296, 922.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.967 ±(99.9%) 1161.696 MB/sec [Average]
[info]   (min, avg, max) = (673.995, 808.967, 1348.645), stdev = 301.689
[info]   CI (99.9%): [≈ 0, 1970.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   923.314 ±(99.9%) 1345.340 B/op [Average]
[info]   (min, avg, max) = (753.772, 923.314, 1548.133), stdev = 349.381
[info]   CI (99.9%): [≈ 0, 2268.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.200, 15.000), stdev = 3.271
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 55.20% complete, ETA 00:52:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1227071.220 ops/s
[info] # Warmup Iteration   2: 1584024.261 ops/s
[info] # Warmup Iteration   3: 1600086.510 ops/s
[info] # Warmup Iteration   4: 1591956.153 ops/s
[info] # Warmup Iteration   5: 1597205.230 ops/s
[info] Iteration   1: 1596378.878 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1564293.155 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1589311.439 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.169 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1598513.161 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1599443.437 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   1589588.014 ±(99.9%) 56553.685 ops/s [Average]
[info]   (min, avg, max) = (1564293.155, 1589588.014, 1599443.437), stdev = 14686.812
[info]   CI (99.9%): [1533034.329, 1646141.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.034 ±(99.9%) 0.293 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.034, 0.170), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.034 ±(99.9%) 0.290 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.034, 0.169), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.43% complete, ETA 00:51:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86419.887 ops/s
[info] # Warmup Iteration   2: 192579.959 ops/s
[info] # Warmup Iteration   3: 201837.321 ops/s
[info] # Warmup Iteration   4: 205090.684 ops/s
[info] # Warmup Iteration   5: 205636.327 ops/s
[info] Iteration   1: 205563.895 ops/s
[info]                  ·gc.alloc.rate:            1329.038 MB/sec
[info]                  ·gc.alloc.rate.norm:       10176.811 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10302.057 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 198964.720 ops/s
[info]                  ·gc.alloc.rate:            1286.868 MB/sec
[info]                  ·gc.alloc.rate.norm:       10179.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.642 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10643.944 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 202124.527 ops/s
[info]                  ·gc.alloc.rate:                   1307.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              10176.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10503.291 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 36.308 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 205975.857 ops/s
[info]                  ·gc.alloc.rate:                   1333.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              10190.616 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.495 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10373.424 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 30.540 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 205917.610 ops/s
[info]                  ·gc.alloc.rate:                                  1332.557 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10186.027 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.771 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10416.975 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   203709.322 ±(99.9%) 11942.583 ops/s [Average]
[info]   (min, avg, max) = (198964.720, 203709.322, 205975.857), stdev = 3101.451
[info]   CI (99.9%): [191766.739, 215651.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1317.868 ±(99.9%) 78.437 MB/sec [Average]
[info]   (min, avg, max) = (1286.868, 1317.868, 1333.572), stdev = 20.370
[info]   CI (99.9%): [1239.432, 1396.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10181.700 ±(99.9%) 24.478 B/op [Average]
[info]   (min, avg, max) = (10176.002, 10181.700, 10190.616), stdev = 6.357
[info]   CI (99.9%): [10157.222, 10206.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.015 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.013 ±(99.9%) 0.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.066), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1352.131 ±(99.9%) 29.651 MB/sec [Average]
[info]   (min, avg, max) = (1345.394, 1352.131, 1362.771), stdev = 7.700
[info]   CI (99.9%): [1322.480, 1381.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10447.938 ±(99.9%) 506.746 B/op [Average]
[info]   (min, avg, max) = (10302.057, 10447.938, 10643.944), stdev = 131.600
[info]   CI (99.9%): [9941.192, 10954.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.664), stdev = 2.384
[info]   CI (99.9%): [≈ 0, 10.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   13.370 ±(99.9%) 70.930 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.370, 36.308), stdev = 18.420
[info]   CI (99.9%): [≈ 0, 84.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 12.800, 19.000), stdev = 6.834
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 55.66% complete, ETA 00:51:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20893.587 ops/s
[info] # Warmup Iteration   2: 51002.409 ops/s
[info] # Warmup Iteration   3: 51334.085 ops/s
[info] # Warmup Iteration   4: 51688.908 ops/s
[info] # Warmup Iteration   5: 51560.513 ops/s
[info] Iteration   1: 52186.836 ops/s
[info]                  ·gc.alloc.rate:            928.808 MB/sec
[info]                  ·gc.alloc.rate.norm:       28016.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20290.094 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 51798.460 ops/s
[info]                  ·gc.alloc.rate:                   925.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              28051.977 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1340.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        40631.415 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.105 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 51253.491 ops/s
[info]                  ·gc.alloc.rate:            915.305 MB/sec
[info]                  ·gc.alloc.rate.norm:       28112.323 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20680.238 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 51777.147 ops/s
[info]                  ·gc.alloc.rate:                   921.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              28016.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.859 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20450.340 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.248 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 51305.113 ops/s
[info]                  ·gc.alloc.rate:                   913.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              28020.281 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        41319.367 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 81.740 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   51664.209 ±(99.9%) 1493.280 ops/s [Average]
[info]   (min, avg, max) = (51253.491, 51664.209, 52186.836), stdev = 387.800
[info]   CI (99.9%): [50170.929, 53157.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   920.899 ±(99.9%) 25.009 MB/sec [Average]
[info]   (min, avg, max) = (913.426, 920.899, 928.808), stdev = 6.495
[info]   CI (99.9%): [895.890, 945.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   28043.320 ±(99.9%) 159.454 B/op [Average]
[info]   (min, avg, max) = (28016.008, 28043.320, 28112.323), stdev = 41.410
[info]   CI (99.9%): [27883.866, 28202.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   941.173 ±(99.9%) 1414.283 MB/sec [Average]
[info]   (min, avg, max) = (672.673, 941.173, 1346.960), stdev = 367.285
[info]   CI (99.9%): [≈ 0, 2355.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   28674.291 ±(99.9%) 43253.539 B/op [Average]
[info]   (min, avg, max) = (20290.094, 28674.291, 41319.367), stdev = 11232.807
[info]   CI (99.9%): [≈ 0, 71927.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 4.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 2.665), stdev = 1.095
[info]   CI (99.9%): [≈ 0, 5.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   24.418 ±(99.9%) 129.359 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.418, 81.740), stdev = 33.594
[info]   CI (99.9%): [≈ 0, 153.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.400, 16.000), stdev = 4.219
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.89% complete, ETA 00:51:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26723.121 ops/s
[info] # Warmup Iteration   2: 50884.300 ops/s
[info] # Warmup Iteration   3: 53706.621 ops/s
[info] # Warmup Iteration   4: 54398.212 ops/s
[info] # Warmup Iteration   5: 54470.386 ops/s
[info] Iteration   1: 54212.557 ops/s
[info]                  ·gc.alloc.rate:            629.592 MB/sec
[info]                  ·gc.alloc.rate.norm:       18279.344 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19532.317 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 54124.780 ops/s
[info]                  ·gc.alloc.rate:            627.260 MB/sec
[info]                  ·gc.alloc.rate.norm:       18240.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19544.699 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 52141.514 ops/s
[info]                  ·gc.alloc.rate:                   604.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              18240.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20288.274 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.107 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 53521.751 ops/s
[info]                  ·gc.alloc.rate:            620.341 MB/sec
[info]                  ·gc.alloc.rate.norm:       18240.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.854 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19784.083 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 53889.928 ops/s
[info]                  ·gc.alloc.rate:      624.587 MB/sec
[info]                  ·gc.alloc.rate.norm: 18240.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   53578.106 ±(99.9%) 3259.194 ops/s [Average]
[info]   (min, avg, max) = (52141.514, 53578.106, 54212.557), stdev = 846.402
[info]   CI (99.9%): [50318.912, 56837.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   621.192 ±(99.9%) 38.941 MB/sec [Average]
[info]   (min, avg, max) = (604.179, 621.192, 629.592), stdev = 10.113
[info]   CI (99.9%): [582.251, 660.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18247.875 ±(99.9%) 67.739 B/op [Average]
[info]   (min, avg, max) = (18240.008, 18247.875, 18279.344), stdev = 17.592
[info]   CI (99.9%): [18180.136, 18315.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.951 ±(99.9%) 1157.981 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.951, 672.854), stdev = 300.724
[info]   CI (99.9%): [≈ 0, 1695.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   15829.875 ±(99.9%) 34095.382 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15829.875, 20288.274), stdev = 8854.462
[info]   CI (99.9%): [≈ 0, 49925.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.021 ±(99.9%) 34.626 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.021, 20.107), stdev = 8.992
[info]   CI (99.9%): [≈ 0, 38.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.600, 10.000), stdev = 4.278
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.12% complete, ETA 00:51:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35278.648 ops/s
[info] # Warmup Iteration   2: 62309.648 ops/s
[info] # Warmup Iteration   3: 62253.059 ops/s
[info] # Warmup Iteration   4: 62727.507 ops/s
[info] # Warmup Iteration   5: 63630.234 ops/s
[info] Iteration   1: 64544.856 ops/s
[info]                  ·gc.alloc.rate:            702.090 MB/sec
[info]                  ·gc.alloc.rate.norm:       17122.619 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16421.053 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 63669.368 ops/s
[info]                  ·gc.alloc.rate:            690.849 MB/sec
[info]                  ·gc.alloc.rate.norm:       17080.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16647.200 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 64414.018 ops/s
[info]                  ·gc.alloc.rate:            700.160 MB/sec
[info]                  ·gc.alloc.rate.norm:       17107.548 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16454.187 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 63548.630 ops/s
[info]                  ·gc.alloc.rate:            689.605 MB/sec
[info]                  ·gc.alloc.rate.norm:       17080.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.821 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33357.783 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   5: 64595.935 ops/s
[info]                  ·gc.alloc.rate:            701.084 MB/sec
[info]                  ·gc.alloc.rate.norm:       17083.402 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16408.599 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   64154.561 ±(99.9%) 1941.640 ops/s [Average]
[info]   (min, avg, max) = (63548.630, 64154.561, 64595.935), stdev = 504.238
[info]   CI (99.9%): [62212.922, 66096.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   696.757 ±(99.9%) 23.167 MB/sec [Average]
[info]   (min, avg, max) = (689.605, 696.757, 702.090), stdev = 6.016
[info]   CI (99.9%): [673.590, 719.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17094.716 ±(99.9%) 74.666 B/op [Average]
[info]   (min, avg, max) = (17080.006, 17094.716, 17122.619), stdev = 19.391
[info]   CI (99.9%): [17020.050, 17169.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.059 ±(99.9%) 1159.725 MB/sec [Average]
[info]   (min, avg, max) = (673.323, 808.059, 1346.821), stdev = 301.177
[info]   CI (99.9%): [≈ 0, 1967.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   19857.764 ±(99.9%) 29062.178 B/op [Average]
[info]   (min, avg, max) = (16408.599, 19857.764, 33357.783), stdev = 7547.355
[info]   CI (99.9%): [≈ 0, 48919.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.600, 16.000), stdev = 3.647
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.35% complete, ETA 00:50:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7052.057 ops/s
[info] # Warmup Iteration   2: 27188.862 ops/s
[info] # Warmup Iteration   3: 28928.173 ops/s
[info] # Warmup Iteration   4: 28264.822 ops/s
[info] # Warmup Iteration   5: 28306.851 ops/s
[info] Iteration   1: 28905.181 ops/s
[info]                  ·gc.alloc.rate:            1276.694 MB/sec
[info]                  ·gc.alloc.rate.norm:       69517.905 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.577 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73268.654 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 28946.330 ops/s
[info]                  ·gc.alloc.rate:            1278.529 MB/sec
[info]                  ·gc.alloc.rate.norm:       69512.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73164.888 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 29477.848 ops/s
[info]                  ·gc.alloc.rate:                   1302.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              69512.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.849 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        35922.317 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 177.833 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 29330.723 ops/s
[info]                  ·gc.alloc.rate:                   1295.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              69529.713 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        72633.592 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 250.214 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 29485.747 ops/s
[info]                  ·gc.alloc.rate:                                  1304.131 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69616.805 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.124 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72706.673 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                35.553 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   29229.166 ±(99.9%) 1094.141 ops/s [Average]
[info]   (min, avg, max) = (28905.181, 29229.166, 29485.747), stdev = 284.145
[info]   CI (99.9%): [28135.025, 30323.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1291.449 ±(99.9%) 50.079 MB/sec [Average]
[info]   (min, avg, max) = (1276.694, 1291.449, 1304.131), stdev = 13.005
[info]   CI (99.9%): [1241.369, 1341.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69537.690 ±(99.9%) 172.558 B/op [Average]
[info]   (min, avg, max) = (69512.014, 69537.690, 69616.805), stdev = 44.813
[info]   CI (99.9%): [69365.132, 69710.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   ≈ 10⁻³ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.025 ±(99.9%) 0.213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.124), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1215.977 ±(99.9%) 1169.416 MB/sec [Average]
[info]   (min, avg, max) = (672.849, 1215.977, 1362.014), stdev = 303.694
[info]   CI (99.9%): [46.561, 2385.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65539.225 ±(99.9%) 63761.548 B/op [Average]
[info]   (min, avg, max) = (35922.317, 65539.225, 73268.654), stdev = 16558.671
[info]   CI (99.9%): [1777.677, 129300.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 8.233 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.138
[info]   CI (99.9%): [≈ 0, 9.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   92.720 ±(99.9%) 441.192 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 92.720, 250.214), stdev = 114.576
[info]   CI (99.9%): [≈ 0, 533.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 12.800, 19.000), stdev = 6.099
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.58% complete, ETA 00:50:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60565.671 ops/s
[info] # Warmup Iteration   2: 102459.613 ops/s
[info] # Warmup Iteration   3: 109891.188 ops/s
[info] # Warmup Iteration   4: 104811.592 ops/s
[info] # Warmup Iteration   5: 108415.472 ops/s
[info] Iteration   1: 108682.183 ops/s
[info]                  ·gc.alloc.rate:                   481.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              6967.635 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.799 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9742.978 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.647 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 109510.916 ops/s
[info]                  ·gc.alloc.rate:      482.609 MB/sec
[info]                  ·gc.alloc.rate.norm: 6936.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 107238.555 ops/s
[info]                  ·gc.alloc.rate:            472.765 MB/sec
[info]                  ·gc.alloc.rate.norm:       6937.506 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.553 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9883.926 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 108084.949 ops/s
[info]                  ·gc.alloc.rate:            476.294 MB/sec
[info]                  ·gc.alloc.rate.norm:       6936.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9806.575 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 106766.705 ops/s
[info]                  ·gc.alloc.rate:      470.485 MB/sec
[info]                  ·gc.alloc.rate.norm: 6936.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   108056.662 ±(99.9%) 4235.804 ops/s [Average]
[info]   (min, avg, max) = (106766.705, 108056.662, 109510.916), stdev = 1100.025
[info]   CI (99.9%): [103820.857, 112292.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   476.660 ±(99.9%) 20.098 MB/sec [Average]
[info]   (min, avg, max) = (470.485, 476.660, 482.609), stdev = 5.219
[info]   CI (99.9%): [456.562, 496.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6942.631 ±(99.9%) 53.882 B/op [Average]
[info]   (min, avg, max) = (6936.004, 6942.631, 6967.635), stdev = 13.993
[info]   CI (99.9%): [6888.748, 6996.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   403.953 ±(99.9%) 1419.954 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 403.953, 673.553), stdev = 368.758
[info]   CI (99.9%): [≈ 0, 1823.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5886.696 ±(99.9%) 20693.458 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5886.696, 9883.926), stdev = 5374.025
[info]   CI (99.9%): [≈ 0, 26580.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.929 ±(99.9%) 16.612 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.929, 9.647), stdev = 4.314
[info]   CI (99.9%): [≈ 0, 18.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.000, 9.000), stdev = 4.583
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.81% complete, ETA 00:50:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110958.063 ops/s
[info] # Warmup Iteration   2: 233122.779 ops/s
[info] # Warmup Iteration   3: 232930.352 ops/s
[info] # Warmup Iteration   4: 239001.556 ops/s
[info] # Warmup Iteration   5: 233455.881 ops/s
[info] Iteration   1: 235533.400 ops/s
[info]                  ·gc.alloc.rate:            351.660 MB/sec
[info]                  ·gc.alloc.rate.norm:       2347.699 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4482.156 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 237618.650 ops/s
[info]                  ·gc.alloc.rate:      352.623 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 233254.344 ops/s
[info]                  ·gc.alloc.rate:            346.147 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4539.660 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 235441.305 ops/s
[info]                  ·gc.alloc.rate:      349.639 MB/sec
[info]                  ·gc.alloc.rate.norm: 2337.600 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 233432.683 ops/s
[info]                  ·gc.alloc.rate:            347.780 MB/sec
[info]                  ·gc.alloc.rate.norm:       2345.134 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4536.179 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   235056.076 ±(99.9%) 6894.876 ops/s [Average]
[info]   (min, avg, max) = (233254.344, 235056.076, 237618.650), stdev = 1790.577
[info]   CI (99.9%): [228161.200, 241950.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   349.570 ±(99.9%) 10.298 MB/sec [Average]
[info]   (min, avg, max) = (346.147, 349.570, 352.623), stdev = 2.674
[info]   CI (99.9%): [339.272, 359.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2340.492 ±(99.9%) 21.261 B/op [Average]
[info]   (min, avg, max) = (2336.002, 2340.492, 2347.699), stdev = 5.521
[info]   CI (99.9%): [2319.231, 2361.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.353 ±(99.9%) 1417.844 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 403.353, 672.710), stdev = 368.210
[info]   CI (99.9%): [≈ 0, 1821.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2711.599 ±(99.9%) 9532.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2711.599, 4539.660), stdev = 2475.445
[info]   CI (99.9%): [≈ 0, 12243.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.600, 10.000), stdev = 5.128
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.04% complete, ETA 00:50:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 523007.785 ops/s
[info] # Warmup Iteration   2: 705222.987 ops/s
[info] # Warmup Iteration   3: 711181.806 ops/s
[info] # Warmup Iteration   4: 699344.902 ops/s
[info] # Warmup Iteration   5: 707655.957 ops/s
[info] Iteration   1: 731523.186 ops/s
[info]                  ·gc.alloc.rate:                   907.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1448.883 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.433 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 704062.317 ops/s
[info]                  ·gc.alloc.rate:            873.009 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.289 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3012.465 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 731676.147 ops/s
[info]                  ·gc.alloc.rate:            907.448 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1448.638 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 731412.666 ops/s
[info]                  ·gc.alloc.rate:                   907.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.605 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1449.145 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.433 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 706705.585 ops/s
[info]                  ·gc.alloc.rate:            876.989 MB/sec
[info]                  ·gc.alloc.rate.norm:       1953.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3001.158 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   721075.980 ±(99.9%) 55278.127 ops/s [Average]
[info]   (min, avg, max) = (704062.317, 721075.980, 731676.147), stdev = 14355.554
[info]   CI (99.9%): [665797.854, 776354.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   894.383 ±(99.9%) 68.352 MB/sec [Average]
[info]   (min, avg, max) = (873.009, 894.383, 907.448), stdev = 17.751
[info]   CI (99.9%): [826.031, 962.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.324 ±(99.9%) 1.777 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.324, 1953.006), stdev = 0.461
[info]   CI (99.9%): [1950.547, 1954.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   943.020 ±(99.9%) 1421.711 MB/sec [Average]
[info]   (min, avg, max) = (673.324, 943.020, 1347.658), stdev = 369.214
[info]   CI (99.9%): [≈ 0, 2364.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2072.058 ±(99.9%) 3285.826 B/op [Average]
[info]   (min, avg, max) = (1448.638, 2072.058, 3012.465), stdev = 853.319
[info]   CI (99.9%): [≈ 0, 5357.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.573 ±(99.9%) 3.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.573, 1.433), stdev = 0.785
[info]   CI (99.9%): [≈ 0, 3.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.200, 16.000), stdev = 4.382
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 57.27% complete, ETA 00:49:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 583355.032 ops/s
[info] # Warmup Iteration   2: 733674.506 ops/s
[info] # Warmup Iteration   3: 780878.868 ops/s
[info] # Warmup Iteration   4: 779557.328 ops/s
[info] # Warmup Iteration   5: 781550.370 ops/s
[info] Iteration   1: 780407.288 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 780515.921 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 781504.577 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 777198.000 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 782222.852 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   780369.728 ±(99.9%) 7408.011 ops/s [Average]
[info]   (min, avg, max) = (777198.000, 780369.728, 782222.852), stdev = 1923.837
[info]   CI (99.9%): [772961.717, 787777.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.51% complete, ETA 00:49:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79018.530 ops/s
[info] # Warmup Iteration   2: 169122.701 ops/s
[info] # Warmup Iteration   3: 182013.610 ops/s
[info] # Warmup Iteration   4: 181176.640 ops/s
[info] # Warmup Iteration   5: 181244.847 ops/s
[info] Iteration   1: 181292.621 ops/s
[info]                  ·gc.alloc.rate:      585.273 MB/sec
[info]                  ·gc.alloc.rate.norm: 5080.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 180483.663 ops/s
[info]                  ·gc.alloc.rate:            582.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       5080.257 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5866.923 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 181604.676 ops/s
[info]                  ·gc.alloc.rate:            586.233 MB/sec
[info]                  ·gc.alloc.rate.norm:       5080.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.850 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5830.586 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 180722.574 ops/s
[info]                  ·gc.alloc.rate:            583.570 MB/sec
[info]                  ·gc.alloc.rate.norm:       5082.825 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5859.198 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 180311.275 ops/s
[info]                  ·gc.alloc.rate:            582.052 MB/sec
[info]                  ·gc.alloc.rate.norm:       5081.299 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5872.356 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   180882.962 ±(99.9%) 2109.684 ops/s [Average]
[info]   (min, avg, max) = (180311.275, 180882.962, 181604.676), stdev = 547.878
[info]   CI (99.9%): [178773.278, 182992.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   583.924 ±(99.9%) 6.896 MB/sec [Average]
[info]   (min, avg, max) = (582.052, 583.924, 586.233), stdev = 1.791
[info]   CI (99.9%): [577.028, 590.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5080.877 ±(99.9%) 4.672 B/op [Average]
[info]   (min, avg, max) = (5080.002, 5080.877, 5082.825), stdev = 1.213
[info]   CI (99.9%): [5076.205, 5085.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   538.183 ±(99.9%) 1158.479 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.183, 672.850), stdev = 300.853
[info]   CI (99.9%): [≈ 0, 1696.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4685.813 ±(99.9%) 10086.755 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4685.813, 5872.356), stdev = 2619.498
[info]   CI (99.9%): [≈ 0, 14772.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.400, 10.000), stdev = 4.159
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.74% complete, ETA 00:49:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47032.723 ops/s
[info] # Warmup Iteration   2: 101061.596 ops/s
[info] # Warmup Iteration   3: 101981.934 ops/s
[info] # Warmup Iteration   4: 103940.296 ops/s
[info] # Warmup Iteration   5: 105343.458 ops/s
[info] Iteration   1: 104211.832 ops/s
[info]                  ·gc.alloc.rate:            1146.719 MB/sec
[info]                  ·gc.alloc.rate.norm:       17321.599 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20342.531 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 100560.265 ops/s
[info]                  ·gc.alloc.rate:                   1106.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              17326.628 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21091.417 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.426 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 103453.214 ops/s
[info]                  ·gc.alloc.rate:            1142.124 MB/sec
[info]                  ·gc.alloc.rate.norm:       17376.518 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10245.780 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 103081.600 ops/s
[info]                  ·gc.alloc.rate:                   1148.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              17534.537 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.488 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20605.583 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 71.194 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 105655.325 ops/s
[info]                  ·gc.alloc.rate:                   1163.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              17320.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20242.780 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 49.615 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   103392.447 ±(99.9%) 7181.628 ops/s [Average]
[info]   (min, avg, max) = (100560.265, 103392.447, 105655.325), stdev = 1865.046
[info]   CI (99.9%): [96210.820, 110574.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1141.427 ±(99.9%) 80.165 MB/sec [Average]
[info]   (min, avg, max) = (1106.916, 1141.427, 1163.015), stdev = 20.819
[info]   CI (99.9%): [1061.262, 1221.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   17375.857 ±(99.9%) 353.267 B/op [Average]
[info]   (min, avg, max) = (17320.004, 17375.857, 17534.537), stdev = 91.742
[info]   CI (99.9%): [17022.590, 17729.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1215.268 ±(99.9%) 1166.498 MB/sec [Average]
[info]   (min, avg, max) = (673.435, 1215.268, 1359.276), stdev = 302.936
[info]   CI (99.9%): [48.770, 2381.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   18505.618 ±(99.9%) 17824.896 B/op [Average]
[info]   (min, avg, max) = (10245.780, 18505.618, 21091.417), stdev = 4629.069
[info]   CI (99.9%): [680.722, 36330.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 8.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.138
[info]   CI (99.9%): [≈ 0, 9.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   26.247 ±(99.9%) 124.692 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.247, 71.194), stdev = 32.382
[info]   CI (99.9%): [≈ 0, 150.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 12.600, 17.000), stdev = 4.827
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.97% complete, ETA 00:48:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49841.729 ops/s
[info] # Warmup Iteration   2: 147457.078 ops/s
[info] # Warmup Iteration   3: 147960.949 ops/s
[info] # Warmup Iteration   4: 142221.483 ops/s
[info] # Warmup Iteration   5: 150479.557 ops/s
[info] Iteration   1: 150820.284 ops/s
[info]                  ·gc.alloc.rate:            799.385 MB/sec
[info]                  ·gc.alloc.rate.norm:       8342.880 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7020.675 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 144697.080 ops/s
[info]                  ·gc.alloc.rate:                   766.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              8333.314 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.899 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7317.955 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.245 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 146492.307 ops/s
[info]                  ·gc.alloc.rate:            776.763 MB/sec
[info]                  ·gc.alloc.rate.norm:       8344.572 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.516 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7235.408 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 146890.522 ops/s
[info]                  ·gc.alloc.rate:            777.526 MB/sec
[info]                  ·gc.alloc.rate.norm:       8328.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7215.611 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 145603.834 ops/s
[info]                  ·gc.alloc.rate:                   770.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14551.256 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.200 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   146900.805 ±(99.9%) 9044.470 ops/s [Average]
[info]   (min, avg, max) = (144697.080, 146900.805, 150820.284), stdev = 2348.820
[info]   CI (99.9%): [137856.335, 155945.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   778.073 ±(99.9%) 49.245 MB/sec [Average]
[info]   (min, avg, max) = (766.263, 778.073, 799.385), stdev = 12.789
[info]   CI (99.9%): [728.828, 827.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8335.354 ±(99.9%) 30.675 B/op [Average]
[info]   (min, avg, max) = (8328.003, 8335.354, 8344.572), stdev = 7.966
[info]   CI (99.9%): [8304.679, 8366.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   807.784 ±(99.9%) 1158.851 MB/sec [Average]
[info]   (min, avg, max) = (672.696, 807.784, 1346.139), stdev = 300.950
[info]   CI (99.9%): [≈ 0, 1966.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   8668.181 ±(99.9%) 12670.718 B/op [Average]
[info]   (min, avg, max) = (7020.675, 8668.181, 14551.256), stdev = 3290.545
[info]   CI (99.9%): [≈ 0, 21338.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.889 ±(99.9%) 15.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.889, 7.245), stdev = 3.956
[info]   CI (99.9%): [≈ 0, 18.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.000, 18.000), stdev = 3.937
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.20% complete, ETA 00:48:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 293569.610 ops/s
[info] # Warmup Iteration   2: 397567.595 ops/s
[info] # Warmup Iteration   3: 399953.191 ops/s
[info] # Warmup Iteration   4: 408074.032 ops/s
[info] # Warmup Iteration   5: 407518.517 ops/s
[info] Iteration   1: 402629.004 ops/s
[info]                  ·gc.alloc.rate:            789.084 MB/sec
[info]                  ·gc.alloc.rate.norm:       3084.945 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2635.150 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 394627.910 ops/s
[info]                  ·gc.alloc.rate:            773.072 MB/sec
[info]                  ·gc.alloc.rate.norm:       3083.759 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5377.190 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 411459.841 ops/s
[info]                  ·gc.alloc.rate:            799.153 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2578.608 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 408885.643 ops/s
[info]                  ·gc.alloc.rate:            794.917 MB/sec
[info]                  ·gc.alloc.rate.norm:       3060.342 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2594.793 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 408489.851 ops/s
[info]                  ·gc.alloc.rate:            793.152 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.407 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2597.334 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   405218.450 ±(99.9%) 25971.880 ops/s [Average]
[info]   (min, avg, max) = (394627.910, 405218.450, 411459.841), stdev = 6744.815
[info]   CI (99.9%): [379246.569, 431190.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   789.876 ±(99.9%) 38.756 MB/sec [Average]
[info]   (min, avg, max) = (773.072, 789.876, 799.153), stdev = 10.065
[info]   CI (99.9%): [751.120, 828.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3068.291 ±(99.9%) 56.856 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3068.291, 3084.945), stdev = 14.765
[info]   CI (99.9%): [3011.434, 3125.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.875 ±(99.9%) 1160.543 MB/sec [Average]
[info]   (min, avg, max) = (673.992, 808.875, 1348.016), stdev = 301.389
[info]   CI (99.9%): [≈ 0, 1969.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3156.615 ±(99.9%) 4780.622 B/op [Average]
[info]   (min, avg, max) = (2578.608, 3156.615, 5377.190), stdev = 1241.512
[info]   CI (99.9%): [≈ 0, 7937.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.800, 15.000), stdev = 3.493
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.43% complete, ETA 00:48:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6757.090 ops/s
[info] # Warmup Iteration   2: 48706.367 ops/s
[info] # Warmup Iteration   3: 48131.347 ops/s
[info] # Warmup Iteration   4: 48580.817 ops/s
[info] # Warmup Iteration   5: 49148.463 ops/s
[info] Iteration   1: 48536.377 ops/s
[info]                  ·gc.alloc.rate:                   1859.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              60274.573 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2022.297 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        65556.250 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 129.600 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         26.000 ms
[info] Iteration   2: 49080.700 ops/s
[info]                  ·gc.alloc.rate:                                  1879.927 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60268.054 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.222 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.116 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.836 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65362.448 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                149.522 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 50541.839 ops/s
[info]                  ·gc.alloc.rate:                                  1935.452 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60276.524 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.240 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.136 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63661.320 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 50164.245 ops/s
[info]                  ·gc.alloc.rate:            1921.261 MB/sec
[info]                  ·gc.alloc.rate.norm:       60264.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.901 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64142.228 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 51096.755 ops/s
[info]                  ·gc.alloc.rate:            1956.370 MB/sec
[info]                  ·gc.alloc.rate.norm:       60265.488 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41981.615 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   49883.983 ±(99.9%) 4058.478 ops/s [Average]
[info]   (min, avg, max) = (48536.377, 49883.983, 51096.755), stdev = 1053.974
[info]   CI (99.9%): [45825.505, 53942.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1910.475 ±(99.9%) 153.926 MB/sec [Average]
[info]   (min, avg, max) = (1859.367, 1910.475, 1956.370), stdev = 39.974
[info]   CI (99.9%): [1756.549, 2064.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   60269.729 ±(99.9%) 21.366 B/op [Average]
[info]   (min, avg, max) = (60264.008, 60269.729, 60276.524), stdev = 5.549
[info]   CI (99.9%): [60248.363, 60291.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.046 ±(99.9%) 0.379 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.222), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.471 ±(99.9%) 12.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.471, 7.116), stdev = 3.157
[info]   CI (99.9%): [≈ 0, 13.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1902.600 ±(99.9%) 1162.426 MB/sec [Average]
[info]   (min, avg, max) = (1362.829, 1902.600, 2044.901), stdev = 301.878
[info]   CI (99.9%): [740.174, 3065.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   60140.772 ±(99.9%) 39210.172 B/op [Average]
[info]   (min, avg, max) = (41981.615, 60140.772, 65556.250), stdev = 10182.757
[info]   CI (99.9%): [20930.600, 99350.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.664), stdev = 2.384
[info]   CI (99.9%): [≈ 0, 10.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   55.824 ±(99.9%) 295.593 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.824, 149.522), stdev = 76.765
[info]   CI (99.9%): [≈ 0, 351.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.200, 26.000), stdev = 9.859
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.66% complete, ETA 00:48:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91284.555 ops/s
[info] # Warmup Iteration   2: 163441.624 ops/s
[info] # Warmup Iteration   3: 169881.567 ops/s
[info] # Warmup Iteration   4: 170450.640 ops/s
[info] # Warmup Iteration   5: 170566.843 ops/s
[info] Iteration   1: 170703.579 ops/s
[info]                  ·gc.alloc.rate:            582.369 MB/sec
[info]                  ·gc.alloc.rate.norm:       5370.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6215.385 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 161250.516 ops/s
[info]                  ·gc.alloc.rate:            551.279 MB/sec
[info]                  ·gc.alloc.rate.norm:       5381.217 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6579.484 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 172505.434 ops/s
[info]                  ·gc.alloc.rate:      588.323 MB/sec
[info]                  ·gc.alloc.rate.norm: 5368.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 170636.718 ops/s
[info]                  ·gc.alloc.rate:            582.015 MB/sec
[info]                  ·gc.alloc.rate.norm:       5368.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.152 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6217.789 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 167113.994 ops/s
[info]                  ·gc.alloc.rate:            570.241 MB/sec
[info]                  ·gc.alloc.rate.norm:       5368.996 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6348.999 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   168442.048 ±(99.9%) 17212.428 ops/s [Average]
[info]   (min, avg, max) = (161250.516, 168442.048, 172505.434), stdev = 4470.013
[info]   CI (99.9%): [151229.620, 185654.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   574.846 ±(99.9%) 56.667 MB/sec [Average]
[info]   (min, avg, max) = (551.279, 574.846, 588.323), stdev = 14.716
[info]   CI (99.9%): [518.179, 631.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5371.256 ±(99.9%) 21.691 B/op [Average]
[info]   (min, avg, max) = (5368.002, 5371.256, 5381.217), stdev = 5.633
[info]   CI (99.9%): [5349.565, 5392.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   539.311 ±(99.9%) 1160.908 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.311, 674.327), stdev = 301.484
[info]   CI (99.9%): [≈ 0, 1700.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5072.331 ±(99.9%) 10933.486 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5072.331, 6579.484), stdev = 2839.392
[info]   CI (99.9%): [≈ 0, 16005.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.200, 9.000), stdev = 3.564
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.89% complete, ETA 00:47:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 201631.993 ops/s
[info] # Warmup Iteration   2: 393184.267 ops/s
[info] # Warmup Iteration   3: 402680.619 ops/s
[info] # Warmup Iteration   4: 399777.668 ops/s
[info] # Warmup Iteration   5: 405286.041 ops/s
[info] Iteration   1: 396671.525 ops/s
[info]                  ·gc.alloc.rate:            393.051 MB/sec
[info]                  ·gc.alloc.rate.norm:       1559.699 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2671.992 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 405251.391 ops/s
[info]                  ·gc.alloc.rate:      399.633 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.300 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 401009.239 ops/s
[info]                  ·gc.alloc.rate:            397.184 MB/sec
[info]                  ·gc.alloc.rate.norm:       1558.891 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2643.113 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 401823.959 ops/s
[info]                  ·gc.alloc.rate:            396.587 MB/sec
[info]                  ·gc.alloc.rate.norm:       1553.557 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2637.858 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 401238.542 ops/s
[info]                  ·gc.alloc.rate:      407.119 MB/sec
[info]                  ·gc.alloc.rate.norm: 1596.985 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   401198.931 ±(99.9%) 11766.230 ops/s [Average]
[info]   (min, avg, max) = (396671.525, 401198.931, 405251.391), stdev = 3055.653
[info]   CI (99.9%): [389432.701, 412965.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   398.715 ±(99.9%) 20.232 MB/sec [Average]
[info]   (min, avg, max) = (393.051, 398.715, 407.119), stdev = 5.254
[info]   CI (99.9%): [378.482, 418.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1564.286 ±(99.9%) 71.474 B/op [Average]
[info]   (min, avg, max) = (1552.300, 1564.286, 1596.985), stdev = 18.562
[info]   CI (99.9%): [1492.812, 1635.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   404.033 ±(99.9%) 1420.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.033, 673.429), stdev = 368.830
[info]   CI (99.9%): [≈ 0, 1824.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1590.593 ±(99.9%) 5591.381 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1590.593, 2671.992), stdev = 1452.064
[info]   CI (99.9%): [≈ 0, 7181.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.400, 9.000), stdev = 4.930
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.12% complete, ETA 00:47:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 789327.948 ops/s
[info] # Warmup Iteration   2: 972449.844 ops/s
[info] # Warmup Iteration   3: 1005248.301 ops/s
[info] # Warmup Iteration   4: 1029651.365 ops/s
[info] # Warmup Iteration   5: 1027903.192 ops/s
[info] Iteration   1: 1032619.243 ops/s
[info]                  ·gc.alloc.rate:            766.502 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.223 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.166 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1027.495 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 1031752.457 ops/s
[info]                  ·gc.alloc.rate:            765.660 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1028.360 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1029252.677 ops/s
[info]                  ·gc.alloc.rate:            765.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       1170.923 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1030.848 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1021523.572 ops/s
[info]                  ·gc.alloc.rate:            758.040 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.163 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2077.248 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   5: 1010156.214 ops/s
[info]                  ·gc.alloc.rate:            750.844 MB/sec
[info]                  ·gc.alloc.rate.norm:       1169.842 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1050.345 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1025060.832 ±(99.9%) 36231.820 ops/s [Average]
[info]   (min, avg, max) = (1010156.214, 1025060.832, 1032619.243), stdev = 9409.289
[info]   CI (99.9%): [988829.013, 1061292.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   761.363 ±(99.9%) 26.255 MB/sec [Average]
[info]   (min, avg, max) = (750.844, 761.363, 766.502), stdev = 6.818
[info]   CI (99.9%): [735.108, 787.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1169.030 ±(99.9%) 4.986 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1169.030, 1170.923), stdev = 1.295
[info]   CI (99.9%): [1164.045, 1174.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.911 ±(99.9%) 1160.343 MB/sec [Average]
[info]   (min, avg, max) = (674.122, 808.911, 1347.960), stdev = 301.337
[info]   CI (99.9%): [≈ 0, 1969.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1242.859 ±(99.9%) 1796.447 B/op [Average]
[info]   (min, avg, max) = (1027.495, 1242.859, 2077.248), stdev = 466.531
[info]   CI (99.9%): [≈ 0, 3039.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.200, 16.000), stdev = 3.834
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 59.35% complete, ETA 00:47:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 908265.532 ops/s
[info] # Warmup Iteration   2: 1128556.948 ops/s
[info] # Warmup Iteration   3: 1142315.021 ops/s
[info] # Warmup Iteration   4: 1141312.199 ops/s
[info] # Warmup Iteration   5: 1137517.468 ops/s
[info] Iteration   1: 1141848.692 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1139914.252 ops/s
[info]                  ·gc.alloc.rate:      1.661 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.293 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1141836.590 ops/s
[info]                  ·gc.alloc.rate:      0.290 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.400 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1132608.987 ops/s
[info]                  ·gc.alloc.rate:      7.883 MB/sec
[info]                  ·gc.alloc.rate.norm: 10.955 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1142411.635 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1139724.031 ±(99.9%) 15743.005 ops/s [Average]
[info]   (min, avg, max) = (1132608.987, 1139724.031, 1142411.635), stdev = 4088.408
[info]   CI (99.9%): [1123981.026, 1155467.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.967 ±(99.9%) 13.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.967, 7.883), stdev = 3.378
[info]   CI (99.9%): [≈ 0, 14.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2.730 ±(99.9%) 18.078 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 2.730, 10.955), stdev = 4.695
[info]   CI (99.9%): [≈ 0, 20.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.58% complete, ETA 00:47:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101467.418 ops/s
[info] # Warmup Iteration   2: 287024.405 ops/s
[info] # Warmup Iteration   3: 288857.298 ops/s
[info] # Warmup Iteration   4: 285187.779 ops/s
[info] # Warmup Iteration   5: 279756.909 ops/s
[info] Iteration   1: 289619.003 ops/s
[info]                  ·gc.alloc.rate:            787.898 MB/sec
[info]                  ·gc.alloc.rate.norm:       4282.172 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3656.186 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 289192.690 ops/s
[info]                  ·gc.alloc.rate:            786.408 MB/sec
[info]                  ·gc.alloc.rate.norm:       4280.241 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3661.634 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 288634.458 ops/s
[info]                  ·gc.alloc.rate:            786.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       4287.837 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3668.763 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 288780.029 ops/s
[info]                  ·gc.alloc.rate:            785.378 MB/sec
[info]                  ·gc.alloc.rate.norm:       4280.576 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3666.921 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 287156.199 ops/s
[info]                  ·gc.alloc.rate:            781.056 MB/sec
[info]                  ·gc.alloc.rate.norm:       4281.175 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.559 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7375.364 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   288676.476 ±(99.9%) 3590.901 ops/s [Average]
[info]   (min, avg, max) = (287156.199, 288676.476, 289619.003), stdev = 932.546
[info]   CI (99.9%): [285085.574, 292267.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   785.405 ±(99.9%) 9.986 MB/sec [Average]
[info]   (min, avg, max) = (781.056, 785.405, 787.898), stdev = 2.593
[info]   CI (99.9%): [775.419, 795.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4282.400 ±(99.9%) 12.039 B/op [Average]
[info]   (min, avg, max) = (4280.241, 4282.400, 4287.837), stdev = 3.126
[info]   CI (99.9%): [4270.361, 4294.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   807.316 ±(99.9%) 1158.610 MB/sec [Average]
[info]   (min, avg, max) = (672.720, 807.316, 1345.559), stdev = 300.887
[info]   CI (99.9%): [≈ 0, 1965.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4405.774 ±(99.9%) 6392.296 B/op [Average]
[info]   (min, avg, max) = (3656.186, 4405.774, 7375.364), stdev = 1660.059
[info]   CI (99.9%): [≈ 0, 10798.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   58.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.600, 19.000), stdev = 4.159
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.82% complete, ETA 00:46:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1286.926 ops/s
[info] # Warmup Iteration   2: 3924.461 ops/s
[info] # Warmup Iteration   3: 3945.265 ops/s
[info] # Warmup Iteration   4: 3945.015 ops/s
[info] # Warmup Iteration   5: 3895.763 ops/s
[info] Iteration   1: 3923.986 ops/s
[info]                  ·gc.alloc.rate:            800.908 MB/sec
[info]                  ·gc.alloc.rate.norm:       321272.137 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 269290.346 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 3894.145 ops/s
[info]                  ·gc.alloc.rate:            795.340 MB/sec
[info]                  ·gc.alloc.rate.norm:       321381.685 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.560 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 271364.469 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 3984.370 ops/s
[info]                  ·gc.alloc.rate:            813.641 MB/sec
[info]                  ·gc.alloc.rate.norm:       321272.102 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1343.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 530338.489 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   4: 4056.177 ops/s
[info]                  ·gc.alloc.rate:            828.036 MB/sec
[info]                  ·gc.alloc.rate.norm:       321272.101 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 260528.619 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 4047.988 ops/s
[info]                  ·gc.alloc.rate:            827.619 MB/sec
[info]                  ·gc.alloc.rate.norm:       321650.663 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.508 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 260978.916 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   3981.333 ±(99.9%) 278.634 ops/s [Average]
[info]   (min, avg, max) = (3894.145, 3981.333, 4056.177), stdev = 72.360
[info]   CI (99.9%): [3702.699, 4259.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   813.109 ±(99.9%) 57.704 MB/sec [Average]
[info]   (min, avg, max) = (795.340, 813.109, 828.036), stdev = 14.985
[info]   CI (99.9%): [755.406, 870.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   321369.737 ±(99.9%) 631.709 B/op [Average]
[info]   (min, avg, max) = (321272.101, 321369.737, 321650.663), stdev = 164.053
[info]   CI (99.9%): [320738.029, 322001.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   805.797 ±(99.9%) 1156.618 MB/sec [Average]
[info]   (min, avg, max) = (671.321, 805.797, 1343.115), stdev = 300.370
[info]   CI (99.9%): [≈ 0, 1962.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   318500.168 ±(99.9%) 456379.489 B/op [Average]
[info]   (min, avg, max) = (260528.619, 318500.168, 530338.489), stdev = 118520.304
[info]   CI (99.9%): [≈ 0, 774879.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.800, 17.000), stdev = 3.493
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.05% complete, ETA 00:46:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 561.707 ops/s
[info] # Warmup Iteration   2: 3349.653 ops/s
[info] # Warmup Iteration   3: 3364.714 ops/s
[info] # Warmup Iteration   4: 3463.741 ops/s
[info] # Warmup Iteration   5: 3416.195 ops/s
[info] Iteration   1: 3444.838 ops/s
[info]                  ·gc.alloc.rate:            683.816 MB/sec
[info]                  ·gc.alloc.rate.norm:       312411.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 306417.885 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 3437.338 ops/s
[info]                  ·gc.alloc.rate:            681.071 MB/sec
[info]                  ·gc.alloc.rate.norm:       311821.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 307130.899 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 3494.835 ops/s
[info]                  ·gc.alloc.rate:            692.319 MB/sec
[info]                  ·gc.alloc.rate.norm:       311792.126 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 302035.478 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 3499.832 ops/s
[info]                  ·gc.alloc.rate:            693.445 MB/sec
[info]                  ·gc.alloc.rate.norm:       311868.744 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.622 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 301604.122 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 3490.190 ops/s
[info]                  ·gc.alloc.rate:                   691.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              311792.117 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.252 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        302167.704 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 300.366 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   3473.407 ±(99.9%) 114.816 ops/s [Average]
[info]   (min, avg, max) = (3437.338, 3473.407, 3499.832), stdev = 29.817
[info]   CI (99.9%): [3358.591, 3588.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   688.450 ±(99.9%) 21.593 MB/sec [Average]
[info]   (min, avg, max) = (681.071, 688.450, 693.445), stdev = 5.608
[info]   CI (99.9%): [666.858, 710.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   311937.015 ±(99.9%) 1027.403 B/op [Average]
[info]   (min, avg, max) = (311792.117, 311937.015, 312411.006), stdev = 266.813
[info]   CI (99.9%): [310909.612, 312964.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   670.611 ±(99.9%) 0.828 MB/sec [Average]
[info]   (min, avg, max) = (670.252, 670.611, 670.827), stdev = 0.215
[info]   CI (99.9%): [669.782, 671.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   303871.218 ±(99.9%) 10282.492 B/op [Average]
[info]   (min, avg, max) = (301604.122, 303871.218, 307130.899), stdev = 2670.330
[info]   CI (99.9%): [293588.726, 314153.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   60.073 ±(99.9%) 517.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 60.073, 300.366), stdev = 134.328
[info]   CI (99.9%): [≈ 0, 577.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 10.400, 11.000), stdev = 0.548
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.28% complete, ETA 00:46:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23051.822 ops/s
[info] # Warmup Iteration   2: 33669.833 ops/s
[info] # Warmup Iteration   3: 34428.513 ops/s
[info] # Warmup Iteration   4: 34426.655 ops/s
[info] # Warmup Iteration   5: 34327.920 ops/s
[info] Iteration   1: 35483.040 ops/s
[info]                  ·gc.alloc.rate:            582.324 MB/sec
[info]                  ·gc.alloc.rate.norm:       25823.176 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.283 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29812.426 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 35002.230 ops/s
[info]                  ·gc.alloc.rate:      574.052 MB/sec
[info]                  ·gc.alloc.rate.norm: 25815.325 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 34466.458 ops/s
[info]                  ·gc.alloc.rate:            566.372 MB/sec
[info]                  ·gc.alloc.rate.norm:       25861.862 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30688.397 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 35113.066 ops/s
[info]                  ·gc.alloc.rate:            575.617 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30123.087 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 35200.076 ops/s
[info]                  ·gc.alloc.rate:            582.938 MB/sec
[info]                  ·gc.alloc.rate.norm:       26064.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.153 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30052.924 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   35052.974 ±(99.9%) 1436.635 ops/s [Average]
[info]   (min, avg, max) = (34466.458, 35052.974, 35483.040), stdev = 373.090
[info]   CI (99.9%): [33616.339, 36489.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   576.261 ±(99.9%) 26.147 MB/sec [Average]
[info]   (min, avg, max) = (566.372, 576.261, 582.938), stdev = 6.790
[info]   CI (99.9%): [550.114, 602.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25872.876 ±(99.9%) 420.682 B/op [Average]
[info]   (min, avg, max) = (25800.014, 25872.876, 26064.004), stdev = 109.250
[info]   CI (99.9%): [25452.194, 26293.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   537.715 ±(99.9%) 1157.473 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.715, 672.283), stdev = 300.592
[info]   CI (99.9%): [≈ 0, 1695.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   24135.367 ±(99.9%) 51967.911 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24135.367, 30688.397), stdev = 13495.901
[info]   CI (99.9%): [≈ 0, 76103.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.800, 9.000), stdev = 3.834
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.51% complete, ETA 00:46:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 308.700 ops/s
[info] # Warmup Iteration   2: 2755.920 ops/s
[info] # Warmup Iteration   3: 2992.179 ops/s
[info] # Warmup Iteration   4: 3037.978 ops/s
[info] # Warmup Iteration   5: 3142.852 ops/s
[info] Iteration   1: 3155.289 ops/s
[info]                  ·gc.alloc.rate:            841.327 MB/sec
[info]                  ·gc.alloc.rate.norm:       419692.755 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 334574.155 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 3167.483 ops/s
[info]                  ·gc.alloc.rate:            844.782 MB/sec
[info]                  ·gc.alloc.rate.norm:       419640.129 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.771 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 333201.651 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 3108.331 ops/s
[info]                  ·gc.alloc.rate:            828.860 MB/sec
[info]                  ·gc.alloc.rate.norm:       419640.142 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1341.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 679264.093 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  22.000 ms
[info] Iteration   4: 3117.528 ops/s
[info]                  ·gc.alloc.rate:            831.758 MB/sec
[info]                  ·gc.alloc.rate.norm:       419922.290 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.567 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 338543.133 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 3157.463 ops/s
[info]                  ·gc.alloc.rate:            841.863 MB/sec
[info]                  ·gc.alloc.rate.norm:       419640.139 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.782 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 334362.265 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   3141.219 ±(99.9%) 101.779 ops/s [Average]
[info]   (min, avg, max) = (3108.331, 3141.219, 3167.483), stdev = 26.432
[info]   CI (99.9%): [3039.440, 3242.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   837.718 ±(99.9%) 26.822 MB/sec [Average]
[info]   (min, avg, max) = (828.860, 837.718, 844.782), stdev = 6.966
[info]   CI (99.9%): [810.896, 864.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   419707.091 ±(99.9%) 471.468 B/op [Average]
[info]   (min, avg, max) = (419640.129, 419707.091, 419922.290), stdev = 122.439
[info]   CI (99.9%): [419235.623, 420178.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   804.896 ±(99.9%) 1155.428 MB/sec [Average]
[info]   (min, avg, max) = (670.567, 804.896, 1341.661), stdev = 300.061
[info]   CI (99.9%): [≈ 0, 1960.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   403989.059 ±(99.9%) 592601.121 B/op [Average]
[info]   (min, avg, max) = (333201.651, 403989.059, 679264.093), stdev = 153896.629
[info]   CI (99.9%): [≈ 0, 996590.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 12.800, 22.000), stdev = 5.167
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.74% complete, ETA 00:45:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6241.517 ops/s
[info] # Warmup Iteration   2: 13135.064 ops/s
[info] # Warmup Iteration   3: 13800.328 ops/s
[info] # Warmup Iteration   4: 14119.443 ops/s
[info] # Warmup Iteration   5: 13920.451 ops/s
[info] Iteration   1: 13922.454 ops/s
[info]                  ·gc.alloc.rate:            725.035 MB/sec
[info]                  ·gc.alloc.rate.norm:       81972.428 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 151808.202 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 13942.082 ops/s
[info]                  ·gc.alloc.rate:            730.502 MB/sec
[info]                  ·gc.alloc.rate.norm:       82439.955 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.623 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75795.239 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 13940.646 ops/s
[info]                  ·gc.alloc.rate:            727.507 MB/sec
[info]                  ·gc.alloc.rate.norm:       82130.802 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75800.675 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 13978.389 ops/s
[info]                  ·gc.alloc.rate:            727.491 MB/sec
[info]                  ·gc.alloc.rate.norm:       81916.750 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75600.072 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 14080.360 ops/s
[info]                  ·gc.alloc.rate:            730.709 MB/sec
[info]                  ·gc.alloc.rate.norm:       81683.817 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75047.189 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   13972.786 ±(99.9%) 244.392 ops/s [Average]
[info]   (min, avg, max) = (13922.454, 13972.786, 14080.360), stdev = 63.468
[info]   CI (99.9%): [13728.394, 14217.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   728.249 ±(99.9%) 9.149 MB/sec [Average]
[info]   (min, avg, max) = (725.035, 728.249, 730.709), stdev = 2.376
[info]   CI (99.9%): [719.100, 737.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   82028.751 ±(99.9%) 1079.210 B/op [Average]
[info]   (min, avg, max) = (81683.817, 82028.751, 82439.955), stdev = 280.267
[info]   CI (99.9%): [80949.541, 83107.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   805.703 ±(99.9%) 1155.977 MB/sec [Average]
[info]   (min, avg, max) = (671.341, 805.703, 1342.724), stdev = 300.203
[info]   CI (99.9%): [≈ 0, 1961.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   90810.275 ±(99.9%) 131307.970 B/op [Average]
[info]   (min, avg, max) = (75047.189, 90810.275, 151808.202), stdev = 34100.263
[info]   CI (99.9%): [≈ 0, 222118.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.800, 19.000), stdev = 4.087
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.97% complete, ETA 00:45:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8967.826 ops/s
[info] # Warmup Iteration   2: 16741.036 ops/s
[info] # Warmup Iteration   3: 17612.856 ops/s
[info] # Warmup Iteration   4: 17559.689 ops/s
[info] # Warmup Iteration   5: 17590.573 ops/s
[info] Iteration   1: 17349.945 ops/s
[info]                  ·gc.alloc.rate:            832.919 MB/sec
[info]                  ·gc.alloc.rate.norm:       75560.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1341.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 121691.372 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  21.000 ms
[info] Iteration   2: 17552.524 ops/s
[info]                  ·gc.alloc.rate:            844.841 MB/sec
[info]                  ·gc.alloc.rate.norm:       75755.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60145.593 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 17628.738 ops/s
[info]                  ·gc.alloc.rate:            846.581 MB/sec
[info]                  ·gc.alloc.rate.norm:       75569.453 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.888 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59886.345 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 17051.205 ops/s
[info]                  ·gc.alloc.rate:            818.895 MB/sec
[info]                  ·gc.alloc.rate.norm:       75589.667 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61908.773 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 16804.321 ops/s
[info]                  ·gc.alloc.rate:            807.915 MB/sec
[info]                  ·gc.alloc.rate.norm:       75657.137 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1341.790 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 125651.935 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   17277.346 ±(99.9%) 1333.016 ops/s [Average]
[info]   (min, avg, max) = (16804.321, 17277.346, 17628.738), stdev = 346.180
[info]   CI (99.9%): [15944.330, 18610.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   830.230 ±(99.9%) 64.276 MB/sec [Average]
[info]   (min, avg, max) = (807.915, 830.230, 846.581), stdev = 16.692
[info]   CI (99.9%): [765.954, 894.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   75626.272 ±(99.9%) 313.461 B/op [Average]
[info]   (min, avg, max) = (75560.008, 75626.272, 75755.094), stdev = 81.405
[info]   CI (99.9%): [75312.811, 75939.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   939.112 ±(99.9%) 1414.851 MB/sec [Average]
[info]   (min, avg, max) = (670.684, 939.112, 1341.790), stdev = 367.432
[info]   CI (99.9%): [≈ 0, 2353.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   85856.803 ±(99.9%) 133067.579 B/op [Average]
[info]   (min, avg, max) = (59886.345, 85856.803, 125651.935), stdev = 34557.228
[info]   CI (99.9%): [≈ 0, 218924.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   73.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 14.600, 21.000), stdev = 5.413
[info]   CI (99.9%): [73.000, 73.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.20% complete, ETA 00:45:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 174968.045 ops/s
[info] # Warmup Iteration   2: 224344.729 ops/s
[info] # Warmup Iteration   3: 238184.101 ops/s
[info] # Warmup Iteration   4: 236097.303 ops/s
[info] # Warmup Iteration   5: 236640.741 ops/s
[info] Iteration   1: 237129.587 ops/s
[info]                  ·gc.alloc.rate:            843.898 MB/sec
[info]                  ·gc.alloc.rate.norm:       5601.718 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4461.028 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 240031.312 ops/s
[info]                  ·gc.alloc.rate:            846.576 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4406.883 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 241101.896 ops/s
[info]                  ·gc.alloc.rate:            850.700 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.233 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4387.256 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 231782.961 ops/s
[info]                  ·gc.alloc.rate:            818.353 MB/sec
[info]                  ·gc.alloc.rate.norm:       5557.637 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1344.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9127.649 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   5: 238684.377 ops/s
[info]                  ·gc.alloc.rate:            842.211 MB/sec
[info]                  ·gc.alloc.rate.norm:       5554.282 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4431.877 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   237746.026 ±(99.9%) 14056.570 ops/s [Average]
[info]   (min, avg, max) = (231782.961, 237746.026, 241101.896), stdev = 3650.447
[info]   CI (99.9%): [223689.456, 251802.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   840.348 ±(99.9%) 48.927 MB/sec [Average]
[info]   (min, avg, max) = (818.353, 840.348, 850.700), stdev = 12.706
[info]   CI (99.9%): [791.421, 889.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5563.528 ±(99.9%) 82.685 B/op [Average]
[info]   (min, avg, max) = (5552.002, 5563.528, 5601.718), stdev = 21.473
[info]   CI (99.9%): [5480.843, 5646.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   806.461 ±(99.9%) 1157.163 MB/sec [Average]
[info]   (min, avg, max) = (671.967, 806.461, 1344.032), stdev = 300.512
[info]   CI (99.9%): [≈ 0, 1963.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5362.939 ±(99.9%) 8104.522 B/op [Average]
[info]   (min, avg, max) = (4387.256, 5362.939, 9127.649), stdev = 2104.719
[info]   CI (99.9%): [≈ 0, 13467.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.000, 18.000), stdev = 3.937
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 61.43% complete, ETA 00:44:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 201610.467 ops/s
[info] # Warmup Iteration   2: 249706.347 ops/s
[info] # Warmup Iteration   3: 258715.590 ops/s
[info] # Warmup Iteration   4: 258717.741 ops/s
[info] # Warmup Iteration   5: 258822.384 ops/s
[info] Iteration   1: 257661.445 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 267916.666 ops/s
[info]                  ·gc.alloc.rate:      0.077 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.452 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 267724.011 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 267785.155 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 267591.093 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   265735.674 ±(99.9%) 17386.237 ops/s [Average]
[info]   (min, avg, max) = (257661.445, 265735.674, 267916.666), stdev = 4515.150
[info]   CI (99.9%): [248349.437, 283121.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.016 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.016, 0.077), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.092 ±(99.9%) 0.776 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.092, 0.452), stdev = 0.202
[info]   CI (99.9%): [≈ 0, 0.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.66% complete, ETA 00:44:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8265.330 ops/s
[info] # Warmup Iteration   2: 15326.484 ops/s
[info] # Warmup Iteration   3: 15919.520 ops/s
[info] # Warmup Iteration   4: 15731.722 ops/s
[info] # Warmup Iteration   5: 15960.589 ops/s
[info] Iteration   1: 15762.301 ops/s
[info]                  ·gc.alloc.rate:            815.319 MB/sec
[info]                  ·gc.alloc.rate.norm:       81424.135 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66974.250 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 15705.849 ops/s
[info]                  ·gc.alloc.rate:            815.636 MB/sec
[info]                  ·gc.alloc.rate.norm:       81702.971 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 134434.532 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  21.000 ms
[info] Iteration   3: 15776.576 ops/s
[info]                  ·gc.alloc.rate:            833.853 MB/sec
[info]                  ·gc.alloc.rate.norm:       83187.522 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66914.831 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 16060.517 ops/s
[info]                  ·gc.alloc.rate:            830.671 MB/sec
[info]                  ·gc.alloc.rate.norm:       81386.559 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.891 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65731.825 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 15982.968 ops/s
[info]                  ·gc.alloc.rate:            826.332 MB/sec
[info]                  ·gc.alloc.rate.norm:       81375.922 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66052.548 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   15857.642 ±(99.9%) 595.195 ops/s [Average]
[info]   (min, avg, max) = (15705.849, 15857.642, 16060.517), stdev = 154.570
[info]   CI (99.9%): [15262.447, 16452.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   824.362 ±(99.9%) 32.883 MB/sec [Average]
[info]   (min, avg, max) = (815.319, 824.362, 833.853), stdev = 8.540
[info]   CI (99.9%): [791.479, 857.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   81815.422 ±(99.9%) 2998.496 B/op [Average]
[info]   (min, avg, max) = (81375.922, 81815.422, 83187.522), stdev = 778.700
[info]   CI (99.9%): [78816.926, 84813.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   805.008 ±(99.9%) 1156.027 MB/sec [Average]
[info]   (min, avg, max) = (670.629, 805.008, 1342.052), stdev = 300.216
[info]   CI (99.9%): [≈ 0, 1961.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   80021.597 ±(99.9%) 117146.309 B/op [Average]
[info]   (min, avg, max) = (65731.825, 80021.597, 134434.532), stdev = 30422.525
[info]   CI (99.9%): [≈ 0, 197167.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 12.600, 21.000), stdev = 4.722
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.89% complete, ETA 00:44:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1076927.807 ops/s
[info] # Warmup Iteration   2: 1332412.133 ops/s
[info] # Warmup Iteration   3: 1351312.888 ops/s
[info] # Warmup Iteration   4: 1352697.249 ops/s
[info] # Warmup Iteration   5: 1352150.098 ops/s
[info] Iteration   1: 1353536.876 ops/s
[info]                  ·gc.alloc.rate:      55.029 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1351908.993 ops/s
[info]                  ·gc.alloc.rate:      54.975 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1352964.265 ops/s
[info]                  ·gc.alloc.rate:      63.631 MB/sec
[info]                  ·gc.alloc.rate.norm: 74.032 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1353203.551 ops/s
[info]                  ·gc.alloc.rate:      55.024 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1353612.156 ops/s
[info]                  ·gc.alloc.rate:      55.044 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   1353045.168 ±(99.9%) 2643.921 ops/s [Average]
[info]   (min, avg, max) = (1351908.993, 1353045.168, 1353612.156), stdev = 686.618
[info]   CI (99.9%): [1350401.247, 1355689.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   56.741 ±(99.9%) 14.833 MB/sec [Average]
[info]   (min, avg, max) = (54.975, 56.741, 63.631), stdev = 3.852
[info]   CI (99.9%): [41.908, 71.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   66.007 ±(99.9%) 17.275 B/op [Average]
[info]   (min, avg, max) = (64.000, 66.007, 74.032), stdev = 4.486
[info]   CI (99.9%): [48.732, 83.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.12% complete, ETA 00:44:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11284.023 ops/s
[info] # Warmup Iteration   2: 54924.232 ops/s
[info] # Warmup Iteration   3: 58485.079 ops/s
[info] # Warmup Iteration   4: 59359.493 ops/s
[info] # Warmup Iteration   5: 59100.831 ops/s
[info] Iteration   1: 59681.720 ops/s
[info]                  ·gc.alloc.rate:                                  2456.432 MB/sec
[info]                  ·gc.alloc.rate.norm:                             64787.731 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.070 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53891.133 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                17.566 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 59743.019 ops/s
[info]                  ·gc.alloc.rate:                                  2460.477 MB/sec
[info]                  ·gc.alloc.rate.norm:                             64824.151 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.575 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71808.495 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 60075.803 ops/s
[info]                  ·gc.alloc.rate:            2473.206 MB/sec
[info]                  ·gc.alloc.rate.norm:       64784.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2726.272 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71412.905 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 59764.460 ops/s
[info]                  ·gc.alloc.rate:                                  2462.128 MB/sec
[info]                  ·gc.alloc.rate.norm:                             64828.822 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53837.450 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 59721.788 ops/s
[info]                  ·gc.alloc.rate:                                  2468.245 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65047.428 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.104 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.845 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71836.146 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   59797.358 ±(99.9%) 610.815 ops/s [Average]
[info]   (min, avg, max) = (59681.720, 59797.358, 60075.803), stdev = 158.627
[info]   CI (99.9%): [59186.543, 60408.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2464.097 ±(99.9%) 25.536 MB/sec [Average]
[info]   (min, avg, max) = (2456.432, 2464.097, 2473.206), stdev = 6.632
[info]   CI (99.9%): [2438.561, 2489.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64854.428 ±(99.9%) 422.823 B/op [Average]
[info]   (min, avg, max) = (64784.007, 64854.428, 65047.428), stdev = 109.806
[info]   CI (99.9%): [64431.605, 65277.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.039 ±(99.9%) 0.176 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2453.133 ±(99.9%) 1438.208 MB/sec [Average]
[info]   (min, avg, max) = (2043.287, 2453.133, 2726.272), stdev = 373.498
[info]   CI (99.9%): [1014.925, 3891.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   64557.226 ±(99.9%) 37592.771 B/op [Average]
[info]   (min, avg, max) = (53837.450, 64557.226, 71836.146), stdev = 9762.723
[info]   CI (99.9%): [26964.455, 102149.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.513 ±(99.9%) 30.249 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.513, 17.566), stdev = 7.856
[info]   CI (99.9%): [≈ 0, 33.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.36% complete, ETA 00:43:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 567991.809 ops/s
[info] # Warmup Iteration   2: 1555971.808 ops/s
[info] # Warmup Iteration   3: 1560629.529 ops/s
[info] # Warmup Iteration   4: 1554718.130 ops/s
[info] # Warmup Iteration   5: 1631908.895 ops/s
[info] Iteration   1: 1630301.941 ops/s
[info]                  ·gc.alloc.rate:            853.357 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 649.520 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1583624.925 ops/s
[info]                  ·gc.alloc.rate:                   834.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              829.531 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1337.322 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.662 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 1626485.495 ops/s
[info]                  ·gc.alloc.rate:            851.703 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.598 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 651.688 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1625327.312 ops/s
[info]                  ·gc.alloc.rate:                   850.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        651.484 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.645 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 1622290.738 ops/s
[info]                  ·gc.alloc.rate:            849.442 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.103 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 653.370 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1617606.082 ±(99.9%) 73976.252 ops/s [Average]
[info]   (min, avg, max) = (1583624.925, 1617606.082, 1630301.941), stdev = 19211.398
[info]   CI (99.9%): [1543629.830, 1691582.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   848.056 ±(99.9%) 28.841 MB/sec [Average]
[info]   (min, avg, max) = (834.899, 848.056, 853.357), stdev = 7.490
[info]   CI (99.9%): [819.215, 876.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   825.127 ±(99.9%) 9.482 B/op [Average]
[info]   (min, avg, max) = (824.000, 825.127, 829.531), stdev = 2.462
[info]   CI (99.9%): [815.645, 834.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   807.686 ±(99.9%) 1158.712 MB/sec [Average]
[info]   (min, avg, max) = (672.660, 807.686, 1345.977), stdev = 300.914
[info]   CI (99.9%): [≈ 0, 1966.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   788.677 ±(99.9%) 1181.013 B/op [Average]
[info]   (min, avg, max) = (649.520, 788.677, 1337.322), stdev = 306.705
[info]   CI (99.9%): [≈ 0, 1969.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.261 ±(99.9%) 1.379 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.261, 0.662), stdev = 0.358
[info]   CI (99.9%): [≈ 0, 1.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.800, 18.000), stdev = 4.025
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.59% complete, ETA 00:43:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1262079.459 ops/s
[info] # Warmup Iteration   2: 1924066.346 ops/s
[info] # Warmup Iteration   3: 1943733.248 ops/s
[info] # Warmup Iteration   4: 1942591.331 ops/s
[info] # Warmup Iteration   5: 1963362.514 ops/s
[info] Iteration   1: 1953524.412 ops/s
[info]                  ·gc.alloc.rate:            546.087 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 543.083 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 1923745.644 ops/s
[info]                  ·gc.alloc.rate:            539.962 MB/sec
[info]                  ·gc.alloc.rate.norm:       441.721 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.198 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 551.534 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1947688.329 ops/s
[info]                  ·gc.alloc.rate:            544.564 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 544.743 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 1946265.697 ops/s
[info]                  ·gc.alloc.rate:            544.607 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.445 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 545.154 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1965764.170 ops/s
[info]                  ·gc.alloc.rate:      549.569 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   1947397.651 ±(99.9%) 58892.496 ops/s [Average]
[info]   (min, avg, max) = (1923745.644, 1947397.651, 1965764.170), stdev = 15294.194
[info]   CI (99.9%): [1888505.155, 2006290.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   544.958 ±(99.9%) 13.308 MB/sec [Average]
[info]   (min, avg, max) = (539.962, 544.958, 549.569), stdev = 3.456
[info]   CI (99.9%): [531.650, 558.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440.441 ±(99.9%) 2.849 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.441, 441.721), stdev = 0.740
[info]   CI (99.9%): [437.592, 443.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.288 ±(99.9%) 1160.858 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.288, 674.198), stdev = 301.471
[info]   CI (99.9%): [≈ 0, 1700.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   436.903 ±(99.9%) 940.548 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 436.903, 551.534), stdev = 244.257
[info]   CI (99.9%): [≈ 0, 1377.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.000, 8.000), stdev = 3.391
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.82% complete, ETA 00:43:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 721064.150 ops/s
[info] # Warmup Iteration   2: 944683.494 ops/s
[info] # Warmup Iteration   3: 963286.684 ops/s
[info] # Warmup Iteration   4: 955587.812 ops/s
[info] # Warmup Iteration   5: 984037.133 ops/s
[info] Iteration   1: 978586.204 ops/s
[info]                  ·gc.alloc.rate:      11.070 MB/sec
[info]                  ·gc.alloc.rate.norm: 17.805 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 984063.756 ops/s
[info]                  ·gc.alloc.rate:      10.005 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 986467.631 ops/s
[info]                  ·gc.alloc.rate:      10.026 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 984041.107 ops/s
[info]                  ·gc.alloc.rate:      10.005 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 986088.255 ops/s
[info]                  ·gc.alloc.rate:      10.024 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   983849.390 ±(99.9%) 12123.650 ops/s [Average]
[info]   (min, avg, max) = (978586.204, 983849.390, 986467.631), stdev = 3148.473
[info]   CI (99.9%): [971725.741, 995973.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   10.226 ±(99.9%) 1.817 MB/sec [Average]
[info]   (min, avg, max) = (10.005, 10.226, 11.070), stdev = 0.472
[info]   CI (99.9%): [8.409, 12.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.361 ±(99.9%) 3.107 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.361, 17.805), stdev = 0.807
[info]   CI (99.9%): [13.254, 19.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.05% complete, ETA 00:43:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13552.334 ops/s
[info] # Warmup Iteration   2: 40826.990 ops/s
[info] # Warmup Iteration   3: 40657.571 ops/s
[info] # Warmup Iteration   4: 40798.917 ops/s
[info] # Warmup Iteration   5: 41299.987 ops/s
[info] Iteration   1: 39897.893 ops/s
[info]                  ·gc.alloc.rate:                   1604.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              63276.173 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2018.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        79620.722 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 131.387 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         28.000 ms
[info] Iteration   2: 40321.609 ops/s
[info]                  ·gc.alloc.rate:                   1630.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              63640.292 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        52833.108 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 156.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 42090.802 ops/s
[info]                  ·gc.alloc.rate:                                  1692.206 MB/sec
[info]                  ·gc.alloc.rate.norm:                             63272.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.801 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.168 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76394.579 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                49.817 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 41728.584 ops/s
[info]                  ·gc.alloc.rate:            1683.754 MB/sec
[info]                  ·gc.alloc.rate.norm:       63513.438 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 51402.508 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 41912.374 ops/s
[info]                  ·gc.alloc.rate:                                  1685.662 MB/sec
[info]                  ·gc.alloc.rate.norm:                             63284.260 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.425 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.846 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76769.001 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   41190.253 ±(99.9%) 3873.193 ops/s [Average]
[info]   (min, avg, max) = (39897.893, 41190.253, 42090.802), stdev = 1005.856
[info]   CI (99.9%): [37317.060, 45063.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1659.247 ±(99.9%) 152.100 MB/sec [Average]
[info]   (min, avg, max) = (1604.298, 1659.247, 1692.206), stdev = 39.500
[info]   CI (99.9%): [1507.148, 1811.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   63397.234 ±(99.9%) 654.837 B/op [Average]
[info]   (min, avg, max) = (63272.010, 63397.234, 63640.292), stdev = 170.059
[info]   CI (99.9%): [62742.397, 64052.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.445 ±(99.9%) 3.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.445, 1.801), stdev = 0.780
[info]   CI (99.9%): [≈ 0, 3.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1764.573 ±(99.9%) 1429.503 MB/sec [Average]
[info]   (min, avg, max) = (1353.462, 1764.573, 2044.846), stdev = 371.237
[info]   CI (99.9%): [335.070, 3194.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67403.984 ±(99.9%) 53982.562 B/op [Average]
[info]   (min, avg, max) = (51402.508, 67403.984, 79620.722), stdev = 14019.100
[info]   CI (99.9%): [13421.422, 121386.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 7.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 3.996), stdev = 1.860
[info]   CI (99.9%): [≈ 0, 8.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   67.442 ±(99.9%) 281.252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 67.442, 156.003), stdev = 73.040
[info]   CI (99.9%): [≈ 0, 348.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.400, 28.000), stdev = 10.310
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 63.28% complete, ETA 00:42:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129241.847 ops/s
[info] # Warmup Iteration   2: 710815.810 ops/s
[info] # Warmup Iteration   3: 763138.156 ops/s
[info] # Warmup Iteration   4: 782855.101 ops/s
[info] # Warmup Iteration   5: 786849.827 ops/s
[info] Iteration   1: 774812.301 ops/s
[info]                  ·gc.alloc.rate:                   2386.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.453 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2717.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5520.587 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.472 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 781425.621 ops/s
[info]                  ·gc.alloc.rate:                                  2406.859 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4848.343 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4117.350 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 775996.364 ops/s
[info]                  ·gc.alloc.rate:                                  2390.454 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4848.209 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.849 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5528.442 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 783093.151 ops/s
[info]                  ·gc.alloc.rate:            2411.895 MB/sec
[info]                  ·gc.alloc.rate.norm:       4848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4108.760 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 793893.064 ops/s
[info]                  ·gc.alloc.rate:            2446.949 MB/sec
[info]                  ·gc.alloc.rate.norm:       4851.495 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5403.717 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   781844.100 ±(99.9%) 29234.161 ops/s [Average]
[info]   (min, avg, max) = (774812.301, 781844.100, 793893.064), stdev = 7592.019
[info]   CI (99.9%): [752609.939, 811078.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2408.538 ±(99.9%) 92.351 MB/sec [Average]
[info]   (min, avg, max) = (2386.531, 2408.538, 2446.949), stdev = 23.983
[info]   CI (99.9%): [2316.187, 2500.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4848.900 ±(99.9%) 5.623 B/op [Average]
[info]   (min, avg, max) = (4848.001, 4848.900, 4851.495), stdev = 1.460
[info]   CI (99.9%): [4843.278, 4854.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2451.358 ±(99.9%) 1431.814 MB/sec [Average]
[info]   (min, avg, max) = (2043.973, 2451.358, 2725.849), stdev = 371.838
[info]   CI (99.9%): [1019.543, 3883.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4935.771 ±(99.9%) 2898.234 B/op [Average]
[info]   (min, avg, max) = (4108.760, 4935.771, 5528.442), stdev = 752.662
[info]   CI (99.9%): [2037.537, 7834.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.894 ±(99.9%) 16.311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.894, 9.472), stdev = 4.236
[info]   CI (99.9%): [≈ 0, 18.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 12.000), stdev = 3.391
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 63.51% complete, ETA 00:42:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.638 ops/s
[info] # Warmup Iteration   2: 4060358.343 ops/s
[info] # Warmup Iteration   3: 4292737.991 ops/s
[info] # Warmup Iteration   4: 4393299.631 ops/s
[info] # Warmup Iteration   5: 4384377.408 ops/s
[info] Iteration   1: 4339220.573 ops/s
[info]                  ·gc.alloc.rate:            264.753 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 243.304 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 4388454.278 ops/s
[info]                  ·gc.alloc.rate:      267.678 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4327598.536 ops/s
[info]                  ·gc.alloc.rate:                   263.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        243.714 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.242 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 4182996.402 ops/s
[info]                  ·gc.alloc.rate:      255.130 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4188329.735 ops/s
[info]                  ·gc.alloc.rate:      255.493 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   4285319.904 ±(99.9%) 361256.569 ops/s [Average]
[info]   (min, avg, max) = (4182996.402, 4285319.904, 4388454.278), stdev = 93817.184
[info]   CI (99.9%): [3924063.335, 4646576.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   261.394 ±(99.9%) 22.053 MB/sec [Average]
[info]   (min, avg, max) = (255.130, 261.394, 267.678), stdev = 5.727
[info]   CI (99.9%): [239.341, 283.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   268.199 ±(99.9%) 1414.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.199, 670.993), stdev = 367.247
[info]   CI (99.9%): [≈ 0, 1682.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   97.404 ±(99.9%) 513.581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 97.404, 243.714), stdev = 133.375
[info]   CI (99.9%): [≈ 0, 610.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.048 ±(99.9%) 0.417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.242), stdev = 0.108
[info]   CI (99.9%): [≈ 0, 0.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 10.000), stdev = 5.477
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 63.74% complete, ETA 00:42:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22538.161 ops/s
[info] # Warmup Iteration   2: 750893.261 ops/s
[info] # Warmup Iteration   3: 780114.371 ops/s
[info] # Warmup Iteration   4: 771736.500 ops/s
[info] # Warmup Iteration   5: 783429.065 ops/s
[info] Iteration   1: 772052.765 ops/s
[info]                  ·gc.alloc.rate:            901.847 MB/sec
[info]                  ·gc.alloc.rate.norm:       1838.076 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2742.934 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 782563.885 ops/s
[info]                  ·gc.alloc.rate:                   911.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.277 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1351.765 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.340 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 784090.680 ops/s
[info]                  ·gc.alloc.rate:            912.730 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1350.479 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 775183.020 ops/s
[info]                  ·gc.alloc.rate:            902.273 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.215 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2731.984 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   5: 783039.261 ops/s
[info]                  ·gc.alloc.rate:            911.563 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.842 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1352.234 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   779385.922 ±(99.9%) 20827.379 ops/s [Average]
[info]   (min, avg, max) = (772052.765, 779385.922, 784090.680), stdev = 5408.804
[info]   CI (99.9%): [758558.543, 800213.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   907.905 ±(99.9%) 20.681 MB/sec [Average]
[info]   (min, avg, max) = (901.847, 907.905, 912.730), stdev = 5.371
[info]   CI (99.9%): [887.224, 928.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1833.258 ±(99.9%) 10.376 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1833.258, 1838.076), stdev = 2.695
[info]   CI (99.9%): [1822.882, 1843.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   941.825 ±(99.9%) 1419.285 MB/sec [Average]
[info]   (min, avg, max) = (672.277, 941.825, 1345.813), stdev = 368.584
[info]   CI (99.9%): [≈ 0, 2361.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1905.879 ±(99.9%) 2923.158 B/op [Average]
[info]   (min, avg, max) = (1350.479, 1905.879, 2742.934), stdev = 759.135
[info]   CI (99.9%): [≈ 0, 4829.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.268 ±(99.9%) 2.307 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.268, 1.340), stdev = 0.599
[info]   CI (99.9%): [≈ 0, 2.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   68.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 13.600, 19.000), stdev = 4.930
[info]   CI (99.9%): [68.000, 68.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 63.97% complete, ETA 00:42:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5082297.328 ops/s
[info] # Warmup Iteration   2: 7945674.324 ops/s
[info] # Warmup Iteration   3: 8209938.518 ops/s
[info] # Warmup Iteration   4: 8070670.194 ops/s
[info] # Warmup Iteration   5: 8210193.594 ops/s
[info] Iteration   1: 8143888.209 ops/s
[info]                  ·gc.alloc.rate:            372.501 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130.283 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 8228174.961 ops/s
[info]                  ·gc.alloc.rate:      376.343 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8124141.442 ops/s
[info]                  ·gc.alloc.rate:            371.639 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.105 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130.600 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 8163838.323 ops/s
[info]                  ·gc.alloc.rate:      375.005 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.281 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8104388.666 ops/s
[info]                  ·gc.alloc.rate:            373.151 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.473 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130.908 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   8152886.320 ±(99.9%) 183134.277 ops/s [Average]
[info]   (min, avg, max) = (8104388.666, 8152886.320, 8228174.961), stdev = 47559.390
[info]   CI (99.9%): [7969752.043, 8336020.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   373.728 ±(99.9%) 7.374 MB/sec [Average]
[info]   (min, avg, max) = (371.639, 373.728, 376.343), stdev = 1.915
[info]   CI (99.9%): [366.354, 381.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.151 ±(99.9%) 0.836 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.151, 72.473), stdev = 0.217
[info]   CI (99.9%): [71.315, 72.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.433 ±(99.9%) 1421.640 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.433, 674.105), stdev = 369.195
[info]   CI (99.9%): [≈ 0, 1826.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   78.358 ±(99.9%) 275.442 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 78.358, 130.908), stdev = 71.531
[info]   CI (99.9%): [≈ 0, 353.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 8.000), stdev = 4.037
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 64.20% complete, ETA 00:41:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3118.375 ops/s
[info] # Warmup Iteration   2: 137203.467 ops/s
[info] # Warmup Iteration   3: 374921.018 ops/s
[info] # Warmup Iteration   4: 384182.304 ops/s
[info] # Warmup Iteration   5: 396776.185 ops/s
[info] Iteration   1: 394509.667 ops/s
[info]                  ·gc.alloc.rate:                   1877.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2018.547 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8052.089 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.630 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         29.000 ms
[info] Iteration   2: 392982.106 ops/s
[info]                  ·gc.alloc.rate:                   1867.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              7480.566 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1351.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5415.523 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.674 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 405235.991 ops/s
[info]                  ·gc.alloc.rate:                                  1925.786 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7480.317 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.782 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7934.761 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.174 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 400151.608 ops/s
[info]                  ·gc.alloc.rate:            1902.361 MB/sec
[info]                  ·gc.alloc.rate.norm:       7480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2045.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8040.918 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 408840.000 ops/s
[info]                  ·gc.alloc.rate:                                  1943.380 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7480.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7870.205 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   400343.874 ±(99.9%) 26143.825 ops/s [Average]
[info]   (min, avg, max) = (392982.106, 400343.874, 408840.000), stdev = 6789.468
[info]   CI (99.9%): [374200.049, 426487.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1903.241 ±(99.9%) 122.924 MB/sec [Average]
[info]   (min, avg, max) = (1867.535, 1903.241, 1943.380), stdev = 31.923
[info]   CI (99.9%): [1780.317, 2026.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7481.781 ±(99.9%) 13.458 B/op [Average]
[info]   (min, avg, max) = (7480.001, 7481.781, 7488.019), stdev = 3.495
[info]   CI (99.9%): [7468.323, 7495.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.015), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1900.620 ±(99.9%) 1181.737 MB/sec [Average]
[info]   (min, avg, max) = (1351.994, 1900.620, 2045.016), stdev = 306.893
[info]   CI (99.9%): [718.883, 3082.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   7462.699 ±(99.9%) 4416.317 B/op [Average]
[info]   (min, avg, max) = (5415.523, 7462.699, 8052.089), stdev = 1146.904
[info]   CI (99.9%): [3046.382, 11879.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 7.608 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.662), stdev = 1.976
[info]   CI (99.9%): [≈ 0, 9.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.896 ±(99.9%) 30.487 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.896, 18.674), stdev = 7.917
[info]   CI (99.9%): [≈ 0, 37.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 11.400, 29.000), stdev = 10.114
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 64.43% complete, ETA 00:41:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1159.249 ops/s
[info] # Warmup Iteration   2: 4110.186 ops/s
[info] # Warmup Iteration   3: 4166.976 ops/s
[info] # Warmup Iteration   4: 4308.343 ops/s
[info] # Warmup Iteration   5: 4275.667 ops/s
[info] Iteration   1: 4295.089 ops/s
[info]                  ·gc.alloc.rate:                   1980.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              725731.912 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2027.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        742985.415 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.326 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2684.901 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 4364.915 ops/s
[info]                  ·gc.alloc.rate:                                  1998.662 MB/sec
[info]                  ·gc.alloc.rate.norm:                             720744.093 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.133 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.289 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       736837.189 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                240.169 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 4359.451 ops/s
[info]                  ·gc.alloc.rate:                                  1996.392 MB/sec
[info]                  ·gc.alloc.rate.norm:                             720744.094 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.174 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 62.892 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       737922.436 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 4373.082 ops/s
[info]                  ·gc.alloc.rate:                                  2003.822 MB/sec
[info]                  ·gc.alloc.rate.norm:                             721216.280 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.132 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 47.448 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.145 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       735729.251 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 4403.716 ops/s
[info]                  ·gc.alloc.rate:                                  2017.879 MB/sec
[info]                  ·gc.alloc.rate.norm:                             720947.423 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 34.530 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       730551.588 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   4359.251 ±(99.9%) 153.027 ops/s [Average]
[info]   (min, avg, max) = (4295.089, 4359.251, 4403.716), stdev = 39.741
[info]   CI (99.9%): [4206.224, 4512.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   1999.404 ±(99.9%) 52.261 MB/sec [Average]
[info]   (min, avg, max) = (1980.264, 1999.404, 2017.879), stdev = 13.572
[info]   CI (99.9%): [1947.143, 2051.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   721876.761 ±(99.9%) 8331.989 B/op [Average]
[info]   (min, avg, max) = (720744.093, 721876.761, 725731.912), stdev = 2163.791
[info]   CI (99.9%): [713544.771, 730208.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.082 ±(99.9%) 0.294 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.082, 0.174), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   29.601 ±(99.9%) 105.942 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.601, 62.892), stdev = 27.513
[info]   CI (99.9%): [≈ 0, 135.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2040.702 ±(99.9%) 28.828 MB/sec [Average]
[info]   (min, avg, max) = (2027.343, 2040.702, 2044.760), stdev = 7.487
[info]   CI (99.9%): [2011.874, 2069.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   736805.176 ±(99.9%) 17189.323 B/op [Average]
[info]   (min, avg, max) = (730551.588, 736805.176, 742985.415), stdev = 4464.013
[info]   CI (99.9%): [719615.853, 753994.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.598 ±(99.9%) 12.379 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.598, 7.326), stdev = 3.215
[info]   CI (99.9%): [≈ 0, 13.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   585.014 ±(99.9%) 4537.870 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 585.014, 2684.901), stdev = 1178.470
[info]   CI (99.9%): [≈ 0, 5122.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 10.000, 20.000), stdev = 6.364
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 64.67% complete, ETA 00:41:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 573.640 ops/s
[info] # Warmup Iteration   2: 4430.442 ops/s
[info] # Warmup Iteration   3: 4826.600 ops/s
[info] # Warmup Iteration   4: 4913.496 ops/s
[info] # Warmup Iteration   5: 4880.448 ops/s
[info] Iteration   1: 5027.590 ops/s
[info]                  ·gc.alloc.rate:                   1994.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              624382.676 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2024.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        633649.327 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.327 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2293.565 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 5162.695 ops/s
[info]                  ·gc.alloc.rate:                   2047.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              624238.866 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2041.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        622566.618 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 609.165 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 5178.043 ops/s
[info]                  ·gc.alloc.rate:                                  2053.438 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624182.667 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       621250.916 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 5162.346 ops/s
[info]                  ·gc.alloc.rate:                                  2049.364 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624566.641 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.501 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       623175.783 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 5215.441 ops/s
[info]                  ·gc.alloc.rate:                                  2068.419 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624168.084 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.122 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.151 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       616844.881 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   5149.223 ±(99.9%) 274.746 ops/s [Average]
[info]   (min, avg, max) = (5027.590, 5149.223, 5215.441), stdev = 71.351
[info]   CI (99.9%): [4874.477, 5423.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2042.686 ±(99.9%) 107.927 MB/sec [Average]
[info]   (min, avg, max) = (1994.756, 2042.686, 2068.419), stdev = 28.028
[info]   CI (99.9%): [1934.759, 2150.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   624307.787 ±(99.9%) 645.876 B/op [Average]
[info]   (min, avg, max) = (624168.084, 624307.787, 624566.641), stdev = 167.732
[info]   CI (99.9%): [623661.911, 624953.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.023), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.335 ±(99.9%) 12.748 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.335, 7.050), stdev = 3.311
[info]   CI (99.9%): [≈ 0, 16.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2039.814 ±(99.9%) 33.510 MB/sec [Average]
[info]   (min, avg, max) = (2024.361, 2039.814, 2044.800), stdev = 8.702
[info]   CI (99.9%): [2006.305, 2073.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   623497.505 ±(99.9%) 23840.906 B/op [Average]
[info]   (min, avg, max) = (616844.881, 623497.505, 633649.327), stdev = 6191.408
[info]   CI (99.9%): [599656.599, 647338.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 12.221 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 7.327), stdev = 3.174
[info]   CI (99.9%): [≈ 0, 14.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   580.546 ±(99.9%) 3824.735 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 580.546, 2293.565), stdev = 993.271
[info]   CI (99.9%): [≈ 0, 4405.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.400, 23.000), stdev = 8.264
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 64.90% complete, ETA 00:40:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33466.252 ops/s
[info] # Warmup Iteration   2: 40884.382 ops/s
[info] # Warmup Iteration   3: 42054.216 ops/s
[info] # Warmup Iteration   4: 44652.819 ops/s
[info] # Warmup Iteration   5: 43431.816 ops/s
[info] Iteration   1: 43072.737 ops/s
[info]                  ·gc.alloc.rate:            694.496 MB/sec
[info]                  ·gc.alloc.rate.norm:       25371.439 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.263 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24632.287 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 44318.347 ops/s
[info]                  ·gc.alloc.rate:            714.536 MB/sec
[info]                  ·gc.alloc.rate.norm:       25368.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.295 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23939.335 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 44024.689 ops/s
[info]                  ·gc.alloc.rate:            711.356 MB/sec
[info]                  ·gc.alloc.rate.norm:       25430.812 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.138 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24100.268 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 44374.790 ops/s
[info]                  ·gc.alloc.rate:            715.289 MB/sec
[info]                  ·gc.alloc.rate.norm:       25371.581 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23908.591 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 44365.459 ops/s
[info]                  ·gc.alloc.rate:            715.058 MB/sec
[info]                  ·gc.alloc.rate.norm:       25368.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23914.518 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   44031.204 ±(99.9%) 2136.093 ops/s [Average]
[info]   (min, avg, max) = (43072.737, 44031.204, 44374.790), stdev = 554.736
[info]   CI (99.9%): [41895.112, 46167.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   710.147 ±(99.9%) 34.239 MB/sec [Average]
[info]   (min, avg, max) = (694.496, 710.147, 715.289), stdev = 8.892
[info]   CI (99.9%): [675.908, 744.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25381.970 ±(99.9%) 105.351 B/op [Average]
[info]   (min, avg, max) = (25368.009, 25381.970, 25430.812), stdev = 27.359
[info]   CI (99.9%): [25276.620, 25487.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.165 ±(99.9%) 0.421 MB/sec [Average]
[info]   (min, avg, max) = (674.043, 674.165, 674.295), stdev = 0.109
[info]   CI (99.9%): [673.745, 674.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   24099.000 ±(99.9%) 1187.127 B/op [Average]
[info]   (min, avg, max) = (23908.591, 24099.000, 24632.287), stdev = 308.293
[info]   CI (99.9%): [22911.873, 25286.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 65.13% complete, ETA 00:40:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1963.779 ops/s
[info] # Warmup Iteration   2: 4281.341 ops/s
[info] # Warmup Iteration   3: 4304.157 ops/s
[info] # Warmup Iteration   4: 4523.871 ops/s
[info] # Warmup Iteration   5: 4553.889 ops/s
[info] Iteration   1: 4573.198 ops/s
[info]                  ·gc.alloc.rate:            802.659 MB/sec
[info]                  ·gc.alloc.rate.norm:       276224.177 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.479 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 231768.766 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 4533.879 ops/s
[info]                  ·gc.alloc.rate:            795.422 MB/sec
[info]                  ·gc.alloc.rate.norm:       276144.155 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 233761.926 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 4536.292 ops/s
[info]                  ·gc.alloc.rate:            796.073 MB/sec
[info]                  ·gc.alloc.rate.norm:       276164.710 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.091 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 467317.759 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   4: 4573.952 ops/s
[info]                  ·gc.alloc.rate:            802.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       276128.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 231667.469 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 4555.825 ops/s
[info]                  ·gc.alloc.rate:            799.253 MB/sec
[info]                  ·gc.alloc.rate.norm:       276128.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 232633.385 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4554.629 ±(99.9%) 74.230 ops/s [Average]
[info]   (min, avg, max) = (4533.879, 4554.629, 4573.952), stdev = 19.277
[info]   CI (99.9%): [4480.399, 4628.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   799.196 ±(99.9%) 13.253 MB/sec [Average]
[info]   (min, avg, max) = (795.422, 799.196, 802.659), stdev = 3.442
[info]   CI (99.9%): [785.943, 812.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   276157.844 ±(99.9%) 154.089 B/op [Average]
[info]   (min, avg, max) = (276128.089, 276157.844, 276224.177), stdev = 40.016
[info]   CI (99.9%): [276003.756, 276311.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   808.123 ±(99.9%) 1160.169 MB/sec [Average]
[info]   (min, avg, max) = (673.342, 808.123, 1347.091), stdev = 301.292
[info]   CI (99.9%): [≈ 0, 1968.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   279429.861 ±(99.9%) 404455.839 B/op [Average]
[info]   (min, avg, max) = (231667.469, 279429.861, 467317.759), stdev = 105035.897
[info]   CI (99.9%): [≈ 0, 683885.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.400, 17.000), stdev = 3.715
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 65.36% complete, ETA 00:40:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_bbe3575e/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1511.071 ops/s
[info] # Warmup Iteration   2: 4123.482 ops/s
[info] # Warmup Iteration   3: 4320.399 ops/s
[info] # Warmup Iteration   4: 4432.968 ops/s
[info] # Warmup Iteration   5: 4384.337 ops/s
[info] Iteration   1: 4378.539 ops/s
[info]                  ·gc.alloc.rate:            512.801 MB/sec
[info]                  ·gc.alloc.rate.norm:       184300.957 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 241555.521 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 4361.682 ops/s
[info]                  ·gc.alloc.rate:            509.401 MB/sec
[info]                  ·gc.alloc.rate.norm:       183813.477 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 242496.719 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 4403.945 ops/s
[info]                  ·gc.alloc.rate:      514.787 MB/sec
[info]                  ·gc.alloc.rate.norm: 183989.975 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 4230.557 ops/s
[info]                  ·gc.alloc.rate:            494.535 MB/sec
[info]                  ·gc.alloc.rate.norm:       183935.626 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.166 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 250003.115 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 4362.674 ops/s
[info]                  ·gc.alloc.rate:            509.536 MB/sec
[info]                  ·gc.alloc.rate.norm:       183813.826 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 242441.151 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   4347.480 ±(99.9%) 260.142 ops/s [Average]
[info]   (min, avg, max) = (4230.557, 4347.480, 4403.945), stdev = 67.558
[info]   CI (99.9%): [4087.337, 4607.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   508.212 ±(99.9%) 30.716 MB/sec [Average]
[info]   (min, avg, max) = (494.535, 508.212, 514.787), stdev = 7.977
[info]   CI (99.9%): [477.496, 538.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   183970.772 ±(99.9%) 770.129 B/op [Average]
[info]   (min, avg, max) = (183813.477, 183970.772, 184300.957), stdev = 200.000
[info]   CI (99.9%): [183200.643, 184740.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.671 ±(99.9%) 1157.377 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.671, 672.166), stdev = 300.567
[info]   CI (99.9%): [≈ 0, 1695.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   195299.301 ±(99.9%) 420602.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 195299.301, 250003.115), stdev = 109229.017
[info]   CI (99.9%): [≈ 0, 615901.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 8.000, 10.000), stdev = 4.472
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 65.59% complete, ETA 00:40:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4579.278 ops/s
[info] # Warmup Iteration   2: 5761.789 ops/s
[info] # Warmup Iteration   3: 6189.025 ops/s
[info] # Warmup Iteration   4: 6238.241 ops/s
[info] # Warmup Iteration   5: 6163.945 ops/s
[info] Iteration   1: 6231.211 ops/s
[info]                  ·gc.alloc.rate:      270.788 MB/sec
[info]                  ·gc.alloc.rate.norm: 68385.608 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6226.177 ops/s
[info]                  ·gc.alloc.rate:      269.948 MB/sec
[info]                  ·gc.alloc.rate.norm: 68232.066 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6166.725 ops/s
[info]                  ·gc.alloc.rate:            267.597 MB/sec
[info]                  ·gc.alloc.rate.norm:       68297.834 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 172014.737 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 6225.927 ops/s
[info]                  ·gc.alloc.rate:      270.307 MB/sec
[info]                  ·gc.alloc.rate.norm: 68331.180 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6190.368 ops/s
[info]                  ·gc.alloc.rate:                   268.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              68232.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        171206.450 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 169.344 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6208.082 ±(99.9%) 108.998 ops/s [Average]
[info]   (min, avg, max) = (6166.725, 6208.082, 6231.211), stdev = 28.307
[info]   CI (99.9%): [6099.083, 6317.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   269.405 ±(99.9%) 5.212 MB/sec [Average]
[info]   (min, avg, max) = (267.597, 269.405, 270.788), stdev = 1.353
[info]   CI (99.9%): [264.194, 274.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   68295.751 ±(99.9%) 254.300 B/op [Average]
[info]   (min, avg, max) = (68232.066, 68295.751, 68385.608), stdev = 66.041
[info]   CI (99.9%): [68041.451, 68550.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.480 ±(99.9%) 1420.891 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.480, 673.969), stdev = 369.001
[info]   CI (99.9%): [≈ 0, 1690.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   68644.237 ±(99.9%) 361942.922 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 68644.237, 172014.737), stdev = 93995.427
[info]   CI (99.9%): [≈ 0, 430587.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   33.869 ±(99.9%) 291.620 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33.869, 169.344), stdev = 75.733
[info]   CI (99.9%): [≈ 0, 325.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 8.000), stdev = 4.382
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 65.82% complete, ETA 00:39:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4563.289 ops/s
[info] # Warmup Iteration   2: 6048.620 ops/s
[info] # Warmup Iteration   3: 6296.365 ops/s
[info] # Warmup Iteration   4: 6383.926 ops/s
[info] # Warmup Iteration   5: 6393.275 ops/s
[info] Iteration   1: 6226.173 ops/s
[info]                  ·gc.alloc.rate:            226.030 MB/sec
[info]                  ·gc.alloc.rate.norm:       57141.187 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 170385.182 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 6397.019 ops/s
[info]                  ·gc.alloc.rate:      230.547 MB/sec
[info]                  ·gc.alloc.rate.norm: 56728.064 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6396.139 ops/s
[info]                  ·gc.alloc.rate:      230.575 MB/sec
[info]                  ·gc.alloc.rate.norm: 56728.064 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6309.385 ops/s
[info]                  ·gc.alloc.rate:            227.461 MB/sec
[info]                  ·gc.alloc.rate.norm:       56736.607 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 168144.337 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 6396.229 ops/s
[info]                  ·gc.alloc.rate:      230.510 MB/sec
[info]                  ·gc.alloc.rate.norm: 56728.064 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6344.989 ±(99.9%) 294.101 ops/s [Average]
[info]   (min, avg, max) = (6226.173, 6344.989, 6397.019), stdev = 76.377
[info]   CI (99.9%): [6050.888, 6639.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   229.025 ±(99.9%) 8.245 MB/sec [Average]
[info]   (min, avg, max) = (226.030, 229.025, 230.575), stdev = 2.141
[info]   CI (99.9%): [220.780, 237.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   56812.397 ±(99.9%) 707.888 B/op [Average]
[info]   (min, avg, max) = (56728.064, 56812.397, 57141.187), stdev = 183.836
[info]   CI (99.9%): [56104.509, 57520.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   269.617 ±(99.9%) 1421.613 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.617, 674.103), stdev = 369.188
[info]   CI (99.9%): [≈ 0, 1691.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   67705.904 ±(99.9%) 357006.722 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 67705.904, 170385.182), stdev = 92713.512
[info]   CI (99.9%): [≈ 0, 424712.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 8.000), stdev = 4.382
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 66.05% complete, ETA 00:39:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2129.648 ops/s
[info] # Warmup Iteration   2: 6498.339 ops/s
[info] # Warmup Iteration   3: 6989.375 ops/s
[info] # Warmup Iteration   4: 7015.491 ops/s
[info] # Warmup Iteration   5: 6823.671 ops/s
[info] Iteration   1: 7020.901 ops/s
[info]                  ·gc.alloc.rate:            1294.847 MB/sec
[info]                  ·gc.alloc.rate.norm:       290280.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 301896.721 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 7006.617 ops/s
[info]                  ·gc.alloc.rate:            1292.897 MB/sec
[info]                  ·gc.alloc.rate.norm:       290439.291 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.776 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 302542.904 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 7012.359 ops/s
[info]                  ·gc.alloc.rate:                   1293.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              290280.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        302284.099 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 747.488 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 6993.665 ops/s
[info]                  ·gc.alloc.rate:                   1293.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              291057.233 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        304904.015 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 899.422 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 6950.671 ops/s
[info]                  ·gc.alloc.rate:                   1290.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              292167.773 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1362.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        308449.068 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 150.831 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   6996.842 ±(99.9%) 106.453 ops/s [Average]
[info]   (min, avg, max) = (6950.671, 6996.842, 7020.901), stdev = 27.645
[info]   CI (99.9%): [6890.390, 7103.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1292.938 ±(99.9%) 6.530 MB/sec [Average]
[info]   (min, avg, max) = (1290.209, 1292.938, 1294.847), stdev = 1.696
[info]   CI (99.9%): [1286.407, 1299.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   290844.883 ±(99.9%) 3103.109 B/op [Average]
[info]   (min, avg, max) = (290280.058, 290844.883, 292167.773), stdev = 805.868
[info]   CI (99.9%): [287741.774, 293947.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1351.460 ±(99.9%) 26.466 MB/sec [Average]
[info]   (min, avg, max) = (1346.666, 1351.460, 1362.107), stdev = 6.873
[info]   CI (99.9%): [1324.993, 1377.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   304015.361 ±(99.9%) 10563.246 B/op [Average]
[info]   (min, avg, max) = (301896.721, 304015.361, 308449.068), stdev = 2743.241
[info]   CI (99.9%): [293452.115, 314578.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 7.389 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 3.996), stdev = 1.919
[info]   CI (99.9%): [≈ 0, 8.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   359.548 ±(99.9%) 1660.777 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 359.548, 899.422), stdev = 431.298
[info]   CI (99.9%): [≈ 0, 2020.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 12.400, 16.000), stdev = 5.367
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 66.28% complete, ETA 00:39:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.899 ops/s
[info] # Warmup Iteration   2: 13714.566 ops/s
[info] # Warmup Iteration   3: 15279.806 ops/s
[info] # Warmup Iteration   4: 15472.766 ops/s
[info] # Warmup Iteration   5: 14774.639 ops/s
[info] Iteration   1: 14869.591 ops/s
[info]                  ·gc.alloc.rate:      343.007 MB/sec
[info]                  ·gc.alloc.rate.norm: 36308.534 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 14727.832 ops/s
[info]                  ·gc.alloc.rate:            341.765 MB/sec
[info]                  ·gc.alloc.rate.norm:       36524.644 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71613.541 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 14689.421 ops/s
[info]                  ·gc.alloc.rate:      342.403 MB/sec
[info]                  ·gc.alloc.rate.norm: 36671.729 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 14744.015 ops/s
[info]                  ·gc.alloc.rate:            343.519 MB/sec
[info]                  ·gc.alloc.rate.norm:       36670.566 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71535.837 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 15353.909 ops/s
[info]                  ·gc.alloc.rate:            353.975 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.232 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68694.156 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   14876.954 ±(99.9%) 1059.135 ops/s [Average]
[info]   (min, avg, max) = (14689.421, 14876.954, 15353.909), stdev = 275.054
[info]   CI (99.9%): [13817.818, 15936.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   344.934 ±(99.9%) 19.626 MB/sec [Average]
[info]   (min, avg, max) = (341.765, 344.934, 353.975), stdev = 5.097
[info]   CI (99.9%): [325.308, 364.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   36491.100 ±(99.9%) 730.208 B/op [Average]
[info]   (min, avg, max) = (36280.027, 36491.100, 36671.729), stdev = 189.633
[info]   CI (99.9%): [35760.891, 37221.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   402.091 ±(99.9%) 1413.406 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.091, 670.232), stdev = 367.057
[info]   CI (99.9%): [≈ 0, 1815.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   42368.707 ±(99.9%) 149000.836 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42368.707, 71613.541), stdev = 38695.044
[info]   CI (99.9%): [≈ 0, 191369.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.200, 12.000), stdev = 6.573
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 66.51% complete, ETA 00:39:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1976.909 ops/s
[info] # Warmup Iteration   2: 11667.280 ops/s
[info] # Warmup Iteration   3: 12118.396 ops/s
[info] # Warmup Iteration   4: 12414.784 ops/s
[info] # Warmup Iteration   5: 12196.719 ops/s
[info] Iteration   1: 12376.824 ops/s
[info]                  ·gc.alloc.rate:      314.495 MB/sec
[info]                  ·gc.alloc.rate.norm: 39983.800 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 12313.285 ops/s
[info]                  ·gc.alloc.rate:            307.393 MB/sec
[info]                  ·gc.alloc.rate.norm:       39296.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 85905.585 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 12424.909 ops/s
[info]                  ·gc.alloc.rate:      310.247 MB/sec
[info]                  ·gc.alloc.rate.norm: 39296.033 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 12321.349 ops/s
[info]                  ·gc.alloc.rate:                   312.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              39899.525 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        85849.820 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 85.084 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 12463.763 ops/s
[info]                  ·gc.alloc.rate:      314.709 MB/sec
[info]                  ·gc.alloc.rate.norm: 39731.773 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   12380.026 ±(99.9%) 250.543 ops/s [Average]
[info]   (min, avg, max) = (12313.285, 12380.026, 12463.763), stdev = 65.065
[info]   CI (99.9%): [12129.483, 12630.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   311.862 ±(99.9%) 11.867 MB/sec [Average]
[info]   (min, avg, max) = (307.393, 311.862, 314.709), stdev = 3.082
[info]   CI (99.9%): [299.995, 323.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39641.433 ±(99.9%) 1263.382 B/op [Average]
[info]   (min, avg, max) = (39296.033, 39641.433, 39983.800), stdev = 328.096
[info]   CI (99.9%): [38378.051, 40904.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   268.862 ±(99.9%) 1417.634 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.862, 672.317), stdev = 368.155
[info]   CI (99.9%): [≈ 0, 1686.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   34351.081 ±(99.9%) 181123.351 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34351.081, 85905.585), stdev = 47037.159
[info]   CI (99.9%): [≈ 0, 215474.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   17.017 ±(99.9%) 146.520 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.017, 85.084), stdev = 38.051
[info]   CI (99.9%): [≈ 0, 163.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 10.000), stdev = 5.477
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 66.74% complete, ETA 00:38:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16836.621 ops/s
[info] # Warmup Iteration   2: 20585.674 ops/s
[info] # Warmup Iteration   3: 20841.953 ops/s
[info] # Warmup Iteration   4: 20253.120 ops/s
[info] # Warmup Iteration   5: 20840.415 ops/s
[info] Iteration   1: 20503.713 ops/s
[info]                  ·gc.alloc.rate:            348.968 MB/sec
[info]                  ·gc.alloc.rate.norm:       26791.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 51746.180 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 20850.682 ops/s
[info]                  ·gc.alloc.rate:      349.664 MB/sec
[info]                  ·gc.alloc.rate.norm: 26388.864 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20686.541 ops/s
[info]                  ·gc.alloc.rate:            346.675 MB/sec
[info]                  ·gc.alloc.rate.norm:       26376.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 51288.493 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 20855.500 ops/s
[info]                  ·gc.alloc.rate:      349.470 MB/sec
[info]                  ·gc.alloc.rate.norm: 26376.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 20613.313 ops/s
[info]                  ·gc.alloc.rate:                   347.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              26552.773 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.512 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        51421.728 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 50.862 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   20701.950 ±(99.9%) 587.430 ops/s [Average]
[info]   (min, avg, max) = (20503.713, 20701.950, 20855.500), stdev = 152.554
[info]   CI (99.9%): [20114.520, 21289.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   348.512 ±(99.9%) 4.855 MB/sec [Average]
[info]   (min, avg, max) = (346.675, 348.512, 349.664), stdev = 1.261
[info]   CI (99.9%): [343.657, 353.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26496.954 ±(99.9%) 695.694 B/op [Average]
[info]   (min, avg, max) = (26376.020, 26496.954, 26791.091), stdev = 180.669
[info]   CI (99.9%): [25801.260, 27192.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.329 ±(99.9%) 1421.275 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.329, 674.114), stdev = 369.101
[info]   CI (99.9%): [≈ 0, 1825.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   30891.280 ±(99.9%) 108589.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30891.280, 51746.180), stdev = 28200.243
[info]   CI (99.9%): [≈ 0, 139480.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   10.172 ±(99.9%) 87.588 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.172, 50.862), stdev = 22.746
[info]   CI (99.9%): [≈ 0, 97.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 8.000), stdev = 4.219
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 66.97% complete, ETA 00:38:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64.927 ops/s
[info] # Warmup Iteration   2: 2495.705 ops/s
[info] # Warmup Iteration   3: 3386.089 ops/s
[info] # Warmup Iteration   4: 3528.460 ops/s
[info] # Warmup Iteration   5: 3551.670 ops/s
[info] Iteration   1: 3553.041 ops/s
[info]                  ·gc.alloc.rate:                   2012.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              891502.672 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2020.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        895154.638 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2065.288 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         27.000 ms
[info] Iteration   2: 3748.248 ops/s
[info]                  ·gc.alloc.rate:                   2122.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              891479.146 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2038.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        856145.942 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1678.169 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 3759.663 ops/s
[info]                  ·gc.alloc.rate:                                  2129.163 MB/sec
[info]                  ·gc.alloc.rate.norm:                             891440.117 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 20.578 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       855644.707 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 3770.429 ops/s
[info]                  ·gc.alloc.rate:                                  2135.428 MB/sec
[info]                  ·gc.alloc.rate.norm:                             891440.108 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 18.793 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2724.937 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1137532.607 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 3767.717 ops/s
[info]                  ·gc.alloc.rate:                                  2134.118 MB/sec
[info]                  ·gc.alloc.rate.norm:                             891551.066 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.745 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.821 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       853828.534 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   3719.820 ±(99.9%) 360.535 ops/s [Average]
[info]   (min, avg, max) = (3553.041, 3719.820, 3770.429), stdev = 93.630
[info]   CI (99.9%): [3359.285, 4080.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2106.732 ±(99.9%) 204.517 MB/sec [Average]
[info]   (min, avg, max) = (2012.136, 2106.732, 2135.428), stdev = 53.113
[info]   CI (99.9%): [1902.215, 2311.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   891482.622 ±(99.9%) 179.714 B/op [Average]
[info]   (min, avg, max) = (891440.108, 891482.622, 891551.066), stdev = 46.671
[info]   CI (99.9%): [891302.908, 891662.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.049), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   11.023 ±(99.9%) 39.315 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.023, 20.578), stdev = 10.210
[info]   CI (99.9%): [≈ 0, 50.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2174.297 ±(99.9%) 1185.873 MB/sec [Average]
[info]   (min, avg, max) = (2020.378, 2174.297, 2724.937), stdev = 307.968
[info]   CI (99.9%): [988.423, 3360.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   919661.286 ±(99.9%) 473702.613 B/op [Average]
[info]   (min, avg, max) = (853828.534, 919661.286, 1137532.607), stdev = 123019.064
[info]   CI (99.9%): [445958.673, 1393363.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.731 ±(99.9%) 9.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.731, 4.661), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   748.691 ±(99.9%) 3982.658 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 748.691, 2065.288), stdev = 1034.284
[info]   CI (99.9%): [≈ 0, 4731.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 11.400, 27.000), stdev = 8.905
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 67.21% complete, ETA 00:38:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3950.342 ops/s
[info] # Warmup Iteration   2: 8196.955 ops/s
[info] # Warmup Iteration   3: 9083.571 ops/s
[info] # Warmup Iteration   4: 9027.407 ops/s
[info] # Warmup Iteration   5: 9040.925 ops/s
[info] Iteration   1: 8996.666 ops/s
[info]                  ·gc.alloc.rate:            1550.325 MB/sec
[info]                  ·gc.alloc.rate.norm:       271240.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.653 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 235606.253 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 9103.236 ops/s
[info]                  ·gc.alloc.rate:                   1586.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              274413.799 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2026.129 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        350369.134 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.319 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1265.701 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 9362.123 ops/s
[info]                  ·gc.alloc.rate:                   1613.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              271253.726 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1362.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        228973.617 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 111.968 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9336.377 ops/s
[info]                  ·gc.alloc.rate:                                  1609.434 MB/sec
[info]                  ·gc.alloc.rate.norm:                             271264.044 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.789 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       229723.364 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 9318.673 ops/s
[info]                  ·gc.alloc.rate:                                  1606.032 MB/sec
[info]                  ·gc.alloc.rate.norm:                             271277.742 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.944 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       345250.482 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   9223.415 ±(99.9%) 629.590 ops/s [Average]
[info]   (min, avg, max) = (8996.666, 9223.415, 9362.123), stdev = 163.503
[info]   CI (99.9%): [8593.825, 9853.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1593.293 ±(99.9%) 100.596 MB/sec [Average]
[info]   (min, avg, max) = (1550.325, 1593.293, 1613.784), stdev = 26.125
[info]   CI (99.9%): [1492.697, 1693.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   271889.872 ±(99.9%) 5433.204 B/op [Average]
[info]   (min, avg, max) = (271240.049, 271889.872, 274413.799), stdev = 1410.986
[info]   CI (99.9%): [266456.668, 277323.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.052), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.747 ±(99.9%) 15.399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.747, 8.789), stdev = 3.999
[info]   CI (99.9%): [≈ 0, 18.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1628.393 ±(99.9%) 1429.880 MB/sec [Average]
[info]   (min, avg, max) = (1346.653, 1628.393, 2043.970), stdev = 371.335
[info]   CI (99.9%): [198.513, 3058.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   277984.570 ±(99.9%) 245743.553 B/op [Average]
[info]   (min, avg, max) = (228973.617, 277984.570, 350369.134), stdev = 63818.820
[info]   CI (99.9%): [32241.017, 523728.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.597 ±(99.9%) 12.368 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.597, 7.319), stdev = 3.212
[info]   CI (99.9%): [≈ 0, 13.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   275.534 ±(99.9%) 2139.571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 275.534, 1265.701), stdev = 555.640
[info]   CI (99.9%): [≈ 0, 2415.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 19.000), stdev = 7.893
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 67.44% complete, ETA 00:37:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.824 ops/s
[info] # Warmup Iteration   2: 47104.892 ops/s
[info] # Warmup Iteration   3: 50809.049 ops/s
[info] # Warmup Iteration   4: 50047.082 ops/s
[info] # Warmup Iteration   5: 52249.989 ops/s
[info] Iteration   1: 52215.314 ops/s
[info]                  ·gc.alloc.rate:            490.582 MB/sec
[info]                  ·gc.alloc.rate.norm:       14752.590 B/op
[info]                  ·gc.churn.G1_Old_Gen:      668.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20096.227 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 53070.867 ops/s
[info]                  ·gc.alloc.rate:      496.075 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 52272.465 ops/s
[info]                  ·gc.alloc.rate:                   488.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20176.494 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.056 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 51680.937 ops/s
[info]                  ·gc.alloc.rate:            483.211 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.947 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20427.859 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 52999.772 ops/s
[info]                  ·gc.alloc.rate:      495.420 MB/sec
[info]                  ·gc.alloc.rate.norm: 14713.117 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   52447.871 ±(99.9%) 2250.039 ops/s [Average]
[info]   (min, avg, max) = (51680.937, 52447.871, 53070.867), stdev = 584.328
[info]   CI (99.9%): [50197.832, 54697.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   490.788 ±(99.9%) 20.324 MB/sec [Average]
[info]   (min, avg, max) = (483.211, 490.788, 496.075), stdev = 5.278
[info]   CI (99.9%): [470.464, 511.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   14720.347 ±(99.9%) 69.432 B/op [Average]
[info]   (min, avg, max) = (14712.008, 14720.347, 14752.590), stdev = 18.031
[info]   CI (99.9%): [14650.915, 14789.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   401.875 ±(99.9%) 1412.652 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.875, 670.947), stdev = 366.861
[info]   CI (99.9%): [≈ 0, 1814.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   12140.116 ±(99.9%) 42676.818 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12140.116, 20427.859), stdev = 11083.034
[info]   CI (99.9%): [≈ 0, 54816.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   4.011 ±(99.9%) 34.538 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.011, 20.056), stdev = 8.969
[info]   CI (99.9%): [≈ 0, 38.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.000, 12.000), stdev = 6.403
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 67.67% complete, ETA 00:37:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_bbe3575e/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 12266.189 ops/s
[info] # Warmup Iteration   2: 33853.391 ops/s
[info] # Warmup Iteration   3: 34310.777 ops/s
[info] # Warmup Iteration   4: 35678.354 ops/s
[info] # Warmup Iteration   5: 35530.499 ops/s
[info] Iteration   1: 35655.703 ops/s
[info]                  ·gc.alloc.rate:            515.264 MB/sec
[info]                  ·gc.alloc.rate.norm:       22743.610 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29697.206 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 35529.856 ops/s
[info]                  ·gc.alloc.rate:            511.514 MB/sec
[info]                  ·gc.alloc.rate.norm:       22659.947 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.100 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29773.834 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 34846.714 ops/s
[info]                  ·gc.alloc.rate:      500.280 MB/sec
[info]                  ·gc.alloc.rate.norm: 22599.901 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 34538.347 ops/s
[info]                  ·gc.alloc.rate:                   495.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              22599.848 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        30627.987 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 30.355 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 34560.173 ops/s
[info]                  ·gc.alloc.rate:            496.197 MB/sec
[info]                  ·gc.alloc.rate.norm:       22601.350 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30638.829 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   35026.159 ±(99.9%) 2053.282 ops/s [Average]
[info]   (min, avg, max) = (34538.347, 35026.159, 35655.703), stdev = 533.231
[info]   CI (99.9%): [32972.877, 37079.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   503.830 ±(99.9%) 34.638 MB/sec [Average]
[info]   (min, avg, max) = (495.892, 503.830, 515.264), stdev = 8.995
[info]   CI (99.9%): [469.192, 538.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22640.931 ±(99.9%) 242.335 B/op [Average]
[info]   (min, avg, max) = (22599.848, 22640.931, 22743.610), stdev = 62.934
[info]   CI (99.9%): [22398.596, 22883.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.920 ±(99.9%) 1157.915 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.920, 672.800), stdev = 300.707
[info]   CI (99.9%): [≈ 0, 1695.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   24147.571 ±(99.9%) 52008.313 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24147.571, 30638.829), stdev = 13506.394
[info]   CI (99.9%): [≈ 0, 76155.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   6.071 ±(99.9%) 52.273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.071, 30.355), stdev = 13.575
[info]   CI (99.9%): [≈ 0, 58.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 8.000, 10.000), stdev = 4.472
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 67.90% complete, ETA 00:37:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62603.960 ops/s
[info] # Warmup Iteration   2: 78645.039 ops/s
[info] # Warmup Iteration   3: 81881.041 ops/s
[info] # Warmup Iteration   4: 81478.886 ops/s
[info] # Warmup Iteration   5: 81714.362 ops/s
[info] Iteration   1: 81860.485 ops/s
[info]                  ·gc.alloc.rate:                   615.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              11836.305 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.535 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12948.071 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.807 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 82293.859 ops/s
[info]                  ·gc.alloc.rate:            619.946 MB/sec
[info]                  ·gc.alloc.rate.norm:       11857.908 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12892.537 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 82226.179 ops/s
[info]                  ·gc.alloc.rate:            619.212 MB/sec
[info]                  ·gc.alloc.rate.norm:       11853.581 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12903.040 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 81127.211 ops/s
[info]                  ·gc.alloc.rate:            613.332 MB/sec
[info]                  ·gc.alloc.rate.norm:       11894.756 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13077.640 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 82094.445 ops/s
[info]                  ·gc.alloc.rate:            617.094 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12923.783 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   81920.436 ±(99.9%) 1822.461 ops/s [Average]
[info]   (min, avg, max) = (81127.211, 81920.436, 82293.859), stdev = 473.287
[info]   CI (99.9%): [80097.975, 83742.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   617.057 ±(99.9%) 10.316 MB/sec [Average]
[info]   (min, avg, max) = (613.332, 617.057, 619.946), stdev = 2.679
[info]   CI (99.9%): [606.742, 627.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11854.911 ±(99.9%) 95.673 B/op [Average]
[info]   (min, avg, max) = (11832.005, 11854.911, 11894.756), stdev = 24.846
[info]   CI (99.9%): [11759.239, 11950.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   673.993 ±(99.9%) 1.099 MB/sec [Average]
[info]   (min, avg, max) = (673.535, 673.993, 674.325), stdev = 0.285
[info]   CI (99.9%): [672.894, 675.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   12949.014 ±(99.9%) 288.704 B/op [Average]
[info]   (min, avg, max) = (12892.537, 12949.014, 13077.640), stdev = 74.976
[info]   CI (99.9%): [12660.310, 13237.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.561 ±(99.9%) 22.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.561, 12.807), stdev = 5.728
[info]   CI (99.9%): [≈ 0, 24.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 68.13% complete, ETA 00:37:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64216.432 ops/s
[info] # Warmup Iteration   2: 91614.124 ops/s
[info] # Warmup Iteration   3: 93865.618 ops/s
[info] # Warmup Iteration   4: 93030.221 ops/s
[info] # Warmup Iteration   5: 88955.522 ops/s
[info] Iteration   1: 89746.923 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 93742.398 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.861 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 93679.753 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 91167.872 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 91176.267 ops/s
[info]                  ·gc.alloc.rate:      0.288 MB/sec
[info]                  ·gc.alloc.rate.norm: 4.974 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   91902.643 ±(99.9%) 6740.678 ops/s [Average]
[info]   (min, avg, max) = (89746.923, 91902.643, 93742.398), stdev = 1750.533
[info]   CI (99.9%): [85161.965, 98643.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.092 ±(99.9%) 0.509 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.092, 0.288), stdev = 0.132
[info]   CI (99.9%): [≈ 0, 0.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.570 ±(99.9%) 8.740 B/op [Average]
[info]   (min, avg, max) = (0.004, 1.570, 4.974), stdev = 2.270
[info]   CI (99.9%): [≈ 0, 10.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 68.36% complete, ETA 00:36:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 528.558 ops/s
[info] # Warmup Iteration   2: 5656.893 ops/s
[info] # Warmup Iteration   3: 6540.261 ops/s
[info] # Warmup Iteration   4: 6535.567 ops/s
[info] # Warmup Iteration   5: 6548.730 ops/s
[info] Iteration   1: 6601.076 ops/s
[info]                  ·gc.alloc.rate:                   1999.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              476702.804 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2024.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        482687.922 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.326 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1746.568 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 6718.538 ops/s
[info]                  ·gc.alloc.rate:                                  2035.167 MB/sec
[info]                  ·gc.alloc.rate.norm:                             476625.698 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.290 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.464 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       478568.838 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     1.333 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                312.076 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 6750.493 ops/s
[info]                  ·gc.alloc.rate:                                  2044.365 MB/sec
[info]                  ·gc.alloc.rate.norm:                             476592.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.829 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.448 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       476611.336 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 6730.711 ops/s
[info]                  ·gc.alloc.rate:                                  2038.023 MB/sec
[info]                  ·gc.alloc.rate.norm:                             476590.744 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.307 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.166 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       478027.294 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 6637.398 ops/s
[info]                  ·gc.alloc.rate:                                  2010.021 MB/sec
[info]                  ·gc.alloc.rate.norm:                             476655.083 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.775 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       484723.564 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   6687.643 ±(99.9%) 249.386 ops/s [Average]
[info]   (min, avg, max) = (6601.076, 6687.643, 6750.493), stdev = 64.765
[info]   CI (99.9%): [6438.257, 6937.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2025.431 ±(99.9%) 75.006 MB/sec [Average]
[info]   (min, avg, max) = (1999.578, 2025.431, 2044.365), stdev = 19.479
[info]   CI (99.9%): [1950.424, 2100.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   476633.269 ±(99.9%) 181.416 B/op [Average]
[info]   (min, avg, max) = (476590.744, 476633.269, 476702.804), stdev = 47.113
[info]   CI (99.9%): [476451.853, 476814.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.046), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   6.440 ±(99.9%) 15.446 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.440, 10.829), stdev = 4.011
[info]   CI (99.9%): [≈ 0, 21.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   2040.161 ±(99.9%) 33.346 MB/sec [Average]
[info]   (min, avg, max) = (2024.683, 2040.161, 2044.448), stdev = 8.660
[info]   CI (99.9%): [2006.815, 2073.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   480123.791 ±(99.9%) 13182.931 B/op [Average]
[info]   (min, avg, max) = (476611.336, 480123.791, 484723.564), stdev = 3423.565
[info]   CI (99.9%): [466940.860, 493306.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 12.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 7.326), stdev = 3.180
[info]   CI (99.9%): [≈ 0, 13.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   411.729 ±(99.9%) 2920.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 411.729, 1746.568), stdev = 758.335
[info]   CI (99.9%): [≈ 0, 3331.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 10.400, 21.000), stdev = 6.986
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 68.59% complete, ETA 00:36:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3025641.306 ops/s
[info] # Warmup Iteration   2: 7799639.182 ops/s
[info] # Warmup Iteration   3: 8041441.189 ops/s
[info] # Warmup Iteration   4: 8125448.819 ops/s
[info] # Warmup Iteration   5: 8099423.521 ops/s
[info] Iteration   1: 7866238.736 ops/s
[info]                  ·gc.alloc.rate:            4121.684 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.706 B/op
[info]                  ·gc.churn.G1_Old_Gen:      4088.571 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 818.081 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 7882545.565 ops/s
[info]                  ·gc.alloc.rate:            4143.155 MB/sec
[info]                  ·gc.alloc.rate.norm:       827.238 B/op
[info]                  ·gc.churn.G1_Old_Gen:      4088.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 816.391 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 8096109.085 ops/s
[info]                  ·gc.alloc.rate:            4243.280 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.946 B/op
[info]                  ·gc.churn.G1_Old_Gen:      4088.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 794.760 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 8050522.776 ops/s
[info]                  ·gc.alloc.rate:                                  4231.578 MB/sec
[info]                  ·gc.alloc.rate.norm:                             827.264 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4770.196 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       932.563 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 8092667.821 ops/s
[info]                  ·gc.alloc.rate:                                  4237.341 MB/sec
[info]                  ·gc.alloc.rate.norm:                             824.147 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4088.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       795.172 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   7997616.797 ±(99.9%) 439193.135 ops/s [Average]
[info]   (min, avg, max) = (7866238.736, 7997616.797, 8096109.085), stdev = 114057.062
[info]   CI (99.9%): [7558423.662, 8436809.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   4195.407 ±(99.9%) 223.901 MB/sec [Average]
[info]   (min, avg, max) = (4121.684, 4195.407, 4243.280), stdev = 58.146
[info]   CI (99.9%): [3971.507, 4419.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   825.660 ±(99.9%) 5.703 B/op [Average]
[info]   (min, avg, max) = (824.147, 825.660, 827.264), stdev = 1.481
[info]   CI (99.9%): [819.958, 831.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.024 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   4224.795 ±(99.9%) 1174.018 MB/sec [Average]
[info]   (min, avg, max) = (4088.009, 4224.795, 4770.196), stdev = 304.889
[info]   CI (99.9%): [3050.777, 5398.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   831.393 ±(99.9%) 221.969 B/op [Average]
[info]   (min, avg, max) = (794.760, 831.393, 932.563), stdev = 57.645
[info]   CI (99.9%): [609.425, 1053.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.800, 12.000), stdev = 1.483
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 68.82% complete, ETA 00:36:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.665 ops/s
[info] # Warmup Iteration   2: 33090921.737 ops/s
[info] # Warmup Iteration   3: 34641397.949 ops/s
[info] # Warmup Iteration   4: 34501270.623 ops/s
[info] # Warmup Iteration   5: 34246536.973 ops/s
[info] Iteration   1: 34083192.637 ops/s
[info]                  ·gc.alloc.rate:      0.063 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 34828627.715 ops/s
[info]                  ·gc.alloc.rate:      0.073 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 33115602.063 ops/s
[info]                  ·gc.alloc.rate:      0.073 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 34830640.359 ops/s
[info]                  ·gc.alloc.rate:      0.073 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 34747528.041 ops/s
[info]                  ·gc.alloc.rate:      4.275 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.194 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   34321118.163 ±(99.9%) 2861472.693 ops/s [Average]
[info]   (min, avg, max) = (33115602.063, 34321118.163, 34830640.359), stdev = 743115.371
[info]   CI (99.9%): [31459645.470, 37182590.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   0.911 ±(99.9%) 7.241 MB/sec [Average]
[info]   (min, avg, max) = (0.063, 0.911, 4.275), stdev = 1.880
[info]   CI (99.9%): [≈ 0, 8.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   0.041 ±(99.9%) 0.328 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.041, 0.194), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 69.05% complete, ETA 00:36:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 392629.759 ops/s
[info] # Warmup Iteration   2: 8532432.633 ops/s
[info] # Warmup Iteration   3: 8944572.111 ops/s
[info] # Warmup Iteration   4: 8384506.421 ops/s
[info] # Warmup Iteration   5: 9056902.881 ops/s
[info] Iteration   1: 9273741.501 ops/s
[info]                  ·gc.alloc.rate:            3252.172 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.901 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 578.263 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 9262028.878 ops/s
[info]                  ·gc.alloc.rate:                                  3248.485 MB/sec
[info]                  ·gc.alloc.rate.norm:                             552.067 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       578.965 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 9176381.848 ops/s
[info]                  ·gc.alloc.rate:            3219.808 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.300 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 467.476 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 9250140.272 ops/s
[info]                  ·gc.alloc.rate:            3246.042 MB/sec
[info]                  ·gc.alloc.rate.norm:       552.326 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3407.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 579.723 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 9248771.935 ops/s
[info]                  ·gc.alloc.rate:                                  3244.061 MB/sec
[info]                  ·gc.alloc.rate.norm:                             552.043 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.248 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       579.812 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   9242212.887 ±(99.9%) 146960.436 ops/s [Average]
[info]   (min, avg, max) = (9176381.848, 9242212.887, 9273741.501), stdev = 38165.159
[info]   CI (99.9%): [9095252.451, 9389173.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3242.114 ±(99.9%) 49.407 MB/sec [Average]
[info]   (min, avg, max) = (3219.808, 3242.114, 3252.172), stdev = 12.831
[info]   CI (99.9%): [3192.707, 3291.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   552.147 ±(99.9%) 0.591 B/op [Average]
[info]   (min, avg, max) = (552.000, 552.147, 552.326), stdev = 0.153
[info]   CI (99.9%): [551.556, 552.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   3270.652 ±(99.9%) 1173.915 MB/sec [Average]
[info]   (min, avg, max) = (2725.298, 3270.652, 3407.248), stdev = 304.862
[info]   CI (99.9%): [2096.737, 4444.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   556.848 ±(99.9%) 192.395 B/op [Average]
[info]   (min, avg, max) = (467.476, 556.848, 579.812), stdev = 49.964
[info]   CI (99.9%): [364.452, 749.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 69.28% complete, ETA 00:35:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26574505.697 ops/s
[info] # Warmup Iteration   2: 35523517.198 ops/s
[info] # Warmup Iteration   3: 37568765.586 ops/s
[info] # Warmup Iteration   4: 37572070.626 ops/s
[info] # Warmup Iteration   5: 37560505.686 ops/s
[info] Iteration   1: 37475618.460 ops/s
[info]                  ·gc.alloc.rate:      2.119 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.089 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 37078174.891 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 37071042.398 ops/s
[info]                  ·gc.alloc.rate:      0.004 MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 37028300.759 ops/s
[info]                  ·gc.alloc.rate:      1.192 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.051 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 37180296.876 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   37166686.677 ±(99.9%) 698859.813 ops/s [Average]
[info]   (min, avg, max) = (37028300.759, 37166686.677, 37475618.460), stdev = 181491.674
[info]   CI (99.9%): [36467826.864, 37865546.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   0.663 ±(99.9%) 3.710 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.663, 2.119), stdev = 0.964
[info]   CI (99.9%): [≈ 0, 4.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   0.028 ±(99.9%) 0.156 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.028, 0.089), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 69.52% complete, ETA 00:35:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12394846.529 ops/s
[info] # Warmup Iteration   2: 23146448.578 ops/s
[info] # Warmup Iteration   3: 23887923.914 ops/s
[info] # Warmup Iteration   4: 23527329.247 ops/s
[info] # Warmup Iteration   5: 24822861.717 ops/s
[info] Iteration   1: 24488168.225 ops/s
[info]                  ·gc.alloc.rate:                   873.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.146 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.966 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        86.696 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 24935308.392 ops/s
[info]                  ·gc.alloc.rate:                   887.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.151 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        42.550 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 24503983.657 ops/s
[info]                  ·gc.alloc.rate:            877.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.348 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 43.341 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 23807675.445 ops/s
[info]                  ·gc.alloc.rate:                   853.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.376 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        89.177 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 24902380.007 ops/s
[info]                  ·gc.alloc.rate:            886.093 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.819 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 42.650 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   24527503.145 ±(99.9%) 1750974.320 ops/s [Average]
[info]   (min, avg, max) = (23807675.445, 24527503.145, 24935308.392), stdev = 454722.470
[info]   CI (99.9%): [22776528.825, 26278477.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   875.511 ±(99.9%) 53.496 MB/sec [Average]
[info]   (min, avg, max) = (853.009, 875.511, 887.650), stdev = 13.893
[info]   CI (99.9%): [822.015, 929.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   56.180 ±(99.9%) 0.676 B/op [Average]
[info]   (min, avg, max) = (56.003, 56.180, 56.376), stdev = 0.176
[info]   CI (99.9%): [55.503, 56.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen":
[info]   944.387 ±(99.9%) 1422.751 MB/sec [Average]
[info]   (min, avg, max) = (674.151, 944.387, 1349.307), stdev = 369.484
[info]   CI (99.9%): [≈ 0, 2367.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   60.883 ±(99.9%) 95.165 B/op [Average]
[info]   (min, avg, max) = (42.550, 60.883, 89.177), stdev = 24.714
[info]   CI (99.9%): [≈ 0, 156.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.044), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 10.400, 15.000), stdev = 4.219
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 69.75% complete, ETA 00:35:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1740593.311 ops/s
[info] # Warmup Iteration   2: 8090326.060 ops/s
[info] # Warmup Iteration   3: 8465132.738 ops/s
[info] # Warmup Iteration   4: 8509639.926 ops/s
[info] # Warmup Iteration   5: 8758250.654 ops/s
[info] Iteration   1: 8930806.857 ops/s
[info]                  ·gc.alloc.rate:                                  3225.851 MB/sec
[info]                  ·gc.alloc.rate.norm:                             568.319 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3408.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       600.486 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 8878898.270 ops/s
[info]                  ·gc.alloc.rate:            3205.477 MB/sec
[info]                  ·gc.alloc.rate.norm:       568.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3408.526 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 603.980 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 9013878.517 ops/s
[info]                  ·gc.alloc.rate:                                  3253.329 MB/sec
[info]                  ·gc.alloc.rate.norm:                             568.097 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       475.923 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 8818127.536 ops/s
[info]                  ·gc.alloc.rate:                                  3187.345 MB/sec
[info]                  ·gc.alloc.rate.norm:                             568.987 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.575 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       608.122 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 8944029.714 ops/s
[info]                  ·gc.alloc.rate:                                  3227.385 MB/sec
[info]                  ·gc.alloc.rate.norm:                             568.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       599.570 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   8917148.179 ±(99.9%) 282531.260 ops/s [Average]
[info]   (min, avg, max) = (8818127.536, 8917148.179, 9013878.517), stdev = 73372.471
[info]   CI (99.9%): [8634616.919, 9199679.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3219.877 ±(99.9%) 95.818 MB/sec [Average]
[info]   (min, avg, max) = (3187.345, 3219.877, 3253.329), stdev = 24.884
[info]   CI (99.9%): [3124.060, 3315.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   568.281 ±(99.9%) 1.600 B/op [Average]
[info]   (min, avg, max) = (568.000, 568.281, 568.987), stdev = 0.416
[info]   CI (99.9%): [566.680, 569.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3271.154 ±(99.9%) 1174.626 MB/sec [Average]
[info]   (min, avg, max) = (2725.473, 3271.154, 3408.526), stdev = 305.047
[info]   CI (99.9%): [2096.528, 4445.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   577.616 ±(99.9%) 219.285 B/op [Average]
[info]   (min, avg, max) = (475.923, 577.616, 608.122), stdev = 56.948
[info]   CI (99.9%): [358.331, 796.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 10.000), stdev = 1.789
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 69.98% complete, ETA 00:35:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6283751.886 ops/s
[info] # Warmup Iteration   2: 13241382.987 ops/s
[info] # Warmup Iteration   3: 13995703.327 ops/s
[info] # Warmup Iteration   4: 13536651.512 ops/s
[info] # Warmup Iteration   5: 13997962.069 ops/s
[info] Iteration   1: 13930873.928 ops/s
[info]                  ·gc.alloc.rate:            1417.374 MB/sec
[info]                  ·gc.alloc.rate.norm:       160.139 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.252 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 152.329 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 14071673.585 ops/s
[info]                  ·gc.alloc.rate:                   1430.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        150.805 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 14091115.156 ops/s
[info]                  ·gc.alloc.rate:                   1436.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              160.396 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.834 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        151.415 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.446 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 14237754.067 ops/s
[info]                  ·gc.alloc.rate:                                  1447.321 MB/sec
[info]                  ·gc.alloc.rate.norm:                             160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       150.665 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 14226045.729 ops/s
[info]                  ·gc.alloc.rate:                                  1446.941 MB/sec
[info]                  ·gc.alloc.rate.norm:                             160.044 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       150.789 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   14111492.493 ±(99.9%) 485884.577 ops/s [Average]
[info]   (min, avg, max) = (13930873.928, 14111492.493, 14237754.067), stdev = 126182.682
[info]   CI (99.9%): [13625607.916, 14597377.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1435.705 ±(99.9%) 48.063 MB/sec [Average]
[info]   (min, avg, max) = (1417.374, 1435.705, 1447.321), stdev = 12.482
[info]   CI (99.9%): [1387.642, 1483.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   160.116 ±(99.9%) 0.641 B/op [Average]
[info]   (min, avg, max) = (160.000, 160.116, 160.396), stdev = 0.167
[info]   CI (99.9%): [159.474, 160.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.163 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.097), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1355.730 ±(99.9%) 28.386 MB/sec [Average]
[info]   (min, avg, max) = (1348.252, 1355.730, 1363.271), stdev = 7.372
[info]   CI (99.9%): [1327.344, 1384.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   151.201 ±(99.9%) 2.676 B/op [Average]
[info]   (min, avg, max) = (150.665, 151.201, 152.329), stdev = 0.695
[info]   CI (99.9%): [148.524, 153.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 7.781 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 3.998), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 9.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.164 ±(99.9%) 0.869 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.164, 0.446), stdev = 0.226
[info]   CI (99.9%): [≈ 0, 1.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.200, 15.000), stdev = 5.762
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 70.21% complete, ETA 00:34:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.711 ops/s
[info] # Warmup Iteration   2: 40347769.057 ops/s
[info] # Warmup Iteration   3: 41742984.583 ops/s
[info] # Warmup Iteration   4: 41216706.965 ops/s
[info] # Warmup Iteration   5: 42661924.391 ops/s
[info] Iteration   1: 42501571.506 ops/s
[info]                  ·gc.alloc.rate:            864.256 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24.840 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 41723106.982 ops/s
[info]                  ·gc.alloc.rate:            854.833 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.251 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1341.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50.609 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   3: 42457928.825 ops/s
[info]                  ·gc.alloc.rate:            863.229 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24.867 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 41999380.923 ops/s
[info]                  ·gc.alloc.rate:            853.788 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25.138 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 42550086.546 ops/s
[info]                  ·gc.alloc.rate:            865.046 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24.812 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   42246414.956 ±(99.9%) 1410797.935 ops/s [Average]
[info]   (min, avg, max) = (41723106.982, 42246414.956, 42550086.546), stdev = 366379.744
[info]   CI (99.9%): [40835617.021, 43657212.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   860.230 ±(99.9%) 21.005 MB/sec [Average]
[info]   (min, avg, max) = (853.788, 860.230, 865.046), stdev = 5.455
[info]   CI (99.9%): [839.226, 881.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   32.052 ±(99.9%) 0.429 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.052, 32.251), stdev = 0.111
[info]   CI (99.9%): [31.624, 32.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   804.865 ±(99.9%) 1154.951 MB/sec [Average]
[info]   (min, avg, max) = (670.669, 804.865, 1341.409), stdev = 299.937
[info]   CI (99.9%): [≈ 0, 1959.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   30.053 ±(99.9%) 44.251 B/op [Average]
[info]   (min, avg, max) = (24.812, 30.053, 50.609), stdev = 11.492
[info]   CI (99.9%): [≈ 0, 74.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   61.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 12.200, 20.000), stdev = 4.382
[info]   CI (99.9%): [61.000, 61.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 70.44% complete, ETA 00:34:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 464602.470 ops/s
[info] # Warmup Iteration   2: 10582711.372 ops/s
[info] # Warmup Iteration   3: 10830748.557 ops/s
[info] # Warmup Iteration   4: 11170416.464 ops/s
[info] # Warmup Iteration   5: 10932813.033 ops/s
[info] Iteration   1: 11307736.783 ops/s
[info]                  ·gc.alloc.rate:                   2241.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        283.162 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.742 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 10643051.702 ops/s
[info]                  ·gc.alloc.rate:                                  2109.772 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.033 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.214 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       302.315 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 10757126.634 ops/s
[info]                  ·gc.alloc.rate:            2132.269 MB/sec
[info]                  ·gc.alloc.rate.norm:       312.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 299.103 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 10594253.444 ops/s
[info]                  ·gc.alloc.rate:                                  2099.940 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       303.705 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 10462483.966 ops/s
[info]                  ·gc.alloc.rate:            2085.604 MB/sec
[info]                  ·gc.alloc.rate.norm:       313.738 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 307.533 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   10752930.506 ±(99.9%) 1261693.563 ops/s [Average]
[info]   (min, avg, max) = (10462483.966, 10752930.506, 11307736.783), stdev = 327657.812
[info]   CI (99.9%): [9491236.943, 12014624.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2133.869 ±(99.9%) 241.280 MB/sec [Average]
[info]   (min, avg, max) = (2085.604, 2133.869, 2241.762), stdev = 62.660
[info]   CI (99.9%): [1892.589, 2375.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312.369 ±(99.9%) 2.948 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.369, 313.738), stdev = 0.766
[info]   CI (99.9%): [309.421, 315.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.043 ±(99.9%) 0.368 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.214), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2042.146 ±(99.9%) 17.388 MB/sec [Average]
[info]   (min, avg, max) = (2034.071, 2042.146, 2044.359), stdev = 4.516
[info]   CI (99.9%): [2024.758, 2059.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   299.163 ±(99.9%) 36.361 B/op [Average]
[info]   (min, avg, max) = (283.162, 299.163, 307.533), stdev = 9.443
[info]   CI (99.9%): [262.802, 335.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.328), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.148 ±(99.9%) 1.277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.148, 0.742), stdev = 0.332
[info]   CI (99.9%): [≈ 0, 1.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 13.000), stdev = 4.669
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 70.67% complete, ETA 00:34:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19293496.430 ops/s
[info] # Warmup Iteration   2: 37399849.876 ops/s
[info] # Warmup Iteration   3: 39786474.119 ops/s
[info] # Warmup Iteration   4: 39996709.789 ops/s
[info] # Warmup Iteration   5: 41662541.473 ops/s
[info] Iteration   1: 40836592.690 ops/s
[info]                  ·gc.alloc.rate:            832.882 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.099 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.155 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25.982 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 41263013.361 ops/s
[info]                  ·gc.alloc.rate:            839.902 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.897 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 51.423 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 41615469.534 ops/s
[info]                  ·gc.alloc.rate:            846.129 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25.495 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 41622091.842 ops/s
[info]                  ·gc.alloc.rate:            846.273 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.129 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25.491 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 39460311.893 ops/s
[info]                  ·gc.alloc.rate:            802.273 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26.888 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   40959495.864 ±(99.9%) 3457073.895 ops/s [Average]
[info]   (min, avg, max) = (39460311.893, 40959495.864, 41622091.842), stdev = 897791.112
[info]   CI (99.9%): [37502421.969, 44416569.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   833.492 ±(99.9%) 70.456 MB/sec [Average]
[info]   (min, avg, max) = (802.273, 833.492, 846.273), stdev = 18.297
[info]   CI (99.9%): [763.036, 903.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.030 ±(99.9%) 0.165 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.030, 32.099), stdev = 0.043
[info]   CI (99.9%): [31.865, 32.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.859 ±(99.9%) 1160.320 MB/sec [Average]
[info]   (min, avg, max) = (674.003, 808.859, 1347.897), stdev = 301.331
[info]   CI (99.9%): [≈ 0, 1969.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   31.056 ±(99.9%) 43.897 B/op [Average]
[info]   (min, avg, max) = (25.491, 31.056, 51.423), stdev = 11.400
[info]   CI (99.9%): [≈ 0, 74.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.200, 15.000), stdev = 3.271
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 70.90% complete, ETA 00:33:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28274786.579 ops/s
[info] # Warmup Iteration   2: 44355649.995 ops/s
[info] # Warmup Iteration   3: 45980390.489 ops/s
[info] # Warmup Iteration   4: 45960226.281 ops/s
[info] # Warmup Iteration   5: 46118158.474 ops/s
[info] Iteration   1: 46017198.142 ops/s
[info]                  ·gc.alloc.rate:      0.034 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 47024070.099 ops/s
[info]                  ·gc.alloc.rate:      1.914 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.064 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 44650738.368 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 46966704.960 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 46732483.896 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   46278239.093 ±(99.9%) 3828191.050 ops/s [Average]
[info]   (min, avg, max) = (44650738.368, 46278239.093, 47024070.099), stdev = 994169.059
[info]   CI (99.9%): [42450048.043, 50106430.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.390 ±(99.9%) 3.281 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.390, 1.914), stdev = 0.852
[info]   CI (99.9%): [≈ 0, 3.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.013 ±(99.9%) 0.110 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.013, 0.064), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 71.13% complete, ETA 00:33:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14469857.933 ops/s
[info] # Warmup Iteration   2: 21704011.813 ops/s
[info] # Warmup Iteration   3: 22737445.878 ops/s
[info] # Warmup Iteration   4: 22797699.744 ops/s
[info] # Warmup Iteration   5: 22856961.019 ops/s
[info] Iteration   1: 23021961.248 ops/s
[info]                  ·gc.alloc.rate:            936.081 MB/sec
[info]                  ·gc.alloc.rate.norm:       64.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46.131 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 22982439.298 ops/s
[info]                  ·gc.alloc.rate:            934.644 MB/sec
[info]                  ·gc.alloc.rate.norm:       64.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46.211 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 23085953.886 ops/s
[info]                  ·gc.alloc.rate:                   938.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              64.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        45.958 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 22661671.417 ops/s
[info]                  ·gc.alloc.rate:            923.003 MB/sec
[info]                  ·gc.alloc.rate.norm:       64.111 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 93.683 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   5: 22964613.981 ops/s
[info]                  ·gc.alloc.rate:                   933.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              64.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        46.202 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   22943327.966 ±(99.9%) 632252.247 ops/s [Average]
[info]   (min, avg, max) = (22661671.417, 22943327.966, 23085953.886), stdev = 164193.901
[info]   CI (99.9%): [22311075.719, 23575580.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   933.284 ±(99.9%) 23.259 MB/sec [Average]
[info]   (min, avg, max) = (923.003, 933.284, 938.776), stdev = 6.040
[info]   CI (99.9%): [910.025, 956.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   64.028 ±(99.9%) 0.181 B/op [Average]
[info]   (min, avg, max) = (64.000, 64.028, 64.111), stdev = 0.047
[info]   CI (99.9%): [63.848, 64.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen":
[info]   809.269 ±(99.9%) 1161.290 MB/sec [Average]
[info]   (min, avg, max) = (674.077, 809.269, 1348.758), stdev = 301.583
[info]   CI (99.9%): [≈ 0, 1970.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   55.637 ±(99.9%) 81.899 B/op [Average]
[info]   (min, avg, max) = (45.958, 55.637, 93.683), stdev = 21.269
[info]   CI (99.9%): [≈ 0, 137.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.046), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.600, 14.000), stdev = 3.050
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 71.36% complete, ETA 00:33:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 596216.989 ops/s
[info] # Warmup Iteration   2: 2176682.671 ops/s
[info] # Warmup Iteration   3: 2237853.208 ops/s
[info] # Warmup Iteration   4: 2246647.098 ops/s
[info] # Warmup Iteration   5: 2292108.644 ops/s
[info] Iteration   1: 2269345.136 ops/s
[info]                  ·gc.alloc.rate:            1661.619 MB/sec
[info]                  ·gc.alloc.rate.norm:       1152.139 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2020.893 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1401.253 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  26.000 ms
[info] Iteration   2: 2287710.057 ops/s
[info]                  ·gc.alloc.rate:                   1676.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              1153.588 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.501 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        928.498 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.750 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 2261080.936 ops/s
[info]                  ·gc.alloc.rate:                                  1656.105 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1152.913 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2039.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1419.800 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.782 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 2331815.521 ops/s
[info]                  ·gc.alloc.rate:            1707.106 MB/sec
[info]                  ·gc.alloc.rate.norm:       1152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.172 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 919.904 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 2308098.107 ops/s
[info]                  ·gc.alloc.rate:            1692.433 MB/sec
[info]                  ·gc.alloc.rate.norm:       1154.233 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1394.020 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2291609.952 ±(99.9%) 111124.592 ops/s [Average]
[info]   (min, avg, max) = (2261080.936, 2291609.952, 2331815.521), stdev = 28858.704
[info]   CI (99.9%): [2180485.359, 2402734.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1678.783 ±(99.9%) 81.729 MB/sec [Average]
[info]   (min, avg, max) = (1656.105, 1678.783, 1707.106), stdev = 21.225
[info]   CI (99.9%): [1597.055, 1760.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1152.975 ±(99.9%) 3.660 B/op [Average]
[info]   (min, avg, max) = (1152.000, 1152.975, 1154.233), stdev = 0.950
[info]   CI (99.9%): [1149.315, 1156.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.047 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1763.414 ±(99.9%) 1431.445 MB/sec [Average]
[info]   (min, avg, max) = (1349.501, 1763.414, 2044.028), stdev = 371.742
[info]   CI (99.9%): [331.969, 3194.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1212.695 ±(99.9%) 1014.811 B/op [Average]
[info]   (min, avg, max) = (919.904, 1212.695, 1419.800), stdev = 263.543
[info]   CI (99.9%): [197.884, 2227.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.429 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 3.997), stdev = 2.189
[info]   CI (99.9%): [≈ 0, 10.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.106 ±(99.9%) 5.834 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.106, 2.782), stdev = 1.515
[info]   CI (99.9%): [≈ 0, 6.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.000, 26.000), stdev = 9.618
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 71.59% complete, ETA 00:33:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 116420.970 ops/s
[info] # Warmup Iteration   2: 153353.883 ops/s
[info] # Warmup Iteration   3: 161271.592 ops/s
[info] # Warmup Iteration   4: 162589.446 ops/s
[info] # Warmup Iteration   5: 166145.894 ops/s
[info] Iteration   1: 165616.011 ops/s
[info]                  ·gc.alloc.rate:            3039.527 MB/sec
[info]                  ·gc.alloc.rate.norm:       28891.079 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.549 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32379.673 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 165217.840 ops/s
[info]                  ·gc.alloc.rate:                                  3033.433 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28894.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25966.758 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 161851.548 ops/s
[info]                  ·gc.alloc.rate:            2971.134 MB/sec
[info]                  ·gc.alloc.rate.norm:       28887.245 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3407.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33132.768 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 162878.497 ops/s
[info]                  ·gc.alloc.rate:                                  2989.396 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28885.091 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.906 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26339.112 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 163886.294 ops/s
[info]                  ·gc.alloc.rate:                                  3010.372 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28903.070 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.076 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3408.194 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       32722.619 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   163890.038 ±(99.9%) 6064.217 ops/s [Average]
[info]   (min, avg, max) = (161851.548, 163890.038, 165616.011), stdev = 1574.858
[info]   CI (99.9%): [157825.821, 169954.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3008.773 ±(99.9%) 111.413 MB/sec [Average]
[info]   (min, avg, max) = (2971.134, 3008.773, 3039.527), stdev = 28.934
[info]   CI (99.9%): [2897.359, 3120.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28892.100 ±(99.9%) 27.075 B/op [Average]
[info]   (min, avg, max) = (28885.091, 28892.100, 28903.070), stdev = 7.031
[info]   CI (99.9%): [28865.025, 28919.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.122 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.076), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   3134.913 ±(99.9%) 1437.349 MB/sec [Average]
[info]   (min, avg, max) = (2725.906, 3134.913, 3408.194), stdev = 373.275
[info]   CI (99.9%): [1697.563, 4572.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   30108.186 ±(99.9%) 13950.331 B/op [Average]
[info]   (min, avg, max) = (25966.758, 30108.186, 33132.768), stdev = 3622.857
[info]   CI (99.9%): [16157.855, 44058.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 71.82% complete, ETA 00:32:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1983.821 ops/s
[info] # Warmup Iteration   2: 20674.575 ops/s
[info] # Warmup Iteration   3: 25472.448 ops/s
[info] # Warmup Iteration   4: 25471.824 ops/s
[info] # Warmup Iteration   5: 25528.109 ops/s
[info] Iteration   1: 25413.019 ops/s
[info]                  ·gc.alloc.rate:                   1855.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              114894.732 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.528 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        83331.636 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 165.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 25962.353 ops/s
[info]                  ·gc.alloc.rate:                   1862.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              112936.571 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2032.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        123202.733 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 363.430 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 26109.209 ops/s
[info]                  ·gc.alloc.rate:                                  1874.369 MB/sec
[info]                  ·gc.alloc.rate.norm:                             112951.561 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.963 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.889 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       123227.254 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 26115.908 ops/s
[info]                  ·gc.alloc.rate:            1874.298 MB/sec
[info]                  ·gc.alloc.rate.norm:       112951.900 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 123198.949 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 26247.363 ops/s
[info]                  ·gc.alloc.rate:                                  1883.155 MB/sec
[info]                  ·gc.alloc.rate.norm:                             112928.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.323 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81722.783 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   25969.570 ±(99.9%) 1259.408 ops/s [Average]
[info]   (min, avg, max) = (25413.019, 25969.570, 26247.363), stdev = 327.064
[info]   CI (99.9%): [24710.162, 27228.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1869.990 ±(99.9%) 42.192 MB/sec [Average]
[info]   (min, avg, max) = (1855.166, 1869.990, 1883.155), stdev = 10.957
[info]   CI (99.9%): [1827.797, 1912.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   113332.556 ±(99.9%) 3362.930 B/op [Average]
[info]   (min, avg, max) = (112928.016, 113332.556, 114894.732), stdev = 873.342
[info]   CI (99.9%): [109969.627, 116695.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.257 ±(99.9%) 1.613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.257, 0.963), stdev = 0.419
[info]   CI (99.9%): [≈ 0, 1.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1765.969 ±(99.9%) 1447.897 MB/sec [Average]
[info]   (min, avg, max) = (1345.528, 1765.969, 2044.889), stdev = 376.014
[info]   CI (99.9%): [318.071, 3213.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   106936.671 ±(99.9%) 85830.659 B/op [Average]
[info]   (min, avg, max) = (81722.783, 106936.671, 123227.254), stdev = 22289.950
[info]   CI (99.9%): [21106.012, 192767.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 10.195 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 5.995), stdev = 2.648
[info]   CI (99.9%): [≈ 0, 11.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   105.689 ±(99.9%) 619.284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 105.689, 363.430), stdev = 160.826
[info]   CI (99.9%): [≈ 0, 724.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.200, 20.000), stdev = 7.463
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.06% complete, ETA 00:32:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46453.273 ops/s
[info] # Warmup Iteration   2: 113516.585 ops/s
[info] # Warmup Iteration   3: 114468.188 ops/s
[info] # Warmup Iteration   4: 118413.044 ops/s
[info] # Warmup Iteration   5: 117456.355 ops/s
[info] Iteration   1: 118653.427 ops/s
[info]                  ·gc.alloc.rate:            953.874 MB/sec
[info]                  ·gc.alloc.rate.norm:       12653.943 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8924.126 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 117368.590 ops/s
[info]                  ·gc.alloc.rate:                   943.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              12648.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18052.561 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.932 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 118773.119 ops/s
[info]                  ·gc.alloc.rate:            954.525 MB/sec
[info]                  ·gc.alloc.rate.norm:       12648.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8914.811 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 117284.190 ops/s
[info]                  ·gc.alloc.rate:            942.506 MB/sec
[info]                  ·gc.alloc.rate.norm:       12648.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.564 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18056.857 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   5: 118263.661 ops/s
[info]                  ·gc.alloc.rate:                   950.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              12648.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.909 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8953.626 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 44.325 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   118068.597 ±(99.9%) 2710.352 ops/s [Average]
[info]   (min, avg, max) = (117284.190, 118068.597, 118773.119), stdev = 703.870
[info]   CI (99.9%): [115358.245, 120778.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   948.945 ±(99.9%) 22.112 MB/sec [Average]
[info]   (min, avg, max) = (942.506, 948.945, 954.525), stdev = 5.742
[info]   CI (99.9%): [926.834, 971.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12649.209 ±(99.9%) 10.191 B/op [Average]
[info]   (min, avg, max) = (12648.003, 12649.209, 12653.943), stdev = 2.647
[info]   CI (99.9%): [12639.018, 12659.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   942.058 ±(99.9%) 1419.699 MB/sec [Average]
[info]   (min, avg, max) = (672.715, 942.058, 1346.313), stdev = 368.691
[info]   CI (99.9%): [≈ 0, 2361.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   12580.396 ±(99.9%) 19243.061 B/op [Average]
[info]   (min, avg, max) = (8914.811, 12580.396, 18056.857), stdev = 4997.362
[info]   CI (99.9%): [≈ 0, 31823.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   10.651 ±(99.9%) 73.999 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.651, 44.325), stdev = 19.217
[info]   CI (99.9%): [≈ 0, 84.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   65.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.000, 19.000), stdev = 5.477
[info]   CI (99.9%): [65.000, 65.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.29% complete, ETA 00:32:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 276064.372 ops/s
[info] # Warmup Iteration   2: 387033.461 ops/s
[info] # Warmup Iteration   3: 400138.098 ops/s
[info] # Warmup Iteration   4: 407710.782 ops/s
[info] # Warmup Iteration   5: 401205.687 ops/s
[info] Iteration   1: 397883.762 ops/s
[info]                  ·gc.alloc.rate:            1545.455 MB/sec
[info]                  ·gc.alloc.rate.norm:       6114.183 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2022.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8000.072 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  23.000 ms
[info] Iteration   2: 400602.319 ops/s
[info]                  ·gc.alloc.rate:                   1558.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              6123.952 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1351.522 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5310.259 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.320 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 406280.549 ops/s
[info]                  ·gc.alloc.rate:                   1577.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              6112.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1360.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5269.576 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.322 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 406090.703 ops/s
[info]                  ·gc.alloc.rate:            1577.108 MB/sec
[info]                  ·gc.alloc.rate.norm:       6112.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.521 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7923.436 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 408299.732 ops/s
[info]                  ·gc.alloc.rate:            1586.051 MB/sec
[info]                  ·gc.alloc.rate.norm:       6114.619 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5253.510 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   403831.413 ±(99.9%) 16880.379 ops/s [Average]
[info]   (min, avg, max) = (397883.762, 403831.413, 408299.732), stdev = 4383.781
[info]   CI (99.9%): [386951.034, 420711.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1568.938 ±(99.9%) 63.572 MB/sec [Average]
[info]   (min, avg, max) = (1545.455, 1568.938, 1586.051), stdev = 16.509
[info]   CI (99.9%): [1505.366, 1632.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6115.351 ±(99.9%) 19.091 B/op [Average]
[info]   (min, avg, max) = (6112.001, 6115.351, 6123.952), stdev = 4.958
[info]   CI (99.9%): [6096.260, 6134.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1628.183 ±(99.9%) 1424.570 MB/sec [Average]
[info]   (min, avg, max) = (1351.522, 1628.183, 2044.521), stdev = 369.956
[info]   CI (99.9%): [203.612, 3052.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   6351.371 ±(99.9%) 5662.246 B/op [Average]
[info]   (min, avg, max) = (5253.510, 6351.371, 8000.072), stdev = 1470.467
[info]   CI (99.9%): [689.125, 12013.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 8.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 4.663), stdev = 2.127
[info]   CI (99.9%): [≈ 0, 9.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.729 ±(99.9%) 32.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.729, 18.320), stdev = 8.338
[info]   CI (99.9%): [≈ 0, 37.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 10.200, 23.000), stdev = 7.981
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 72.52% complete, ETA 00:32:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 305160.240 ops/s
[info] # Warmup Iteration   2: 434982.108 ops/s
[info] # Warmup Iteration   3: 449369.493 ops/s
[info] # Warmup Iteration   4: 451984.051 ops/s
[info] # Warmup Iteration   5: 447644.226 ops/s
[info] Iteration   1: 444176.119 ops/s
[info]                  ·gc.alloc.rate:            1240.925 MB/sec
[info]                  ·gc.alloc.rate.norm:       4396.226 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.556 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4777.531 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 445994.592 ops/s
[info]                  ·gc.alloc.rate:            1244.905 MB/sec
[info]                  ·gc.alloc.rate.norm:       4392.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4758.048 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 447961.495 ops/s
[info]                  ·gc.alloc.rate:                   1250.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              4392.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.467 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4737.073 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.362 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 446312.657 ops/s
[info]                  ·gc.alloc.rate:                   1247.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              4400.873 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4778.107 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.444 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 438837.946 ops/s
[info]                  ·gc.alloc.rate:                                  1228.596 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4405.933 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.133 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.476 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4887.987 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   444656.562 ±(99.9%) 13551.679 ops/s [Average]
[info]   (min, avg, max) = (438837.946, 444656.562, 447961.495), stdev = 3519.328
[info]   CI (99.9%): [431104.883, 458208.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1242.492 ±(99.9%) 32.760 MB/sec [Average]
[info]   (min, avg, max) = (1228.596, 1242.492, 1250.238), stdev = 8.508
[info]   CI (99.9%): [1209.732, 1275.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4397.407 ±(99.9%) 23.148 B/op [Average]
[info]   (min, avg, max) = (4392.001, 4397.407, 4405.933), stdev = 6.012
[info]   CI (99.9%): [4374.258, 4420.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.228 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.133), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.095 ±(99.9%) 0.819 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.095, 0.476), stdev = 0.213
[info]   CI (99.9%): [≈ 0, 0.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1352.691 ±(99.9%) 24.511 MB/sec [Average]
[info]   (min, avg, max) = (1348.467, 1352.691, 1363.017), stdev = 6.365
[info]   CI (99.9%): [1328.181, 1377.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   4787.749 ±(99.9%) 225.314 B/op [Average]
[info]   (min, avg, max) = (4737.073, 4787.749, 4887.987), stdev = 58.513
[info]   CI (99.9%): [4562.435, 5013.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 8.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 4.662), stdev = 2.127
[info]   CI (99.9%): [≈ 0, 9.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   5.161 ±(99.9%) 28.871 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.161, 16.444), stdev = 7.498
[info]   CI (99.9%): [≈ 0, 34.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 12.600, 16.000), stdev = 4.278
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 72.75% complete, ETA 00:31:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12098.225 ops/s
[info] # Warmup Iteration   2: 53321.302 ops/s
[info] # Warmup Iteration   3: 54064.051 ops/s
[info] # Warmup Iteration   4: 53830.765 ops/s
[info] # Warmup Iteration   5: 54858.466 ops/s
[info] Iteration   1: 54710.059 ops/s
[info]                  ·gc.alloc.rate:            1180.435 MB/sec
[info]                  ·gc.alloc.rate.norm:       33964.909 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.243 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38706.983 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 54755.070 ops/s
[info]                  ·gc.alloc.rate:            1181.321 MB/sec
[info]                  ·gc.alloc.rate.norm:       33960.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38677.297 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 55072.070 ops/s
[info]                  ·gc.alloc.rate:            1194.959 MB/sec
[info]                  ·gc.alloc.rate.norm:       34152.226 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19227.003 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 54760.438 ops/s
[info]                  ·gc.alloc.rate:                   1191.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              34223.952 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        38750.348 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 134.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 53513.098 ops/s
[info]                  ·gc.alloc.rate:                   1174.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              34537.359 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        39927.467 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 117.549 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   54562.147 ±(99.9%) 2325.533 ops/s [Average]
[info]   (min, avg, max) = (53513.098, 54562.147, 55072.070), stdev = 603.933
[info]   CI (99.9%): [52236.614, 56887.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1184.406 ±(99.9%) 32.580 MB/sec [Average]
[info]   (min, avg, max) = (1174.185, 1184.406, 1194.959), stdev = 8.461
[info]   CI (99.9%): [1151.827, 1216.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   34167.691 ±(99.9%) 911.863 B/op [Average]
[info]   (min, avg, max) = (33960.007, 34167.691, 34537.359), stdev = 236.808
[info]   CI (99.9%): [33255.827, 35079.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1213.900 ±(99.9%) 1165.048 MB/sec [Average]
[info]   (min, avg, max) = (672.738, 1213.900, 1357.436), stdev = 302.559
[info]   CI (99.9%): [48.851, 2378.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   35057.820 ±(99.9%) 34137.430 B/op [Average]
[info]   (min, avg, max) = (19227.003, 35057.820, 39927.467), stdev = 8865.382
[info]   CI (99.9%): [920.389, 69195.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.664), stdev = 2.384
[info]   CI (99.9%): [≈ 0, 10.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   50.313 ±(99.9%) 266.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.313, 134.018), stdev = 69.140
[info]   CI (99.9%): [≈ 0, 316.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   72.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 14.400, 19.000), stdev = 5.128
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 72.98% complete, ETA 00:31:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126316.550 ops/s
[info] # Warmup Iteration   2: 248368.265 ops/s
[info] # Warmup Iteration   3: 258309.375 ops/s
[info] # Warmup Iteration   4: 256665.398 ops/s
[info] # Warmup Iteration   5: 243461.731 ops/s
[info] Iteration   1: 258402.751 ops/s
[info]                  ·gc.alloc.rate:                   1756.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              10697.080 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2025.256 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12334.040 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 24.344 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 261540.189 ops/s
[info]                  ·gc.alloc.rate:                   1779.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              10705.204 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.816 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8181.102 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.042 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 258212.913 ops/s
[info]                  ·gc.alloc.rate:                                  1754.956 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10696.499 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.115 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.488 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12461.199 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 253365.459 ops/s
[info]                  ·gc.alloc.rate:            1722.458 MB/sec
[info]                  ·gc.alloc.rate.norm:       10698.146 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.131 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8466.369 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 258989.315 ops/s
[info]                  ·gc.alloc.rate:            1760.501 MB/sec
[info]                  ·gc.alloc.rate.norm:       10696.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12422.572 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   258102.125 ±(99.9%) 11414.098 ops/s [Average]
[info]   (min, avg, max) = (253365.459, 258102.125, 261540.189), stdev = 2964.205
[info]   CI (99.9%): [246688.027, 269516.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1754.748 ±(99.9%) 79.018 MB/sec [Average]
[info]   (min, avg, max) = (1722.458, 1754.748, 1779.358), stdev = 20.521
[info]   CI (99.9%): [1675.731, 1833.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   10698.586 ±(99.9%) 14.573 B/op [Average]
[info]   (min, avg, max) = (10696.002, 10698.586, 10705.204), stdev = 3.785
[info]   CI (99.9%): [10684.013, 10713.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.023 ±(99.9%) 0.197 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.115), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1767.475 ±(99.9%) 1427.483 MB/sec [Average]
[info]   (min, avg, max) = (1359.816, 1767.475, 2044.685), stdev = 370.713
[info]   CI (99.9%): [339.992, 3194.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   10773.057 ±(99.9%) 8620.290 B/op [Average]
[info]   (min, avg, max) = (8181.102, 10773.057, 12461.199), stdev = 2238.662
[info]   CI (99.9%): [2152.767, 19393.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 7.781 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 3.997), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 9.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.877 ±(99.9%) 47.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.877, 24.344), stdev = 12.250
[info]   CI (99.9%): [≈ 0, 56.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 21.000), stdev = 7.463
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.21% complete, ETA 00:31:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125573.856 ops/s
[info] # Warmup Iteration   2: 354858.222 ops/s
[info] # Warmup Iteration   3: 367338.534 ops/s
[info] # Warmup Iteration   4: 369807.483 ops/s
[info] # Warmup Iteration   5: 367727.066 ops/s
[info] Iteration   1: 378602.866 ops/s
[info]                  ·gc.alloc.rate:            973.732 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.326 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2796.823 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 371763.591 ops/s
[info]                  ·gc.alloc.rate:            956.639 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.514 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5696.560 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 369897.275 ops/s
[info]                  ·gc.alloc.rate:            951.234 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2862.646 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 368758.438 ops/s
[info]                  ·gc.alloc.rate:            949.410 MB/sec
[info]                  ·gc.alloc.rate.norm:       4051.206 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.891 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5743.020 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   5: 378859.425 ops/s
[info]                  ·gc.alloc.rate:                   974.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              4049.355 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2794.926 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.836 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   373576.319 ±(99.9%) 18588.154 ops/s [Average]
[info]   (min, avg, max) = (368758.438, 373576.319, 378859.425), stdev = 4827.285
[info]   CI (99.9%): [354988.165, 392164.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   961.129 ±(99.9%) 47.022 MB/sec [Average]
[info]   (min, avg, max) = (949.410, 961.129, 974.628), stdev = 12.211
[info]   CI (99.9%): [914.107, 1008.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4049.080 ±(99.9%) 4.964 B/op [Average]
[info]   (min, avg, max) = (4048.001, 4049.080, 4051.206), stdev = 1.289
[info]   CI (99.9%): [4044.116, 4054.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   942.011 ±(99.9%) 1419.994 MB/sec [Average]
[info]   (min, avg, max) = (672.689, 942.011, 1346.062), stdev = 368.768
[info]   CI (99.9%): [≈ 0, 2362.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   3978.795 ±(99.9%) 6121.071 B/op [Average]
[info]   (min, avg, max) = (2794.926, 3978.795, 5743.020), stdev = 1589.623
[info]   CI (99.9%): [≈ 0, 10099.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.767 ±(99.9%) 23.827 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.767, 13.836), stdev = 6.188
[info]   CI (99.9%): [≈ 0, 26.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   65.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.000, 19.000), stdev = 5.050
[info]   CI (99.9%): [65.000, 65.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.44% complete, ETA 00:30:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 780812.490 ops/s
[info] # Warmup Iteration   2: 1099941.022 ops/s
[info] # Warmup Iteration   3: 1122477.592 ops/s
[info] # Warmup Iteration   4: 1100931.770 ops/s
[info] # Warmup Iteration   5: 1131133.495 ops/s
[info] Iteration   1: 1144634.689 ops/s
[info]                  ·gc.alloc.rate:                   2234.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072.480 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2041.932 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2807.306 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.664 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1159123.287 ops/s
[info]                  ·gc.alloc.rate:                                  2268.796 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3080.811 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.215 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2775.851 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1152193.685 ops/s
[info]                  ·gc.alloc.rate:            2249.909 MB/sec
[info]                  ·gc.alloc.rate.norm:       3073.938 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3723.411 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1162936.029 ops/s
[info]                  ·gc.alloc.rate:            2271.412 MB/sec
[info]                  ·gc.alloc.rate.norm:       3074.370 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2766.729 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1151280.629 ops/s
[info]                  ·gc.alloc.rate:            2252.203 MB/sec
[info]                  ·gc.alloc.rate.norm:       3079.302 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2794.833 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1154033.664 ±(99.9%) 27530.207 ops/s [Average]
[info]   (min, avg, max) = (1144634.689, 1154033.664, 1162936.029), stdev = 7149.507
[info]   CI (99.9%): [1126503.457, 1181563.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2255.426 ±(99.9%) 57.765 MB/sec [Average]
[info]   (min, avg, max) = (2234.810, 2255.426, 2271.412), stdev = 15.001
[info]   CI (99.9%): [2197.661, 2313.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3076.180 ±(99.9%) 14.040 B/op [Average]
[info]   (min, avg, max) = (3072.480, 3076.180, 3080.811), stdev = 3.646
[info]   CI (99.9%): [3062.140, 3090.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   2179.937 ±(99.9%) 1173.893 MB/sec [Average]
[info]   (min, avg, max) = (2041.932, 2179.937, 2725.278), stdev = 304.856
[info]   CI (99.9%): [1006.045, 3353.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2973.626 ±(99.9%) 1615.123 B/op [Average]
[info]   (min, avg, max) = (2766.729, 2973.626, 3723.411), stdev = 419.442
[info]   CI (99.9%): [1358.503, 4588.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.589 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.665), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.733 ±(99.9%) 6.309 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.733, 3.664), stdev = 1.638
[info]   CI (99.9%): [≈ 0, 7.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.67% complete, ETA 00:30:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18983.874 ops/s
[info] # Warmup Iteration   2: 72242.819 ops/s
[info] # Warmup Iteration   3: 72930.825 ops/s
[info] # Warmup Iteration   4: 77449.218 ops/s
[info] # Warmup Iteration   5: 76923.837 ops/s
[info] Iteration   1: 77975.034 ops/s
[info]                  ·gc.alloc.rate:                                  2518.089 MB/sec
[info]                  ·gc.alloc.rate.norm:                             50833.030 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.261 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2724.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55004.929 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                13.445 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 78245.769 ops/s
[info]                  ·gc.alloc.rate:            2526.054 MB/sec
[info]                  ·gc.alloc.rate.norm:       50816.992 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54827.153 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 78583.647 ops/s
[info]                  ·gc.alloc.rate:            2537.680 MB/sec
[info]                  ·gc.alloc.rate.norm:       50816.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40943.532 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 78464.850 ops/s
[info]                  ·gc.alloc.rate:                                  2533.286 MB/sec
[info]                  ·gc.alloc.rate.norm:                             50818.843 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.505 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54674.851 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 75896.729 ops/s
[info]                  ·gc.alloc.rate:                                  2462.763 MB/sec
[info]                  ·gc.alloc.rate.norm:                             51063.984 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.153 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56525.221 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   77833.206 ±(99.9%) 4262.925 ops/s [Average]
[info]   (min, avg, max) = (75896.729, 77833.206, 78583.647), stdev = 1107.068
[info]   CI (99.9%): [73570.280, 82096.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2515.574 ±(99.9%) 117.231 MB/sec [Average]
[info]   (min, avg, max) = (2462.763, 2515.574, 2537.680), stdev = 30.444
[info]   CI (99.9%): [2398.344, 2632.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50869.771 ±(99.9%) 418.901 B/op [Average]
[info]   (min, avg, max) = (50816.005, 50869.771, 51063.984), stdev = 108.787
[info]   CI (99.9%): [50450.870, 51288.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.021 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.063 ±(99.9%) 0.432 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.261), stdev = 0.112
[info]   CI (99.9%): [≈ 0, 0.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2589.293 ±(99.9%) 1172.360 MB/sec [Average]
[info]   (min, avg, max) = (2044.662, 2589.293, 2726.153), stdev = 304.458
[info]   CI (99.9%): [1416.933, 3761.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   52395.137 ±(99.9%) 24814.977 B/op [Average]
[info]   (min, avg, max) = (40943.532, 52395.137, 56525.221), stdev = 6444.371
[info]   CI (99.9%): [27580.160, 77210.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.689 ±(99.9%) 23.154 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.689, 13.445), stdev = 6.013
[info]   CI (99.9%): [≈ 0, 25.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 73.90% complete, ETA 00:30:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146141.579 ops/s
[info] # Warmup Iteration   2: 303659.724 ops/s
[info] # Warmup Iteration   3: 332513.708 ops/s
[info] # Warmup Iteration   4: 329954.650 ops/s
[info] # Warmup Iteration   5: 328953.646 ops/s
[info] Iteration   1: 326942.682 ops/s
[info]                  ·gc.alloc.rate:            508.156 MB/sec
[info]                  ·gc.alloc.rate.norm:       2446.521 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3245.323 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 330886.478 ops/s
[info]                  ·gc.alloc.rate:      515.976 MB/sec
[info]                  ·gc.alloc.rate.norm: 2453.690 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 328587.987 ops/s
[info]                  ·gc.alloc.rate:            511.438 MB/sec
[info]                  ·gc.alloc.rate.norm:       2449.796 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3229.009 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 289227.534 ops/s
[info]                  ·gc.alloc.rate:                   455.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              2478.241 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.472 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3664.905 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.625 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 329516.636 ops/s
[info]                  ·gc.alloc.rate:            510.877 MB/sec
[info]                  ·gc.alloc.rate.norm:       2440.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.191 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3220.004 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   321032.263 ±(99.9%) 68684.440 ops/s [Average]
[info]   (min, avg, max) = (289227.534, 321032.263, 330886.478), stdev = 17837.131
[info]   CI (99.9%): [252347.824, 389716.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   500.371 ±(99.9%) 97.389 MB/sec [Average]
[info]   (min, avg, max) = (455.408, 500.371, 515.976), stdev = 25.292
[info]   CI (99.9%): [402.982, 597.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2453.650 ±(99.9%) 56.353 B/op [Average]
[info]   (min, avg, max) = (2440.001, 2453.650, 2478.241), stdev = 14.635
[info]   CI (99.9%): [2397.297, 2510.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   539.170 ±(99.9%) 1160.604 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.170, 674.191), stdev = 301.405
[info]   CI (99.9%): [≈ 0, 1699.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2671.848 ±(99.9%) 5796.694 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2671.848, 3664.905), stdev = 1505.383
[info]   CI (99.9%): [≈ 0, 8468.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.725 ±(99.9%) 6.243 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.725, 3.625), stdev = 1.621
[info]   CI (99.9%): [≈ 0, 6.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.400, 8.000), stdev = 3.578
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.13% complete, ETA 00:30:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 353806.609 ops/s
[info] # Warmup Iteration   2: 729528.162 ops/s
[info] # Warmup Iteration   3: 767452.532 ops/s
[info] # Warmup Iteration   4: 768698.637 ops/s
[info] # Warmup Iteration   5: 764799.047 ops/s
[info] Iteration   1: 766638.555 ops/s
[info]                  ·gc.alloc.rate:            553.481 MB/sec
[info]                  ·gc.alloc.rate.norm:       1136.458 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1381.233 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 768239.996 ops/s
[info]                  ·gc.alloc.rate:            555.945 MB/sec
[info]                  ·gc.alloc.rate.norm:       1138.866 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.850 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1378.350 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 772179.260 ops/s
[info]                  ·gc.alloc.rate:            557.335 MB/sec
[info]                  ·gc.alloc.rate.norm:       1136.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1371.312 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 805773.738 ops/s
[info]                  ·gc.alloc.rate:            582.652 MB/sec
[info]                  ·gc.alloc.rate.norm:       1138.201 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1314.163 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 805489.513 ops/s
[info]                  ·gc.alloc.rate:            581.868 MB/sec
[info]                  ·gc.alloc.rate.norm:       1136.600 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1314.633 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   783664.212 ±(99.9%) 77608.830 ops/s [Average]
[info]   (min, avg, max) = (766638.555, 783664.212, 805773.738), stdev = 20154.767
[info]   CI (99.9%): [706055.382, 861273.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   566.256 ±(99.9%) 56.517 MB/sec [Average]
[info]   (min, avg, max) = (553.481, 566.256, 582.652), stdev = 14.677
[info]   CI (99.9%): [509.740, 622.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1137.236 ±(99.9%) 4.713 B/op [Average]
[info]   (min, avg, max) = (1136.056, 1137.236, 1138.866), stdev = 1.224
[info]   CI (99.9%): [1132.523, 1141.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.806 ±(99.9%) 0.493 MB/sec [Average]
[info]   (min, avg, max) = (672.692, 672.806, 673.010), stdev = 0.128
[info]   CI (99.9%): [672.313, 673.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1351.938 ±(99.9%) 132.690 B/op [Average]
[info]   (min, avg, max) = (1314.163, 1351.938, 1381.233), stdev = 34.459
[info]   CI (99.9%): [1219.248, 1484.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.36% complete, ETA 00:29:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1394865.183 ops/s
[info] # Warmup Iteration   2: 1863420.802 ops/s
[info] # Warmup Iteration   3: 1954482.063 ops/s
[info] # Warmup Iteration   4: 1840563.287 ops/s
[info] # Warmup Iteration   5: 1937524.579 ops/s
[info] Iteration   1: 1956639.543 ops/s
[info]                  ·gc.alloc.rate:            904.954 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 542.257 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1935778.156 ops/s
[info]                  ·gc.alloc.rate:            896.723 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.917 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.552 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1096.193 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 1964495.914 ops/s
[info]                  ·gc.alloc.rate:            908.633 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 540.098 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1964913.751 ops/s
[info]                  ·gc.alloc.rate:            908.915 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.158 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 539.971 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1944436.785 ops/s
[info]                  ·gc.alloc.rate:            899.383 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1091.310 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   1953252.830 ±(99.9%) 49347.648 ops/s [Average]
[info]   (min, avg, max) = (1935778.156, 1953252.830, 1964913.751), stdev = 12815.428
[info]   CI (99.9%): [1903905.182, 2002600.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   903.722 ±(99.9%) 21.127 MB/sec [Average]
[info]   (min, avg, max) = (896.723, 903.722, 908.915), stdev = 5.487
[info]   CI (99.9%): [882.595, 924.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.201 ±(99.9%) 1.548 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.201, 728.917), stdev = 0.402
[info]   CI (99.9%): [726.653, 729.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   943.789 ±(99.9%) 1421.941 MB/sec [Average]
[info]   (min, avg, max) = (674.063, 943.789, 1348.552), stdev = 369.274
[info]   CI (99.9%): [≈ 0, 2365.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   761.966 ±(99.9%) 1166.298 B/op [Average]
[info]   (min, avg, max) = (539.971, 761.966, 1096.193), stdev = 302.884
[info]   CI (99.9%): [≈ 0, 1928.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.800, 15.000), stdev = 3.834
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 74.60% complete, ETA 00:29:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1402846.960 ops/s
[info] # Warmup Iteration   2: 2100847.339 ops/s
[info] # Warmup Iteration   3: 2152342.775 ops/s
[info] # Warmup Iteration   4: 2150443.758 ops/s
[info] # Warmup Iteration   5: 2149595.533 ops/s
[info] Iteration   1: 2153745.797 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2153119.111 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2152118.428 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2153720.367 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2151310.947 ops/s
[info]                  ·gc.alloc.rate:      0.081 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.059 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2152802.930 ±(99.9%) 4095.653 ops/s [Average]
[info]   (min, avg, max) = (2151310.947, 2152802.930, 2153745.797), stdev = 1063.628
[info]   CI (99.9%): [2148707.277, 2156898.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.016 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.016, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.012 ±(99.9%) 0.102 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.012, 0.059), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.83% complete, ETA 00:29:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167910.669 ops/s
[info] # Warmup Iteration   2: 370906.697 ops/s
[info] # Warmup Iteration   3: 407699.873 ops/s
[info] # Warmup Iteration   4: 411049.621 ops/s
[info] # Warmup Iteration   5: 407004.352 ops/s
[info] Iteration   1: 403919.583 ops/s
[info]                  ·gc.alloc.rate:                   585.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              2281.673 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2621.518 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.596 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 396642.548 ops/s
[info]                  ·gc.alloc.rate:            574.237 MB/sec
[info]                  ·gc.alloc.rate.norm:       2278.520 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.491 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2672.349 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 384780.166 ops/s
[info]                  ·gc.alloc.rate:            555.546 MB/sec
[info]                  ·gc.alloc.rate.norm:       2272.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.539 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2754.556 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 406694.283 ops/s
[info]                  ·gc.alloc.rate:            587.030 MB/sec
[info]                  ·gc.alloc.rate.norm:       2272.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2603.569 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 406470.197 ops/s
[info]                  ·gc.alloc.rate:            586.668 MB/sec
[info]                  ·gc.alloc.rate.norm:       2272.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2605.158 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   399701.355 ±(99.9%) 35735.858 ops/s [Average]
[info]   (min, avg, max) = (384780.166, 399701.355, 406694.283), stdev = 9280.489
[info]   CI (99.9%): [363965.498, 435437.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   577.800 ±(99.9%) 52.069 MB/sec [Average]
[info]   (min, avg, max) = (555.546, 577.800, 587.030), stdev = 13.522
[info]   CI (99.9%): [525.732, 629.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2275.239 ±(99.9%) 17.605 B/op [Average]
[info]   (min, avg, max) = (2272.001, 2275.239, 2281.673), stdev = 4.572
[info]   CI (99.9%): [2257.634, 2292.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   673.031 ±(99.9%) 1.703 MB/sec [Average]
[info]   (min, avg, max) = (672.695, 673.031, 673.539), stdev = 0.442
[info]   CI (99.9%): [671.328, 674.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2651.430 ±(99.9%) 246.555 B/op [Average]
[info]   (min, avg, max) = (2603.569, 2651.430, 2754.556), stdev = 64.030
[info]   CI (99.9%): [2404.875, 2897.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.519 ±(99.9%) 4.470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.519, 2.596), stdev = 1.161
[info]   CI (99.9%): [≈ 0, 4.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.06% complete, ETA 00:29:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16296.037 ops/s
[info] # Warmup Iteration   2: 41927.727 ops/s
[info] # Warmup Iteration   3: 43376.842 ops/s
[info] # Warmup Iteration   4: 43513.201 ops/s
[info] # Warmup Iteration   5: 43384.611 ops/s
[info] Iteration   1: 43457.246 ops/s
[info]                  ·gc.alloc.rate:            1356.625 MB/sec
[info]                  ·gc.alloc.rate.norm:       49139.484 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48830.449 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 42780.785 ops/s
[info]                  ·gc.alloc.rate:            1335.313 MB/sec
[info]                  ·gc.alloc.rate.norm:       49128.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.496 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49576.265 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 41274.212 ops/s
[info]                  ·gc.alloc.rate:                   1301.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              49619.987 B/op
[info]                  ·gc.churn.G1_Old_Gen:             734.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27991.830 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 177.807 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 43782.245 ops/s
[info]                  ·gc.alloc.rate:                                  1366.615 MB/sec
[info]                  ·gc.alloc.rate.norm:                             49128.485 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.634 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.474 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48871.769 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                119.725 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 38740.789 ops/s
[info]                  ·gc.alloc.rate:            1209.173 MB/sec
[info]                  ·gc.alloc.rate.norm:       49128.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.818 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55370.528 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   42007.055 ±(99.9%) 7951.968 ops/s [Average]
[info]   (min, avg, max) = (38740.789, 42007.055, 43782.245), stdev = 2065.101
[info]   CI (99.9%): [34055.088, 49959.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1313.772 ±(99.9%) 245.004 MB/sec [Average]
[info]   (min, avg, max) = (1209.173, 1313.772, 1366.615), stdev = 63.627
[info]   CI (99.9%): [1068.769, 1558.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   49228.795 ±(99.9%) 842.282 B/op [Average]
[info]   (min, avg, max) = (49128.010, 49228.795, 49619.987), stdev = 218.738
[info]   CI (99.9%): [48386.514, 50071.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.127 ±(99.9%) 1.091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.127, 0.634), stdev = 0.283
[info]   CI (99.9%): [≈ 0, 1.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1230.377 ±(99.9%) 1068.803 MB/sec [Average]
[info]   (min, avg, max) = (734.002, 1230.377, 1362.818), stdev = 277.565
[info]   CI (99.9%): [161.574, 2299.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   46128.168 ±(99.9%) 40434.833 B/op [Average]
[info]   (min, avg, max) = (27991.830, 46128.168, 55370.528), stdev = 10500.798
[info]   CI (99.9%): [5693.335, 86563.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.662), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   59.506 ±(99.9%) 323.570 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59.506, 177.807), stdev = 84.030
[info]   CI (99.9%): [≈ 0, 383.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   65.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 13.000, 16.000), stdev = 3.742
[info]   CI (99.9%): [65.000, 65.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.29% complete, ETA 00:28:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18953.308 ops/s
[info] # Warmup Iteration   2: 45641.033 ops/s
[info] # Warmup Iteration   3: 56032.917 ops/s
[info] # Warmup Iteration   4: 57594.657 ops/s
[info] # Warmup Iteration   5: 58534.058 ops/s
[info] Iteration   1: 57852.799 ops/s
[info]                  ·gc.alloc.rate:            1037.536 MB/sec
[info]                  ·gc.alloc.rate.norm:       28232.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36607.102 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   2: 58092.426 ops/s
[info]                  ·gc.alloc.rate:            1042.901 MB/sec
[info]                  ·gc.alloc.rate.norm:       28256.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18227.944 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 49462.367 ops/s
[info]                  ·gc.alloc.rate:            888.639 MB/sec
[info]                  ·gc.alloc.rate.norm:       28277.083 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.550 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 42816.323 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   4: 58637.526 ops/s
[info]                  ·gc.alloc.rate:            1051.901 MB/sec
[info]                  ·gc.alloc.rate.norm:       28232.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18058.243 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 57917.794 ops/s
[info]                  ·gc.alloc.rate:                   1039.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              28246.677 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.884 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36655.269 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 108.608 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   56392.582 ±(99.9%) 14965.044 ops/s [Average]
[info]   (min, avg, max) = (49462.367, 56392.582, 58637.526), stdev = 3886.374
[info]   CI (99.9%): [41427.539, 71357.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1012.086 ±(99.9%) 266.578 MB/sec [Average]
[info]   (min, avg, max) = (888.639, 1012.086, 1051.901), stdev = 69.229
[info]   CI (99.9%): [745.509, 1278.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28248.777 ±(99.9%) 72.600 B/op [Average]
[info]   (min, avg, max) = (28232.007, 28248.777, 28277.083), stdev = 18.854
[info]   CI (99.9%): [28176.177, 28321.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1077.073 ±(99.9%) 1421.073 MB/sec [Average]
[info]   (min, avg, max) = (672.773, 1077.073, 1348.884), stdev = 369.048
[info]   CI (99.9%): [≈ 0, 2498.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   30472.976 ±(99.9%) 44419.180 B/op [Average]
[info]   (min, avg, max) = (18058.243, 30472.976, 42816.323), stdev = 11535.520
[info]   CI (99.9%): [≈ 0, 74892.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   21.722 ±(99.9%) 187.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.722, 108.608), stdev = 48.571
[info]   CI (99.9%): [≈ 0, 208.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   74.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 14.800, 20.000), stdev = 5.070
[info]   CI (99.9%): [74.000, 74.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.52% complete, ETA 00:28:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57461.924 ops/s
[info] # Warmup Iteration   2: 89351.659 ops/s
[info] # Warmup Iteration   3: 91753.653 ops/s
[info] # Warmup Iteration   4: 93954.855 ops/s
[info] # Warmup Iteration   5: 94085.326 ops/s
[info] Iteration   1: 92990.005 ops/s
[info]                  ·gc.alloc.rate:            1431.854 MB/sec
[info]                  ·gc.alloc.rate.norm:       24235.523 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2022.282 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34229.092 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  22.000 ms
[info] Iteration   2: 93361.074 ops/s
[info]                  ·gc.alloc.rate:                   1431.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              24120.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.530 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22728.729 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 44.918 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 93959.140 ops/s
[info]                  ·gc.alloc.rate:                   1440.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              24123.736 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22695.436 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 66.948 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 95094.775 ops/s
[info]                  ·gc.alloc.rate:                   1457.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              24120.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1362.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22545.161 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 92126.089 ops/s
[info]                  ·gc.alloc.rate:            1412.470 MB/sec
[info]                  ·gc.alloc.rate.norm:       24125.914 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23283.734 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   93506.217 ±(99.9%) 4270.984 ops/s [Average]
[info]   (min, avg, max) = (92126.089, 93506.217, 95094.775), stdev = 1109.161
[info]   CI (99.9%): [89235.233, 97777.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1434.613 ±(99.9%) 62.593 MB/sec [Average]
[info]   (min, avg, max) = (1412.470, 1434.613, 1457.261), stdev = 16.255
[info]   CI (99.9%): [1372.020, 1497.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24145.036 ±(99.9%) 195.023 B/op [Average]
[info]   (min, avg, max) = (24120.004, 24145.036, 24235.523), stdev = 50.647
[info]   CI (99.9%): [23950.014, 24340.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1490.243 ±(99.9%) 1145.480 MB/sec [Average]
[info]   (min, avg, max) = (1348.530, 1490.243, 2022.282), stdev = 297.477
[info]   CI (99.9%): [344.763, 2635.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   25096.430 ±(99.9%) 19688.349 B/op [Average]
[info]   (min, avg, max) = (22545.161, 25096.430, 34229.092), stdev = 5113.002
[info]   CI (99.9%): [5408.082, 44784.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 8.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   24.578 ±(99.9%) 115.532 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.578, 66.948), stdev = 30.003
[info]   CI (99.9%): [≈ 0, 140.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.600, 22.000), stdev = 7.956
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.75% complete, ETA 00:28:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3842.561 ops/s
[info] # Warmup Iteration   2: 18451.772 ops/s
[info] # Warmup Iteration   3: 21336.757 ops/s
[info] # Warmup Iteration   4: 21302.665 ops/s
[info] # Warmup Iteration   5: 21389.392 ops/s
[info] Iteration   1: 20596.703 ops/s
[info]                  ·gc.alloc.rate:            1363.554 MB/sec
[info]                  ·gc.alloc.rate.norm:       104206.471 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.236 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 102806.558 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 21188.741 ops/s
[info]                  ·gc.alloc.rate:            1380.935 MB/sec
[info]                  ·gc.alloc.rate.norm:       102561.110 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 99944.487 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   3: 21605.243 ops/s
[info]                  ·gc.alloc.rate:                   1400.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              102050.300 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.227 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        98214.532 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 339.675 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 21790.343 ops/s
[info]                  ·gc.alloc.rate:                   1412.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              102045.903 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2038.861 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        147274.072 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 288.678 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 22044.254 ops/s
[info]                  ·gc.alloc.rate:                                  1429.333 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102047.543 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.910 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       97305.266 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   21445.057 ±(99.9%) 2186.170 ops/s [Average]
[info]   (min, avg, max) = (20596.703, 21445.057, 22044.254), stdev = 567.741
[info]   CI (99.9%): [19258.887, 23631.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1397.485 ±(99.9%) 99.731 MB/sec [Average]
[info]   (min, avg, max) = (1363.554, 1397.485, 1429.333), stdev = 25.900
[info]   CI (99.9%): [1297.754, 1497.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   102582.265 ±(99.9%) 3599.420 B/op [Average]
[info]   (min, avg, max) = (102045.903, 102582.265, 104206.471), stdev = 934.758
[info]   CI (99.9%): [98982.845, 106181.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   ≈ 10⁻⁵ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1488.187 ±(99.9%) 1185.695 MB/sec [Average]
[info]   (min, avg, max) = (1345.236, 1488.187, 2038.861), stdev = 307.921
[info]   CI (99.9%): [302.493, 2673.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   109108.983 ±(99.9%) 82548.938 B/op [Average]
[info]   (min, avg, max) = (97305.266, 109108.983, 147274.072), stdev = 21437.697
[info]   CI (99.9%): [26560.046, 191657.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   125.671 ±(99.9%) 666.252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 125.671, 339.675), stdev = 173.024
[info]   CI (99.9%): [≈ 0, 791.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   72.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 14.400, 20.000), stdev = 6.804
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.98% complete, ETA 00:28:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27486.068 ops/s
[info] # Warmup Iteration   2: 108885.552 ops/s
[info] # Warmup Iteration   3: 114133.392 ops/s
[info] # Warmup Iteration   4: 116585.945 ops/s
[info] # Warmup Iteration   5: 118430.876 ops/s
[info] Iteration   1: 116979.442 ops/s
[info]                  ·gc.alloc.rate:            1074.487 MB/sec
[info]                  ·gc.alloc.rate.norm:       14456.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.619 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18103.775 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   2: 116198.224 ops/s
[info]                  ·gc.alloc.rate:            1068.067 MB/sec
[info]                  ·gc.alloc.rate.norm:       14461.879 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18225.591 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 117937.557 ops/s
[info]                  ·gc.alloc.rate:            1083.106 MB/sec
[info]                  ·gc.alloc.rate.norm:       14456.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8978.371 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 116083.704 ops/s
[info]                  ·gc.alloc.rate:                   1067.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              14470.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18243.015 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 36.125 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   5: 118349.518 ops/s
[info]                  ·gc.alloc.rate:                   1086.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              14457.882 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8982.555 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.717 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   117109.689 ±(99.9%) 3909.361 ops/s [Average]
[info]   (min, avg, max) = (116083.704, 117109.689, 118349.518), stdev = 1015.249
[info]   CI (99.9%): [113200.328, 121019.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1075.962 ±(99.9%) 34.162 MB/sec [Average]
[info]   (min, avg, max) = (1067.155, 1075.962, 1086.995), stdev = 8.872
[info]   CI (99.9%): [1041.801, 1110.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14460.364 ±(99.9%) 22.804 B/op [Average]
[info]   (min, avg, max) = (14456.004, 14460.364, 14470.050), stdev = 5.922
[info]   CI (99.9%): [14437.559, 14483.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1077.020 ±(99.9%) 1416.608 MB/sec [Average]
[info]   (min, avg, max) = (672.698, 1077.020, 1346.032), stdev = 367.889
[info]   CI (99.9%): [≈ 0, 2493.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   14506.661 ±(99.9%) 19426.464 B/op [Average]
[info]   (min, avg, max) = (8978.371, 14506.661, 18243.015), stdev = 5044.991
[info]   CI (99.9%): [≈ 0, 33933.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   10.768 ±(99.9%) 62.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.768, 36.125), stdev = 16.118
[info]   CI (99.9%): [≈ 0, 72.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   74.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 14.800, 20.000), stdev = 6.760
[info]   CI (99.9%): [74.000, 74.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.21% complete, ETA 00:27:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 291441.710 ops/s
[info] # Warmup Iteration   2: 410278.607 ops/s
[info] # Warmup Iteration   3: 430525.018 ops/s
[info] # Warmup Iteration   4: 418839.032 ops/s
[info] # Warmup Iteration   5: 416774.656 ops/s
[info] Iteration   1: 418757.330 ops/s
[info]                  ·gc.alloc.rate:            461.956 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.232 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2533.724 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 414756.070 ops/s
[info]                  ·gc.alloc.rate:      457.472 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736.051 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 425525.804 ops/s
[info]                  ·gc.alloc.rate:            470.902 MB/sec
[info]                  ·gc.alloc.rate.norm:       1741.954 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2493.412 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 425041.915 ops/s
[info]                  ·gc.alloc.rate:            471.350 MB/sec
[info]                  ·gc.alloc.rate.norm:       1744.819 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2496.157 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 435232.901 ops/s
[info]                  ·gc.alloc.rate:      480.173 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736.616 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   423862.804 ±(99.9%) 29977.793 ops/s [Average]
[info]   (min, avg, max) = (414756.070, 423862.804, 435232.901), stdev = 7785.138
[info]   CI (99.9%): [393885.011, 453840.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   468.370 ±(99.9%) 34.143 MB/sec [Average]
[info]   (min, avg, max) = (457.472, 468.370, 480.173), stdev = 8.867
[info]   CI (99.9%): [434.227, 502.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1739.089 ±(99.9%) 15.631 B/op [Average]
[info]   (min, avg, max) = (1736.003, 1739.089, 1744.819), stdev = 4.059
[info]   CI (99.9%): [1723.457, 1754.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.519 ±(99.9%) 1421.940 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.519, 674.318), stdev = 369.273
[info]   CI (99.9%): [≈ 0, 1826.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1504.659 ±(99.9%) 5289.443 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1504.659, 2533.724), stdev = 1373.651
[info]   CI (99.9%): [≈ 0, 6794.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 8.000), stdev = 4.219
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.44% complete, ETA 00:27:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 317177.047 ops/s
[info] # Warmup Iteration   2: 424711.723 ops/s
[info] # Warmup Iteration   3: 428028.934 ops/s
[info] # Warmup Iteration   4: 430477.904 ops/s
[info] # Warmup Iteration   5: 430273.773 ops/s
[info] Iteration   1: 429949.510 ops/s
[info]                  ·gc.alloc.rate:      4.371 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 428860.074 ops/s
[info]                  ·gc.alloc.rate:      4.437 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.285 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 425861.641 ops/s
[info]                  ·gc.alloc.rate:      6.045 MB/sec
[info]                  ·gc.alloc.rate.norm: 22.341 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 430881.346 ops/s
[info]                  ·gc.alloc.rate:      4.381 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 429033.436 ops/s
[info]                  ·gc.alloc.rate:      4.362 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   428917.201 ±(99.9%) 7274.749 ops/s [Average]
[info]   (min, avg, max) = (425861.641, 428917.201, 430881.346), stdev = 1889.229
[info]   CI (99.9%): [421642.452, 436191.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   4.719 ±(99.9%) 2.855 MB/sec [Average]
[info]   (min, avg, max) = (4.362, 4.719, 6.045), stdev = 0.742
[info]   CI (99.9%): [1.864, 7.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   17.326 ±(99.9%) 10.806 B/op [Average]
[info]   (min, avg, max) = (16.001, 17.326, 22.341), stdev = 2.806
[info]   CI (99.9%): [6.520, 28.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.67% complete, ETA 00:27:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7487.649 ops/s
[info] # Warmup Iteration   2: 54213.637 ops/s
[info] # Warmup Iteration   3: 56706.353 ops/s
[info] # Warmup Iteration   4: 55654.224 ops/s
[info] # Warmup Iteration   5: 56169.860 ops/s
[info] Iteration   1: 55708.803 ops/s
[info]                  ·gc.alloc.rate:            1048.956 MB/sec
[info]                  ·gc.alloc.rate.norm:       29632.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38014.385 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 56885.327 ops/s
[info]                  ·gc.alloc.rate:            1071.332 MB/sec
[info]                  ·gc.alloc.rate.norm:       29639.645 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37229.950 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   3: 57998.758 ops/s
[info]                  ·gc.alloc.rate:            1093.127 MB/sec
[info]                  ·gc.alloc.rate.norm:       29665.176 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18257.167 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 57522.968 ops/s
[info]                  ·gc.alloc.rate:                   1083.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              29637.873 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36815.802 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 91.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   5: 52393.053 ops/s
[info]                  ·gc.alloc.rate:                   986.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              29638.709 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20310.382 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   56101.782 ±(99.9%) 8640.671 ops/s [Average]
[info]   (min, avg, max) = (52393.053, 56101.782, 57998.758), stdev = 2243.955
[info]   CI (99.9%): [47461.110, 64742.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1056.626 ±(99.9%) 163.505 MB/sec [Average]
[info]   (min, avg, max) = (986.604, 1056.626, 1093.127), stdev = 42.462
[info]   CI (99.9%): [893.122, 1220.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   29642.682 ±(99.9%) 49.764 B/op [Average]
[info]   (min, avg, max) = (29632.008, 29642.682, 29665.176), stdev = 12.923
[info]   CI (99.9%): [29592.919, 29692.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1077.128 ±(99.9%) 1415.583 MB/sec [Average]
[info]   (min, avg, max) = (672.755, 1077.128, 1345.688), stdev = 367.622
[info]   CI (99.9%): [≈ 0, 2492.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   30125.537 ±(99.9%) 38248.628 B/op [Average]
[info]   (min, avg, max) = (18257.167, 30125.537, 38014.385), stdev = 9933.047
[info]   CI (99.9%): [≈ 0, 68374.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   22.228 ±(99.9%) 152.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.228, 91.128), stdev = 39.479
[info]   CI (99.9%): [≈ 0, 174.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   75.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 15.000, 20.000), stdev = 6.557
[info]   CI (99.9%): [75.000, 75.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoubles
[info] # Parameters: (size = 128)
[info] # Run progress: 76.91% complete, ETA 00:26:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7598473.005 ops/s
[info] # Warmup Iteration   2: 8202405.845 ops/s
[info] # Warmup Iteration   3: 8610998.546 ops/s
[info] # Warmup Iteration   4: 8596002.817 ops/s
[info] # Warmup Iteration   5: 8597386.102 ops/s
[info] Iteration   1: 8617276.026 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8611365.686 ops/s
[info]                  ·gc.alloc.rate:      0.001 MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8599775.886 ops/s
[info]                  ·gc.alloc.rate:      0.043 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8564283.869 ops/s
[info]                  ·gc.alloc.rate:      1.011 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.186 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8596036.218 ops/s
[info]                  ·gc.alloc.rate:      0.110 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoubles":
[info]   8597747.537 ±(99.9%) 79235.262 ops/s [Average]
[info]   (min, avg, max) = (8564283.869, 8597747.537, 8617276.026), stdev = 20577.146
[info]   CI (99.9%): [8518512.275, 8676982.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoubles:·gc.alloc.rate":
[info]   0.233 ±(99.9%) 1.684 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.233, 1.011), stdev = 0.437
[info]   CI (99.9%): [≈ 0, 1.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoubles:·gc.alloc.rate.norm":
[info]   0.043 ±(99.9%) 0.310 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.043, 0.186), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoubles:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled16
[info] # Parameters: (size = 128)
[info] # Run progress: 77.14% complete, ETA 00:26:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12966541.424 ops/s
[info] # Warmup Iteration   2: 14497177.339 ops/s
[info] # Warmup Iteration   3: 15841384.728 ops/s
[info] # Warmup Iteration   4: 15837273.411 ops/s
[info] # Warmup Iteration   5: 15697714.531 ops/s
[info] Iteration   1: 14730965.471 ops/s
[info]                  ·gc.alloc.rate:      11.332 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.211 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 15859673.892 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 15850465.720 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 15850448.405 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 15848307.131 ops/s
[info]                  ·gc.alloc.rate:      0.005 MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled16":
[info]   15627972.124 ±(99.9%) 1930948.443 ops/s [Average]
[info]   (min, avg, max) = (14730965.471, 15627972.124, 15859673.892), stdev = 501461.179
[info]   CI (99.9%): [13697023.681, 17558920.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled16:·gc.alloc.rate":
[info]   2.268 ±(99.9%) 19.513 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2.268, 11.332), stdev = 5.067
[info]   CI (99.9%): [≈ 0, 21.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled16:·gc.alloc.rate.norm":
[info]   0.242 ±(99.9%) 2.085 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.242, 1.211), stdev = 0.541
[info]   CI (99.9%): [≈ 0, 2.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled16:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled4
[info] # Parameters: (size = 128)
[info] # Run progress: 77.37% complete, ETA 00:26:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16444078.147 ops/s
[info] # Warmup Iteration   2: 18441518.680 ops/s
[info] # Warmup Iteration   3: 18573279.234 ops/s
[info] # Warmup Iteration   4: 18458511.192 ops/s
[info] # Warmup Iteration   5: 18566978.486 ops/s
[info] Iteration   1: 18539235.251 ops/s
[info]                  ·gc.alloc.rate:      0.002 MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 18521119.373 ops/s
[info]                  ·gc.alloc.rate:      0.005 MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 18522086.470 ops/s
[info]                  ·gc.alloc.rate:      0.001 MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 18469331.617 ops/s
[info]                  ·gc.alloc.rate:      0.278 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 18567476.368 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled4":
[info]   18523849.816 ±(99.9%) 137802.308 ops/s [Average]
[info]   (min, avg, max) = (18469331.617, 18523849.816, 18567476.368), stdev = 35786.822
[info]   CI (99.9%): [18386047.508, 18661652.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled4:·gc.alloc.rate":
[info]   0.057 ±(99.9%) 0.475 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.057, 0.278), stdev = 0.123
[info]   CI (99.9%): [≈ 0, 0.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled4:·gc.alloc.rate.norm":
[info]   0.005 ±(99.9%) 0.041 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.005, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled4:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled8
[info] # Parameters: (size = 128)
[info] # Run progress: 77.60% complete, ETA 00:26:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18794144.588 ops/s
[info] # Warmup Iteration   2: 21454657.672 ops/s
[info] # Warmup Iteration   3: 21385437.252 ops/s
[info] # Warmup Iteration   4: 21613315.105 ops/s
[info] # Warmup Iteration   5: 21582908.983 ops/s
[info] Iteration   1: 21615703.649 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 21613868.816 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 21618897.563 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 21488235.803 ops/s
[info]                  ·gc.alloc.rate:      4.115 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.301 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21578246.260 ops/s
[info]                  ·gc.alloc.rate:      0.150 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled8":
[info]   21582990.418 ±(99.9%) 213649.137 ops/s [Average]
[info]   (min, avg, max) = (21488235.803, 21582990.418, 21618897.563), stdev = 55484.002
[info]   CI (99.9%): [21369341.281, 21796639.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled8:·gc.alloc.rate":
[info]   0.853 ±(99.9%) 7.026 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.853, 4.115), stdev = 1.825
[info]   CI (99.9%): [≈ 0, 7.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled8:·gc.alloc.rate.norm":
[info]   0.062 ±(99.9%) 0.515 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.062, 0.301), stdev = 0.134
[info]   CI (99.9%): [≈ 0, 0.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumDoublesUnrolled8:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongs
[info] # Parameters: (size = 128)
[info] # Run progress: 77.83% complete, ETA 00:25:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6981367.588 ops/s
[info] # Warmup Iteration   2: 8529669.628 ops/s
[info] # Warmup Iteration   3: 8450365.640 ops/s
[info] # Warmup Iteration   4: 8608034.655 ops/s
[info] # Warmup Iteration   5: 8623286.418 ops/s
[info] Iteration   1: 8615132.326 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8614468.355 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8612958.507 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8610020.536 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8615226.695 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongs":
[info]   8613561.284 ±(99.9%) 8384.502 ops/s [Average]
[info]   (min, avg, max) = (8610020.536, 8613561.284, 8615226.695), stdev = 2177.429
[info]   CI (99.9%): [8605176.782, 8621945.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongs:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongs:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongs:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled16
[info] # Parameters: (size = 128)
[info] # Run progress: 78.06% complete, ETA 00:25:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12034870.494 ops/s
[info] # Warmup Iteration   2: 14411999.148 ops/s
[info] # Warmup Iteration   3: 15847533.105 ops/s
[info] # Warmup Iteration   4: 15838844.338 ops/s
[info] # Warmup Iteration   5: 15848105.180 ops/s
[info] Iteration   1: 15841788.802 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 15796728.793 ops/s
[info]                  ·gc.alloc.rate:      0.290 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 15852357.852 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 15804641.948 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 15817540.476 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled16":
[info]   15822611.574 ±(99.9%) 91754.247 ops/s [Average]
[info]   (min, avg, max) = (15796728.793, 15822611.574, 15852357.852), stdev = 23828.287
[info]   CI (99.9%): [15730857.327, 15914365.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled16:·gc.alloc.rate":
[info]   0.058 ±(99.9%) 0.498 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.058, 0.290), stdev = 0.129
[info]   CI (99.9%): [≈ 0, 0.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled16:·gc.alloc.rate.norm":
[info]   0.006 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled16:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled4
[info] # Parameters: (size = 128)
[info] # Run progress: 78.29% complete, ETA 00:25:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16791723.542 ops/s
[info] # Warmup Iteration   2: 19706816.870 ops/s
[info] # Warmup Iteration   3: 18532504.755 ops/s
[info] # Warmup Iteration   4: 18537693.486 ops/s
[info] # Warmup Iteration   5: 19304458.916 ops/s
[info] Iteration   1: 18529102.923 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 18543585.183 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 18342037.843 ops/s
[info]                  ·gc.alloc.rate:      1.481 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.127 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 18297400.767 ops/s
[info]                  ·gc.alloc.rate:      1.121 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.096 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 18471154.246 ops/s
[info]                  ·gc.alloc.rate:      0.311 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled4":
[info]   18436656.192 ±(99.9%) 428422.116 ops/s [Average]
[info]   (min, avg, max) = (18297400.767, 18436656.192, 18543585.183), stdev = 111259.863
[info]   CI (99.9%): [18008234.077, 18865078.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled4:·gc.alloc.rate":
[info]   0.583 ±(99.9%) 2.617 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.583, 1.481), stdev = 0.680
[info]   CI (99.9%): [≈ 0, 3.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled4:·gc.alloc.rate.norm":
[info]   0.050 ±(99.9%) 0.225 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.050, 0.127), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled4:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled8
[info] # Parameters: (size = 128)
[info] # Run progress: 78.52% complete, ETA 00:25:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17713891.250 ops/s
[info] # Warmup Iteration   2: 20894160.809 ops/s
[info] # Warmup Iteration   3: 19969143.991 ops/s
[info] # Warmup Iteration   4: 21542845.797 ops/s
[info] # Warmup Iteration   5: 20748550.854 ops/s
[info] Iteration   1: 21549484.117 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 21549282.618 ops/s
[info]                  ·gc.alloc.rate:      0.001 MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 19865880.564 ops/s
[info]                  ·gc.alloc.rate:      1.373 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.109 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 21537544.877 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21546578.754 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled8":
[info]   21209754.186 ±(99.9%) 2892849.794 ops/s [Average]
[info]   (min, avg, max) = (19865880.564, 21209754.186, 21549484.117), stdev = 751263.905
[info]   CI (99.9%): [18316904.391, 24102603.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled8:·gc.alloc.rate":
[info]   0.275 ±(99.9%) 2.364 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.275, 1.373), stdev = 0.614
[info]   CI (99.9%): [≈ 0, 2.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled8:·gc.alloc.rate.norm":
[info]   0.022 ±(99.9%) 0.187 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.022, 0.109), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MathBenchmark.sumLongsUnrolled8:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 78.75% complete, ETA 00:24:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 443272.646 ops/s
[info] # Warmup Iteration   2: 2411291.479 ops/s
[info] # Warmup Iteration   3: 2471439.965 ops/s
[info] # Warmup Iteration   4: 2539347.879 ops/s
[info] # Warmup Iteration   5: 2578532.071 ops/s
[info] Iteration   1: 2587361.106 ops/s
[info]                  ·gc.alloc.rate:            3261.155 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2072.602 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 2578415.884 ops/s
[info]                  ·gc.alloc.rate:                                  3252.167 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1985.079 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2079.792 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 2522600.012 ops/s
[info]                  ·gc.alloc.rate:            3186.210 MB/sec
[info]                  ·gc.alloc.rate.norm:       1987.476 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3407.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2125.822 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 2556555.051 ops/s
[info]                  ·gc.alloc.rate:                                  3223.372 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1984.185 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1678.060 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 2574174.332 ops/s
[info]                  ·gc.alloc.rate:                                  3245.397 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1984.213 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.194 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2083.134 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2563821.277 ±(99.9%) 98667.868 ops/s [Average]
[info]   (min, avg, max) = (2522600.012, 2563821.277, 2587361.106), stdev = 25623.732
[info]   CI (99.9%): [2465153.409, 2662489.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3233.660 ±(99.9%) 115.417 MB/sec [Average]
[info]   (min, avg, max) = (3186.210, 3233.660, 3261.155), stdev = 29.973
[info]   CI (99.9%): [3118.244, 3349.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1984.996 ±(99.9%) 5.567 B/op [Average]
[info]   (min, avg, max) = (1984.029, 1984.996, 1987.476), stdev = 1.446
[info]   CI (99.9%): [1979.429, 1990.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   3271.067 ±(99.9%) 1173.164 MB/sec [Average]
[info]   (min, avg, max) = (2726.062, 3271.067, 3407.999), stdev = 304.667
[info]   CI (99.9%): [2097.903, 4444.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2007.882 ±(99.9%) 714.486 B/op [Average]
[info]   (min, avg, max) = (1678.060, 2007.882, 2125.822), stdev = 185.550
[info]   CI (99.9%): [1293.396, 2722.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.200, 9.000), stdev = 1.789
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 78.98% complete, ETA 00:24:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.628 ops/s
[info] # Warmup Iteration   2: 738729.455 ops/s
[info] # Warmup Iteration   3: 756744.171 ops/s
[info] # Warmup Iteration   4: 773829.083 ops/s
[info] # Warmup Iteration   5: 758483.750 ops/s
[info] Iteration   1: 788077.028 ops/s
[info]                  ·gc.alloc.rate:      484.845 MB/sec
[info]                  ·gc.alloc.rate.norm: 968.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 750637.140 ops/s
[info]                  ·gc.alloc.rate:            463.049 MB/sec
[info]                  ·gc.alloc.rate.norm:       970.844 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1406.395 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 769114.329 ops/s
[info]                  ·gc.alloc.rate:            473.204 MB/sec
[info]                  ·gc.alloc.rate.norm:       968.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1372.671 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 763295.877 ops/s
[info]                  ·gc.alloc.rate:            469.627 MB/sec
[info]                  ·gc.alloc.rate.norm:       968.218 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.888 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1383.152 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 772210.150 ops/s
[info]                  ·gc.alloc.rate:      475.117 MB/sec
[info]                  ·gc.alloc.rate.norm: 968.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   768666.905 ±(99.9%) 52495.590 ops/s [Average]
[info]   (min, avg, max) = (750637.140, 768666.905, 788077.028), stdev = 13632.938
[info]   CI (99.9%): [716171.314, 821162.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   473.168 ±(99.9%) 30.750 MB/sec [Average]
[info]   (min, avg, max) = (463.049, 473.168, 484.845), stdev = 7.986
[info]   CI (99.9%): [442.419, 503.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   968.613 ±(99.9%) 4.817 B/op [Average]
[info]   (min, avg, max) = (968.001, 968.613, 970.844), stdev = 1.251
[info]   CI (99.9%): [963.796, 973.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   402.540 ±(99.9%) 1414.986 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.540, 671.026), stdev = 367.467
[info]   CI (99.9%): [≈ 0, 1817.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   832.444 ±(99.9%) 2926.534 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 832.444, 1406.395), stdev = 760.012
[info]   CI (99.9%): [≈ 0, 3758.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.400, 11.000), stdev = 5.857
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 79.21% complete, ETA 00:24:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6378.690 ops/s
[info] # Warmup Iteration   2: 240940.805 ops/s
[info] # Warmup Iteration   3: 295496.517 ops/s
[info] # Warmup Iteration   4: 302931.405 ops/s
[info] # Warmup Iteration   5: 303249.060 ops/s
[info] Iteration   1: 303366.695 ops/s
[info]                  ·gc.alloc.rate:            569.157 MB/sec
[info]                  ·gc.alloc.rate.norm:       2952.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3490.381 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 302230.111 ops/s
[info]                  ·gc.alloc.rate:            568.356 MB/sec
[info]                  ·gc.alloc.rate.norm:       2959.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3503.706 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 306488.039 ops/s
[info]                  ·gc.alloc.rate:            574.893 MB/sec
[info]                  ·gc.alloc.rate.norm:       2952.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3454.923 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 297762.007 ops/s
[info]                  ·gc.alloc.rate:      558.616 MB/sec
[info]                  ·gc.alloc.rate.norm: 2952.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 304117.706 ops/s
[info]                  ·gc.alloc.rate:            570.356 MB/sec
[info]                  ·gc.alloc.rate.norm:       2952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3481.729 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   302792.912 ±(99.9%) 12382.831 ops/s [Average]
[info]   (min, avg, max) = (297762.007, 302792.912, 306488.039), stdev = 3215.782
[info]   CI (99.9%): [290410.080, 315175.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   568.276 ±(99.9%) 22.961 MB/sec [Average]
[info]   (min, avg, max) = (558.616, 568.276, 574.893), stdev = 5.963
[info]   CI (99.9%): [545.315, 591.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2953.414 ±(99.9%) 12.154 B/op [Average]
[info]   (min, avg, max) = (2952.001, 2953.414, 2959.060), stdev = 3.156
[info]   CI (99.9%): [2941.260, 2965.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.293 ±(99.9%) 1158.717 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.293, 672.968), stdev = 300.915
[info]   CI (99.9%): [≈ 0, 1697.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2786.148 ±(99.9%) 5997.786 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2786.148, 3503.706), stdev = 1557.606
[info]   CI (99.9%): [≈ 0, 8783.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.600, 10.000), stdev = 4.278
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 79.45% complete, ETA 00:23:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 341797.512 ops/s
[info] # Warmup Iteration   2: 506203.263 ops/s
[info] # Warmup Iteration   3: 497997.851 ops/s
[info] # Warmup Iteration   4: 482122.668 ops/s
[info] # Warmup Iteration   5: 531342.283 ops/s
[info] Iteration   1: 512334.227 ops/s
[info]                  ·gc.alloc.rate:            387.217 MB/sec
[info]                  ·gc.alloc.rate.norm:       1189.287 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2070.986 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 524128.785 ops/s
[info]                  ·gc.alloc.rate:            394.444 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2024.390 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 438398.952 ops/s
[info]                  ·gc.alloc.rate:      329.800 MB/sec
[info]                  ·gc.alloc.rate.norm: 1184.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 525756.027 ops/s
[info]                  ·gc.alloc.rate:            395.857 MB/sec
[info]                  ·gc.alloc.rate.norm:       1185.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2018.068 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 497412.977 ops/s
[info]                  ·gc.alloc.rate:      374.172 MB/sec
[info]                  ·gc.alloc.rate.norm: 1184.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   499606.194 ±(99.9%) 138814.388 ops/s [Average]
[info]   (min, avg, max) = (438398.952, 499606.194, 525756.027), stdev = 36049.656
[info]   CI (99.9%): [360791.806, 638420.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   376.298 ±(99.9%) 105.413 MB/sec [Average]
[info]   (min, avg, max) = (329.800, 376.298, 395.857), stdev = 27.375
[info]   CI (99.9%): [270.885, 481.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1185.260 ±(99.9%) 8.830 B/op [Average]
[info]   (min, avg, max) = (1184.001, 1185.260, 1189.287), stdev = 2.293
[info]   CI (99.9%): [1176.430, 1194.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.569 ±(99.9%) 1422.117 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.569, 674.416), stdev = 369.319
[info]   CI (99.9%): [≈ 0, 1826.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1222.689 ±(99.9%) 4298.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1222.689, 2070.986), stdev = 1116.344
[info]   CI (99.9%): [≈ 0, 5521.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 8.000), stdev = 4.037
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 79.68% complete, ETA 00:23:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 775321.877 ops/s
[info] # Warmup Iteration   2: 1120235.627 ops/s
[info] # Warmup Iteration   3: 1316398.151 ops/s
[info] # Warmup Iteration   4: 1305513.518 ops/s
[info] # Warmup Iteration   5: 1321422.025 ops/s
[info] Iteration   1: 1314644.352 ops/s
[info]                  ·gc.alloc.rate:            422.210 MB/sec
[info]                  ·gc.alloc.rate.norm:       505.470 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 807.048 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1315614.023 ops/s
[info]                  ·gc.alloc.rate:            421.225 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 806.481 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 1325221.252 ops/s
[info]                  ·gc.alloc.rate:      425.564 MB/sec
[info]                  ·gc.alloc.rate.norm: 505.449 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1302628.824 ops/s
[info]                  ·gc.alloc.rate:            418.495 MB/sec
[info]                  ·gc.alloc.rate.norm:       505.637 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.134 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 814.507 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1294686.124 ops/s
[info]                  ·gc.alloc.rate:            417.108 MB/sec
[info]                  ·gc.alloc.rate.norm:       507.138 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 819.513 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   1310558.915 ±(99.9%) 46049.455 ops/s [Average]
[info]   (min, avg, max) = (1294686.124, 1310558.915, 1325221.252), stdev = 11958.897
[info]   CI (99.9%): [1264509.460, 1356608.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   420.920 ±(99.9%) 12.734 MB/sec [Average]
[info]   (min, avg, max) = (417.108, 420.920, 425.564), stdev = 3.307
[info]   CI (99.9%): [408.187, 433.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   505.539 ±(99.9%) 4.282 B/op [Average]
[info]   (min, avg, max) = (504.000, 505.539, 507.138), stdev = 1.112
[info]   CI (99.9%): [501.257, 509.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen":
[info]   539.260 ±(99.9%) 1160.799 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.260, 674.134), stdev = 301.456
[info]   CI (99.9%): [≈ 0, 1700.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm":
[info]   649.510 ±(99.9%) 1398.275 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 649.510, 819.513), stdev = 363.128
[info]   CI (99.9%): [≈ 0, 2047.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.000, 8.000), stdev = 3.391
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 79.91% complete, ETA 00:23:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1521555.010 ops/s
[info] # Warmup Iteration   2: 2830341.038 ops/s
[info] # Warmup Iteration   3: 3615380.966 ops/s
[info] # Warmup Iteration   4: 3664247.377 ops/s
[info] # Warmup Iteration   5: 3615236.015 ops/s
[info] Iteration   1: 3655949.184 ops/s
[info]                  ·gc.alloc.rate:      298.041 MB/sec
[info]                  ·gc.alloc.rate.norm: 128.303 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3649278.676 ops/s
[info]                  ·gc.alloc.rate:      297.167 MB/sec
[info]                  ·gc.alloc.rate.norm: 128.170 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3615073.342 ops/s
[info]                  ·gc.alloc.rate:            299.837 MB/sec
[info]                  ·gc.alloc.rate.norm:       130.516 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.268 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 293.503 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 3662716.016 ops/s
[info]                  ·gc.alloc.rate:      297.871 MB/sec
[info]                  ·gc.alloc.rate.norm: 128.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3644912.114 ops/s
[info]                  ·gc.alloc.rate:            296.411 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.111 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 291.103 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   3645585.866 ±(99.9%) 70634.531 ops/s [Average]
[info]   (min, avg, max) = (3615073.342, 3645585.866, 3662716.016), stdev = 18343.563
[info]   CI (99.9%): [3574951.335, 3716220.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   297.865 ±(99.9%) 4.916 MB/sec [Average]
[info]   (min, avg, max) = (296.411, 297.865, 299.837), stdev = 1.277
[info]   CI (99.9%): [292.949, 302.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   128.598 ±(99.9%) 4.159 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.598, 130.516), stdev = 1.080
[info]   CI (99.9%): [124.439, 132.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen":
[info]   269.676 ±(99.9%) 1421.922 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.676, 674.268), stdev = 369.269
[info]   CI (99.9%): [≈ 0, 1691.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm":
[info]   116.921 ±(99.9%) 616.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 116.921, 293.503), stdev = 160.103
[info]   CI (99.9%): [≈ 0, 733.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 8.000), stdev = 4.123
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 80.14% complete, ETA 00:23:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 272.849 ops/s
[info] # Warmup Iteration   2: 55153.576 ops/s
[info] # Warmup Iteration   3: 199506.754 ops/s
[info] # Warmup Iteration   4: 212590.935 ops/s
[info] # Warmup Iteration   5: 226660.412 ops/s
[info] Iteration   1: 226783.015 ops/s
[info]                  ·gc.alloc.rate:            1473.510 MB/sec
[info]                  ·gc.alloc.rate.norm:       10224.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.867 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9338.345 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   2: 225039.380 ops/s
[info]                  ·gc.alloc.rate:            1462.850 MB/sec
[info]                  ·gc.alloc.rate.norm:       10230.975 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2018.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14116.306 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  29.000 ms
[info] Iteration   3: 224711.120 ops/s
[info]                  ·gc.alloc.rate:                   1460.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              10225.563 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9447.597 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 32.658 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   4: 226003.711 ops/s
[info]                  ·gc.alloc.rate:                   1467.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              10224.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9454.237 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.834 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 226314.480 ops/s
[info]                  ·gc.alloc.rate:                                  1471.757 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10233.064 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.143 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9478.098 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   225770.341 ±(99.9%) 3352.665 ops/s [Average]
[info]   (min, avg, max) = (224711.120, 225770.341, 226783.015), stdev = 870.677
[info]   CI (99.9%): [222417.676, 229123.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1467.214 ±(99.9%) 22.058 MB/sec [Average]
[info]   (min, avg, max) = (1460.042, 1467.214, 1473.510), stdev = 5.728
[info]   CI (99.9%): [1445.157, 1489.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10227.521 ±(99.9%) 16.251 B/op [Average]
[info]   (min, avg, max) = (10224.002, 10227.521, 10233.064), stdev = 4.220
[info]   CI (99.9%): [10211.270, 10243.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.029 ±(99.9%) 0.246 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.143), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1486.756 ±(99.9%) 1144.673 MB/sec [Average]
[info]   (min, avg, max) = (1345.867, 1486.756, 2018.384), stdev = 297.268
[info]   CI (99.9%): [342.084, 2631.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10366.917 ±(99.9%) 8073.509 B/op [Average]
[info]   (min, avg, max) = (9338.345, 10366.917, 14116.306), stdev = 2096.665
[info]   CI (99.9%): [2293.408, 18440.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   12.098 ±(99.9%) 64.129 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.098, 32.658), stdev = 16.654
[info]   CI (99.9%): [≈ 0, 76.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   77.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 15.400, 29.000), stdev = 10.213
[info]   CI (99.9%): [77.000, 77.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.37% complete, ETA 00:22:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1052427.156 ops/s
[info] # Warmup Iteration   2: 1258753.681 ops/s
[info] # Warmup Iteration   3: 1356639.057 ops/s
[info] # Warmup Iteration   4: 1365939.477 ops/s
[info] # Warmup Iteration   5: 1292017.344 ops/s
[info] Iteration   1: 1361084.411 ops/s
[info]                  ·gc.alloc.rate:      76.107 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1361320.576 ops/s
[info]                  ·gc.alloc.rate:      76.130 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1337825.094 ops/s
[info]                  ·gc.alloc.rate:            77.252 MB/sec
[info]                  ·gc.alloc.rate.norm:       90.864 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.575 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 796.967 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1360981.175 ops/s
[info]                  ·gc.alloc.rate:      76.091 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1362117.005 ops/s
[info]                  ·gc.alloc.rate:      76.168 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1356665.652 ±(99.9%) 40591.949 ops/s [Average]
[info]   (min, avg, max) = (1337825.094, 1356665.652, 1362117.005), stdev = 10541.600
[info]   CI (99.9%): [1316073.703, 1397257.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   76.350 ±(99.9%) 1.945 MB/sec [Average]
[info]   (min, avg, max) = (76.091, 76.350, 77.252), stdev = 0.505
[info]   CI (99.9%): [74.405, 78.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   88.573 ±(99.9%) 4.931 B/op [Average]
[info]   (min, avg, max) = (88.000, 88.573, 90.864), stdev = 1.281
[info]   CI (99.9%): [83.642, 93.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   135.515 ±(99.9%) 1166.825 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.515, 677.575), stdev = 303.021
[info]   CI (99.9%): [≈ 0, 1302.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   159.393 ±(99.9%) 1372.425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 159.393, 796.967), stdev = 356.415
[info]   CI (99.9%): [≈ 0, 1531.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 8.000), stdev = 3.578
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.60% complete, ETA 00:22:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6064.564 ops/s
[info] # Warmup Iteration   2: 52011.789 ops/s
[info] # Warmup Iteration   3: 54746.758 ops/s
[info] # Warmup Iteration   4: 56081.554 ops/s
[info] # Warmup Iteration   5: 57496.390 ops/s
[info] Iteration   1: 56605.141 ops/s
[info]                  ·gc.alloc.rate:                   2411.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              67044.247 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2720.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        75641.792 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 111.129 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 57986.017 ops/s
[info]                  ·gc.alloc.rate:                                  2465.987 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66912.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.177 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55487.960 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 57900.173 ops/s
[info]                  ·gc.alloc.rate:            2461.906 MB/sec
[info]                  ·gc.alloc.rate.norm:       66913.313 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2726.142 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74095.097 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 57920.149 ops/s
[info]                  ·gc.alloc.rate:                                  2462.753 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66912.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74072.073 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 58029.062 ops/s
[info]                  ·gc.alloc.rate:            2469.544 MB/sec
[info]                  ·gc.alloc.rate.norm:       66982.317 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55448.761 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   57688.108 ±(99.9%) 2339.588 ops/s [Average]
[info]   (min, avg, max) = (56605.141, 57688.108, 58029.062), stdev = 607.584
[info]   CI (99.9%): [55348.520, 60027.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2454.261 ±(99.9%) 93.592 MB/sec [Average]
[info]   (min, avg, max) = (2411.117, 2454.261, 2469.544), stdev = 24.305
[info]   CI (99.9%): [2360.670, 2547.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66952.781 ±(99.9%) 228.782 B/op [Average]
[info]   (min, avg, max) = (66912.007, 66952.781, 67044.247), stdev = 59.414
[info]   CI (99.9%): [66723.999, 67181.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.011 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.049 ±(99.9%) 0.298 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.049, 0.177), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2452.404 ±(99.9%) 1433.376 MB/sec [Average]
[info]   (min, avg, max) = (2044.318, 2452.404, 2726.284), stdev = 372.243
[info]   CI (99.9%): [1019.028, 3885.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66949.137 ±(99.9%) 40430.864 B/op [Average]
[info]   (min, avg, max) = (55448.761, 66949.137, 75641.792), stdev = 10499.767
[info]   CI (99.9%): [26518.272, 107380.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   22.226 ±(99.9%) 191.371 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.226, 111.129), stdev = 49.698
[info]   CI (99.9%): [≈ 0, 213.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 11.000), stdev = 2.793
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.83% complete, ETA 00:22:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 582113.375 ops/s
[info] # Warmup Iteration   2: 1340712.847 ops/s
[info] # Warmup Iteration   3: 1415708.685 ops/s
[info] # Warmup Iteration   4: 1404109.285 ops/s
[info] # Warmup Iteration   5: 1396034.949 ops/s
[info] Iteration   1: 1393764.642 ops/s
[info]                  ·gc.alloc.rate:            729.675 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.208 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1520.232 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 1373512.379 ops/s
[info]                  ·gc.alloc.rate:            720.734 MB/sec
[info]                  ·gc.alloc.rate.norm:       825.933 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 770.907 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1380201.903 ops/s
[info]                  ·gc.alloc.rate:                   722.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.411 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        767.200 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.760 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 1356270.043 ops/s
[info]                  ·gc.alloc.rate:            710.069 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 781.517 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1364604.080 ops/s
[info]                  ·gc.alloc.rate:            714.420 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 775.989 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1373670.609 ±(99.9%) 55515.906 ops/s [Average]
[info]   (min, avg, max) = (1356270.043, 1373670.609, 1393764.642), stdev = 14417.304
[info]   CI (99.9%): [1318154.704, 1429186.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   719.556 ±(99.9%) 29.277 MB/sec [Average]
[info]   (min, avg, max) = (710.069, 719.556, 729.675), stdev = 7.603
[info]   CI (99.9%): [690.280, 748.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   824.469 ±(99.9%) 3.225 B/op [Average]
[info]   (min, avg, max) = (824.000, 824.469, 825.933), stdev = 0.838
[info]   CI (99.9%): [821.244, 827.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   807.579 ±(99.9%) 1159.439 MB/sec [Average]
[info]   (min, avg, max) = (672.717, 807.579, 1346.208), stdev = 301.103
[info]   CI (99.9%): [≈ 0, 1967.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   923.169 ±(99.9%) 1285.391 B/op [Average]
[info]   (min, avg, max) = (767.200, 923.169, 1520.232), stdev = 333.812
[info]   CI (99.9%): [≈ 0, 2208.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.152 ±(99.9%) 1.308 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.152, 0.760), stdev = 0.340
[info]   CI (99.9%): [≈ 0, 1.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.800, 18.000), stdev = 4.025
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.06% complete, ETA 00:22:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1103765.588 ops/s
[info] # Warmup Iteration   2: 1444881.411 ops/s
[info] # Warmup Iteration   3: 1524839.053 ops/s
[info] # Warmup Iteration   4: 1524500.642 ops/s
[info] # Warmup Iteration   5: 1524501.140 ops/s
[info] Iteration   1: 1494183.276 ops/s
[info]                  ·gc.alloc.rate:      417.712 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1501673.179 ops/s
[info]                  ·gc.alloc.rate:            419.924 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 706.540 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 1496809.765 ops/s
[info]                  ·gc.alloc.rate:            418.674 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.271 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 708.823 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1490181.994 ops/s
[info]                  ·gc.alloc.rate:      416.555 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1494394.256 ops/s
[info]                  ·gc.alloc.rate:            419.130 MB/sec
[info]                  ·gc.alloc.rate.norm:       441.427 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 709.916 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   1495448.494 ±(99.9%) 16228.532 ops/s [Average]
[info]   (min, avg, max) = (1490181.994, 1495448.494, 1501673.179), stdev = 4214.498
[info]   CI (99.9%): [1479219.962, 1511677.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   418.399 ±(99.9%) 5.024 MB/sec [Average]
[info]   (min, avg, max) = (416.555, 418.399, 419.924), stdev = 1.305
[info]   CI (99.9%): [413.375, 423.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440.347 ±(99.9%) 2.364 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.347, 441.427), stdev = 0.614
[info]   CI (99.9%): [437.983, 442.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.471 ±(99.9%) 1421.772 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.471, 674.245), stdev = 369.230
[info]   CI (99.9%): [≈ 0, 1826.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   425.056 ±(99.9%) 1494.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 425.056, 709.916), stdev = 388.023
[info]   CI (99.9%): [≈ 0, 1919.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 8.000), stdev = 4.219
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 81.29% complete, ETA 00:21:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1204067.285 ops/s
[info] # Warmup Iteration   2: 1626367.120 ops/s
[info] # Warmup Iteration   3: 1665588.634 ops/s
[info] # Warmup Iteration   4: 1666182.790 ops/s
[info] # Warmup Iteration   5: 1667245.545 ops/s
[info] Iteration   1: 1657812.305 ops/s
[info]                  ·gc.alloc.rate:      16.854 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1665707.359 ops/s
[info]                  ·gc.alloc.rate:      16.930 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1666723.349 ops/s
[info]                  ·gc.alloc.rate:      16.945 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1657872.627 ops/s
[info]                  ·gc.alloc.rate:      17.030 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.162 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1666045.167 ops/s
[info]                  ·gc.alloc.rate:      16.940 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1662832.162 ±(99.9%) 17596.163 ops/s [Average]
[info]   (min, avg, max) = (1657812.305, 1662832.162, 1666723.349), stdev = 4569.668
[info]   CI (99.9%): [1645235.998, 1680428.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   16.940 ±(99.9%) 0.240 MB/sec [Average]
[info]   (min, avg, max) = (16.854, 16.940, 17.030), stdev = 0.062
[info]   CI (99.9%): [16.700, 17.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.033 ±(99.9%) 0.278 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.033, 16.162), stdev = 0.072
[info]   CI (99.9%): [15.754, 16.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.52% complete, ETA 00:21:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9012.629 ops/s
[info] # Warmup Iteration   2: 43958.253 ops/s
[info] # Warmup Iteration   3: 44643.689 ops/s
[info] # Warmup Iteration   4: 45577.519 ops/s
[info] # Warmup Iteration   5: 45199.788 ops/s
[info] Iteration   1: 46355.179 ops/s
[info]                  ·gc.alloc.rate:                   1863.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              63281.464 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2020.579 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        68618.933 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 158.317 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         26.000 ms
[info] Iteration   2: 46825.479 ops/s
[info]                  ·gc.alloc.rate:                                  1882.917 MB/sec
[info]                  ·gc.alloc.rate.norm:                             63277.738 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.120 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2039.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68533.355 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                134.335 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 46566.063 ops/s
[info]                  ·gc.alloc.rate:            1873.612 MB/sec
[info]                  ·gc.alloc.rate.norm:       63316.362 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46064.038 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 45904.782 ops/s
[info]                  ·gc.alloc.rate:            1846.081 MB/sec
[info]                  ·gc.alloc.rate.norm:       63272.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.944 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70087.765 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 46274.893 ops/s
[info]                  ·gc.alloc.rate:            1860.156 MB/sec
[info]                  ·gc.alloc.rate.norm:       63272.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.152 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69530.492 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   46385.279 ±(99.9%) 1320.534 ops/s [Average]
[info]   (min, avg, max) = (45904.782, 46385.279, 46825.479), stdev = 342.938
[info]   CI (99.9%): [45064.745, 47705.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1865.235 ±(99.9%) 53.730 MB/sec [Average]
[info]   (min, avg, max) = (1846.081, 1865.235, 1882.917), stdev = 13.954
[info]   CI (99.9%): [1811.505, 1918.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   63283.916 ±(99.9%) 71.535 B/op [Average]
[info]   (min, avg, max) = (63272.009, 63283.916, 63316.362), stdev = 18.577
[info]   CI (99.9%): [63212.382, 63355.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.120), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.808 ±(99.9%) 6.959 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.808, 4.041), stdev = 1.807
[info]   CI (99.9%): [≈ 0, 7.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1902.415 ±(99.9%) 1161.550 MB/sec [Average]
[info]   (min, avg, max) = (1363.094, 1902.415, 2044.944), stdev = 301.651
[info]   CI (99.9%): [740.865, 3063.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   64566.916 ±(99.9%) 39906.906 B/op [Average]
[info]   (min, avg, max) = (46064.038, 64566.916, 70087.765), stdev = 10363.697
[info]   CI (99.9%): [24660.011, 104473.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.662), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   58.530 ±(99.9%) 310.336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 58.530, 158.317), stdev = 80.593
[info]   CI (99.9%): [≈ 0, 368.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.200, 26.000), stdev = 9.680
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.76% complete, ETA 00:21:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146152.883 ops/s
[info] # Warmup Iteration   2: 212002.762 ops/s
[info] # Warmup Iteration   3: 225810.932 ops/s
[info] # Warmup Iteration   4: 215755.014 ops/s
[info] # Warmup Iteration   5: 219156.001 ops/s
[info] Iteration   1: 221846.074 ops/s
[info]                  ·gc.alloc.rate:            868.058 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4782.516 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 221636.266 ops/s
[info]                  ·gc.alloc.rate:            867.756 MB/sec
[info]                  ·gc.alloc.rate.norm:       6162.144 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.133 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4787.176 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 220543.438 ops/s
[info]                  ·gc.alloc.rate:            866.200 MB/sec
[info]                  ·gc.alloc.rate.norm:       6167.992 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1341.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9552.546 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   4: 220221.669 ops/s
[info]                  ·gc.alloc.rate:            862.105 MB/sec
[info]                  ·gc.alloc.rate.norm:       6162.268 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4817.953 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 220421.650 ops/s
[info]                  ·gc.alloc.rate:            862.768 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.901 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4813.254 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   220933.819 ±(99.9%) 2886.387 ops/s [Average]
[info]   (min, avg, max) = (220221.669, 220933.819, 221846.074), stdev = 749.585
[info]   CI (99.9%): [218047.433, 223820.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   865.377 ±(99.9%) 10.727 MB/sec [Average]
[info]   (min, avg, max) = (862.105, 865.377, 868.058), stdev = 2.786
[info]   CI (99.9%): [854.650, 876.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6162.662 ±(99.9%) 12.025 B/op [Average]
[info]   (min, avg, max) = (6160.002, 6162.662, 6167.992), stdev = 3.123
[info]   CI (99.9%): [6150.636, 6174.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   807.533 ±(99.9%) 1149.423 MB/sec [Average]
[info]   (min, avg, max) = (673.945, 807.533, 1341.509), stdev = 298.501
[info]   CI (99.9%): [≈ 0, 1956.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5750.689 ±(99.9%) 8184.003 B/op [Average]
[info]   (min, avg, max) = (4782.516, 5750.689, 9552.546), stdev = 2125.360
[info]   CI (99.9%): [≈ 0, 13934.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.400, 15.000), stdev = 3.209
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.99% complete, ETA 00:20:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4295.597 ops/s
[info] # Warmup Iteration   2: 26196.662 ops/s
[info] # Warmup Iteration   3: 27294.325 ops/s
[info] # Warmup Iteration   4: 27336.293 ops/s
[info] # Warmup Iteration   5: 26740.887 ops/s
[info] Iteration   1: 27231.584 ops/s
[info]                  ·gc.alloc.rate:            1310.275 MB/sec
[info]                  ·gc.alloc.rate.norm:       75742.115 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77772.114 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 27608.099 ops/s
[info]                  ·gc.alloc.rate:            1328.994 MB/sec
[info]                  ·gc.alloc.rate.norm:       75770.665 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76707.475 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   3: 27989.222 ops/s
[info]                  ·gc.alloc.rate:                   1346.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              75736.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.176 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        75810.603 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 224.735 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 28268.296 ops/s
[info]                  ·gc.alloc.rate:                   1360.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              75743.878 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.830 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        75547.318 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 259.613 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 28349.588 ops/s
[info]                  ·gc.alloc.rate:            1365.526 MB/sec
[info]                  ·gc.alloc.rate.norm:       75813.400 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75661.664 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   27889.358 ±(99.9%) 1803.188 ops/s [Average]
[info]   (min, avg, max) = (27231.584, 27889.358, 28349.588), stdev = 468.282
[info]   CI (99.9%): [26086.170, 29692.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1342.401 ±(99.9%) 87.997 MB/sec [Average]
[info]   (min, avg, max) = (1310.275, 1342.401, 1365.526), stdev = 22.852
[info]   CI (99.9%): [1254.404, 1430.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   75761.215 ±(99.9%) 123.473 B/op [Average]
[info]   (min, avg, max) = (75736.019, 75761.215, 75813.400), stdev = 32.065
[info]   CI (99.9%): [75637.743, 75884.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1351.723 ±(99.9%) 29.886 MB/sec [Average]
[info]   (min, avg, max) = (1345.392, 1351.723, 1362.793), stdev = 7.761
[info]   CI (99.9%): [1321.837, 1381.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   76299.835 ±(99.9%) 3625.882 B/op [Average]
[info]   (min, avg, max) = (75547.318, 76299.835, 77772.114), stdev = 941.630
[info]   CI (99.9%): [72673.953, 79925.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   96.870 ±(99.9%) 512.968 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 96.870, 259.613), stdev = 133.216
[info]   CI (99.9%): [≈ 0, 609.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   67.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 13.400, 20.000), stdev = 7.232
[info]   CI (99.9%): [67.000, 67.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.22% complete, ETA 00:20:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32417.385 ops/s
[info] # Warmup Iteration   2: 86027.575 ops/s
[info] # Warmup Iteration   3: 87804.685 ops/s
[info] # Warmup Iteration   4: 88350.283 ops/s
[info] # Warmup Iteration   5: 88542.437 ops/s
[info] Iteration   1: 89313.148 ops/s
[info]                  ·gc.alloc.rate:            1089.294 MB/sec
[info]                  ·gc.alloc.rate.norm:       19192.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.927 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11856.142 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 86454.340 ops/s
[info]                  ·gc.alloc.rate:            1074.757 MB/sec
[info]                  ·gc.alloc.rate.norm:       19563.477 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24496.323 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   3: 88279.951 ops/s
[info]                  ·gc.alloc.rate:            1076.614 MB/sec
[info]                  ·gc.alloc.rate.norm:       19195.829 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.453 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23989.167 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   4: 88330.812 ops/s
[info]                  ·gc.alloc.rate:                   1077.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              19192.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.771 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11987.795 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 47.476 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 88417.204 ops/s
[info]                  ·gc.alloc.rate:                   1078.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              19194.519 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24082.979 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 83.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   88159.091 ±(99.9%) 4014.996 ops/s [Average]
[info]   (min, avg, max) = (86454.340, 88159.091, 89313.148), stdev = 1042.682
[info]   CI (99.9%): [84144.095, 92174.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1079.269 ±(99.9%) 22.216 MB/sec [Average]
[info]   (min, avg, max) = (1074.757, 1079.269, 1089.294), stdev = 5.769
[info]   CI (99.9%): [1057.053, 1101.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19267.567 ±(99.9%) 637.001 B/op [Average]
[info]   (min, avg, max) = (19192.005, 19267.567, 19563.477), stdev = 165.427
[info]   CI (99.9%): [18630.566, 19904.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1078.040 ±(99.9%) 1424.354 MB/sec [Average]
[info]   (min, avg, max) = (672.771, 1078.040, 1353.296), stdev = 369.900
[info]   CI (99.9%): [≈ 0, 2502.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   19282.481 ±(99.9%) 25884.289 B/op [Average]
[info]   (min, avg, max) = (11856.142, 19282.481, 24496.323), stdev = 6722.068
[info]   CI (99.9%): [≈ 0, 45166.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 8.194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 4.664), stdev = 2.128
[info]   CI (99.9%): [≈ 0, 9.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   26.096 ±(99.9%) 145.850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.096, 83.004), stdev = 37.877
[info]   CI (99.9%): [≈ 0, 171.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   69.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.800, 20.000), stdev = 5.263
[info]   CI (99.9%): [69.000, 69.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.45% complete, ETA 00:20:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 207748.665 ops/s
[info] # Warmup Iteration   2: 304634.308 ops/s
[info] # Warmup Iteration   3: 310870.291 ops/s
[info] # Warmup Iteration   4: 312017.348 ops/s
[info] # Warmup Iteration   5: 311428.465 ops/s
[info] Iteration   1: 314787.035 ops/s
[info]                  ·gc.alloc.rate:      424.096 MB/sec
[info]                  ·gc.alloc.rate.norm: 2120.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 307782.415 ops/s
[info]                  ·gc.alloc.rate:            414.658 MB/sec
[info]                  ·gc.alloc.rate.norm:       2120.380 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3447.179 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 309188.056 ops/s
[info]                  ·gc.alloc.rate:            418.062 MB/sec
[info]                  ·gc.alloc.rate.norm:       2128.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.153 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3431.595 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 315141.941 ops/s
[info]                  ·gc.alloc.rate:      424.580 MB/sec
[info]                  ·gc.alloc.rate.norm: 2120.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 305711.424 ops/s
[info]                  ·gc.alloc.rate:            411.917 MB/sec
[info]                  ·gc.alloc.rate.norm:       2120.704 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.105 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3470.550 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   310522.174 ±(99.9%) 16332.445 ops/s [Average]
[info]   (min, avg, max) = (305711.424, 310522.174, 315141.941), stdev = 4241.484
[info]   CI (99.9%): [294189.729, 326854.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   418.663 ±(99.9%) 21.650 MB/sec [Average]
[info]   (min, avg, max) = (411.917, 418.663, 424.580), stdev = 5.623
[info]   CI (99.9%): [397.012, 440.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2121.824 ±(99.9%) 13.412 B/op [Average]
[info]   (min, avg, max) = (2120.002, 2121.824, 2128.032), stdev = 3.483
[info]   CI (99.9%): [2108.412, 2135.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.476 ±(99.9%) 1421.792 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.476, 674.153), stdev = 369.235
[info]   CI (99.9%): [≈ 0, 1826.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2069.865 ±(99.9%) 7276.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2069.865, 3470.550), stdev = 1889.570
[info]   CI (99.9%): [≈ 0, 9345.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 8.000), stdev = 4.219
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.68% complete, ETA 00:20:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 243823.414 ops/s
[info] # Warmup Iteration   2: 329792.425 ops/s
[info] # Warmup Iteration   3: 342400.559 ops/s
[info] # Warmup Iteration   4: 342484.395 ops/s
[info] # Warmup Iteration   5: 340556.177 ops/s
[info] Iteration   1: 341269.162 ops/s
[info]                  ·gc.alloc.rate:      3.675 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.949 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 341188.106 ops/s
[info]                  ·gc.alloc.rate:      4.083 MB/sec
[info]                  ·gc.alloc.rate.norm: 18.838 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 341544.875 ops/s
[info]                  ·gc.alloc.rate:      3.472 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 341378.688 ops/s
[info]                  ·gc.alloc.rate:      3.471 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 341156.267 ops/s
[info]                  ·gc.alloc.rate:      3.468 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   341307.420 ±(99.9%) 608.873 ops/s [Average]
[info]   (min, avg, max) = (341156.267, 341307.420, 341544.875), stdev = 158.122
[info]   CI (99.9%): [340698.546, 341916.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   3.634 ±(99.9%) 1.026 MB/sec [Average]
[info]   (min, avg, max) = (3.468, 3.634, 4.083), stdev = 0.267
[info]   CI (99.9%): [2.608, 4.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.758 ±(99.9%) 4.747 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.758, 18.838), stdev = 1.233
[info]   CI (99.9%): [12.011, 21.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.91% complete, ETA 00:19:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5144.370 ops/s
[info] # Warmup Iteration   2: 40122.470 ops/s
[info] # Warmup Iteration   3: 43980.044 ops/s
[info] # Warmup Iteration   4: 44100.909 ops/s
[info] # Warmup Iteration   5: 44793.230 ops/s
[info] Iteration   1: 44249.160 ops/s
[info]                  ·gc.alloc.rate:            1088.272 MB/sec
[info]                  ·gc.alloc.rate.norm:       38707.762 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.608 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47860.709 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   2: 43809.846 ops/s
[info]                  ·gc.alloc.rate:            1079.998 MB/sec
[info]                  ·gc.alloc.rate.norm:       38785.823 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48339.119 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 44909.493 ops/s
[info]                  ·gc.alloc.rate:            1104.824 MB/sec
[info]                  ·gc.alloc.rate.norm:       38716.131 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.840 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23578.194 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 44346.160 ops/s
[info]                  ·gc.alloc.rate:                   1090.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              38704.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.530 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        47754.961 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 118.205 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   5: 44467.494 ops/s
[info]                  ·gc.alloc.rate:                   1093.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              38711.892 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.545 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        47906.881 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 141.457 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   44356.430 ±(99.9%) 1526.454 ops/s [Average]
[info]   (min, avg, max) = (43809.846, 44356.430, 44909.493), stdev = 396.415
[info]   CI (99.9%): [42829.977, 45882.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1091.472 ±(99.9%) 34.778 MB/sec [Average]
[info]   (min, avg, max) = (1079.998, 1091.472, 1104.824), stdev = 9.032
[info]   CI (99.9%): [1056.694, 1126.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   38725.123 ±(99.9%) 131.819 B/op [Average]
[info]   (min, avg, max) = (38704.009, 38725.123, 38785.823), stdev = 34.233
[info]   CI (99.9%): [38593.304, 38856.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1212.707 ±(99.9%) 1162.178 MB/sec [Average]
[info]   (min, avg, max) = (672.840, 1212.707, 1353.545), stdev = 301.814
[info]   CI (99.9%): [50.529, 2374.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   43087.973 ±(99.9%) 42005.021 B/op [Average]
[info]   (min, avg, max) = (23578.194, 43087.973, 48339.119), stdev = 10908.571
[info]   CI (99.9%): [1082.952, 85092.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 7.780 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 3.997), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 9.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   51.933 ±(99.9%) 275.649 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.933, 141.457), stdev = 71.585
[info]   CI (99.9%): [≈ 0, 327.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   80.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 16.000, 20.000), stdev = 4.637
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 83.14% complete, ETA 00:19:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21303.298 ops/s
[info] # Warmup Iteration   2: 59034.867 ops/s
[info] # Warmup Iteration   3: 61222.471 ops/s
[info] # Warmup Iteration   4: 60899.361 ops/s
[info] # Warmup Iteration   5: 60735.946 ops/s
[info] Iteration   1: 61917.821 ops/s
[info]                  ·gc.alloc.rate:            1313.876 MB/sec
[info]                  ·gc.alloc.rate.norm:       33400.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34271.284 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 61678.581 ops/s
[info]                  ·gc.alloc.rate:            1309.066 MB/sec
[info]                  ·gc.alloc.rate.norm:       33400.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34403.505 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 54773.762 ops/s
[info]                  ·gc.alloc.rate:                   1162.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              33412.750 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        38797.159 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 133.981 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 60291.453 ops/s
[info]                  ·gc.alloc.rate:                   1287.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              33616.398 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        35473.625 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 86.945 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 62963.828 ops/s
[info]                  ·gc.alloc.rate:                                  1336.306 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33400.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.210 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       34068.896 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   60325.089 ±(99.9%) 12499.780 ops/s [Average]
[info]   (min, avg, max) = (54773.762, 60325.089, 62963.828), stdev = 3246.153
[info]   CI (99.9%): [47825.309, 72824.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1281.898 ±(99.9%) 265.108 MB/sec [Average]
[info]   (min, avg, max) = (1162.703, 1281.898, 1336.306), stdev = 68.848
[info]   CI (99.9%): [1016.790, 1547.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   33445.834 ±(99.9%) 367.766 B/op [Average]
[info]   (min, avg, max) = (33400.007, 33445.834, 33616.398), stdev = 95.508
[info]   CI (99.9%): [33078.067, 33813.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.014 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.042 ±(99.9%) 0.362 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.210), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1353.672 ±(99.9%) 26.157 MB/sec [Average]
[info]   (min, avg, max) = (1348.150, 1353.672, 1363.067), stdev = 6.793
[info]   CI (99.9%): [1327.514, 1379.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   35402.894 ±(99.9%) 7600.733 B/op [Average]
[info]   (min, avg, max) = (34068.896, 35402.894, 38797.159), stdev = 1973.886
[info]   CI (99.9%): [27802.161, 43003.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.598 ±(99.9%) 8.621 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.598, 4.662), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   44.185 ±(99.9%) 241.616 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.185, 133.981), stdev = 62.747
[info]   CI (99.9%): [≈ 0, 285.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.600, 16.000), stdev = 5.771
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.37% complete, ETA 00:19:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34880.727 ops/s
[info] # Warmup Iteration   2: 94739.881 ops/s
[info] # Warmup Iteration   3: 102197.409 ops/s
[info] # Warmup Iteration   4: 104697.894 ops/s
[info] # Warmup Iteration   5: 104319.240 ops/s
[info] Iteration   1: 104095.379 ops/s
[info]                  ·gc.alloc.rate:            716.741 MB/sec
[info]                  ·gc.alloc.rate.norm:       10836.363 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10172.429 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 104363.361 ops/s
[info]                  ·gc.alloc.rate:            701.376 MB/sec
[info]                  ·gc.alloc.rate.norm:       10574.588 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10146.213 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 104421.042 ops/s
[info]                  ·gc.alloc.rate:            701.373 MB/sec
[info]                  ·gc.alloc.rate.norm:       10568.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10140.773 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 104336.145 ops/s
[info]                  ·gc.alloc.rate:            700.681 MB/sec
[info]                  ·gc.alloc.rate.norm:       10568.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.883 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10148.741 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 104054.353 ops/s
[info]                  ·gc.alloc.rate:            698.669 MB/sec
[info]                  ·gc.alloc.rate.norm:       10568.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.789 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10176.534 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   104254.056 ±(99.9%) 643.270 ops/s [Average]
[info]   (min, avg, max) = (104054.353, 104254.056, 104421.042), stdev = 167.055
[info]   CI (99.9%): [103610.786, 104897.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   703.768 ±(99.9%) 28.249 MB/sec [Average]
[info]   (min, avg, max) = (698.669, 703.768, 716.741), stdev = 7.336
[info]   CI (99.9%): [675.519, 732.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   10622.993 ±(99.9%) 459.428 B/op [Average]
[info]   (min, avg, max) = (10568.004, 10622.993, 10836.363), stdev = 119.312
[info]   CI (99.9%): [10163.565, 11082.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.896 ±(99.9%) 0.366 MB/sec [Average]
[info]   (min, avg, max) = (672.789, 672.896, 673.019), stdev = 0.095
[info]   CI (99.9%): [672.530, 673.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   10156.938 ±(99.9%) 62.905 B/op [Average]
[info]   (min, avg, max) = (10140.773, 10156.938, 10176.534), stdev = 16.336
[info]   CI (99.9%): [10094.033, 10219.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.60% complete, ETA 00:19:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 150199.838 ops/s
[info] # Warmup Iteration   2: 217969.192 ops/s
[info] # Warmup Iteration   3: 226418.166 ops/s
[info] # Warmup Iteration   4: 206995.235 ops/s
[info] # Warmup Iteration   5: 227360.258 ops/s
[info] Iteration   1: 211665.690 ops/s
[info]                  ·gc.alloc.rate:            871.295 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5012.536 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 227786.788 ops/s
[info]                  ·gc.alloc.rate:            939.327 MB/sec
[info]                  ·gc.alloc.rate.norm:       6490.475 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.184 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9315.562 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 220066.972 ops/s
[info]                  ·gc.alloc.rate:            905.943 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4821.192 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 231745.667 ops/s
[info]                  ·gc.alloc.rate:            964.858 MB/sec
[info]                  ·gc.alloc.rate.norm:       6553.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4578.223 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 233818.325 ops/s
[info]                  ·gc.alloc.rate:            963.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       6481.540 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9075.707 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   225016.688 ±(99.9%) 35142.810 ops/s [Average]
[info]   (min, avg, max) = (211665.690, 225016.688, 233818.325), stdev = 9126.476
[info]   CI (99.9%): [189873.878, 260159.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   928.941 ±(99.9%) 154.376 MB/sec [Average]
[info]   (min, avg, max) = (871.295, 928.941, 964.858), stdev = 40.091
[info]   CI (99.9%): [774.565, 1083.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6497.012 ±(99.9%) 121.767 B/op [Average]
[info]   (min, avg, max) = (6480.002, 6497.012, 6553.040), stdev = 31.623
[info]   CI (99.9%): [6375.245, 6618.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   943.823 ±(99.9%) 1422.517 MB/sec [Average]
[info]   (min, avg, max) = (673.981, 943.823, 1348.827), stdev = 369.423
[info]   CI (99.9%): [≈ 0, 2366.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   6560.644 ±(99.9%) 9287.047 B/op [Average]
[info]   (min, avg, max) = (4578.223, 6560.644, 9315.562), stdev = 2411.817
[info]   CI (99.9%): [≈ 0, 15847.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.200, 16.000), stdev = 4.382
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.83% complete, ETA 00:18:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 755.577 ops/s
[info] # Warmup Iteration   2: 18453.167 ops/s
[info] # Warmup Iteration   3: 20299.093 ops/s
[info] # Warmup Iteration   4: 20871.237 ops/s
[info] # Warmup Iteration   5: 20555.374 ops/s
[info] Iteration   1: 21068.217 ops/s
[info]                  ·gc.alloc.rate:            1041.679 MB/sec
[info]                  ·gc.alloc.rate.norm:       77825.987 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50259.195 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 20782.227 ops/s
[info]                  ·gc.alloc.rate:            1024.824 MB/sec
[info]                  ·gc.alloc.rate.norm:       77601.611 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 101901.449 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   3: 20615.621 ops/s
[info]                  ·gc.alloc.rate:            1018.589 MB/sec
[info]                  ·gc.alloc.rate.norm:       77755.384 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.648 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 102721.800 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   4: 20915.909 ops/s
[info]                  ·gc.alloc.rate:            1030.129 MB/sec
[info]                  ·gc.alloc.rate.norm:       77508.329 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.826 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50624.367 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 20948.751 ops/s
[info]                  ·gc.alloc.rate:                   1033.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              77617.927 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        101339.493 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 350.309 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   20866.145 ±(99.9%) 666.779 ops/s [Average]
[info]   (min, avg, max) = (20615.621, 20866.145, 21068.217), stdev = 173.160
[info]   CI (99.9%): [20199.366, 21532.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1029.691 ±(99.9%) 33.535 MB/sec [Average]
[info]   (min, avg, max) = (1018.589, 1029.691, 1041.679), stdev = 8.709
[info]   CI (99.9%): [996.156, 1063.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   77661.847 ±(99.9%) 490.169 B/op [Average]
[info]   (min, avg, max) = (77508.329, 77661.847, 77825.987), stdev = 127.295
[info]   CI (99.9%): [77171.679, 78152.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1077.184 ±(99.9%) 1421.599 MB/sec [Average]
[info]   (min, avg, max) = (672.705, 1077.184, 1349.011), stdev = 369.185
[info]   CI (99.9%): [≈ 0, 2498.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   81369.261 ±(99.9%) 108732.062 B/op [Average]
[info]   (min, avg, max) = (50259.195, 81369.261, 102721.800), stdev = 28237.371
[info]   CI (99.9%): [≈ 0, 190101.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   70.062 ±(99.9%) 603.254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 70.062, 350.309), stdev = 156.663
[info]   CI (99.9%): [≈ 0, 673.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   76.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 15.200, 20.000), stdev = 5.020
[info]   CI (99.9%): [76.000, 76.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.06% complete, ETA 00:18:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47763.874 ops/s
[info] # Warmup Iteration   2: 126541.494 ops/s
[info] # Warmup Iteration   3: 132593.222 ops/s
[info] # Warmup Iteration   4: 133083.027 ops/s
[info] # Warmup Iteration   5: 130711.115 ops/s
[info] Iteration   1: 132733.978 ops/s
[info]                  ·gc.alloc.rate:            684.753 MB/sec
[info]                  ·gc.alloc.rate.norm:       8120.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.766 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7977.866 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 132823.794 ops/s
[info]                  ·gc.alloc.rate:            685.423 MB/sec
[info]                  ·gc.alloc.rate.norm:       8120.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7972.461 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 133234.457 ops/s
[info]                  ·gc.alloc.rate:            688.128 MB/sec
[info]                  ·gc.alloc.rate.norm:       8127.622 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.914 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7947.931 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 133055.221 ops/s
[info]                  ·gc.alloc.rate:            686.395 MB/sec
[info]                  ·gc.alloc.rate.norm:       8120.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7958.502 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 131776.445 ops/s
[info]                  ·gc.alloc.rate:            679.800 MB/sec
[info]                  ·gc.alloc.rate.norm:       8120.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8035.248 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   132724.779 ±(99.9%) 2176.712 ops/s [Average]
[info]   (min, avg, max) = (131776.445, 132724.779, 133234.457), stdev = 565.285
[info]   CI (99.9%): [130548.067, 134901.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   684.900 ±(99.9%) 12.018 MB/sec [Average]
[info]   (min, avg, max) = (679.800, 684.900, 688.128), stdev = 3.121
[info]   CI (99.9%): [672.882, 696.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   8121.527 ±(99.9%) 13.120 B/op [Average]
[info]   (min, avg, max) = (8120.003, 8121.527, 8127.622), stdev = 3.407
[info]   CI (99.9%): [8108.408, 8134.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.819 ±(99.9%) 0.444 MB/sec [Average]
[info]   (min, avg, max) = (672.704, 672.819, 672.969), stdev = 0.115
[info]   CI (99.9%): [672.375, 673.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7978.402 ±(99.9%) 130.462 B/op [Average]
[info]   (min, avg, max) = (7947.931, 7978.402, 8035.248), stdev = 33.881
[info]   CI (99.9%): [7847.940, 8108.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.30% complete, ETA 00:18:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 269373.322 ops/s
[info] # Warmup Iteration   2: 415200.873 ops/s
[info] # Warmup Iteration   3: 425960.662 ops/s
[info] # Warmup Iteration   4: 431269.673 ops/s
[info] # Warmup Iteration   5: 418806.936 ops/s
[info] Iteration   1: 429122.844 ops/s
[info]                  ·gc.alloc.rate:            1256.175 MB/sec
[info]                  ·gc.alloc.rate.norm:       4608.128 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4944.903 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 425633.880 ops/s
[info]                  ·gc.alloc.rate:            1249.477 MB/sec
[info]                  ·gc.alloc.rate.norm:       4620.161 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4985.419 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 425149.098 ops/s
[info]                  ·gc.alloc.rate:                   1246.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              4613.412 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.299 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4991.141 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.864 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 427972.771 ops/s
[info]                  ·gc.alloc.rate:                   1253.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              4608.820 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.613 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4985.065 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.148 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 433019.858 ops/s
[info]                  ·gc.alloc.rate:                                  1267.627 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4608.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.119 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4953.548 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   428179.690 ±(99.9%) 12180.642 ops/s [Average]
[info]   (min, avg, max) = (425149.098, 428179.690, 433019.858), stdev = 3163.274
[info]   CI (99.9%): [415999.048, 440360.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1254.568 ±(99.9%) 31.617 MB/sec [Average]
[info]   (min, avg, max) = (1246.260, 1254.568, 1267.627), stdev = 8.211
[info]   CI (99.9%): [1222.951, 1286.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4611.705 ±(99.9%) 20.125 B/op [Average]
[info]   (min, avg, max) = (4608.001, 4611.705, 4620.161), stdev = 5.227
[info]   CI (99.9%): [4591.579, 4631.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.024 ±(99.9%) 0.205 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.119), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1352.567 ±(99.9%) 25.064 MB/sec [Average]
[info]   (min, avg, max) = (1347.980, 1352.567, 1362.684), stdev = 6.509
[info]   CI (99.9%): [1327.503, 1377.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4972.015 ±(99.9%) 81.499 B/op [Average]
[info]   (min, avg, max) = (4944.903, 4972.015, 4991.141), stdev = 21.165
[info]   CI (99.9%): [4890.516, 5053.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 8.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 4.663), stdev = 2.128
[info]   CI (99.9%): [≈ 0, 9.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.402 ±(99.9%) 30.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.402, 17.148), stdev = 7.833
[info]   CI (99.9%): [≈ 0, 35.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   60.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.000, 16.000), stdev = 5.874
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.53% complete, ETA 00:18:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 320610.751 ops/s
[info] # Warmup Iteration   2: 466204.300 ops/s
[info] # Warmup Iteration   3: 462216.511 ops/s
[info] # Warmup Iteration   4: 476795.584 ops/s
[info] # Warmup Iteration   5: 470534.435 ops/s
[info] Iteration   1: 475235.324 ops/s
[info]                  ·gc.alloc.rate:            871.924 MB/sec
[info]                  ·gc.alloc.rate.norm:       2888.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2232.557 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 473237.315 ops/s
[info]                  ·gc.alloc.rate:            870.134 MB/sec
[info]                  ·gc.alloc.rate.norm:       2893.554 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.194 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2241.972 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 471998.517 ops/s
[info]                  ·gc.alloc.rate:            867.159 MB/sec
[info]                  ·gc.alloc.rate.norm:       2891.913 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4495.826 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   4: 476573.385 ops/s
[info]                  ·gc.alloc.rate:            874.498 MB/sec
[info]                  ·gc.alloc.rate.norm:       2888.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2226.257 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 478755.992 ops/s
[info]                  ·gc.alloc.rate:            878.590 MB/sec
[info]                  ·gc.alloc.rate.norm:       2888.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.190 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2216.122 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   475160.107 ±(99.9%) 10301.135 ops/s [Average]
[info]   (min, avg, max) = (471998.517, 475160.107, 478755.992), stdev = 2675.172
[info]   CI (99.9%): [464858.972, 485461.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   872.461 ±(99.9%) 16.731 MB/sec [Average]
[info]   (min, avg, max) = (867.159, 872.461, 878.590), stdev = 4.345
[info]   CI (99.9%): [855.730, 889.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2889.894 ±(99.9%) 10.229 B/op [Average]
[info]   (min, avg, max) = (2888.001, 2889.894, 2893.554), stdev = 2.656
[info]   CI (99.9%): [2879.665, 2900.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   808.929 ±(99.9%) 1160.614 MB/sec [Average]
[info]   (min, avg, max) = (674.037, 808.929, 1348.104), stdev = 301.408
[info]   CI (99.9%): [≈ 0, 1969.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   2682.547 ±(99.9%) 3903.389 B/op [Average]
[info]   (min, avg, max) = (2216.122, 2682.547, 4495.826), stdev = 1013.698
[info]   CI (99.9%): [≈ 0, 6585.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.400, 16.000), stdev = 3.715
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.76% complete, ETA 00:17:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11482.792 ops/s
[info] # Warmup Iteration   2: 49847.709 ops/s
[info] # Warmup Iteration   3: 53590.451 ops/s
[info] # Warmup Iteration   4: 53705.140 ops/s
[info] # Warmup Iteration   5: 54041.121 ops/s
[info] Iteration   1: 53533.350 ops/s
[info]                  ·gc.alloc.rate:            1009.352 MB/sec
[info]                  ·gc.alloc.rate.norm:       29676.716 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.550 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39561.515 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 53472.999 ops/s
[info]                  ·gc.alloc.rate:            1007.317 MB/sec
[info]                  ·gc.alloc.rate.norm:       29651.155 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19802.580 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 52298.613 ops/s
[info]                  ·gc.alloc.rate:            985.740 MB/sec
[info]                  ·gc.alloc.rate.norm:       29664.897 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.558 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40493.300 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   4: 52819.312 ops/s
[info]                  ·gc.alloc.rate:            994.913 MB/sec
[info]                  ·gc.alloc.rate.norm:       29648.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20046.598 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 52262.958 ops/s
[info]                  ·gc.alloc.rate:                   990.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              29821.253 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        40602.981 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 120.365 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   52877.446 ±(99.9%) 2358.748 ops/s [Average]
[info]   (min, avg, max) = (52262.958, 52877.446, 53533.350), stdev = 612.559
[info]   CI (99.9%): [50518.699, 55236.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   997.489 ±(99.9%) 40.215 MB/sec [Average]
[info]   (min, avg, max) = (985.740, 997.489, 1009.352), stdev = 10.444
[info]   CI (99.9%): [957.274, 1037.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   29692.406 ±(99.9%) 280.841 B/op [Average]
[info]   (min, avg, max) = (29648.008, 29692.406, 29821.253), stdev = 72.934
[info]   CI (99.9%): [29411.564, 29973.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1076.931 ±(99.9%) 1420.845 MB/sec [Average]
[info]   (min, avg, max) = (672.713, 1076.931, 1348.096), stdev = 368.989
[info]   CI (99.9%): [≈ 0, 2497.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   32101.395 ±(99.9%) 42832.829 B/op [Average]
[info]   (min, avg, max) = (19802.580, 32101.395, 40602.981), stdev = 11123.550
[info]   CI (99.9%): [≈ 0, 74934.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   24.073 ±(99.9%) 207.275 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.073, 120.365), stdev = 53.829
[info]   CI (99.9%): [≈ 0, 231.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   73.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 14.600, 20.000), stdev = 5.320
[info]   CI (99.9%): [73.000, 73.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.99% complete, ETA 00:17:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42010.793 ops/s
[info] # Warmup Iteration   2: 82370.129 ops/s
[info] # Warmup Iteration   3: 85996.981 ops/s
[info] # Warmup Iteration   4: 86969.950 ops/s
[info] # Warmup Iteration   5: 86310.002 ops/s
[info] Iteration   1: 86401.882 ops/s
[info]                  ·gc.alloc.rate:                   1300.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              23688.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24544.909 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.133 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 86848.699 ops/s
[info]                  ·gc.alloc.rate:            1310.656 MB/sec
[info]                  ·gc.alloc.rate.norm:       23744.307 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24420.580 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 88733.886 ops/s
[info]                  ·gc.alloc.rate:                   1335.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              23690.509 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.224 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        23948.615 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 82.704 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 89489.775 ops/s
[info]                  ·gc.alloc.rate:                   1347.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              23690.471 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        23899.168 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 58.576 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 88007.574 ops/s
[info]                  ·gc.alloc.rate:            1335.190 MB/sec
[info]                  ·gc.alloc.rate.norm:       23880.386 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24373.852 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   87896.363 ±(99.9%) 4940.186 ops/s [Average]
[info]   (min, avg, max) = (86401.882, 87896.363, 89489.775), stdev = 1282.951
[info]   CI (99.9%): [82956.177, 92836.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1325.735 ±(99.9%) 75.222 MB/sec [Average]
[info]   (min, avg, max) = (1300.108, 1325.735, 1347.047), stdev = 19.535
[info]   CI (99.9%): [1250.513, 1400.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   23738.736 ±(99.9%) 318.258 B/op [Average]
[info]   (min, avg, max) = (23688.007, 23738.736, 23880.386), stdev = 82.651
[info]   CI (99.9%): [23420.478, 24056.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1353.408 ±(99.9%) 27.023 MB/sec [Average]
[info]   (min, avg, max) = (1347.139, 1353.408, 1362.780), stdev = 7.018
[info]   CI (99.9%): [1326.386, 1380.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   24237.425 ±(99.9%) 1130.106 B/op [Average]
[info]   (min, avg, max) = (23899.168, 24237.425, 24544.909), stdev = 293.485
[info]   CI (99.9%): [23107.319, 25367.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 8.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.138
[info]   CI (99.9%): [≈ 0, 9.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   30.683 ±(99.9%) 145.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.683, 82.704), stdev = 37.786
[info]   CI (99.9%): [≈ 0, 176.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 11.000, 16.000), stdev = 5.657
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.22% complete, ETA 00:17:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35794.839 ops/s
[info] # Warmup Iteration   2: 131758.188 ops/s
[info] # Warmup Iteration   3: 137246.746 ops/s
[info] # Warmup Iteration   4: 145507.856 ops/s
[info] # Warmup Iteration   5: 144902.850 ops/s
[info] Iteration   1: 146417.678 ops/s
[info]                  ·gc.alloc.rate:      611.965 MB/sec
[info]                  ·gc.alloc.rate.norm: 6576.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 144478.938 ops/s
[info]                  ·gc.alloc.rate:            603.806 MB/sec
[info]                  ·gc.alloc.rate.norm:       6576.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7329.350 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 144787.701 ops/s
[info]                  ·gc.alloc.rate:            605.527 MB/sec
[info]                  ·gc.alloc.rate.norm:       6582.331 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.809 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7313.710 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 144958.530 ops/s
[info]                  ·gc.alloc.rate:            605.606 MB/sec
[info]                  ·gc.alloc.rate.norm:       6576.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7305.033 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 144824.764 ops/s
[info]                  ·gc.alloc.rate:            605.362 MB/sec
[info]                  ·gc.alloc.rate.norm:       6579.543 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7311.690 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   145093.522 ±(99.9%) 2929.454 ops/s [Average]
[info]   (min, avg, max) = (144478.938, 145093.522, 146417.678), stdev = 760.770
[info]   CI (99.9%): [142164.068, 148022.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   606.453 ±(99.9%) 12.200 MB/sec [Average]
[info]   (min, avg, max) = (603.806, 606.453, 611.965), stdev = 3.168
[info]   CI (99.9%): [594.253, 618.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6577.977 ±(99.9%) 11.076 B/op [Average]
[info]   (min, avg, max) = (6576.003, 6577.977, 6582.331), stdev = 2.876
[info]   CI (99.9%): [6566.901, 6589.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.251 ±(99.9%) 1158.626 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.251, 672.978), stdev = 300.892
[info]   CI (99.9%): [≈ 0, 1696.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   5851.957 ±(99.9%) 12596.825 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5851.957, 7329.350), stdev = 3271.355
[info]   CI (99.9%): [≈ 0, 18448.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.800, 10.000), stdev = 4.382
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.45% complete, ETA 00:16:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149626.159 ops/s
[info] # Warmup Iteration   2: 211158.535 ops/s
[info] # Warmup Iteration   3: 223008.883 ops/s
[info] # Warmup Iteration   4: 222668.037 ops/s
[info] # Warmup Iteration   5: 223758.619 ops/s
[info] Iteration   1: 224249.976 ops/s
[info]                  ·gc.alloc.rate:            799.276 MB/sec
[info]                  ·gc.alloc.rate.norm:       5609.197 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.187 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4731.339 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 219265.198 ops/s
[info]                  ·gc.alloc.rate:            790.114 MB/sec
[info]                  ·gc.alloc.rate.norm:       5666.940 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1344.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9645.409 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   3: 222815.919 ops/s
[info]                  ·gc.alloc.rate:            795.444 MB/sec
[info]                  ·gc.alloc.rate.norm:       5616.762 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4761.336 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 222955.965 ops/s
[info]                  ·gc.alloc.rate:            794.485 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4758.646 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 223050.350 ops/s
[info]                  ·gc.alloc.rate:            794.687 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4756.683 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   222467.482 ±(99.9%) 7237.692 ops/s [Average]
[info]   (min, avg, max) = (219265.198, 222467.482, 224249.976), stdev = 1879.606
[info]   CI (99.9%): [215229.790, 229705.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   794.801 ±(99.9%) 12.554 MB/sec [Average]
[info]   (min, avg, max) = (790.114, 794.801, 799.276), stdev = 3.260
[info]   CI (99.9%): [782.247, 807.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5621.781 ±(99.9%) 98.222 B/op [Average]
[info]   (min, avg, max) = (5608.002, 5621.781, 5666.940), stdev = 25.508
[info]   CI (99.9%): [5523.558, 5720.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.301 ±(99.9%) 1154.882 MB/sec [Average]
[info]   (min, avg, max) = (674.050, 808.301, 1344.813), stdev = 299.919
[info]   CI (99.9%): [≈ 0, 1963.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5730.682 ±(99.9%) 8426.871 B/op [Average]
[info]   (min, avg, max) = (4731.339, 5730.682, 9645.409), stdev = 2188.432
[info]   CI (99.9%): [≈ 0, 14157.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.400, 17.000), stdev = 4.278
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.68% complete, ETA 00:16:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15123.623 ops/s
[info] # Warmup Iteration   2: 49789.896 ops/s
[info] # Warmup Iteration   3: 47015.740 ops/s
[info] # Warmup Iteration   4: 51362.072 ops/s
[info] # Warmup Iteration   5: 52459.513 ops/s
[info] Iteration   1: 53253.449 ops/s
[info]                  ·gc.alloc.rate:                   1946.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              57549.623 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2025.932 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        59890.503 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.326 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 216.567 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 53671.233 ops/s
[info]                  ·gc.alloc.rate:                   1972.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              57842.245 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1361.576 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        39926.405 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.067 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 53787.321 ops/s
[info]                  ·gc.alloc.rate:                                  1972.357 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57705.034 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.346 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.121 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.573 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59817.832 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 54324.984 ops/s
[info]                  ·gc.alloc.rate:                                  1985.391 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57528.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59227.735 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 52772.019 ops/s
[info]                  ·gc.alloc.rate:                                  1929.145 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57539.817 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.187 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.202 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60971.575 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   53561.801 ±(99.9%) 2248.690 ops/s [Average]
[info]   (min, avg, max) = (52772.019, 53561.801, 54324.984), stdev = 583.978
[info]   CI (99.9%): [51313.111, 55810.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1961.237 ±(99.9%) 87.699 MB/sec [Average]
[info]   (min, avg, max) = (1929.145, 1961.237, 1985.391), stdev = 22.775
[info]   CI (99.9%): [1873.538, 2048.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57632.945 ±(99.9%) 529.484 B/op [Average]
[info]   (min, avg, max) = (57528.008, 57632.945, 57842.245), stdev = 137.505
[info]   CI (99.9%): [57103.461, 58162.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.071 ±(99.9%) 0.592 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.346), stdev = 0.154
[info]   CI (99.9%): [≈ 0, 0.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.081 ±(99.9%) 17.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.081, 10.121), stdev = 4.495
[info]   CI (99.9%): [≈ 0, 19.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1904.067 ±(99.9%) 1168.153 MB/sec [Average]
[info]   (min, avg, max) = (1361.576, 1904.067, 2044.573), stdev = 303.366
[info]   CI (99.9%): [735.914, 3072.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   55966.810 ±(99.9%) 34613.072 B/op [Average]
[info]   (min, avg, max) = (39926.405, 55966.810, 60971.575), stdev = 8988.905
[info]   CI (99.9%): [21353.738, 90579.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 12.245 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 7.326), stdev = 3.180
[info]   CI (99.9%): [≈ 0, 13.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   51.127 ±(99.9%) 362.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.127, 216.567), stdev = 94.018
[info]   CI (99.9%): [≈ 0, 413.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.000, 20.000), stdev = 6.745
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.91% complete, ETA 00:16:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75056.486 ops/s
[info] # Warmup Iteration   2: 171552.467 ops/s
[info] # Warmup Iteration   3: 175152.732 ops/s
[info] # Warmup Iteration   4: 171890.207 ops/s
[info] # Warmup Iteration   5: 172463.334 ops/s
[info] Iteration   1: 168376.842 ops/s
[info]                  ·gc.alloc.rate:                   798.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              7461.700 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.247 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6295.005 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.227 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 175563.461 ops/s
[info]                  ·gc.alloc.rate:            826.846 MB/sec
[info]                  ·gc.alloc.rate.norm:       7410.483 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6043.494 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 170328.891 ops/s
[info]                  ·gc.alloc.rate:            801.795 MB/sec
[info]                  ·gc.alloc.rate.norm:       7408.602 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6229.067 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 173909.328 ops/s
[info]                  ·gc.alloc.rate:                   822.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              7441.877 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.262 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12190.080 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 172215.788 ops/s
[info]                  ·gc.alloc.rate:            810.706 MB/sec
[info]                  ·gc.alloc.rate.norm:       7408.966 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.163 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6161.111 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   172078.862 ±(99.9%) 10938.665 ops/s [Average]
[info]   (min, avg, max) = (168376.842, 172078.862, 175563.461), stdev = 2840.736
[info]   CI (99.9%): [161140.197, 183017.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   811.971 ±(99.9%) 48.382 MB/sec [Average]
[info]   (min, avg, max) = (798.024, 811.971, 826.846), stdev = 12.565
[info]   CI (99.9%): [763.589, 860.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7426.325 ±(99.9%) 93.525 B/op [Average]
[info]   (min, avg, max) = (7408.602, 7426.325, 7461.700), stdev = 24.288
[info]   CI (99.9%): [7332.801, 7519.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   808.626 ±(99.9%) 1159.456 MB/sec [Average]
[info]   (min, avg, max) = (673.247, 808.626, 1347.262), stdev = 301.107
[info]   CI (99.9%): [≈ 0, 1968.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7383.751 ±(99.9%) 10352.183 B/op [Average]
[info]   (min, avg, max) = (6043.494, 7383.751, 12190.080), stdev = 2688.429
[info]   CI (99.9%): [≈ 0, 17735.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.451 ±(99.9%) 12.926 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.451, 6.227), stdev = 3.357
[info]   CI (99.9%): [≈ 0, 15.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.600, 16.000), stdev = 3.578
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.14% complete, ETA 00:16:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 187954.344 ops/s
[info] # Warmup Iteration   2: 447131.087 ops/s
[info] # Warmup Iteration   3: 467980.599 ops/s
[info] # Warmup Iteration   4: 467327.784 ops/s
[info] # Warmup Iteration   5: 372503.766 ops/s
[info] Iteration   1: 466200.075 ops/s
[info]                  ·gc.alloc.rate:            367.238 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2271.334 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 472586.787 ops/s
[info]                  ·gc.alloc.rate:      372.342 MB/sec
[info]                  ·gc.alloc.rate.norm: 1240.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 464368.919 ops/s
[info]                  ·gc.alloc.rate:                   367.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              1245.885 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2280.220 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.258 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 473314.814 ops/s
[info]                  ·gc.alloc.rate:      372.910 MB/sec
[info]                  ·gc.alloc.rate.norm: 1240.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 469244.365 ops/s
[info]                  ·gc.alloc.rate:            369.738 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.531 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2258.836 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   469142.992 ±(99.9%) 15003.514 ops/s [Average]
[info]   (min, avg, max) = (464368.919, 469142.992, 473314.814), stdev = 3896.365
[info]   CI (99.9%): [454139.478, 484146.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   369.965 ±(99.9%) 10.083 MB/sec [Average]
[info]   (min, avg, max) = (367.238, 369.965, 372.910), stdev = 2.618
[info]   CI (99.9%): [359.882, 380.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1241.178 ±(99.9%) 10.133 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1241.178, 1245.885), stdev = 2.631
[info]   CI (99.9%): [1231.045, 1251.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.796 ±(99.9%) 1419.401 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 403.796, 673.531), stdev = 368.614
[info]   CI (99.9%): [≈ 0, 1823.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1362.078 ±(99.9%) 4787.986 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1362.078, 2280.220), stdev = 1243.425
[info]   CI (99.9%): [≈ 0, 6150.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.452 ±(99.9%) 3.888 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.452, 2.258), stdev = 1.010
[info]   CI (99.9%): [≈ 0, 4.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.600, 10.000), stdev = 5.128
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.37% complete, ETA 00:15:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 427228.835 ops/s
[info] # Warmup Iteration   2: 550831.405 ops/s
[info] # Warmup Iteration   3: 572803.727 ops/s
[info] # Warmup Iteration   4: 579727.858 ops/s
[info] # Warmup Iteration   5: 550309.881 ops/s
[info] Iteration   1: 570980.461 ops/s
[info]                  ·gc.alloc.rate:      308.348 MB/sec
[info]                  ·gc.alloc.rate.norm: 849.708 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 557834.524 ops/s
[info]                  ·gc.alloc.rate:            300.512 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1902.066 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 575907.448 ops/s
[info]                  ·gc.alloc.rate:      310.819 MB/sec
[info]                  ·gc.alloc.rate.norm: 849.363 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 574491.839 ops/s
[info]                  ·gc.alloc.rate:            310.197 MB/sec
[info]                  ·gc.alloc.rate.norm:       849.747 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.171 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1846.811 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 560710.029 ops/s
[info]                  ·gc.alloc.rate:      302.445 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.948 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   567984.860 ±(99.9%) 31638.278 ops/s [Average]
[info]   (min, avg, max) = (557834.524, 567984.860, 575907.448), stdev = 8216.360
[info]   CI (99.9%): [536346.583, 599623.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   306.464 ±(99.9%) 18.064 MB/sec [Average]
[info]   (min, avg, max) = (300.512, 306.464, 310.819), stdev = 4.691
[info]   CI (99.9%): [288.400, 324.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   849.153 ±(99.9%) 2.773 B/op [Average]
[info]   (min, avg, max) = (848.001, 849.153, 849.747), stdev = 0.720
[info]   CI (99.9%): [846.380, 851.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.644 ±(99.9%) 1421.755 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.644, 674.171), stdev = 369.225
[info]   CI (99.9%): [≈ 0, 1691.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   749.775 ±(99.9%) 3954.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 749.775, 1902.066), stdev = 1026.858
[info]   CI (99.9%): [≈ 0, 4703.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 8.000), stdev = 4.123
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.61% complete, ETA 00:15:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 464789.344 ops/s
[info] # Warmup Iteration   2: 618248.382 ops/s
[info] # Warmup Iteration   3: 624259.226 ops/s
[info] # Warmup Iteration   4: 621333.656 ops/s
[info] # Warmup Iteration   5: 618694.546 ops/s
[info] Iteration   1: 622055.836 ops/s
[info]                  ·gc.alloc.rate:      6.324 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 618573.213 ops/s
[info]                  ·gc.alloc.rate:      6.289 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 619807.781 ops/s
[info]                  ·gc.alloc.rate:      6.301 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 617756.831 ops/s
[info]                  ·gc.alloc.rate:      6.281 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 617892.811 ops/s
[info]                  ·gc.alloc.rate:      6.453 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.434 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   619217.294 ±(99.9%) 6863.452 ops/s [Average]
[info]   (min, avg, max) = (617756.831, 619217.294, 622055.836), stdev = 1782.417
[info]   CI (99.9%): [612353.842, 626080.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.329 ±(99.9%) 0.274 MB/sec [Average]
[info]   (min, avg, max) = (6.281, 6.329, 6.453), stdev = 0.071
[info]   CI (99.9%): [6.056, 6.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.087 ±(99.9%) 0.746 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.087, 16.434), stdev = 0.194
[info]   CI (99.9%): [15.341, 16.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.84% complete, ETA 00:15:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14061.518 ops/s
[info] # Warmup Iteration   2: 31699.009 ops/s
[info] # Warmup Iteration   3: 32597.295 ops/s
[info] # Warmup Iteration   4: 32437.124 ops/s
[info] # Warmup Iteration   5: 32977.721 ops/s
[info] Iteration   1: 33004.946 ops/s
[info]                  ·gc.alloc.rate:                   1590.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              75856.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.155 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        64195.938 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.764 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 32859.681 ops/s
[info]                  ·gc.alloc.rate:                   1584.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              75869.903 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2027.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        97088.598 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 350.961 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   3: 33516.959 ops/s
[info]                  ·gc.alloc.rate:                   1615.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              75862.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1362.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        63966.170 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.279 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 33305.945 ops/s
[info]                  ·gc.alloc.rate:            1605.702 MB/sec
[info]                  ·gc.alloc.rate.norm:       75875.301 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.876 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64400.879 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 33000.434 ops/s
[info]                  ·gc.alloc.rate:            1591.096 MB/sec
[info]                  ·gc.alloc.rate.norm:       75872.510 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 97499.841 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   33137.593 ±(99.9%) 1029.469 ops/s [Average]
[info]   (min, avg, max) = (32859.681, 33137.593, 33516.959), stdev = 267.350
[info]   CI (99.9%): [32108.124, 34167.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1597.399 ±(99.9%) 49.338 MB/sec [Average]
[info]   (min, avg, max) = (1584.093, 1597.399, 1615.442), stdev = 12.813
[info]   CI (99.9%): [1548.060, 1646.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75867.156 ±(99.9%) 30.611 B/op [Average]
[info]   (min, avg, max) = (75856.012, 75867.156, 75875.301), stdev = 7.950
[info]   CI (99.9%): [75836.545, 75897.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1628.582 ±(99.9%) 1432.129 MB/sec [Average]
[info]   (min, avg, max) = (1346.155, 1628.582, 2044.635), stdev = 371.919
[info]   CI (99.9%): [196.454, 3060.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   77430.285 ±(99.9%) 69829.283 B/op [Average]
[info]   (min, avg, max) = (63966.170, 77430.285, 97499.841), stdev = 18134.443
[info]   CI (99.9%): [7601.003, 147259.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 12.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 7.328), stdev = 3.146
[info]   CI (99.9%): [≈ 0, 13.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   82.801 ±(99.9%) 580.417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 82.801, 350.961), stdev = 150.732
[info]   CI (99.9%): [≈ 0, 663.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.400, 20.000), stdev = 7.829
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 87.07% complete, ETA 00:15:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106731.077 ops/s
[info] # Warmup Iteration   2: 693832.541 ops/s
[info] # Warmup Iteration   3: 762597.635 ops/s
[info] # Warmup Iteration   4: 740641.590 ops/s
[info] # Warmup Iteration   5: 789773.039 ops/s
[info] Iteration   1: 795952.334 ops/s
[info]                  ·gc.alloc.rate:                   1990.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              3936.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2663.309 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.586 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 796691.316 ops/s
[info]                  ·gc.alloc.rate:                   1992.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              3936.440 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2035.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4021.637 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.212 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 800444.692 ops/s
[info]                  ·gc.alloc.rate:                                  2003.781 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3939.799 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.121 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.238 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.468 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4019.796 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 804229.233 ops/s
[info]                  ·gc.alloc.rate:            2011.090 MB/sec
[info]                  ·gc.alloc.rate.norm:       3936.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.240 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4000.880 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 803199.324 ops/s
[info]                  ·gc.alloc.rate:            2009.005 MB/sec
[info]                  ·gc.alloc.rate.norm:       3936.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.642 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4005.915 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   800103.380 ±(99.9%) 14355.905 ops/s [Average]
[info]   (min, avg, max) = (795952.334, 800103.380, 804229.233), stdev = 3728.183
[info]   CI (99.9%): [785747.474, 814459.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2001.382 ±(99.9%) 36.339 MB/sec [Average]
[info]   (min, avg, max) = (1990.199, 2001.382, 2011.090), stdev = 9.437
[info]   CI (99.9%): [1965.043, 2037.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3936.867 ±(99.9%) 6.349 B/op [Average]
[info]   (min, avg, max) = (3936.001, 3936.867, 3939.799), stdev = 1.649
[info]   CI (99.9%): [3930.518, 3943.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.121), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.048 ±(99.9%) 0.410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.238), stdev = 0.107
[info]   CI (99.9%): [≈ 0, 0.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1903.198 ±(99.9%) 1198.040 MB/sec [Average]
[info]   (min, avg, max) = (1346.676, 1903.198, 2044.642), stdev = 311.127
[info]   CI (99.9%): [705.158, 3101.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3742.307 ±(99.9%) 2322.875 B/op [Average]
[info]   (min, avg, max) = (2663.309, 3742.307, 4021.637), stdev = 603.243
[info]   CI (99.9%): [1419.432, 6065.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.623 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.664), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.160 ±(99.9%) 17.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.160, 9.212), stdev = 4.425
[info]   CI (99.9%): [≈ 0, 20.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 15.000), stdev = 5.505
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.30% complete, ETA 00:14:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42347.309 ops/s
[info] # Warmup Iteration   2: 1371568.751 ops/s
[info] # Warmup Iteration   3: 1476437.288 ops/s
[info] # Warmup Iteration   4: 1467925.029 ops/s
[info] # Warmup Iteration   5: 1496595.023 ops/s
[info] Iteration   1: 1483211.067 ops/s
[info]                  ·gc.alloc.rate:            950.020 MB/sec
[info]                  ·gc.alloc.rate.norm:       1008.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1427.808 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   2: 1483114.682 ops/s
[info]                  ·gc.alloc.rate:            950.610 MB/sec
[info]                  ·gc.alloc.rate.norm:       1008.885 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 713.962 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1467994.305 ops/s
[info]                  ·gc.alloc.rate:            941.530 MB/sec
[info]                  ·gc.alloc.rate.norm:       1009.498 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1442.569 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   4: 1476994.743 ops/s
[info]                  ·gc.alloc.rate:            946.415 MB/sec
[info]                  ·gc.alloc.rate.norm:       1008.229 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.909 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 716.859 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1486588.779 ops/s
[info]                  ·gc.alloc.rate:            952.130 MB/sec
[info]                  ·gc.alloc.rate.norm:       1008.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.811 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 712.294 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1479580.715 ±(99.9%) 28277.566 ops/s [Average]
[info]   (min, avg, max) = (1467994.305, 1479580.715, 1486588.779), stdev = 7343.594
[info]   CI (99.9%): [1451303.149, 1507858.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   948.141 ±(99.9%) 16.362 MB/sec [Average]
[info]   (min, avg, max) = (941.530, 948.141, 952.130), stdev = 4.249
[info]   CI (99.9%): [931.779, 964.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1008.523 ±(99.9%) 2.517 B/op [Average]
[info]   (min, avg, max) = (1008.000, 1008.523, 1009.498), stdev = 0.654
[info]   CI (99.9%): [1006.006, 1011.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   941.913 ±(99.9%) 1418.882 MB/sec [Average]
[info]   (min, avg, max) = (672.723, 941.913, 1345.680), stdev = 368.479
[info]   CI (99.9%): [≈ 0, 2360.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1002.698 ±(99.9%) 1520.409 B/op [Average]
[info]   (min, avg, max) = (712.294, 1002.698, 1442.569), stdev = 394.845
[info]   CI (99.9%): [≈ 0, 2523.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   68.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.600, 20.000), stdev = 5.857
[info]   CI (99.9%): [68.000, 68.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.53% complete, ETA 00:14:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3664250.984 ops/s
[info] # Warmup Iteration   2: 6981462.106 ops/s
[info] # Warmup Iteration   3: 7314573.351 ops/s
[info] # Warmup Iteration   4: 7481381.366 ops/s
[info] # Warmup Iteration   5: 7460508.951 ops/s
[info] Iteration   1: 7456005.127 ops/s
[info]                  ·gc.alloc.rate:            227.455 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 142.439 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 7508462.901 ops/s
[info]                  ·gc.alloc.rate:      229.009 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7525668.596 ops/s
[info]                  ·gc.alloc.rate:      229.502 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7601473.970 ops/s
[info]                  ·gc.alloc.rate:            233.431 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.339 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 139.569 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 7752933.885 ops/s
[info]                  ·gc.alloc.rate:      236.448 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   7568908.896 ±(99.9%) 444062.827 ops/s [Average]
[info]   (min, avg, max) = (7456005.127, 7568908.896, 7752933.885), stdev = 115321.706
[info]   CI (99.9%): [7124846.069, 8012971.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   231.169 ±(99.9%) 14.177 MB/sec [Average]
[info]   (min, avg, max) = (227.455, 231.169, 236.448), stdev = 3.682
[info]   CI (99.9%): [216.992, 245.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.068 ±(99.9%) 0.584 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.068, 48.339), stdev = 0.152
[info]   CI (99.9%): [47.484, 48.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.789 ±(99.9%) 1422.522 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.789, 674.967), stdev = 369.424
[info]   CI (99.9%): [≈ 0, 1692.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   56.402 ±(99.9%) 297.415 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56.402, 142.439), stdev = 77.238
[info]   CI (99.9%): [≈ 0, 353.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 7.000), stdev = 3.834
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.76% complete, ETA 00:14:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4681.394 ops/s
[info] # Warmup Iteration   2: 219737.377 ops/s
[info] # Warmup Iteration   3: 302724.940 ops/s
[info] # Warmup Iteration   4: 302093.075 ops/s
[info] # Warmup Iteration   5: 312375.358 ops/s
[info] Iteration   1: 319005.666 ops/s
[info]                  ·gc.alloc.rate:                   1972.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              9734.376 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6638.949 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.433 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 322250.607 ops/s
[info]                  ·gc.alloc.rate:                   1992.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              9733.084 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2032.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9929.703 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.028 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 326128.631 ops/s
[info]                  ·gc.alloc.rate:                                  2017.520 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9735.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.452 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9865.993 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 321953.114 ops/s
[info]                  ·gc.alloc.rate:            1990.085 MB/sec
[info]                  ·gc.alloc.rate.norm:       9728.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.534 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9994.161 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 326780.644 ops/s
[info]                  ·gc.alloc.rate:                                  2020.127 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9728.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9846.673 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   323223.732 ±(99.9%) 12394.585 ops/s [Average]
[info]   (min, avg, max) = (319005.666, 323223.732, 326780.644), stdev = 3218.834
[info]   CI (99.9%): [310829.147, 335618.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1998.643 ±(99.9%) 76.901 MB/sec [Average]
[info]   (min, avg, max) = (1972.779, 1998.643, 2020.127), stdev = 19.971
[info]   CI (99.9%): [1921.742, 2075.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9731.695 ±(99.9%) 13.256 B/op [Average]
[info]   (min, avg, max) = (9728.001, 9731.695, 9735.011), stdev = 3.443
[info]   CI (99.9%): [9718.439, 9744.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.094), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.093 ±(99.9%) 0.773 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.093, 0.452), stdev = 0.201
[info]   CI (99.9%): [≈ 0, 0.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1902.477 ±(99.9%) 1199.187 MB/sec [Average]
[info]   (min, avg, max) = (1345.457, 1902.477, 2044.770), stdev = 311.425
[info]   CI (99.9%): [703.290, 3101.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   9255.096 ±(99.9%) 5635.866 B/op [Average]
[info]   (min, avg, max) = (6638.949, 9255.096, 9994.161), stdev = 1463.617
[info]   CI (99.9%): [3619.229, 14890.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.528 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 5.329), stdev = 2.474
[info]   CI (99.9%): [≈ 0, 11.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   8.492 ±(99.9%) 46.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.492, 26.028), stdev = 12.113
[info]   CI (99.9%): [≈ 0, 55.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.400, 20.000), stdev = 7.603
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.99% complete, ETA 00:13:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98261.476 ops/s
[info] # Warmup Iteration   2: 891093.700 ops/s
[info] # Warmup Iteration   3: 895128.354 ops/s
[info] # Warmup Iteration   4: 911632.050 ops/s
[info] # Warmup Iteration   5: 915674.937 ops/s
[info] Iteration   1: 907143.795 ops/s
[info]                  ·gc.alloc.rate:            1346.357 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.114 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2336.934 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 913216.617 ops/s
[info]                  ·gc.alloc.rate:            1357.287 MB/sec
[info]                  ·gc.alloc.rate.norm:       2338.471 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2321.357 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   3: 907515.453 ops/s
[info]                  ·gc.alloc.rate:                   1351.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              2343.266 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2340.368 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.086 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 926667.542 ops/s
[info]                  ·gc.alloc.rate:                   1375.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2307.949 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.657 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 929050.667 ops/s
[info]                  ·gc.alloc.rate:                                  1379.351 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2336.225 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.193 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2308.858 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   916718.815 ±(99.9%) 40372.125 ops/s [Average]
[info]   (min, avg, max) = (907143.795, 916718.815, 929050.667), stdev = 10484.513
[info]   CI (99.9%): [876346.690, 957090.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1361.924 ±(99.9%) 56.828 MB/sec [Average]
[info]   (min, avg, max) = (1346.357, 1361.924, 1379.351), stdev = 14.758
[info]   CI (99.9%): [1305.095, 1418.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2338.015 ±(99.9%) 11.971 B/op [Average]
[info]   (min, avg, max) = (2336.000, 2338.015, 2343.266), stdev = 3.109
[info]   CI (99.9%): [2326.045, 2349.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.014 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1353.162 ±(99.9%) 28.761 MB/sec [Average]
[info]   (min, avg, max) = (1346.829, 1353.162, 1363.193), stdev = 7.469
[info]   CI (99.9%): [1324.400, 1381.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2323.093 ±(99.9%) 58.555 B/op [Average]
[info]   (min, avg, max) = (2307.949, 2323.093, 2340.368), stdev = 15.207
[info]   CI (99.9%): [2264.538, 2381.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.662), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.749 ±(99.9%) 14.865 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.749, 8.086), stdev = 3.860
[info]   CI (99.9%): [≈ 0, 17.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.200, 17.000), stdev = 6.301
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.22% complete, ETA 00:13:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_bbe3575e/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 107362.766 ops/s
[info] # Warmup Iteration   2: 2163130.998 ops/s
[info] # Warmup Iteration   3: 2223750.573 ops/s
[info] # Warmup Iteration   4: 2295780.994 ops/s
[info] # Warmup Iteration   5: 2251287.390 ops/s
[info] Iteration   1: 2284544.249 ops/s
[info]                  ·gc.alloc.rate:            1081.121 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.806 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 927.032 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 2312947.507 ops/s
[info]                  ·gc.alloc.rate:            1093.305 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 457.816 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 2238747.392 ops/s
[info]                  ·gc.alloc.rate:                   1060.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              745.897 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        945.494 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.468 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   4: 2218029.210 ops/s
[info]                  ·gc.alloc.rate:            1051.552 MB/sec
[info]                  ·gc.alloc.rate.norm:       746.240 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 477.418 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 2104476.719 ops/s
[info]                  ·gc.alloc.rate:                   994.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1008.341 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.989 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2231749.015 ±(99.9%) 309348.254 ops/s [Average]
[info]   (min, avg, max) = (2104476.719, 2231749.015, 2312947.507), stdev = 80336.759
[info]   CI (99.9%): [1922400.761, 2541097.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1056.344 ±(99.9%) 146.553 MB/sec [Average]
[info]   (min, avg, max) = (994.934, 1056.344, 1093.305), stdev = 38.059
[info]   CI (99.9%): [909.790, 1202.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   744.989 ±(99.9%) 4.028 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.989, 746.240), stdev = 1.046
[info]   CI (99.9%): [740.960, 749.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1076.847 ±(99.9%) 1420.462 MB/sec [Average]
[info]   (min, avg, max) = (672.746, 1076.847, 1348.432), stdev = 368.889
[info]   CI (99.9%): [≈ 0, 2497.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   763.220 ±(99.9%) 1045.890 B/op [Average]
[info]   (min, avg, max) = (457.816, 763.220, 1008.341), stdev = 271.614
[info]   CI (99.9%): [≈ 0, 1809.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.691 ±(99.9%) 5.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.691, 2.989), stdev = 1.300
[info]   CI (99.9%): [≈ 0, 5.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   70.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 14.000, 19.000), stdev = 4.796
[info]   CI (99.9%): [70.000, 70.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.45% complete, ETA 00:13:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2472821.909 ops/s
[info] # Warmup Iteration   2: 5404867.096 ops/s
[info] # Warmup Iteration   3: 5413197.014 ops/s
[info] # Warmup Iteration   4: 5569318.415 ops/s
[info] # Warmup Iteration   5: 5538281.501 ops/s
[info] Iteration   1: 5549515.973 ops/s
[info]                  ·gc.alloc.rate:            620.536 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 191.191 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 5537792.002 ops/s
[info]                  ·gc.alloc.rate:            623.820 MB/sec
[info]                  ·gc.alloc.rate.norm:       177.281 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.166 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 191.588 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 5488667.885 ops/s
[info]                  ·gc.alloc.rate:            615.100 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.394 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 193.307 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 5616876.462 ops/s
[info]                  ·gc.alloc.rate:      628.065 MB/sec
[info]                  ·gc.alloc.rate.norm: 176.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5545677.949 ops/s
[info]                  ·gc.alloc.rate:            620.159 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 191.322 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   5547706.054 ±(99.9%) 176203.550 ops/s [Average]
[info]   (min, avg, max) = (5488667.885, 5547706.054, 5616876.462), stdev = 45759.502
[info]   CI (99.9%): [5371502.504, 5723909.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   621.536 ±(99.9%) 18.483 MB/sec [Average]
[info]   (min, avg, max) = (615.100, 621.536, 628.065), stdev = 4.800
[info]   CI (99.9%): [603.052, 640.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.337 ±(99.9%) 2.134 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.337, 177.281), stdev = 0.554
[info]   CI (99.9%): [174.203, 178.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.290 ±(99.9%) 1160.863 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.290, 674.166), stdev = 301.472
[info]   CI (99.9%): [≈ 0, 1700.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   153.482 ±(99.9%) 330.397 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 153.482, 193.307), stdev = 85.803
[info]   CI (99.9%): [≈ 0, 483.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.200, 8.000), stdev = 3.493
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.68% complete, ETA 00:13:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2417279.931 ops/s
[info] # Warmup Iteration   2: 5898435.291 ops/s
[info] # Warmup Iteration   3: 5637215.283 ops/s
[info] # Warmup Iteration   4: 5903337.412 ops/s
[info] # Warmup Iteration   5: 5920861.247 ops/s
[info] Iteration   1: 5870428.657 ops/s
[info]                  ·gc.alloc.rate:            268.527 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 180.914 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 5929577.590 ops/s
[info]                  ·gc.alloc.rate:      271.253 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5839251.013 ops/s
[info]                  ·gc.alloc.rate:            268.996 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.500 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.178 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 181.705 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 6061732.192 ops/s
[info]                  ·gc.alloc.rate:      277.724 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.090 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6076534.594 ops/s
[info]                  ·gc.alloc.rate:      277.952 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   5955504.809 ±(99.9%) 418984.667 ops/s [Average]
[info]   (min, avg, max) = (5839251.013, 5955504.809, 6076534.594), stdev = 108808.988
[info]   CI (99.9%): [5536520.142, 6374489.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   272.890 ±(99.9%) 17.841 MB/sec [Average]
[info]   (min, avg, max) = (268.527, 272.890, 277.952), stdev = 4.633
[info]   CI (99.9%): [255.049, 290.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   72.118 ±(99.9%) 0.835 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.118, 72.500), stdev = 0.217
[info]   CI (99.9%): [71.283, 72.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   269.781 ±(99.9%) 1422.476 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.781, 674.726), stdev = 369.413
[info]   CI (99.9%): [≈ 0, 1692.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   72.524 ±(99.9%) 382.398 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 72.524, 181.705), stdev = 99.308
[info]   CI (99.9%): [≈ 0, 454.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 7.000), stdev = 3.834
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.91% complete, ETA 00:12:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 598.684 ops/s
[info] # Warmup Iteration   2: 236913.019 ops/s
[info] # Warmup Iteration   3: 348009.942 ops/s
[info] # Warmup Iteration   4: 353871.800 ops/s
[info] # Warmup Iteration   5: 357952.403 ops/s
[info] Iteration   1: 352385.199 ops/s
[info]                  ·gc.alloc.rate:                   1880.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              8400.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2016.815 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9008.722 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.851 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         30.000 ms
[info] Iteration   2: 354405.303 ops/s
[info]                  ·gc.alloc.rate:                   1892.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              8406.434 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2032.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9025.168 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.994 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.623 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 363554.459 ops/s
[info]                  ·gc.alloc.rate:                                  1940.806 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.076 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.329 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8850.215 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 361983.676 ops/s
[info]                  ·gc.alloc.rate:            1931.933 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.947 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8888.520 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 364224.103 ops/s
[info]                  ·gc.alloc.rate:            1943.698 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5889.340 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   359310.548 ±(99.9%) 21206.642 ops/s [Average]
[info]   (min, avg, max) = (352385.199, 359310.548, 364224.103), stdev = 5507.297
[info]   CI (99.9%): [338103.906, 380517.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1917.952 ±(99.9%) 112.491 MB/sec [Average]
[info]   (min, avg, max) = (1880.538, 1917.952, 1943.698), stdev = 29.213
[info]   CI (99.9%): [1805.462, 2030.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8401.477 ±(99.9%) 10.787 B/op [Average]
[info]   (min, avg, max) = (8400.001, 8401.477, 8406.434), stdev = 2.801
[info]   CI (99.9%): [8390.690, 8412.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.131 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.076), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.066 ±(99.9%) 0.567 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.329), stdev = 0.147
[info]   CI (99.9%): [≈ 0, 0.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1900.110 ±(99.9%) 1157.536 MB/sec [Average]
[info]   (min, avg, max) = (1362.750, 1900.110, 2044.827), stdev = 300.608
[info]   CI (99.9%): [742.574, 3057.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8332.393 ±(99.9%) 5266.831 B/op [Average]
[info]   (min, avg, max) = (5889.340, 8332.393, 9025.168), stdev = 1367.779
[info]   CI (99.9%): [3065.562, 13599.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.998 ±(99.9%) 10.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.998, 5.994), stdev = 2.826
[info]   CI (99.9%): [≈ 0, 12.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   8.895 ±(99.9%) 48.396 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.895, 26.623), stdev = 12.568
[info]   CI (99.9%): [≈ 0, 57.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.000, 30.000), stdev = 11.533
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.15% complete, ETA 00:12:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27335.782 ops/s
[info] # Warmup Iteration   2: 55435.577 ops/s
[info] # Warmup Iteration   3: 56134.413 ops/s
[info] # Warmup Iteration   4: 56820.091 ops/s
[info] # Warmup Iteration   5: 57102.050 ops/s
[info] Iteration   1: 56613.106 ops/s
[info]                  ·gc.alloc.rate:            1481.401 MB/sec
[info]                  ·gc.alloc.rate.norm:       41185.584 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2022.184 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56220.340 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  23.000 ms
[info] Iteration   2: 56524.340 ops/s
[info]                  ·gc.alloc.rate:                   1482.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              41276.374 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        37614.747 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 111.286 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 57013.322 ops/s
[info]                  ·gc.alloc.rate:                   1491.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              41178.259 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.133 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        37512.189 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 91.942 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 57189.688 ops/s
[info]                  ·gc.alloc.rate:                                  1495.979 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41176.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.464 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       37507.413 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 57130.118 ops/s
[info]                  ·gc.alloc.rate:            1494.915 MB/sec
[info]                  ·gc.alloc.rate.norm:       41186.860 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.772 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37546.141 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   56894.115 ±(99.9%) 1175.819 ops/s [Average]
[info]   (min, avg, max) = (56524.340, 56894.115, 57189.688), stdev = 305.356
[info]   CI (99.9%): [55718.296, 58069.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1489.286 ±(99.9%) 26.979 MB/sec [Average]
[info]   (min, avg, max) = (1481.401, 1489.286, 1495.979), stdev = 7.006
[info]   CI (99.9%): [1462.307, 1516.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   41200.617 ±(99.9%) 164.047 B/op [Average]
[info]   (min, avg, max) = (41176.007, 41200.617, 41276.374), stdev = 42.602
[info]   CI (99.9%): [41036.570, 41364.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.093 ±(99.9%) 0.799 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.093, 0.464), stdev = 0.207
[info]   CI (99.9%): [≈ 0, 0.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1491.495 ±(99.9%) 1142.506 MB/sec [Average]
[info]   (min, avg, max) = (1350.692, 1491.495, 2022.184), stdev = 296.705
[info]   CI (99.9%): [348.989, 2634.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   41280.166 ±(99.9%) 32160.275 B/op [Average]
[info]   (min, avg, max) = (37507.413, 41280.166, 56220.340), stdev = 8351.921
[info]   CI (99.9%): [9119.891, 73440.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 7.780 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 3.996), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 9.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   40.646 ±(99.9%) 215.924 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.646, 111.286), stdev = 56.075
[info]   CI (99.9%): [≈ 0, 256.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.800, 23.000), stdev = 8.643
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.38% complete, ETA 00:12:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13217.631 ops/s
[info] # Warmup Iteration   2: 67881.017 ops/s
[info] # Warmup Iteration   3: 70054.285 ops/s
[info] # Warmup Iteration   4: 72449.123 ops/s
[info] # Warmup Iteration   5: 72189.781 ops/s
[info] Iteration   1: 73382.766 ops/s
[info]                  ·gc.alloc.rate:            1123.003 MB/sec
[info]                  ·gc.alloc.rate.norm:       24088.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14429.814 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 72068.487 ops/s
[info]                  ·gc.alloc.rate:            1103.136 MB/sec
[info]                  ·gc.alloc.rate.norm:       24088.875 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29386.139 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 71065.069 ops/s
[info]                  ·gc.alloc.rate:            1088.271 MB/sec
[info]                  ·gc.alloc.rate.norm:       24096.397 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.922 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14899.784 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 70339.683 ops/s
[info]                  ·gc.alloc.rate:                   1076.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              24088.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        30107.510 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 59.619 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   5: 70619.132 ops/s
[info]                  ·gc.alloc.rate:                   1080.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              24091.151 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1352.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        30137.040 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 103.921 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   71495.028 ±(99.9%) 4786.000 ops/s [Average]
[info]   (min, avg, max) = (70339.683, 71495.028, 73382.766), stdev = 1242.909
[info]   CI (99.9%): [66709.027, 76281.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1094.335 ±(99.9%) 73.040 MB/sec [Average]
[info]   (min, avg, max) = (1076.413, 1094.335, 1123.003), stdev = 18.968
[info]   CI (99.9%): [1021.294, 1167.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24090.499 ±(99.9%) 13.612 B/op [Average]
[info]   (min, avg, max) = (24088.022, 24090.499, 24096.397), stdev = 3.535
[info]   CI (99.9%): [24076.887, 24104.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1077.775 ±(99.9%) 1423.489 MB/sec [Average]
[info]   (min, avg, max) = (672.730, 1077.775, 1352.097), stdev = 369.676
[info]   CI (99.9%): [≈ 0, 2501.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   23792.057 ±(99.9%) 32110.862 B/op [Average]
[info]   (min, avg, max) = (14429.814, 23792.057, 30137.040), stdev = 8339.089
[info]   CI (99.9%): [≈ 0, 55902.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 8.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 4.662), stdev = 2.127
[info]   CI (99.9%): [≈ 0, 9.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   32.708 ±(99.9%) 182.702 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.708, 103.921), stdev = 47.447
[info]   CI (99.9%): [≈ 0, 215.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   68.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.600, 20.000), stdev = 5.459
[info]   CI (99.9%): [68.000, 68.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.61% complete, ETA 00:12:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56091.383 ops/s
[info] # Warmup Iteration   2: 92303.180 ops/s
[info] # Warmup Iteration   3: 92256.846 ops/s
[info] # Warmup Iteration   4: 93117.671 ops/s
[info] # Warmup Iteration   5: 94745.336 ops/s
[info] Iteration   1: 98335.627 ops/s
[info]                  ·gc.alloc.rate:            1444.954 MB/sec
[info]                  ·gc.alloc.rate.norm:       23120.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21579.236 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 97783.051 ops/s
[info]                  ·gc.alloc.rate:            1436.385 MB/sec
[info]                  ·gc.alloc.rate.norm:       23120.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.200 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21700.591 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 97651.064 ops/s
[info]                  ·gc.alloc.rate:                   1438.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              23177.261 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2030.449 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        32724.384 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      6.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 107.363 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 99797.702 ops/s
[info]                  ·gc.alloc.rate:                   1466.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              23121.929 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1362.247 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21484.199 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.506 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 99697.720 ops/s
[info]                  ·gc.alloc.rate:            1464.642 MB/sec
[info]                  ·gc.alloc.rate.norm:       23120.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21515.831 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   98653.033 ±(99.9%) 3975.309 ops/s [Average]
[info]   (min, avg, max) = (97651.064, 98653.033, 99797.702), stdev = 1032.375
[info]   CI (99.9%): [94677.723, 102628.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1450.030 ±(99.9%) 55.342 MB/sec [Average]
[info]   (min, avg, max) = (1436.385, 1450.030, 1466.090), stdev = 14.372
[info]   CI (99.9%): [1394.688, 1505.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23131.841 ±(99.9%) 97.824 B/op [Average]
[info]   (min, avg, max) = (23120.004, 23131.841, 23177.261), stdev = 25.404
[info]   CI (99.9%): [23034.017, 23229.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1490.515 ±(99.9%) 1162.571 MB/sec [Average]
[info]   (min, avg, max) = (1348.200, 1490.515, 2030.449), stdev = 301.916
[info]   CI (99.9%): [327.943, 2653.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   23800.848 ±(99.9%) 19211.230 B/op [Average]
[info]   (min, avg, max) = (21484.199, 23800.848, 32724.384), stdev = 4989.095
[info]   CI (99.9%): [4589.618, 43012.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 11.240 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 6.662), stdev = 2.919
[info]   CI (99.9%): [≈ 0, 12.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   23.574 ±(99.9%) 181.212 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.574, 107.363), stdev = 47.060
[info]   CI (99.9%): [≈ 0, 204.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.800, 16.000), stdev = 6.686
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.84% complete, ETA 00:11:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10480.855 ops/s
[info] # Warmup Iteration   2: 37057.610 ops/s
[info] # Warmup Iteration   3: 37493.690 ops/s
[info] # Warmup Iteration   4: 37778.615 ops/s
[info] # Warmup Iteration   5: 39383.001 ops/s
[info] Iteration   1: 39639.666 ops/s
[info]                  ·gc.alloc.rate:                   1938.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              76968.863 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2025.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        80429.794 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.326 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 290.933 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 39724.628 ops/s
[info]                  ·gc.alloc.rate:                                  1942.397 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76960.588 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.853 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.510 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53945.014 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                52.784 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 40251.572 ops/s
[info]                  ·gc.alloc.rate:            1969.969 MB/sec
[info]                  ·gc.alloc.rate.norm:       77011.303 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79936.404 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 39857.887 ops/s
[info]                  ·gc.alloc.rate:                                  1955.260 MB/sec
[info]                  ·gc.alloc.rate.norm:                             77188.224 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80718.364 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 40377.151 ops/s
[info]                  ·gc.alloc.rate:                                  1974.212 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76961.882 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.218 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79690.945 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   39970.181 ±(99.9%) 1258.034 ops/s [Average]
[info]   (min, avg, max) = (39639.666, 39970.181, 40377.151), stdev = 326.708
[info]   CI (99.9%): [38712.147, 41228.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1956.001 ±(99.9%) 61.802 MB/sec [Average]
[info]   (min, avg, max) = (1938.169, 1956.001, 1974.212), stdev = 16.050
[info]   CI (99.9%): [1894.200, 2017.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   77018.172 ±(99.9%) 374.724 B/op [Average]
[info]   (min, avg, max) = (76960.588, 77018.172, 77188.224), stdev = 97.315
[info]   CI (99.9%): [76643.448, 77392.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.047), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.374 ±(99.9%) 3.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.374, 1.853), stdev = 0.827
[info]   CI (99.9%): [≈ 0, 3.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1904.105 ±(99.9%) 1168.417 MB/sec [Average]
[info]   (min, avg, max) = (1361.510, 1904.105, 2044.794), stdev = 303.434
[info]   CI (99.9%): [735.688, 3072.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   74944.104 ±(99.9%) 45228.769 B/op [Average]
[info]   (min, avg, max) = (53945.014, 74944.104, 80718.364), stdev = 11745.768
[info]   CI (99.9%): [29715.336, 120172.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 12.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 7.326), stdev = 3.180
[info]   CI (99.9%): [≈ 0, 13.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   68.743 ±(99.9%) 486.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 68.743, 290.933), stdev = 126.293
[info]   CI (99.9%): [≈ 0, 555.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 19.000), stdev = 6.504
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 90.07% complete, ETA 00:11:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76101.338 ops/s
[info] # Warmup Iteration   2: 143885.504 ops/s
[info] # Warmup Iteration   3: 156080.768 ops/s
[info] # Warmup Iteration   4: 149313.386 ops/s
[info] # Warmup Iteration   5: 153431.099 ops/s
[info] Iteration   1: 155000.758 ops/s
[info]                  ·gc.alloc.rate:            743.032 MB/sec
[info]                  ·gc.alloc.rate.norm:       7545.829 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.947 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13689.017 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 155708.568 ops/s
[info]                  ·gc.alloc.rate:                   747.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              7555.847 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6807.405 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.733 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 153256.585 ops/s
[info]                  ·gc.alloc.rate:            733.235 MB/sec
[info]                  ·gc.alloc.rate.norm:       7528.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.291 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6922.829 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 153370.498 ops/s
[info]                  ·gc.alloc.rate:            733.510 MB/sec
[info]                  ·gc.alloc.rate.norm:       7528.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6917.774 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 151203.076 ops/s
[info]                  ·gc.alloc.rate:            728.630 MB/sec
[info]                  ·gc.alloc.rate.norm:       7585.216 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7016.947 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   153707.897 ±(99.9%) 6742.978 ops/s [Average]
[info]   (min, avg, max) = (151203.076, 153707.897, 155708.568), stdev = 1751.130
[info]   CI (99.9%): [146964.919, 160450.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   737.165 ±(99.9%) 29.899 MB/sec [Average]
[info]   (min, avg, max) = (728.630, 737.165, 747.416), stdev = 7.765
[info]   CI (99.9%): [707.266, 767.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7548.580 ±(99.9%) 91.315 B/op [Average]
[info]   (min, avg, max) = (7528.003, 7548.580, 7585.216), stdev = 23.714
[info]   CI (99.9%): [7457.265, 7639.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   808.742 ±(99.9%) 1160.680 MB/sec [Average]
[info]   (min, avg, max) = (673.381, 808.742, 1347.947), stdev = 301.425
[info]   CI (99.9%): [≈ 0, 1969.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8270.794 ±(99.9%) 11666.633 B/op [Average]
[info]   (min, avg, max) = (6807.405, 8270.794, 13689.017), stdev = 3029.788
[info]   CI (99.9%): [≈ 0, 19937.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.347 ±(99.9%) 11.595 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.347, 6.733), stdev = 3.011
[info]   CI (99.9%): [≈ 0, 12.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.000, 16.000), stdev = 3.391
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.30% complete, ETA 00:11:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96561.866 ops/s
[info] # Warmup Iteration   2: 344445.734 ops/s
[info] # Warmup Iteration   3: 352259.949 ops/s
[info] # Warmup Iteration   4: 366937.217 ops/s
[info] # Warmup Iteration   5: 351003.674 ops/s
[info] Iteration   1: 367873.447 ops/s
[info]                  ·gc.alloc.rate:      323.432 MB/sec
[info]                  ·gc.alloc.rate.norm: 1384.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 363291.889 ops/s
[info]                  ·gc.alloc.rate:            322.063 MB/sec
[info]                  ·gc.alloc.rate.norm:       1395.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.915 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2914.779 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 369150.869 ops/s
[info]                  ·gc.alloc.rate:      325.122 MB/sec
[info]                  ·gc.alloc.rate.norm: 1386.253 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 365787.709 ops/s
[info]                  ·gc.alloc.rate:            321.835 MB/sec
[info]                  ·gc.alloc.rate.norm:       1384.733 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.802 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2894.806 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 367688.865 ops/s
[info]                  ·gc.alloc.rate:      323.289 MB/sec
[info]                  ·gc.alloc.rate.norm: 1384.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   366758.556 ±(99.9%) 8779.119 ops/s [Average]
[info]   (min, avg, max) = (363291.889, 366758.556, 369150.869), stdev = 2279.909
[info]   CI (99.9%): [357979.437, 375537.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   323.148 ±(99.9%) 5.057 MB/sec [Average]
[info]   (min, avg, max) = (321.835, 323.148, 325.122), stdev = 1.313
[info]   CI (99.9%): [318.092, 328.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1386.805 ±(99.9%) 18.072 B/op [Average]
[info]   (min, avg, max) = (1384.001, 1386.805, 1395.039), stdev = 4.693
[info]   CI (99.9%): [1368.733, 1404.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   269.143 ±(99.9%) 1419.115 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.143, 672.915), stdev = 368.540
[info]   CI (99.9%): [≈ 0, 1688.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1161.917 ±(99.9%) 6126.513 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1161.917, 2914.779), stdev = 1591.036
[info]   CI (99.9%): [≈ 0, 7288.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 10.000), stdev = 5.215
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.53% complete, ETA 00:11:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 446065.740 ops/s
[info] # Warmup Iteration   2: 595142.900 ops/s
[info] # Warmup Iteration   3: 590445.162 ops/s
[info] # Warmup Iteration   4: 601768.200 ops/s
[info] # Warmup Iteration   5: 618286.767 ops/s
[info] Iteration   1: 623762.956 ops/s
[info]                  ·gc.alloc.rate:      336.206 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 613997.823 ops/s
[info]                  ·gc.alloc.rate:            333.119 MB/sec
[info]                  ·gc.alloc.rate.norm:       853.875 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.136 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1727.996 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 621197.425 ops/s
[info]                  ·gc.alloc.rate:      334.779 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.118 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 588742.795 ops/s
[info]                  ·gc.alloc.rate:                   317.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.601 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1800.315 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.781 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 623221.631 ops/s
[info]                  ·gc.alloc.rate:      335.744 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   614184.526 ±(99.9%) 56785.995 ops/s [Average]
[info]   (min, avg, max) = (588742.795, 614184.526, 623762.956), stdev = 14747.143
[info]   CI (99.9%): [557398.531, 670970.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   331.426 ±(99.9%) 30.778 MB/sec [Average]
[info]   (min, avg, max) = (317.286, 331.426, 336.206), stdev = 7.993
[info]   CI (99.9%): [300.649, 362.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   849.203 ±(99.9%) 10.059 B/op [Average]
[info]   (min, avg, max) = (848.001, 849.203, 853.875), stdev = 2.612
[info]   CI (99.9%): [839.143, 859.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.547 ±(99.9%) 1421.245 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.547, 674.136), stdev = 369.093
[info]   CI (99.9%): [≈ 0, 1690.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   705.662 ±(99.9%) 3722.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 705.662, 1800.315), stdev = 966.606
[info]   CI (99.9%): [≈ 0, 4427.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.356 ±(99.9%) 3.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.356, 1.781), stdev = 0.796
[info]   CI (99.9%): [≈ 0, 3.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 8.000), stdev = 4.123
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.76% complete, ETA 00:10:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 504252.815 ops/s
[info] # Warmup Iteration   2: 660168.460 ops/s
[info] # Warmup Iteration   3: 676993.173 ops/s
[info] # Warmup Iteration   4: 680421.332 ops/s
[info] # Warmup Iteration   5: 679788.995 ops/s
[info] Iteration   1: 680480.662 ops/s
[info]                  ·gc.alloc.rate:      6.918 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 680033.558 ops/s
[info]                  ·gc.alloc.rate:      6.912 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 679869.031 ops/s
[info]                  ·gc.alloc.rate:      6.912 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 679842.218 ops/s
[info]                  ·gc.alloc.rate:      6.911 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 675812.707 ops/s
[info]                  ·gc.alloc.rate:      6.870 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   679207.635 ±(99.9%) 7373.864 ops/s [Average]
[info]   (min, avg, max) = (675812.707, 679207.635, 680480.662), stdev = 1914.969
[info]   CI (99.9%): [671833.772, 686581.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.905 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (6.870, 6.905, 6.918), stdev = 0.020
[info]   CI (99.9%): [6.829, 6.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.99% complete, ETA 00:10:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11384.991 ops/s
[info] # Warmup Iteration   2: 31050.747 ops/s
[info] # Warmup Iteration   3: 32355.641 ops/s
[info] # Warmup Iteration   4: 32966.689 ops/s
[info] # Warmup Iteration   5: 32340.381 ops/s
[info] Iteration   1: 33148.276 ops/s
[info]                  ·gc.alloc.rate:            1597.776 MB/sec
[info]                  ·gc.alloc.rate.norm:       75856.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 63920.975 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 33028.522 ops/s
[info]                  ·gc.alloc.rate:                   1595.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              76039.210 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2026.433 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        96557.233 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.994 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 380.896 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 33232.401 ops/s
[info]                  ·gc.alloc.rate:                   1601.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              75856.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1362.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        64514.649 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.548 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 33097.682 ops/s
[info]                  ·gc.alloc.rate:                                  1595.093 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75856.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.547 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64807.470 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 32937.196 ops/s
[info]                  ·gc.alloc.rate:            1587.676 MB/sec
[info]                  ·gc.alloc.rate.norm:       75856.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.587 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 97686.299 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   33088.815 ±(99.9%) 434.179 ops/s [Average]
[info]   (min, avg, max) = (32937.196, 33088.815, 33232.401), stdev = 112.755
[info]   CI (99.9%): [32654.636, 33522.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1595.576 ±(99.9%) 19.519 MB/sec [Average]
[info]   (min, avg, max) = (1587.676, 1595.576, 1601.512), stdev = 5.069
[info]   CI (99.9%): [1576.057, 1615.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75892.653 ±(99.9%) 315.475 B/op [Average]
[info]   (min, avg, max) = (75856.012, 75892.653, 76039.210), stdev = 81.928
[info]   CI (99.9%): [75577.177, 76208.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.109 ±(99.9%) 0.943 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.109, 0.547), stdev = 0.245
[info]   CI (99.9%): [≈ 0, 1.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1628.447 ±(99.9%) 1431.317 MB/sec [Average]
[info]   (min, avg, max) = (1346.385, 1628.447, 2044.587), stdev = 371.709
[info]   CI (99.9%): [197.130, 3059.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   77497.325 ±(99.9%) 69010.756 B/op [Average]
[info]   (min, avg, max) = (63920.975, 77497.325, 97686.299), stdev = 17921.874
[info]   CI (99.9%): [8486.569, 146508.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 13.525 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 7.994), stdev = 3.512
[info]   CI (99.9%): [≈ 0, 15.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   82.489 ±(99.9%) 644.495 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 82.489, 380.896), stdev = 167.373
[info]   CI (99.9%): [≈ 0, 726.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.600, 19.000), stdev = 8.142
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.22% complete, ETA 00:10:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2100354.205 ops/s
[info] # Warmup Iteration   2: 3278308.185 ops/s
[info] # Warmup Iteration   3: 3399464.877 ops/s
[info] # Warmup Iteration   4: 3359518.616 ops/s
[info] # Warmup Iteration   5: 3380409.028 ops/s
[info] Iteration   1: 3406718.043 ops/s
[info]                  ·gc.alloc.rate:                                  2271.382 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1049.289 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.195 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       942.952 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.539 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 3414991.662 ops/s
[info]                  ·gc.alloc.rate:                                  2273.907 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1048.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1256.238 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 3397307.073 ops/s
[info]                  ·gc.alloc.rate:            2275.097 MB/sec
[info]                  ·gc.alloc.rate.norm:       1054.154 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 947.108 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 3413518.303 ops/s
[info]                  ·gc.alloc.rate:                                  2272.982 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1048.176 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.448 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1256.829 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 3388196.505 ops/s
[info]                  ·gc.alloc.rate:            2258.972 MB/sec
[info]                  ·gc.alloc.rate.norm:       1049.421 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 949.636 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   3404146.317 ±(99.9%) 43617.835 ops/s [Average]
[info]   (min, avg, max) = (3388196.505, 3404146.317, 3414991.662), stdev = 11327.413
[info]   CI (99.9%): [3360528.482, 3447764.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2270.468 ±(99.9%) 25.291 MB/sec [Average]
[info]   (min, avg, max) = (2258.972, 2270.468, 2275.097), stdev = 6.568
[info]   CI (99.9%): [2245.177, 2295.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1049.808 ±(99.9%) 9.670 B/op [Average]
[info]   (min, avg, max) = (1048.002, 1049.808, 1054.154), stdev = 2.511
[info]   CI (99.9%): [1040.138, 1059.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.014 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2316.123 ±(99.9%) 1439.334 MB/sec [Average]
[info]   (min, avg, max) = (2041.195, 2316.123, 2725.728), stdev = 373.790
[info]   CI (99.9%): [876.789, 3755.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1070.552 ±(99.9%) 653.814 B/op [Average]
[info]   (min, avg, max) = (942.952, 1070.552, 1256.829), stdev = 169.793
[info]   CI (99.9%): [416.739, 1724.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.308 ±(99.9%) 2.650 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.308, 1.539), stdev = 0.688
[info]   CI (99.9%): [≈ 0, 2.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.45% complete, ETA 00:09:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.848 ops/s
[info] # Warmup Iteration   2: 3344000.169 ops/s
[info] # Warmup Iteration   3: 3337967.870 ops/s
[info] # Warmup Iteration   4: 3485016.602 ops/s
[info] # Warmup Iteration   5: 3521792.492 ops/s
[info] Iteration   1: 3488028.885 ops/s
[info]                  ·gc.alloc.rate:            373.612 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.611 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 302.677 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 3491547.046 ops/s
[info]                  ·gc.alloc.rate:      372.656 MB/sec
[info]                  ·gc.alloc.rate.norm: 168.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3493240.107 ops/s
[info]                  ·gc.alloc.rate:            373.036 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 302.228 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 3529388.258 ops/s
[info]                  ·gc.alloc.rate:      376.866 MB/sec
[info]                  ·gc.alloc.rate.norm: 168.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3551324.348 ops/s
[info]                  ·gc.alloc.rate:            379.032 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 297.283 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   3510705.729 ±(99.9%) 108661.383 ops/s [Average]
[info]   (min, avg, max) = (3488028.885, 3510705.729, 3551324.348), stdev = 28219.016
[info]   CI (99.9%): [3402044.346, 3619367.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   375.040 ±(99.9%) 10.722 MB/sec [Average]
[info]   (min, avg, max) = (372.656, 375.040, 379.032), stdev = 2.784
[info]   CI (99.9%): [364.318, 385.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   168.127 ±(99.9%) 1.042 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.127, 168.611), stdev = 0.271
[info]   CI (99.9%): [167.085, 169.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   402.475 ±(99.9%) 1414.755 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.475, 670.982), stdev = 367.407
[info]   CI (99.9%): [≈ 0, 1817.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   180.438 ±(99.9%) 634.316 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 180.438, 302.677), stdev = 164.730
[info]   CI (99.9%): [≈ 0, 814.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.200, 11.000), stdev = 5.675
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.69% complete, ETA 00:09:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1149104.656 ops/s
[info] # Warmup Iteration   2: 2485544.918 ops/s
[info] # Warmup Iteration   3: 2420168.998 ops/s
[info] # Warmup Iteration   4: 2596569.008 ops/s
[info] # Warmup Iteration   5: 2575033.629 ops/s
[info] Iteration   1: 2627631.361 ops/s
[info]                  ·gc.alloc.rate:            1242.324 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.211 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 403.000 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 2590487.484 ops/s
[info]                  ·gc.alloc.rate:            1225.749 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.744 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.563 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 817.541 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 2564464.992 ops/s
[info]                  ·gc.alloc.rate:                   1212.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        825.827 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   4: 2598083.696 ops/s
[info]                  ·gc.alloc.rate:                   1230.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              745.332 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1352.951 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        819.566 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.421 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 2596176.208 ops/s
[info]                  ·gc.alloc.rate:                   1227.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1361.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        825.425 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.808 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   2595368.748 ±(99.9%) 86698.682 ops/s [Average]
[info]   (min, avg, max) = (2564464.992, 2595368.748, 2627631.361), stdev = 22515.373
[info]   CI (99.9%): [2508670.066, 2682067.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1227.627 ±(99.9%) 41.147 MB/sec [Average]
[info]   (min, avg, max) = (1212.485, 1227.627, 1242.324), stdev = 10.686
[info]   CI (99.9%): [1186.480, 1268.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   744.457 ±(99.9%) 2.217 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.457, 745.332), stdev = 0.576
[info]   CI (99.9%): [742.240, 746.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1215.713 ±(99.9%) 1169.069 MB/sec [Average]
[info]   (min, avg, max) = (672.735, 1215.713, 1361.478), stdev = 303.603
[info]   CI (99.9%): [46.644, 2384.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   738.272 ±(99.9%) 721.832 B/op [Average]
[info]   (min, avg, max) = (403.000, 738.272, 825.827), stdev = 187.457
[info]   CI (99.9%): [16.440, 1460.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 7.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 3.997), stdev = 1.861
[info]   CI (99.9%): [≈ 0, 8.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.055 ±(99.9%) 4.362 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.055, 2.421), stdev = 1.133
[info]   CI (99.9%): [≈ 0, 5.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   61.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 12.200, 19.000), stdev = 6.611
[info]   CI (99.9%): [61.000, 61.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.92% complete, ETA 00:09:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2957167.252 ops/s
[info] # Warmup Iteration   2: 3336600.798 ops/s
[info] # Warmup Iteration   3: 3681542.289 ops/s
[info] # Warmup Iteration   4: 3579602.630 ops/s
[info] # Warmup Iteration   5: 3608430.281 ops/s
[info] Iteration   1: 3570972.081 ops/s
[info]                  ·gc.alloc.rate:            382.770 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.720 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 297.115 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 3574424.051 ops/s
[info]                  ·gc.alloc.rate:            381.484 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 296.819 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 3611129.330 ops/s
[info]                  ·gc.alloc.rate:      385.437 MB/sec
[info]                  ·gc.alloc.rate.norm: 168.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3579535.757 ops/s
[info]                  ·gc.alloc.rate:            382.021 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 296.403 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 3617131.941 ops/s
[info]                  ·gc.alloc.rate:      386.156 MB/sec
[info]                  ·gc.alloc.rate.norm: 168.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   3590638.632 ±(99.9%) 83806.234 ops/s [Average]
[info]   (min, avg, max) = (3570972.081, 3590638.632, 3617131.941), stdev = 21764.213
[info]   CI (99.9%): [3506832.397, 3674444.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   383.573 ±(99.9%) 8.069 MB/sec [Average]
[info]   (min, avg, max) = (381.484, 383.573, 386.156), stdev = 2.096
[info]   CI (99.9%): [375.504, 391.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168.144 ±(99.9%) 1.240 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.144, 168.720), stdev = 0.322
[info]   CI (99.9%): [166.904, 169.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.410 ±(99.9%) 1421.558 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.410, 674.053), stdev = 369.174
[info]   CI (99.9%): [≈ 0, 1825.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   178.067 ±(99.9%) 625.932 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 178.067, 297.115), stdev = 162.553
[info]   CI (99.9%): [≈ 0, 804.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 8.000), stdev = 4.219
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.15% complete, ETA 00:09:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1589085.839 ops/s
[info] # Warmup Iteration   2: 2747207.877 ops/s
[info] # Warmup Iteration   3: 2768690.784 ops/s
[info] # Warmup Iteration   4: 2872987.894 ops/s
[info] # Warmup Iteration   5: 2864117.354 ops/s
[info] Iteration   1: 2883991.648 ops/s
[info]                  ·gc.alloc.rate:                   1232.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              672.568 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        734.667 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.364 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 2779122.216 ops/s
[info]                  ·gc.alloc.rate:            1187.160 MB/sec
[info]                  ·gc.alloc.rate.norm:       672.361 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.555 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 762.070 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 2900750.604 ops/s
[info]                  ·gc.alloc.rate:                   1238.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              672.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        365.056 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.807 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 2890639.541 ops/s
[info]                  ·gc.alloc.rate:                   1234.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              672.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        736.987 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.539 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 2856336.690 ops/s
[info]                  ·gc.alloc.rate:                   1219.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              672.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1362.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        750.591 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.367 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   2862168.140 ±(99.9%) 189682.071 ops/s [Average]
[info]   (min, avg, max) = (2779122.216, 2862168.140, 2900750.604), stdev = 49259.832
[info]   CI (99.9%): [2672486.068, 3051850.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1222.313 ±(99.9%) 80.433 MB/sec [Average]
[info]   (min, avg, max) = (1187.160, 1222.313, 1238.404), stdev = 20.888
[info]   CI (99.9%): [1141.880, 1302.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   672.195 ±(99.9%) 0.992 B/op [Average]
[info]   (min, avg, max) = (672.000, 672.195, 672.568), stdev = 0.258
[info]   CI (99.9%): [671.203, 673.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1215.994 ±(99.9%) 1169.664 MB/sec [Average]
[info]   (min, avg, max) = (672.747, 1215.994, 1362.050), stdev = 303.758
[info]   CI (99.9%): [46.331, 2385.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   669.874 ±(99.9%) 657.525 B/op [Average]
[info]   (min, avg, max) = (365.056, 669.874, 762.070), stdev = 170.757
[info]   CI (99.9%): [12.350, 1327.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 7.779 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 4.662), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 9.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.015 ±(99.9%) 4.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.015, 2.539), stdev = 1.098
[info]   CI (99.9%): [≈ 0, 5.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   61.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 12.200, 18.000), stdev = 5.675
[info]   CI (99.9%): [61.000, 61.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.38% complete, ETA 00:08:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1089632.804 ops/s
[info] # Warmup Iteration   2: 2174005.933 ops/s
[info] # Warmup Iteration   3: 2255697.079 ops/s
[info] # Warmup Iteration   4: 2235238.743 ops/s
[info] # Warmup Iteration   5: 2235367.211 ops/s
[info] Iteration   1: 2161638.334 ops/s
[info]                  ·gc.alloc.rate:                   524.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              381.937 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.495 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        490.341 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.485 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2221819.541 ops/s
[info]                  ·gc.alloc.rate:            540.313 MB/sec
[info]                  ·gc.alloc.rate.norm:       382.770 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 477.541 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 2244492.745 ops/s
[info]                  ·gc.alloc.rate:      536.213 MB/sec
[info]                  ·gc.alloc.rate.norm: 376.039 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2237530.791 ops/s
[info]                  ·gc.alloc.rate:                   534.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              376.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.475 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        473.709 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.469 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 2237409.394 ops/s
[info]                  ·gc.alloc.rate:            535.044 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.427 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 474.211 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2220578.161 ±(99.9%) 130837.402 ops/s [Average]
[info]   (min, avg, max) = (2161638.334, 2220578.161, 2244492.745), stdev = 33978.058
[info]   CI (99.9%): [2089740.759, 2351415.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   534.153 ±(99.9%) 22.324 MB/sec [Average]
[info]   (min, avg, max) = (524.600, 534.153, 540.313), stdev = 5.797
[info]   CI (99.9%): [511.829, 556.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   378.639 ±(99.9%) 13.119 B/op [Average]
[info]   (min, avg, max) = (376.024, 378.639, 382.770), stdev = 3.407
[info]   CI (99.9%): [365.521, 391.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   539.019 ±(99.9%) 1160.279 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.019, 674.090), stdev = 301.321
[info]   CI (99.9%): [≈ 0, 1699.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   383.160 ±(99.9%) 825.190 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 383.160, 490.341), stdev = 214.299
[info]   CI (99.9%): [≈ 0, 1208.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.191 ±(99.9%) 1.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.191, 0.485), stdev = 0.261
[info]   CI (99.9%): [≈ 0, 1.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.600, 9.000), stdev = 3.715
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.61% complete, ETA 00:08:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.903 ops/s
[info] # Warmup Iteration   2: 5419160.856 ops/s
[info] # Warmup Iteration   3: 5602624.092 ops/s
[info] # Warmup Iteration   4: 5540781.662 ops/s
[info] # Warmup Iteration   5: 5551213.025 ops/s
[info] Iteration   1: 5540551.850 ops/s
[info]                  ·gc.alloc.rate:            536.475 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.385 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.834 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 190.549 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 5640724.938 ops/s
[info]                  ·gc.alloc.rate:            544.683 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 186.978 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 5619732.493 ops/s
[info]                  ·gc.alloc.rate:                   543.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             667.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        186.519 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 5705801.287 ops/s
[info]                  ·gc.alloc.rate:      551.089 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5578846.628 ops/s
[info]                  ·gc.alloc.rate:            538.771 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.810 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 189.252 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   5617131.439 ±(99.9%) 241671.400 ops/s [Average]
[info]   (min, avg, max) = (5540551.850, 5617131.439, 5705801.287), stdev = 62761.295
[info]   CI (99.9%): [5375460.039, 5858802.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   542.970 ±(99.9%) 21.902 MB/sec [Average]
[info]   (min, avg, max) = (536.475, 542.970, 551.089), stdev = 5.688
[info]   CI (99.9%): [521.068, 564.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   152.077 ±(99.9%) 0.663 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.077, 152.385), stdev = 0.172
[info]   CI (99.9%): [151.414, 152.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   535.800 ±(99.9%) 1153.364 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.800, 670.834), stdev = 299.525
[info]   CI (99.9%): [≈ 0, 1689.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   150.660 ±(99.9%) 324.368 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 150.660, 190.549), stdev = 84.237
[info]   CI (99.9%): [≈ 0, 475.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.142 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.663), stdev = 0.297
[info]   CI (99.9%): [≈ 0, 1.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.185), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 8.400, 11.000), stdev = 4.722
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.84% complete, ETA 00:08:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1813989.464 ops/s
[info] # Warmup Iteration   2: 2846014.269 ops/s
[info] # Warmup Iteration   3: 3355733.750 ops/s
[info] # Warmup Iteration   4: 3385881.053 ops/s
[info] # Warmup Iteration   5: 3338573.914 ops/s
[info] Iteration   1: 3245983.406 ops/s
[info]                  ·gc.alloc.rate:            862.641 MB/sec
[info]                  ·gc.alloc.rate.norm:       418.412 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.472 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 653.087 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 3345786.784 ops/s
[info]                  ·gc.alloc.rate:            884.655 MB/sec
[info]                  ·gc.alloc.rate.norm:       416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 316.794 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 3355203.476 ops/s
[info]                  ·gc.alloc.rate:                   886.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        315.586 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.312 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 3343734.032 ops/s
[info]                  ·gc.alloc.rate:            883.878 MB/sec
[info]                  ·gc.alloc.rate.norm:       416.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.153 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 633.668 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   5: 3373085.729 ops/s
[info]                  ·gc.alloc.rate:            891.605 MB/sec
[info]                  ·gc.alloc.rate.norm:       416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 313.918 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   3332758.685 ±(99.9%) 192051.979 ops/s [Average]
[info]   (min, avg, max) = (3245983.406, 3332758.685, 3373085.729), stdev = 49875.289
[info]   CI (99.9%): [3140706.707, 3524810.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   881.913 ±(99.9%) 43.071 MB/sec [Average]
[info]   (min, avg, max) = (862.641, 881.913, 891.605), stdev = 11.185
[info]   CI (99.9%): [838.842, 924.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   416.495 ±(99.9%) 4.127 B/op [Average]
[info]   (min, avg, max) = (416.000, 416.495, 418.412), stdev = 1.072
[info]   CI (99.9%): [412.368, 420.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   942.372 ±(99.9%) 1419.909 MB/sec [Average]
[info]   (min, avg, max) = (672.735, 942.372, 1346.472), stdev = 368.746
[info]   CI (99.9%): [≈ 0, 2362.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   446.611 ±(99.9%) 692.179 B/op [Average]
[info]   (min, avg, max) = (313.918, 446.611, 653.087), stdev = 179.757
[info]   CI (99.9%): [≈ 0, 1138.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.062 ±(99.9%) 0.538 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.312), stdev = 0.140
[info]   CI (99.9%): [≈ 0, 0.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 12.800, 19.000), stdev = 5.215
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 93.07% complete, ETA 00:08:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4305993.279 ops/s
[info] # Warmup Iteration   2: 5148152.877 ops/s
[info] # Warmup Iteration   3: 5379445.741 ops/s
[info] # Warmup Iteration   4: 5634768.373 ops/s
[info] # Warmup Iteration   5: 5833759.569 ops/s
[info] Iteration   1: 5708092.052 ops/s
[info]                  ·gc.alloc.rate:            551.173 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 185.880 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 5508559.688 ops/s
[info]                  ·gc.alloc.rate:            535.891 MB/sec
[info]                  ·gc.alloc.rate.norm:       153.136 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 192.611 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 5731156.202 ops/s
[info]                  ·gc.alloc.rate:            555.296 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.482 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.177 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 185.126 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 5740596.253 ops/s
[info]                  ·gc.alloc.rate:            554.392 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.098 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 184.820 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 5726980.787 ops/s
[info]                  ·gc.alloc.rate:            554.299 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.339 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 185.266 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   5683076.996 ±(99.9%) 378411.057 ops/s [Average]
[info]   (min, avg, max) = (5508559.688, 5683076.996, 5740596.253), stdev = 98272.150
[info]   CI (99.9%): [5304665.939, 6061488.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   550.210 ±(99.9%) 31.402 MB/sec [Average]
[info]   (min, avg, max) = (535.891, 550.210, 555.296), stdev = 8.155
[info]   CI (99.9%): [518.808, 581.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.391 ±(99.9%) 1.797 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.391, 153.136), stdev = 0.467
[info]   CI (99.9%): [150.594, 154.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.088 ±(99.9%) 0.238 MB/sec [Average]
[info]   (min, avg, max) = (674.024, 674.088, 674.177), stdev = 0.062
[info]   CI (99.9%): [673.850, 674.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   186.741 ±(99.9%) 12.724 B/op [Average]
[info]   (min, avg, max) = (184.820, 186.741, 192.611), stdev = 3.304
[info]   CI (99.9%): [174.016, 199.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.30% complete, ETA 00:07:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4579856.746 ops/s
[info] # Warmup Iteration   2: 4790718.757 ops/s
[info] # Warmup Iteration   3: 6316416.983 ops/s
[info] # Warmup Iteration   4: 6331971.260 ops/s
[info] # Warmup Iteration   5: 6338122.310 ops/s
[info] Iteration   1: 6328747.514 ops/s
[info]                  ·gc.alloc.rate:      0.167 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.041 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6333394.109 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6336318.431 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6334396.011 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6352364.947 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   6337044.202 ±(99.9%) 34678.415 ops/s [Average]
[info]   (min, avg, max) = (6328747.514, 6337044.202, 6352364.947), stdev = 9005.874
[info]   CI (99.9%): [6302365.787, 6371722.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.034 ±(99.9%) 0.286 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.034, 0.167), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.008 ±(99.9%) 0.071 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.008, 0.041), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.53% complete, ETA 00:07:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1981345.924 ops/s
[info] # Warmup Iteration   2: 3339312.106 ops/s
[info] # Warmup Iteration   3: 3372906.970 ops/s
[info] # Warmup Iteration   4: 3478265.733 ops/s
[info] # Warmup Iteration   5: 3442391.590 ops/s
[info] Iteration   1: 3494322.934 ops/s
[info]                  ·gc.alloc.rate:            958.997 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 303.339 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 3476572.784 ops/s
[info]                  ·gc.alloc.rate:                   954.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        609.177 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 3491957.087 ops/s
[info]                  ·gc.alloc.rate:            958.756 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 303.545 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 3506352.735 ops/s
[info]                  ·gc.alloc.rate:            962.277 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 302.291 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 3193233.621 ops/s
[info]                  ·gc.alloc.rate:                   876.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        663.530 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.642 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3432487.832 ±(99.9%) 516626.191 ops/s [Average]
[info]   (min, avg, max) = (3193233.621, 3432487.832, 3506352.735), stdev = 134166.181
[info]   CI (99.9%): [2915861.641, 3949114.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   942.121 ±(99.9%) 141.741 MB/sec [Average]
[info]   (min, avg, max) = (876.481, 942.121, 962.277), stdev = 36.810
[info]   CI (99.9%): [800.381, 1083.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   432.011 ±(99.9%) 0.088 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.011, 432.052), stdev = 0.023
[info]   CI (99.9%): [431.923, 432.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   942.372 ±(99.9%) 1417.858 MB/sec [Average]
[info]   (min, avg, max) = (673.351, 942.372, 1346.068), stdev = 368.213
[info]   CI (99.9%): [≈ 0, 2360.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   436.376 ±(99.9%) 706.835 B/op [Average]
[info]   (min, avg, max) = (302.291, 436.376, 663.530), stdev = 183.563
[info]   CI (99.9%): [≈ 0, 1143.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.389 ±(99.9%) 2.744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.389, 1.642), stdev = 0.712
[info]   CI (99.9%): [≈ 0, 3.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 12.800, 18.000), stdev = 4.764
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.76% complete, ETA 00:07:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 254082.027 ops/s
[info] # Warmup Iteration   2: 780745.381 ops/s
[info] # Warmup Iteration   3: 868967.183 ops/s
[info] # Warmup Iteration   4: 867071.251 ops/s
[info] # Warmup Iteration   5: 873868.740 ops/s
[info] Iteration   1: 848521.544 ops/s
[info]                  ·gc.alloc.rate:            1373.623 MB/sec
[info]                  ·gc.alloc.rate.norm:       2547.729 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2022.535 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3751.300 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  22.000 ms
[info] Iteration   2: 843531.773 ops/s
[info]                  ·gc.alloc.rate:                   1365.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              2548.871 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2514.344 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.243 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 853346.329 ops/s
[info]                  ·gc.alloc.rate:                   1379.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544.261 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.789 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2491.549 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.371 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 867624.851 ops/s
[info]                  ·gc.alloc.rate:                   1402.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              2545.242 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2466.297 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.042 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 862373.158 ops/s
[info]                  ·gc.alloc.rate:                                  1393.815 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2544.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2487.318 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   855079.531 ±(99.9%) 38019.330 ops/s [Average]
[info]   (min, avg, max) = (843531.773, 855079.531, 867624.851), stdev = 9873.499
[info]   CI (99.9%): [817060.201, 893098.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1383.136 ±(99.9%) 57.948 MB/sec [Average]
[info]   (min, avg, max) = (1365.948, 1383.136, 1402.928), stdev = 15.049
[info]   CI (99.9%): [1325.188, 1441.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2546.021 ±(99.9%) 8.354 B/op [Average]
[info]   (min, avg, max) = (2544.000, 2546.021, 2548.871), stdev = 2.170
[info]   CI (99.9%): [2537.666, 2554.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1488.589 ±(99.9%) 1149.610 MB/sec [Average]
[info]   (min, avg, max) = (1347.445, 1488.589, 2022.535), stdev = 298.550
[info]   CI (99.9%): [338.979, 2638.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2742.162 ±(99.9%) 2173.239 B/op [Average]
[info]   (min, avg, max) = (2466.297, 2742.162, 3751.300), stdev = 564.383
[info]   CI (99.9%): [568.922, 4915.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 7.389 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 3.996), stdev = 1.919
[info]   CI (99.9%): [≈ 0, 8.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.931 ±(99.9%) 13.536 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.931, 7.371), stdev = 3.515
[info]   CI (99.9%): [≈ 0, 16.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.800, 22.000), stdev = 7.530
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 94.00% complete, ETA 00:06:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.615 ops/s
[info] # Warmup Iteration   2: 1677625.517 ops/s
[info] # Warmup Iteration   3: 1750995.310 ops/s
[info] # Warmup Iteration   4: 1663562.764 ops/s
[info] # Warmup Iteration   5: 1734511.763 ops/s
[info] Iteration   1: 1732733.578 ops/s
[info]                  ·gc.alloc.rate:            484.642 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.233 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 609.301 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 1758476.447 ops/s
[info]                  ·gc.alloc.rate:      491.581 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1739456.747 ops/s
[info]                  ·gc.alloc.rate:                   488.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              441.759 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        606.369 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.603 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 1739923.590 ops/s
[info]                  ·gc.alloc.rate:            486.395 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 606.812 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 1758651.942 ops/s
[info]                  ·gc.alloc.rate:      491.625 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   1745848.461 ±(99.9%) 46020.971 ops/s [Average]
[info]   (min, avg, max) = (1732733.578, 1745848.461, 1758651.942), stdev = 11951.500
[info]   CI (99.9%): [1699827.490, 1791869.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   488.492 ±(99.9%) 11.970 MB/sec [Average]
[info]   (min, avg, max) = (484.642, 488.492, 491.625), stdev = 3.109
[info]   CI (99.9%): [476.522, 500.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   440.398 ±(99.9%) 2.954 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.398, 441.759), stdev = 0.767
[info]   CI (99.9%): [437.445, 443.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   402.340 ±(99.9%) 1414.281 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.340, 670.796), stdev = 367.284
[info]   CI (99.9%): [≈ 0, 1816.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   364.496 ±(99.9%) 1281.263 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 364.496, 609.301), stdev = 332.740
[info]   CI (99.9%): [≈ 0, 1645.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.121 ±(99.9%) 1.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.603), stdev = 0.270
[info]   CI (99.9%): [≈ 0, 1.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.200, 11.000), stdev = 5.675
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.23% complete, ETA 00:06:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 176369.042 ops/s
[info] # Warmup Iteration   2: 1142837.445 ops/s
[info] # Warmup Iteration   3: 1150671.367 ops/s
[info] # Warmup Iteration   4: 1198688.139 ops/s
[info] # Warmup Iteration   5: 1205578.862 ops/s
[info] Iteration   1: 1189096.404 ops/s
[info]                  ·gc.alloc.rate:            769.955 MB/sec
[info]                  ·gc.alloc.rate.norm:       1019.219 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.442 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1781.015 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 1207302.774 ops/s
[info]                  ·gc.alloc.rate:            779.447 MB/sec
[info]                  ·gc.alloc.rate.norm:       1016.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.867 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 877.074 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1201991.693 ops/s
[info]                  ·gc.alloc.rate:            777.280 MB/sec
[info]                  ·gc.alloc.rate.norm:       1017.477 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 880.945 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1182027.390 ops/s
[info]                  ·gc.alloc.rate:            762.923 MB/sec
[info]                  ·gc.alloc.rate.norm:       1016.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 895.800 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1177040.240 ops/s
[info]                  ·gc.alloc.rate:                   760.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.438 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        899.622 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.891 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1191491.700 ±(99.9%) 49626.839 ops/s [Average]
[info]   (min, avg, max) = (1177040.240, 1191491.700, 1207302.774), stdev = 12887.933
[info]   CI (99.9%): [1141864.861, 1241118.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   769.941 ±(99.9%) 32.806 MB/sec [Average]
[info]   (min, avg, max) = (760.100, 769.941, 779.447), stdev = 8.519
[info]   CI (99.9%): [737.136, 802.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1017.027 ±(99.9%) 5.260 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1017.027, 1019.219), stdev = 1.366
[info]   CI (99.9%): [1011.767, 1022.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   807.339 ±(99.9%) 1158.308 MB/sec [Average]
[info]   (min, avg, max) = (672.664, 807.339, 1345.442), stdev = 300.809
[info]   CI (99.9%): [≈ 0, 1965.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1066.891 ±(99.9%) 1537.644 B/op [Average]
[info]   (min, avg, max) = (877.074, 1066.891, 1781.015), stdev = 399.321
[info]   CI (99.9%): [≈ 0, 2604.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.178 ±(99.9%) 1.534 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.178, 0.891), stdev = 0.398
[info]   CI (99.9%): [≈ 0, 1.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.800, 18.000), stdev = 4.025
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.46% complete, ETA 00:06:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 908741.097 ops/s
[info] # Warmup Iteration   2: 1585679.776 ops/s
[info] # Warmup Iteration   3: 1644498.728 ops/s
[info] # Warmup Iteration   4: 1617006.354 ops/s
[info] # Warmup Iteration   5: 1653665.459 ops/s
[info] Iteration   1: 1409641.244 ops/s
[info]                  ·gc.alloc.rate:      394.063 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1621100.462 ops/s
[info]                  ·gc.alloc.rate:                   455.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              441.856 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        654.500 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.647 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1673061.905 ops/s
[info]                  ·gc.alloc.rate:            471.640 MB/sec
[info]                  ·gc.alloc.rate.norm:       443.677 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.809 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 634.801 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 1684063.081 ops/s
[info]                  ·gc.alloc.rate:      472.306 MB/sec
[info]                  ·gc.alloc.rate.norm: 441.451 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1657552.394 ops/s
[info]                  ·gc.alloc.rate:            463.392 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.783 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 640.721 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1609083.817 ±(99.9%) 438981.973 ops/s [Average]
[info]   (min, avg, max) = (1409641.244, 1609083.817, 1684063.081), stdev = 114002.224
[info]   CI (99.9%): [1170101.844, 2048065.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   451.325 ±(99.9%) 126.144 MB/sec [Average]
[info]   (min, avg, max) = (394.063, 451.325, 472.306), stdev = 32.759
[info]   CI (99.9%): [325.181, 577.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   441.397 ±(99.9%) 5.876 B/op [Average]
[info]   (min, avg, max) = (440.000, 441.397, 443.677), stdev = 1.526
[info]   CI (99.9%): [435.522, 447.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.778 ±(99.9%) 1422.852 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.778, 674.809), stdev = 369.510
[info]   CI (99.9%): [≈ 0, 1827.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   386.004 ±(99.9%) 1357.139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 386.004, 654.500), stdev = 352.445
[info]   CI (99.9%): [≈ 0, 1743.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.129 ±(99.9%) 1.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.129, 0.647), stdev = 0.289
[info]   CI (99.9%): [≈ 0, 1.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 8.000), stdev = 4.037
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.69% complete, ETA 00:06:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 290228.123 ops/s
[info] # Warmup Iteration   2: 1107727.457 ops/s
[info] # Warmup Iteration   3: 1205616.264 ops/s
[info] # Warmup Iteration   4: 1158060.945 ops/s
[info] # Warmup Iteration   5: 1203166.565 ops/s
[info] Iteration   1: 1187035.739 ops/s
[info]                  ·gc.alloc.rate:            770.340 MB/sec
[info]                  ·gc.alloc.rate.norm:       1021.561 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1785.956 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 1204601.837 ops/s
[info]                  ·gc.alloc.rate:                   777.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        879.084 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.870 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 1204040.095 ops/s
[info]                  ·gc.alloc.rate:            777.532 MB/sec
[info]                  ·gc.alloc.rate.norm:       1016.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 880.351 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1203288.998 ops/s
[info]                  ·gc.alloc.rate:            776.704 MB/sec
[info]                  ·gc.alloc.rate.norm:       1016.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 880.860 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1196946.942 ops/s
[info]                  ·gc.alloc.rate:            772.720 MB/sec
[info]                  ·gc.alloc.rate.norm:       1016.139 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 885.578 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1199182.722 ±(99.9%) 28710.566 ops/s [Average]
[info]   (min, avg, max) = (1187035.739, 1199182.722, 1204601.837), stdev = 7456.043
[info]   CI (99.9%): [1170472.157, 1227893.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   774.968 ±(99.9%) 12.581 MB/sec [Average]
[info]   (min, avg, max) = (770.340, 774.968, 777.545), stdev = 3.267
[info]   CI (99.9%): [762.388, 787.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1017.140 ±(99.9%) 9.519 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1017.140, 1021.561), stdev = 2.472
[info]   CI (99.9%): [1007.621, 1026.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   808.014 ±(99.9%) 1159.685 MB/sec [Average]
[info]   (min, avg, max) = (672.763, 808.014, 1346.756), stdev = 301.167
[info]   CI (99.9%): [≈ 0, 1967.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1062.366 ±(99.9%) 1557.611 B/op [Average]
[info]   (min, avg, max) = (879.084, 1062.366, 1785.956), stdev = 404.507
[info]   CI (99.9%): [≈ 0, 2619.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.174 ±(99.9%) 1.499 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.174, 0.870), stdev = 0.389
[info]   CI (99.9%): [≈ 0, 1.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.800, 18.000), stdev = 4.025
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 94.92% complete, ETA 00:05:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 197825.948 ops/s
[info] # Warmup Iteration   2: 955953.352 ops/s
[info] # Warmup Iteration   3: 989280.203 ops/s
[info] # Warmup Iteration   4: 1008864.096 ops/s
[info] # Warmup Iteration   5: 1014684.100 ops/s
[info] Iteration   1: 1005898.084 ops/s
[info]                  ·gc.alloc.rate:            851.921 MB/sec
[info]                  ·gc.alloc.rate.norm:       1332.729 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.254 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1054.790 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1010431.370 ops/s
[info]                  ·gc.alloc.rate:            849.395 MB/sec
[info]                  ·gc.alloc.rate.norm:       1323.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1050.055 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1004202.592 ops/s
[info]                  ·gc.alloc.rate:            844.029 MB/sec
[info]                  ·gc.alloc.rate.norm:       1322.751 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2113.094 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   4: 1014608.158 ops/s
[info]                  ·gc.alloc.rate:            850.851 MB/sec
[info]                  ·gc.alloc.rate.norm:       1320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1045.715 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1014898.862 ops/s
[info]                  ·gc.alloc.rate:            851.063 MB/sec
[info]                  ·gc.alloc.rate.norm:       1320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1045.411 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1010007.813 ±(99.9%) 18850.013 ops/s [Average]
[info]   (min, avg, max) = (1004202.592, 1010007.813, 1014898.862), stdev = 4895.288
[info]   CI (99.9%): [991157.800, 1028857.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   849.452 ±(99.9%) 12.186 MB/sec [Average]
[info]   (min, avg, max) = (844.029, 849.452, 851.921), stdev = 3.165
[info]   CI (99.9%): [837.266, 861.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1323.710 ±(99.9%) 20.211 B/op [Average]
[info]   (min, avg, max) = (1320.000, 1323.710, 1332.729), stdev = 5.249
[info]   CI (99.9%): [1303.499, 1343.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   808.957 ±(99.9%) 1161.053 MB/sec [Average]
[info]   (min, avg, max) = (674.023, 808.957, 1348.336), stdev = 301.522
[info]   CI (99.9%): [≈ 0, 1970.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1261.813 ±(99.9%) 1832.506 B/op [Average]
[info]   (min, avg, max) = (1045.411, 1261.813, 2113.094), stdev = 475.896
[info]   CI (99.9%): [≈ 0, 3094.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.600, 16.000), stdev = 3.578
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.15% complete, ETA 00:05:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.652 ops/s
[info] # Warmup Iteration   2: 779749.473 ops/s
[info] # Warmup Iteration   3: 795304.017 ops/s
[info] # Warmup Iteration   4: 810999.862 ops/s
[info] # Warmup Iteration   5: 811528.337 ops/s
[info] Iteration   1: 811190.488 ops/s
[info]                  ·gc.alloc.rate:      210.265 MB/sec
[info]                  ·gc.alloc.rate.norm: 408.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 800669.238 ops/s
[info]                  ·gc.alloc.rate:            208.587 MB/sec
[info]                  ·gc.alloc.rate.norm:       409.955 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1318.632 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 810951.293 ops/s
[info]                  ·gc.alloc.rate:      210.257 MB/sec
[info]                  ·gc.alloc.rate.norm: 408.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 811168.163 ops/s
[info]                  ·gc.alloc.rate:      210.329 MB/sec
[info]                  ·gc.alloc.rate.norm: 408.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 801762.263 ops/s
[info]                  ·gc.alloc.rate:            208.491 MB/sec
[info]                  ·gc.alloc.rate.norm:       409.265 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1316.784 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   807148.289 ±(99.9%) 20909.828 ops/s [Average]
[info]   (min, avg, max) = (800669.238, 807148.289, 811190.488), stdev = 5430.216
[info]   CI (99.9%): [786238.461, 828058.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   209.586 ±(99.9%) 3.683 MB/sec [Average]
[info]   (min, avg, max) = (208.491, 209.586, 210.329), stdev = 0.956
[info]   CI (99.9%): [205.903, 213.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   408.644 ±(99.9%) 3.521 B/op [Average]
[info]   (min, avg, max) = (408.001, 408.644, 409.955), stdev = 0.914
[info]   CI (99.9%): [405.123, 412.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   268.347 ±(99.9%) 1414.917 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.347, 670.928), stdev = 367.449
[info]   CI (99.9%): [≈ 0, 1683.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   527.083 ±(99.9%) 2779.159 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 527.083, 1318.632), stdev = 721.739
[info]   CI (99.9%): [≈ 0, 3306.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 10.000), stdev = 5.477
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.38% complete, ETA 00:05:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 500745.314 ops/s
[info] # Warmup Iteration   2: 1964211.204 ops/s
[info] # Warmup Iteration   3: 1909738.138 ops/s
[info] # Warmup Iteration   4: 1979574.627 ops/s
[info] # Warmup Iteration   5: 1976740.852 ops/s
[info] Iteration   1: 1991991.428 ops/s
[info]                  ·gc.alloc.rate:            850.733 MB/sec
[info]                  ·gc.alloc.rate.norm:       672.177 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 532.112 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1984999.115 ops/s
[info]                  ·gc.alloc.rate:            847.515 MB/sec
[info]                  ·gc.alloc.rate.norm:       672.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.433 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 533.973 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1959255.942 ops/s
[info]                  ·gc.alloc.rate:            837.698 MB/sec
[info]                  ·gc.alloc.rate.norm:       672.986 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1082.009 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   4: 1976590.448 ops/s
[info]                  ·gc.alloc.rate:            844.365 MB/sec
[info]                  ·gc.alloc.rate.norm:       672.304 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.481 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 536.242 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1894911.513 ops/s
[info]                  ·gc.alloc.rate:            821.256 MB/sec
[info]                  ·gc.alloc.rate.norm:       681.962 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 559.372 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   1961549.689 ±(99.9%) 150971.605 ops/s [Average]
[info]   (min, avg, max) = (1894911.513, 1961549.689, 1991991.428), stdev = 39206.846
[info]   CI (99.9%): [1810578.084, 2112521.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   840.313 ±(99.9%) 45.024 MB/sec [Average]
[info]   (min, avg, max) = (821.256, 840.313, 850.733), stdev = 11.693
[info]   CI (99.9%): [795.289, 885.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   674.287 ±(99.9%) 16.584 B/op [Average]
[info]   (min, avg, max) = (672.006, 674.287, 681.962), stdev = 4.307
[info]   CI (99.9%): [657.703, 690.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   808.166 ±(99.9%) 1159.513 MB/sec [Average]
[info]   (min, avg, max) = (673.433, 808.166, 1346.829), stdev = 301.122
[info]   CI (99.9%): [≈ 0, 1967.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   648.742 ±(99.9%) 933.607 B/op [Average]
[info]   (min, avg, max) = (532.112, 648.742, 1082.009), stdev = 242.455
[info]   CI (99.9%): [≈ 0, 1582.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.600, 18.000), stdev = 4.159
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.61% complete, ETA 00:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1270563.043 ops/s
[info] # Warmup Iteration   2: 2016944.781 ops/s
[info] # Warmup Iteration   3: 2171855.771 ops/s
[info] # Warmup Iteration   4: 2153755.233 ops/s
[info] # Warmup Iteration   5: 2193357.506 ops/s
[info] Iteration   1: 2174052.118 ops/s
[info]                  ·gc.alloc.rate:            563.742 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.308 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 488.021 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 2178493.504 ops/s
[info]                  ·gc.alloc.rate:            565.565 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.677 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 487.043 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 2178680.952 ops/s
[info]                  ·gc.alloc.rate:            566.730 MB/sec
[info]                  ·gc.alloc.rate.norm:       409.443 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 487.000 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 2169932.853 ops/s
[info]                  ·gc.alloc.rate:            563.950 MB/sec
[info]                  ·gc.alloc.rate.norm:       409.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 488.968 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 2174542.230 ops/s
[info]                  ·gc.alloc.rate:            563.897 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.160 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 487.936 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2175140.332 ±(99.9%) 13942.247 ops/s [Average]
[info]   (min, avg, max) = (2169932.853, 2175140.332, 2178680.952), stdev = 3620.757
[info]   CI (99.9%): [2161198.085, 2189082.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   564.777 ±(99.9%) 5.081 MB/sec [Average]
[info]   (min, avg, max) = (563.742, 564.777, 566.730), stdev = 1.320
[info]   CI (99.9%): [559.695, 569.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   408.670 ±(99.9%) 2.331 B/op [Average]
[info]   (min, avg, max) = (408.000, 408.670, 409.443), stdev = 0.605
[info]   CI (99.9%): [406.339, 411.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.123 ±(99.9%) 0.425 MB/sec [Average]
[info]   (min, avg, max) = (674.014, 674.123, 674.308), stdev = 0.110
[info]   CI (99.9%): [673.699, 674.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   487.794 ±(99.9%) 3.131 B/op [Average]
[info]   (min, avg, max) = (487.000, 487.794, 488.968), stdev = 0.813
[info]   CI (99.9%): [484.663, 490.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.84% complete, ETA 00:04:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1234194.436 ops/s
[info] # Warmup Iteration   2: 2282801.666 ops/s
[info] # Warmup Iteration   3: 2277290.780 ops/s
[info] # Warmup Iteration   4: 2298713.700 ops/s
[info] # Warmup Iteration   5: 2300968.175 ops/s
[info] Iteration   1: 2301508.326 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2297309.553 ops/s
[info]                  ·gc.alloc.rate:      1.075 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.736 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2299078.048 ops/s
[info]                  ·gc.alloc.rate:      0.747 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.511 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2300025.103 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2299806.156 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2299545.437 ±(99.9%) 5893.063 ops/s [Average]
[info]   (min, avg, max) = (2297309.553, 2299545.437, 2301508.326), stdev = 1530.410
[info]   CI (99.9%): [2293652.374, 2305438.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.364 ±(99.9%) 1.971 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.364, 1.075), stdev = 0.512
[info]   CI (99.9%): [≈ 0, 2.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.250 ±(99.9%) 1.350 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.250, 0.736), stdev = 0.351
[info]   CI (99.9%): [≈ 0, 1.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.07% complete, ETA 00:04:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 710753.390 ops/s
[info] # Warmup Iteration   2: 1819687.562 ops/s
[info] # Warmup Iteration   3: 1880308.028 ops/s
[info] # Warmup Iteration   4: 1911808.058 ops/s
[info] # Warmup Iteration   5: 1870034.208 ops/s
[info] Iteration   1: 1899420.369 ops/s
[info]                  ·gc.alloc.rate:            917.556 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.172 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.580 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 558.044 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1903133.734 ops/s
[info]                  ·gc.alloc.rate:            920.643 MB/sec
[info]                  ·gc.alloc.rate.norm:       761.149 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 556.955 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1896355.515 ops/s
[info]                  ·gc.alloc.rate:            915.686 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.899 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1117.898 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   4: 1912623.194 ops/s
[info]                  ·gc.alloc.rate:            923.723 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.507 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 554.196 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1914895.200 ops/s
[info]                  ·gc.alloc.rate:            924.705 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 553.498 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   1905285.602 ±(99.9%) 31339.757 ops/s [Average]
[info]   (min, avg, max) = (1896355.515, 1905285.602, 1914895.200), stdev = 8138.835
[info]   CI (99.9%): [1873945.845, 1936625.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   920.463 ±(99.9%) 14.905 MB/sec [Average]
[info]   (min, avg, max) = (915.686, 920.463, 924.705), stdev = 3.871
[info]   CI (99.9%): [905.558, 935.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   760.282 ±(99.9%) 1.886 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.282, 761.149), stdev = 0.490
[info]   CI (99.9%): [758.395, 762.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   808.220 ±(99.9%) 1159.547 MB/sec [Average]
[info]   (min, avg, max) = (673.450, 808.220, 1346.899), stdev = 301.131
[info]   CI (99.9%): [≈ 0, 1967.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   668.118 ±(99.9%) 968.212 B/op [Average]
[info]   (min, avg, max) = (553.498, 668.118, 1117.898), stdev = 251.442
[info]   CI (99.9%): [≈ 0, 1636.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.200, 17.000), stdev = 3.834
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.30% complete, ETA 00:04:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 757.490 ops/s
[info] # Warmup Iteration   2: 4221.657 ops/s
[info] # Warmup Iteration   3: 5263.426 ops/s
[info] # Warmup Iteration   4: 5725.113 ops/s
[info] # Warmup Iteration   5: 5749.312 ops/s
[info] Iteration   1: 5749.560 ops/s
[info]                  ·gc.alloc.rate:            687.730 MB/sec
[info]                  ·gc.alloc.rate.norm:       188264.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 184334.957 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 5751.445 ops/s
[info]                  ·gc.alloc.rate:            688.312 MB/sec
[info]                  ·gc.alloc.rate.norm:       188382.942 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 184270.874 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 5757.177 ops/s
[info]                  ·gc.alloc.rate:            688.695 MB/sec
[info]                  ·gc.alloc.rate.norm:       188264.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 184078.891 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 5750.242 ops/s
[info]                  ·gc.alloc.rate:            687.795 MB/sec
[info]                  ·gc.alloc.rate.norm:       188264.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 184302.910 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 5752.090 ops/s
[info]                  ·gc.alloc.rate:            689.216 MB/sec
[info]                  ·gc.alloc.rate.norm:       188595.433 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.295 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 184238.849 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   5752.103 ±(99.9%) 11.570 ops/s [Average]
[info]   (min, avg, max) = (5749.560, 5752.103, 5757.177), stdev = 3.005
[info]   CI (99.9%): [5740.533, 5763.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   688.349 ±(99.9%) 2.408 MB/sec [Average]
[info]   (min, avg, max) = (687.730, 688.349, 689.216), stdev = 0.625
[info]   CI (99.9%): [685.942, 690.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   188354.117 ±(99.9%) 555.978 B/op [Average]
[info]   (min, avg, max) = (188264.071, 188354.117, 188595.433), stdev = 144.386
[info]   CI (99.9%): [187798.139, 188910.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   673.333 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (673.287, 673.333, 673.385), stdev = 0.045
[info]   CI (99.9%): [673.159, 673.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   184245.296 ±(99.9%) 383.833 B/op [Average]
[info]   (min, avg, max) = (184078.891, 184245.296, 184334.957), stdev = 99.680
[info]   CI (99.9%): [183861.463, 184629.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.54% complete, ETA 00:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 273.776 ops/s
[info] # Warmup Iteration   2: 11868.132 ops/s
[info] # Warmup Iteration   3: 16399.894 ops/s
[info] # Warmup Iteration   4: 16615.909 ops/s
[info] # Warmup Iteration   5: 16667.808 ops/s
[info] Iteration   1: 16161.860 ops/s
[info]                  ·gc.alloc.rate:            238.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       23230.344 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65450.862 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 16499.796 ops/s
[info]                  ·gc.alloc.rate:      232.074 MB/sec
[info]                  ·gc.alloc.rate.norm: 22136.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 16032.379 ops/s
[info]                  ·gc.alloc.rate:            233.430 MB/sec
[info]                  ·gc.alloc.rate.norm:       22919.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65916.097 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 16498.948 ops/s
[info]                  ·gc.alloc.rate:      231.850 MB/sec
[info]                  ·gc.alloc.rate.norm: 22120.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 16558.503 ops/s
[info]                  ·gc.alloc.rate:      232.729 MB/sec
[info]                  ·gc.alloc.rate.norm: 22120.025 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   16350.297 ±(99.9%) 911.996 ops/s [Average]
[info]   (min, avg, max) = (16032.379, 16350.297, 16558.503), stdev = 236.842
[info]   CI (99.9%): [15438.302, 17262.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   233.727 ±(99.9%) 10.656 MB/sec [Average]
[info]   (min, avg, max) = (231.850, 233.727, 238.553), stdev = 2.767
[info]   CI (99.9%): [223.071, 244.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22505.084 ±(99.9%) 2046.710 B/op [Average]
[info]   (min, avg, max) = (22120.025, 22505.084, 23230.344), stdev = 531.524
[info]   CI (99.9%): [20458.374, 24551.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   268.695 ±(99.9%) 1416.749 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.695, 672.118), stdev = 367.925
[info]   CI (99.9%): [≈ 0, 1685.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   26273.392 ±(99.9%) 138533.459 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26273.392, 65916.097), stdev = 35976.699
[info]   CI (99.9%): [≈ 0, 164806.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 11.000), stdev = 5.762
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.77% complete, ETA 00:03:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12765.320 ops/s
[info] # Warmup Iteration   2: 20112.834 ops/s
[info] # Warmup Iteration   3: 20046.376 ops/s
[info] # Warmup Iteration   4: 19510.915 ops/s
[info] # Warmup Iteration   5: 20107.514 ops/s
[info] Iteration   1: 19984.506 ops/s
[info]                  ·gc.alloc.rate:      193.856 MB/sec
[info]                  ·gc.alloc.rate.norm: 15265.781 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19986.067 ops/s
[info]                  ·gc.alloc.rate:            187.956 MB/sec
[info]                  ·gc.alloc.rate.norm:       14800.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53084.488 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 20123.547 ops/s
[info]                  ·gc.alloc.rate:      189.258 MB/sec
[info]                  ·gc.alloc.rate.norm: 14800.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20160.751 ops/s
[info]                  ·gc.alloc.rate:      189.594 MB/sec
[info]                  ·gc.alloc.rate.norm: 14800.025 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 20175.739 ops/s
[info]                  ·gc.alloc.rate:      189.700 MB/sec
[info]                  ·gc.alloc.rate.norm: 14800.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   20086.122 ±(99.9%) 361.931 ops/s [Average]
[info]   (min, avg, max) = (19984.506, 20086.122, 20175.739), stdev = 93.992
[info]   CI (99.9%): [19724.191, 20448.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   190.073 ±(99.9%) 8.573 MB/sec [Average]
[info]   (min, avg, max) = (187.956, 190.073, 193.856), stdev = 2.226
[info]   CI (99.9%): [181.500, 198.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14893.174 ±(99.9%) 802.065 B/op [Average]
[info]   (min, avg, max) = (14800.020, 14893.174, 15265.781), stdev = 208.294
[info]   CI (99.9%): [14091.109, 15695.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   134.831 ±(99.9%) 1160.938 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 134.831, 674.157), stdev = 301.492
[info]   CI (99.9%): [≈ 0, 1295.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10616.898 ±(99.9%) 91414.690 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10616.898, 53084.488), stdev = 23740.105
[info]   CI (99.9%): [≈ 0, 102031.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 7.000), stdev = 3.130
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 97.00% complete, ETA 00:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 314.622 ops/s
[info] # Warmup Iteration   2: 2894.928 ops/s
[info] # Warmup Iteration   3: 5235.920 ops/s
[info] # Warmup Iteration   4: 5699.566 ops/s
[info] # Warmup Iteration   5: 5758.158 ops/s
[info] Iteration   1: 5848.162 ops/s
[info]                  ·gc.alloc.rate:                   1626.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              437737.298 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.826 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        361955.025 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 179.274 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 5792.497 ops/s
[info]                  ·gc.alloc.rate:                   1611.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              437674.378 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2020.531 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        548900.761 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1447.809 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         27.000 ms
[info] Iteration   3: 5744.749 ops/s
[info]                  ·gc.alloc.rate:                   1597.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              437638.431 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        371910.527 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1094.928 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 5877.497 ops/s
[info]                  ·gc.alloc.rate:            1634.260 MB/sec
[info]                  ·gc.alloc.rate.norm:       437653.908 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 364923.711 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 5861.406 ops/s
[info]                  ·gc.alloc.rate:                                  1629.650 MB/sec
[info]                  ·gc.alloc.rate.norm:                             437616.070 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.486 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       548879.370 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   5824.862 ±(99.9%) 211.912 ops/s [Average]
[info]   (min, avg, max) = (5744.749, 5824.862, 5877.497), stdev = 55.033
[info]   CI (99.9%): [5612.950, 6036.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1619.824 ±(99.9%) 58.170 MB/sec [Average]
[info]   (min, avg, max) = (1597.718, 1619.824, 1634.260), stdev = 15.107
[info]   CI (99.9%): [1561.654, 1677.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   437664.017 ±(99.9%) 177.853 B/op [Average]
[info]   (min, avg, max) = (437616.070, 437664.017, 437737.298), stdev = 46.188
[info]   CI (99.9%): [437486.164, 437841.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.016 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.497 ±(99.9%) 4.281 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.497, 2.486), stdev = 1.112
[info]   CI (99.9%): [≈ 0, 4.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1625.956 ±(99.9%) 1428.789 MB/sec [Average]
[info]   (min, avg, max) = (1344.826, 1625.956, 2043.986), stdev = 371.052
[info]   CI (99.9%): [197.167, 3054.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   439313.879 ±(99.9%) 385427.061 B/op [Average]
[info]   (min, avg, max) = (361955.025, 439313.879, 548900.761), stdev = 100094.184
[info]   CI (99.9%): [53886.817, 824740.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.999 ±(99.9%) 9.598 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.999, 5.329), stdev = 2.493
[info]   CI (99.9%): [≈ 0, 11.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   544.402 ±(99.9%) 2615.385 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 544.402, 1447.809), stdev = 679.207
[info]   CI (99.9%): [≈ 0, 3159.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   72.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 14.400, 27.000), stdev = 8.735
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.23% complete, ETA 00:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_bbe3575e/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 3982.637 ops/s
[info] # Warmup Iteration   2: 50940.207 ops/s
[info] # Warmup Iteration   3: 52728.438 ops/s
[info] # Warmup Iteration   4: 53728.727 ops/s
[info] # Warmup Iteration   5: 53776.193 ops/s
[info] Iteration   1: 53142.801 ops/s
[info]                  ·gc.alloc.rate:            668.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       19810.266 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19905.426 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 53606.156 ops/s
[info]                  ·gc.alloc.rate:            673.220 MB/sec
[info]                  ·gc.alloc.rate.norm:       19763.938 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.172 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19733.161 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 53700.526 ops/s
[info]                  ·gc.alloc.rate:            674.701 MB/sec
[info]                  ·gc.alloc.rate.norm:       19767.075 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19698.992 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 53603.215 ops/s
[info]                  ·gc.alloc.rate:            673.028 MB/sec
[info]                  ·gc.alloc.rate.norm:       19763.963 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19734.266 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 52023.142 ops/s
[info]                  ·gc.alloc.rate:            653.257 MB/sec
[info]                  ·gc.alloc.rate.norm:       19764.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20333.894 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   53215.168 ±(99.9%) 2699.015 ops/s [Average]
[info]   (min, avg, max) = (52023.142, 53215.168, 53700.526), stdev = 700.926
[info]   CI (99.9%): [50516.153, 55914.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   668.605 ±(99.9%) 34.098 MB/sec [Average]
[info]   (min, avg, max) = (653.257, 668.605, 674.701), stdev = 8.855
[info]   CI (99.9%): [634.508, 702.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19773.852 ±(99.9%) 78.554 B/op [Average]
[info]   (min, avg, max) = (19763.938, 19773.852, 19810.266), stdev = 20.400
[info]   CI (99.9%): [19695.298, 19852.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.139 ±(99.9%) 0.565 MB/sec [Average]
[info]   (min, avg, max) = (672.017, 672.139, 672.377), stdev = 0.147
[info]   CI (99.9%): [671.574, 672.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   19881.148 ±(99.9%) 1022.822 B/op [Average]
[info]   (min, avg, max) = (19698.992, 19881.148, 20333.894), stdev = 265.624
[info]   CI (99.9%): [18858.326, 20903.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.46% complete, ETA 00:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30504.547 ops/s
[info] # Warmup Iteration   2: 78982.007 ops/s
[info] # Warmup Iteration   3: 79414.455 ops/s
[info] # Warmup Iteration   4: 79782.752 ops/s
[info] # Warmup Iteration   5: 80275.427 ops/s
[info] Iteration   1: 79138.368 ops/s
[info]                  ·gc.alloc.rate:                   515.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              10261.376 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13393.349 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.248 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 79721.032 ops/s
[info]                  ·gc.alloc.rate:            520.832 MB/sec
[info]                  ·gc.alloc.rate.norm:       10283.414 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13308.571 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 79870.980 ops/s
[info]                  ·gc.alloc.rate:                   520.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              10256.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13270.622 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.126 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 80556.355 ops/s
[info]                  ·gc.alloc.rate:      524.882 MB/sec
[info]                  ·gc.alloc.rate.norm: 10256.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 78690.206 ops/s
[info]                  ·gc.alloc.rate:            522.391 MB/sec
[info]                  ·gc.alloc.rate.norm:       10446.706 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.217 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13482.910 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   79595.388 ±(99.9%) 2752.212 ops/s [Average]
[info]   (min, avg, max) = (78690.206, 79595.388, 80556.355), stdev = 714.741
[info]   CI (99.9%): [76843.176, 82347.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   520.875 ±(99.9%) 12.729 MB/sec [Average]
[info]   (min, avg, max) = (515.862, 520.875, 524.882), stdev = 3.306
[info]   CI (99.9%): [508.145, 533.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10300.701 ±(99.9%) 317.287 B/op [Average]
[info]   (min, avg, max) = (10256.005, 10300.701, 10446.706), stdev = 82.398
[info]   CI (99.9%): [9983.414, 10617.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.990 ±(99.9%) 1160.218 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.990, 674.217), stdev = 301.305
[info]   CI (99.9%): [≈ 0, 1699.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10691.090 ±(99.9%) 23015.535 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10691.090, 13482.910), stdev = 5977.061
[info]   CI (99.9%): [≈ 0, 33706.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.275 ±(99.9%) 27.813 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.275, 13.248), stdev = 7.223
[info]   CI (99.9%): [≈ 0, 33.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.600, 9.000), stdev = 3.715
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.69% complete, ETA 00:02:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41234.764 ops/s
[info] # Warmup Iteration   2: 88130.385 ops/s
[info] # Warmup Iteration   3: 88242.254 ops/s
[info] # Warmup Iteration   4: 88726.411 ops/s
[info] # Warmup Iteration   5: 88743.669 ops/s
[info] Iteration   1: 88398.813 ops/s
[info]                  ·gc.alloc.rate:      12.219 MB/sec
[info]                  ·gc.alloc.rate.norm: 217.534 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 88619.976 ops/s
[info]                  ·gc.alloc.rate:      9.011 MB/sec
[info]                  ·gc.alloc.rate.norm: 160.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 88511.451 ops/s
[info]                  ·gc.alloc.rate:      9.001 MB/sec
[info]                  ·gc.alloc.rate.norm: 160.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 88487.506 ops/s
[info]                  ·gc.alloc.rate:      8.999 MB/sec
[info]                  ·gc.alloc.rate.norm: 160.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 88784.799 ops/s
[info]                  ·gc.alloc.rate:      9.025 MB/sec
[info]                  ·gc.alloc.rate.norm: 160.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   88560.509 ±(99.9%) 570.247 ops/s [Average]
[info]   (min, avg, max) = (88398.813, 88560.509, 88784.799), stdev = 148.091
[info]   CI (99.9%): [87990.262, 89130.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   9.651 ±(99.9%) 5.528 MB/sec [Average]
[info]   (min, avg, max) = (8.999, 9.651, 12.219), stdev = 1.436
[info]   CI (99.9%): [4.123, 15.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   171.511 ±(99.9%) 99.068 B/op [Average]
[info]   (min, avg, max) = (160.005, 171.511, 217.534), stdev = 25.728
[info]   CI (99.9%): [72.443, 270.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.92% complete, ETA 00:02:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105139.622 ops/s
[info] # Warmup Iteration   2: 224835.480 ops/s
[info] # Warmup Iteration   3: 228247.128 ops/s
[info] # Warmup Iteration   4: 231118.800 ops/s
[info] # Warmup Iteration   5: 230214.242 ops/s
[info] Iteration   1: 229759.302 ops/s
[info]                  ·gc.alloc.rate:                   1228.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              8416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9226.334 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.563 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 229543.578 ops/s
[info]                  ·gc.alloc.rate:            1227.490 MB/sec
[info]                  ·gc.alloc.rate.norm:       8416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9244.551 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 233535.301 ops/s
[info]                  ·gc.alloc.rate:                   1248.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              8416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4543.216 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.957 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 237098.532 ops/s
[info]                  ·gc.alloc.rate:                   1268.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              8417.481 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8994.124 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.531 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 238556.300 ops/s
[info]                  ·gc.alloc.rate:                                  1275.564 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8416.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.135 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.206 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8987.656 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.395 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   233698.603 ±(99.9%) 15872.611 ops/s [Average]
[info]   (min, avg, max) = (229543.578, 233698.603, 238556.300), stdev = 4122.067
[info]   CI (99.9%): [217825.992, 249571.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1249.725 ±(99.9%) 84.888 MB/sec [Average]
[info]   (min, avg, max) = (1227.490, 1249.725, 1275.564), stdev = 22.045
[info]   CI (99.9%): [1164.837, 1334.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8416.298 ±(99.9%) 2.548 B/op [Average]
[info]   (min, avg, max) = (8416.002, 8416.298, 8417.481), stdev = 0.662
[info]   CI (99.9%): [8413.750, 8418.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.027 ±(99.9%) 0.232 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.135), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1217.331 ±(99.9%) 1169.548 MB/sec [Average]
[info]   (min, avg, max) = (674.114, 1217.331, 1362.206), stdev = 303.728
[info]   CI (99.9%): [47.783, 2386.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8199.176 ±(99.9%) 7883.847 B/op [Average]
[info]   (min, avg, max) = (4543.216, 8199.176, 9244.551), stdev = 2047.410
[info]   CI (99.9%): [315.329, 16083.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 6.439 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 3.997), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 8.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   10.689 ±(99.9%) 42.845 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.689, 26.531), stdev = 11.127
[info]   CI (99.9%): [≈ 0, 53.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.200, 15.000), stdev = 5.020
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.15% complete, ETA 00:02:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131496.430 ops/s
[info] # Warmup Iteration   2: 367142.167 ops/s
[info] # Warmup Iteration   3: 400036.910 ops/s
[info] # Warmup Iteration   4: 394681.650 ops/s
[info] # Warmup Iteration   5: 394341.482 ops/s
[info] Iteration   1: 398657.469 ops/s
[info]                  ·gc.alloc.rate:      447.926 MB/sec
[info]                  ·gc.alloc.rate.norm: 1768.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 394563.816 ops/s
[info]                  ·gc.alloc.rate:            443.420 MB/sec
[info]                  ·gc.alloc.rate.norm:       1769.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2683.758 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 394470.601 ops/s
[info]                  ·gc.alloc.rate:            444.516 MB/sec
[info]                  ·gc.alloc.rate.norm:       1773.407 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.853 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2684.363 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 380354.787 ops/s
[info]                  ·gc.alloc.rate:      427.160 MB/sec
[info]                  ·gc.alloc.rate.norm: 1768.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 384209.846 ops/s
[info]                  ·gc.alloc.rate:            431.623 MB/sec
[info]                  ·gc.alloc.rate.norm:       1768.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2755.992 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   390451.304 ±(99.9%) 29907.886 ops/s [Average]
[info]   (min, avg, max) = (380354.787, 390451.304, 398657.469), stdev = 7766.983
[info]   CI (99.9%): [360543.418, 420359.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   438.929 ±(99.9%) 34.666 MB/sec [Average]
[info]   (min, avg, max) = (427.160, 438.929, 447.926), stdev = 9.003
[info]   CI (99.9%): [404.262, 473.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1769.302 ±(99.9%) 8.991 B/op [Average]
[info]   (min, avg, max) = (1768.001, 1769.302, 1773.407), stdev = 2.335
[info]   CI (99.9%): [1760.311, 1778.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.670 ±(99.9%) 1418.958 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 403.670, 672.853), stdev = 368.499
[info]   CI (99.9%): [≈ 0, 1822.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1624.823 ±(99.9%) 5712.600 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1624.823, 2755.992), stdev = 1483.544
[info]   CI (99.9%): [≈ 0, 7337.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.800, 10.000), stdev = 5.310
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.38% complete, ETA 00:01:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 744809.664 ops/s
[info] # Warmup Iteration   2: 917828.525 ops/s
[info] # Warmup Iteration   3: 959723.879 ops/s
[info] # Warmup Iteration   4: 996331.910 ops/s
[info] # Warmup Iteration   5: 986286.778 ops/s
[info] Iteration   1: 992248.357 ops/s
[info]                  ·gc.alloc.rate:            519.414 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1069.297 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 996611.616 ops/s
[info]                  ·gc.alloc.rate:            521.795 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1064.621 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 993277.030 ops/s
[info]                  ·gc.alloc.rate:            521.310 MB/sec
[info]                  ·gc.alloc.rate.norm:       826.147 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1068.163 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 999649.563 ops/s
[info]                  ·gc.alloc.rate:      523.265 MB/sec
[info]                  ·gc.alloc.rate.norm: 824.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 990471.863 ops/s
[info]                  ·gc.alloc.rate:            518.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.798 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1071.193 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   994451.686 ±(99.9%) 14116.259 ops/s [Average]
[info]   (min, avg, max) = (990471.863, 994451.686, 999649.563), stdev = 3665.948
[info]   CI (99.9%): [980335.427, 1008567.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   520.955 ±(99.9%) 6.777 MB/sec [Average]
[info]   (min, avg, max) = (518.993, 520.955, 523.265), stdev = 1.760
[info]   CI (99.9%): [514.178, 527.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   824.589 ±(99.9%) 3.607 B/op [Average]
[info]   (min, avg, max) = (824.000, 824.589, 826.147), stdev = 0.937
[info]   CI (99.9%): [820.983, 828.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.253 ±(99.9%) 1160.783 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.253, 674.167), stdev = 301.452
[info]   CI (99.9%): [≈ 0, 1700.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   854.655 ±(99.9%) 1839.732 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 854.655, 1071.193), stdev = 477.773
[info]   CI (99.9%): [≈ 0, 2694.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.800, 8.000), stdev = 3.271
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.61% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19567.123 ops/s
[info] # Warmup Iteration   2: 66248.870 ops/s
[info] # Warmup Iteration   3: 67119.204 ops/s
[info] # Warmup Iteration   4: 70326.254 ops/s
[info] # Warmup Iteration   5: 69886.157 ops/s
[info] Iteration   1: 72093.669 ops/s
[info]                  ·gc.alloc.rate:                                  2224.077 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48539.089 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.079 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2715.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59274.610 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     5.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                116.339 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 72638.112 ops/s
[info]                  ·gc.alloc.rate:            2240.562 MB/sec
[info]                  ·gc.alloc.rate.norm:       48553.453 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2043.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 44293.832 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 70672.212 ops/s
[info]                  ·gc.alloc.rate:            2186.385 MB/sec
[info]                  ·gc.alloc.rate.norm:       48677.796 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.897 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 45527.697 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 71492.491 ops/s
[info]                  ·gc.alloc.rate:            2205.255 MB/sec
[info]                  ·gc.alloc.rate.norm:       48536.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 45003.702 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 71257.096 ops/s
[info]                  ·gc.alloc.rate:                                  2199.823 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48573.693 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.600 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60205.321 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   71630.716 ±(99.9%) 2924.082 ops/s [Average]
[info]   (min, avg, max) = (70672.212, 71630.716, 72638.112), stdev = 759.375
[info]   CI (99.9%): [68706.634, 74554.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2211.220 ±(99.9%) 81.879 MB/sec [Average]
[info]   (min, avg, max) = (2186.385, 2211.220, 2240.562), stdev = 21.264
[info]   CI (99.9%): [2129.342, 2293.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   48576.007 ±(99.9%) 226.486 B/op [Average]
[info]   (min, avg, max) = (48536.006, 48576.007, 48677.796), stdev = 58.818
[info]   CI (99.9%): [48349.521, 48802.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.019 ±(99.9%) 0.132 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.079), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2315.248 ±(99.9%) 1427.374 MB/sec [Average]
[info]   (min, avg, max) = (2043.997, 2315.248, 2726.600), stdev = 370.684
[info]   CI (99.9%): [887.874, 3742.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   50861.032 ±(99.9%) 31281.886 B/op [Average]
[info]   (min, avg, max) = (44293.832, 50861.032, 60205.321), stdev = 8123.806
[info]   CI (99.9%): [19579.147, 82142.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.180 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.331), stdev = 2.384
[info]   CI (99.9%): [≈ 0, 10.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   23.268 ±(99.9%) 200.342 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.268, 116.339), stdev = 52.028
[info]   CI (99.9%): [≈ 0, 223.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 15.000), stdev = 4.658
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.85% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 163273.501 ops/s
[info] # Warmup Iteration   2: 320785.940 ops/s
[info] # Warmup Iteration   3: 325265.193 ops/s
[info] # Warmup Iteration   4: 324849.267 ops/s
[info] # Warmup Iteration   5: 324725.761 ops/s
[info] Iteration   1: 324554.693 ops/s
[info]                  ·gc.alloc.rate:            517.797 MB/sec
[info]                  ·gc.alloc.rate.norm:       2510.567 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.215 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3268.967 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 327474.006 ops/s
[info]                  ·gc.alloc.rate:      520.913 MB/sec
[info]                  ·gc.alloc.rate.norm: 2504.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 317525.804 ops/s
[info]                  ·gc.alloc.rate:            508.913 MB/sec
[info]                  ·gc.alloc.rate.norm:       2522.611 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3341.159 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 322002.511 ops/s
[info]                  ·gc.alloc.rate:            512.249 MB/sec
[info]                  ·gc.alloc.rate.norm:       2504.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3294.972 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 325878.855 ops/s
[info]                  ·gc.alloc.rate:            518.508 MB/sec
[info]                  ·gc.alloc.rate.norm:       2504.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.192 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3255.838 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   323487.174 ±(99.9%) 14975.084 ops/s [Average]
[info]   (min, avg, max) = (317525.804, 323487.174, 327474.006), stdev = 3888.982
[info]   CI (99.9%): [308512.090, 338462.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   515.676 ±(99.9%) 19.004 MB/sec [Average]
[info]   (min, avg, max) = (508.913, 515.676, 520.913), stdev = 4.935
[info]   CI (99.9%): [496.672, 534.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2509.036 ±(99.9%) 31.204 B/op [Average]
[info]   (min, avg, max) = (2504.001, 2509.036, 2522.611), stdev = 8.104
[info]   CI (99.9%): [2477.832, 2540.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   539.303 ±(99.9%) 1160.890 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.303, 674.215), stdev = 301.479
[info]   CI (99.9%): [≈ 0, 1700.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2632.187 ±(99.9%) 5667.372 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2632.187, 3341.159), stdev = 1471.798
[info]   CI (99.9%): [≈ 0, 8299.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.400, 8.000), stdev = 3.578
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.08% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 286294.710 ops/s
[info] # Warmup Iteration   2: 661409.156 ops/s
[info] # Warmup Iteration   3: 694324.110 ops/s
[info] # Warmup Iteration   4: 706778.053 ops/s
[info] # Warmup Iteration   5: 715921.791 ops/s
[info] Iteration   1: 709961.037 ops/s
[info]                  ·gc.alloc.rate:            541.277 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1491.479 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 703611.436 ops/s
[info]                  ·gc.alloc.rate:            538.019 MB/sec
[info]                  ·gc.alloc.rate.norm:       1203.234 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.924 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1504.939 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 713356.011 ops/s
[info]                  ·gc.alloc.rate:            545.541 MB/sec
[info]                  ·gc.alloc.rate.norm:       1203.331 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1484.382 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 722279.693 ops/s
[info]                  ·gc.alloc.rate:      550.746 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 698072.487 ops/s
[info]                  ·gc.alloc.rate:                   532.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.826 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1516.878 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.502 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   709456.133 ±(99.9%) 35691.521 ops/s [Average]
[info]   (min, avg, max) = (698072.487, 709456.133, 722279.693), stdev = 9268.975
[info]   CI (99.9%): [673764.612, 745147.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   541.571 ±(99.9%) 27.169 MB/sec [Average]
[info]   (min, avg, max) = (532.272, 541.571, 550.746), stdev = 7.056
[info]   CI (99.9%): [514.402, 568.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1201.313 ±(99.9%) 6.923 B/op [Average]
[info]   (min, avg, max) = (1200.001, 1201.313, 1203.331), stdev = 1.798
[info]   CI (99.9%): [1194.391, 1208.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.292 ±(99.9%) 1158.714 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.292, 672.958), stdev = 300.914
[info]   CI (99.9%): [≈ 0, 1697.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1199.536 ±(99.9%) 2582.539 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1199.536, 1516.878), stdev = 670.677
[info]   CI (99.9%): [≈ 0, 3782.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.300 ±(99.9%) 2.586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.300, 1.502), stdev = 0.672
[info]   CI (99.9%): [≈ 0, 2.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.400, 10.000), stdev = 4.159
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.31% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1022929.161 ops/s
[info] # Warmup Iteration   2: 1335900.123 ops/s
[info] # Warmup Iteration   3: 1338055.437 ops/s
[info] # Warmup Iteration   4: 1344257.418 ops/s
[info] # Warmup Iteration   5: 1393109.350 ops/s
[info] Iteration   1: 1354722.009 ops/s
[info]                  ·gc.alloc.rate:            633.632 MB/sec
[info]                  ·gc.alloc.rate.norm:       736.133 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 783.175 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1379862.366 ops/s
[info]                  ·gc.alloc.rate:            639.171 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.971 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.162 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 768.879 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1378387.389 ops/s
[info]                  ·gc.alloc.rate:            641.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       732.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 769.731 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1386950.938 ops/s
[info]                  ·gc.alloc.rate:            641.710 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 764.980 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1392177.784 ops/s
[info]                  ·gc.alloc.rate:            644.019 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.189 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 762.083 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1378420.097 ±(99.9%) 55325.117 ops/s [Average]
[info]   (min, avg, max) = (1354722.009, 1378420.097, 1392177.784), stdev = 14367.757
[info]   CI (99.9%): [1323094.980, 1433745.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   639.919 ±(99.9%) 15.087 MB/sec [Average]
[info]   (min, avg, max) = (633.632, 639.919, 644.019), stdev = 3.918
[info]   CI (99.9%): [624.832, 655.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   730.666 ±(99.9%) 13.322 B/op [Average]
[info]   (min, avg, max) = (728.000, 730.666, 736.133), stdev = 3.460
[info]   CI (99.9%): [717.344, 743.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.132 ±(99.9%) 0.445 MB/sec [Average]
[info]   (min, avg, max) = (673.995, 674.132, 674.306), stdev = 0.116
[info]   CI (99.9%): [673.687, 674.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   769.769 ±(99.9%) 31.195 B/op [Average]
[info]   (min, avg, max) = (762.083, 769.769, 783.175), stdev = 8.101
[info]   CI (99.9%): [738.574, 800.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.54% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1089603.344 ops/s
[info] # Warmup Iteration   2: 1426622.461 ops/s
[info] # Warmup Iteration   3: 1474940.558 ops/s
[info] # Warmup Iteration   4: 1490686.741 ops/s
[info] # Warmup Iteration   5: 1491529.278 ops/s
[info] Iteration   1: 1489528.325 ops/s
[info]                  ·gc.alloc.rate:      0.375 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.397 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1494072.957 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.179 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1495003.261 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1494989.426 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1494656.587 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1493650.111 ±(99.9%) 8990.591 ops/s [Average]
[info]   (min, avg, max) = (1489528.325, 1493650.111, 1495003.261), stdev = 2334.828
[info]   CI (99.9%): [1484659.520, 1502640.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.109 ±(99.9%) 0.639 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.109, 0.375), stdev = 0.166
[info]   CI (99.9%): [≈ 0, 0.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.115 ±(99.9%) 0.675 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.115, 0.397), stdev = 0.175
[info]   CI (99.9%): [≈ 0, 0.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.77% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 199135.016 ops/s
[info] # Warmup Iteration   2: 392225.573 ops/s
[info] # Warmup Iteration   3: 403498.745 ops/s
[info] # Warmup Iteration   4: 400105.596 ops/s
[info] # Warmup Iteration   5: 401854.158 ops/s
[info] Iteration   1: 401964.384 ops/s
[info]                  ·gc.alloc.rate:            599.396 MB/sec
[info]                  ·gc.alloc.rate.norm:       2347.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2636.907 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 408340.567 ops/s
[info]                  ·gc.alloc.rate:      606.066 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 391492.022 ops/s
[info]                  ·gc.alloc.rate:            581.051 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2704.690 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 399997.729 ops/s
[info]                  ·gc.alloc.rate:            593.780 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.870 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2647.151 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 401474.960 ops/s
[info]                  ·gc.alloc.rate:                   595.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.669 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2637.493 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.611 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   400653.933 ±(99.9%) 23251.556 ops/s [Average]
[info]   (min, avg, max) = (391492.022, 400653.933, 408340.567), stdev = 6038.355
[info]   CI (99.9%): [377402.377, 423905.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   595.254 ±(99.9%) 35.421 MB/sec [Average]
[info]   (min, avg, max) = (581.051, 595.254, 606.066), stdev = 9.199
[info]   CI (99.9%): [559.832, 630.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2338.345 ±(99.9%) 18.777 B/op [Average]
[info]   (min, avg, max) = (2336.001, 2338.345, 2347.053), stdev = 4.876
[info]   CI (99.9%): [2319.568, 2357.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   538.350 ±(99.9%) 1158.839 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.350, 673.419), stdev = 300.947
[info]   CI (99.9%): [≈ 0, 1697.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2125.248 ±(99.9%) 4576.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2125.248, 2704.690), stdev = 1188.382
[info]   CI (99.9%): [≈ 0, 6701.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.522 ±(99.9%) 4.497 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.522, 2.611), stdev = 1.168
[info]   CI (99.9%): [≈ 0, 5.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.000, 9.000), stdev = 3.937
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:56:31
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                               (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                                     N/A  thrpt    5    715288.595 ±   45653.897   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                                      N/A  thrpt    5      1931.037 ±     121.747  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                                 N/A  thrpt    5      4248.907 ±       4.770    B/op
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                          N/A  thrpt    5         0.031 ±       0.263  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                     N/A  thrpt    5         0.066 ±       0.570    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                N/A  thrpt    5      1903.138 ±    1171.538  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                           N/A  thrpt    5      4184.479 ±    2497.683    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                         N/A  thrpt    5         1.599 ±       8.623  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                    N/A  thrpt    5         3.541 ±      19.071    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                           N/A  thrpt    5        14.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                            N/A  thrpt    5        39.000                    ms
[info] AdtBenchmark.readJacksonScala                                                                              N/A  thrpt    5   1474009.495 ±  136844.473   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                               N/A  thrpt    5       982.875 ±      92.432  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                          N/A  thrpt    5      1049.546 ±       7.280    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5       941.861 ±    1419.092  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5      1012.511 ±    1606.287    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         0.533 ±       4.588  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5         0.570 ±       4.910    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                                    N/A  thrpt    5         7.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                                     N/A  thrpt    5        67.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                             N/A  thrpt    5   5621882.333 ±  159870.179   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                              N/A  thrpt    5       371.919 ±       9.338  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                         N/A  thrpt    5       104.129 ±       1.113    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5       404.548 ±    1422.043  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5       113.706 ±     399.697    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                                 N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                            N/A  thrpt    5         0.038 ±       0.323    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                                   N/A  thrpt    5         3.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                                    N/A  thrpt    5        21.000                    ms
[info] AdtBenchmark.readPlayJson                                                                                  N/A  thrpt    5    297501.538 ±    8043.852   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                                   N/A  thrpt    5      2315.430 ±      63.026  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                              N/A  thrpt    5     12249.756 ±       7.566    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       N/A  thrpt    5         0.002 ±       0.015  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  N/A  thrpt    5         0.012 ±       0.080    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                             N/A  thrpt    5      2312.682 ±    1415.566  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                        N/A  thrpt    5     12239.729 ±    7623.475    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                      N/A  thrpt    5         1.732 ±      14.912  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                 N/A  thrpt    5         9.243 ±      79.581    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                        N/A  thrpt    5        17.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                         N/A  thrpt    5        41.000                    ms
[info] AdtBenchmark.writeCirce                                                                                    N/A  thrpt    5    704078.677 ±   67087.503   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                                     N/A  thrpt    5      1993.687 ±     179.690  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                                N/A  thrpt    5      4456.693 ±      53.759    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.005 ±       0.040  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.011 ±       0.091    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      2039.861 ±      32.956  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5      4561.735 ±     383.754    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         1.465 ±       7.779  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         3.366 ±      17.877    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                          N/A  thrpt    5        15.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                           N/A  thrpt    5        43.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                             N/A  thrpt    5   2378614.156 ±   56303.119   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                              N/A  thrpt    5       991.569 ±      22.854  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                         N/A  thrpt    5       656.086 ±       0.497    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5       942.122 ±    1420.348  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5       624.196 ±     951.267    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                 N/A  thrpt    5         0.800 ±       5.563  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                            N/A  thrpt    5         0.530 ±       3.682    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                                   N/A  thrpt    5         7.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                                    N/A  thrpt    5        65.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                            N/A  thrpt    5  13548254.022 ±  540619.407   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                             N/A  thrpt    5       689.869 ±      29.277  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5        80.142 ±       0.696    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       674.113 ±       0.329  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5        78.319 ±       3.126    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                                  N/A  thrpt    5         5.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                                   N/A  thrpt    5        38.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                                    N/A  thrpt    5  14653064.851 ±   81464.645   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                     N/A  thrpt    5         1.901 ±      16.360  MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                N/A  thrpt    5         0.205 ±       1.761    B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                          N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                                 N/A  thrpt    5    528343.283 ±   43729.868   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                                  N/A  thrpt    5      1593.132 ±     131.340  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                             N/A  thrpt    5      4745.460 ±       8.416    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5        ≈ 10⁻³                MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         0.001 ±       0.011    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1624.607 ±    1429.392  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5      4841.480 ±    4292.333    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         1.732 ±       7.609  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5         5.142 ±      22.543    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                       N/A  thrpt    5        12.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                        N/A  thrpt    5        69.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                                 N/A  thrpt    5   1830003.867 ±   43251.270   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                                  N/A  thrpt    5      2448.563 ±      57.484  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                             N/A  thrpt    5      2105.842 ±       8.567    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.032 ±       0.262  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         0.027 ±       0.225    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      2452.605 ±    1441.158  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5      2110.484 ±    1272.955    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         0.666 ±       5.735  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5         0.571 ±       4.917    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                       N/A  thrpt    5        18.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                        N/A  thrpt    5        28.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                           N/A  thrpt    5   8006154.609 ±  554703.738   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                            N/A  thrpt    5       977.291 ±      68.525  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       N/A  thrpt    5       192.116 ±       0.721    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       938.518 ±    1412.942  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5       184.259 ±     273.990    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                               N/A  thrpt    5         0.932 ±       3.890  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                          N/A  thrpt    5         0.186 ±       0.793    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                                 N/A  thrpt    5         7.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                                  N/A  thrpt    5        84.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                          N/A  thrpt    5   2485998.709 ±  184521.962   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                           N/A  thrpt    5      1633.222 ±     115.994  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      N/A  thrpt    5      1033.589 ±       8.521    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               N/A  thrpt    5         0.014 ±       0.124  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          N/A  thrpt    5         0.009 ±       0.076    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5      1624.300 ±    1413.677  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5      1027.550 ±     882.879    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                              N/A  thrpt    5         1.732 ±       9.177  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         N/A  thrpt    5         1.098 ±       5.816    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                                N/A  thrpt    5        12.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                                 N/A  thrpt    5        59.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                         N/A  thrpt    5  11285720.455 ±  891485.072   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          N/A  thrpt    5      1434.756 ±     111.422  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5       200.109 ±       0.501    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              N/A  thrpt    5         0.024 ±       0.209  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         N/A  thrpt    5         0.003 ±       0.030    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5      1490.668 ±    1144.421  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5       207.885 ±     157.501    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                             N/A  thrpt    5         1.465 ±       7.779  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        N/A  thrpt    5         0.201 ±       1.066    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                               N/A  thrpt    5        11.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                                N/A  thrpt    5        52.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                              N/A  thrpt    5   1056750.799 ±   49409.101   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                               N/A  thrpt    5      2520.266 ±     116.909  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          N/A  thrpt    5      3753.156 ±       4.094    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   N/A  thrpt    5         0.002 ±       0.010  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              N/A  thrpt    5         0.002 ±       0.015    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5      2587.580 ±    1168.576  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5      3856.796 ±    1847.558    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         1.066 ±       9.179  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5         1.599 ±      13.764    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                                    N/A  thrpt    5        19.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                                     N/A  thrpt    5        39.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                                N/A  thrpt    5   2223876.536 ±   67821.076   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                                 N/A  thrpt    5      1853.889 ±      56.436  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                            N/A  thrpt    5      1312.100 ±       0.475    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.001 ±       0.005  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         0.001 ±       0.003    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      1903.075 ±    1163.444  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5      1347.578 ±     838.345    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         1.599 ±       8.622  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5         1.141 ±       6.163    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                                      N/A  thrpt    5        14.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                       N/A  thrpt    5        40.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                          N/A  thrpt    5  16933609.340 ± 1220401.244   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                           N/A  thrpt    5       516.711 ±      37.612  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                      N/A  thrpt    5        48.025 ±       0.216    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5       536.602 ±    1155.076  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5        50.058 ±     107.836    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                                N/A  thrpt    5         4.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                                 N/A  thrpt    5        40.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                         N/A  thrpt    5   5742091.006 ±  273551.273   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                          N/A  thrpt    5      1576.244 ±      74.512  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5       432.075 ±       0.331    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              N/A  thrpt    5         0.028 ±       0.242  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         N/A  thrpt    5         0.008 ±       0.066    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5      1626.189 ±    1424.516  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5       445.990 ±     394.963    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                             N/A  thrpt    5         1.732 ±       9.176  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        N/A  thrpt    5         0.475 ±       2.514    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                               N/A  thrpt    5        12.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                                N/A  thrpt    5        64.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                        N/A  thrpt    5  18422669.963 ± 1038294.965   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         N/A  thrpt    5       562.491 ±      31.480  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5        48.058 ±       0.408    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5       674.082 ±       0.336  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5        57.602 ±       3.218    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                              N/A  thrpt    5         5.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                               N/A  thrpt    5        38.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                                N/A  thrpt    5  21258887.345 ±   59903.606   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 N/A  thrpt    5         0.224 ±       1.386  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            N/A  thrpt    5         0.017 ±       0.103    B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                             N/A  thrpt    5   1445644.778 ±   31030.697   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                              N/A  thrpt    5      2167.784 ±      45.134  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         N/A  thrpt    5      2360.308 ±       1.861    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  N/A  thrpt    5         0.036 ±       0.303  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             N/A  thrpt    5         0.039 ±       0.331    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5      2176.637 ±    1179.516  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5      2370.220 ±    1294.327    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 N/A  thrpt    5         1.732 ±      12.246  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            N/A  thrpt    5         1.900 ±      13.452    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                                   N/A  thrpt    5        16.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                                    N/A  thrpt    5        40.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                                   128  thrpt    5    269036.125 ±   13744.662   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1479.816 ±      67.454  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5      8656.974 ±      64.825    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.015 ±       0.117  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.084 ±       0.677    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1490.243 ±    1144.501  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      8722.551 ±    6817.059    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.466 ±       8.192  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         8.680 ±      48.687    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                         128  thrpt    5        11.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                          128  thrpt    5        63.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                            128  thrpt    5    389956.243 ±    5395.507   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       493.837 ±       6.548  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1993.156 ±       9.326    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       128  thrpt    5       538.084 ±    1158.267  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5      2175.227 ±    4682.355    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           128  thrpt    5         0.538 ±       4.636    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        39.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                           128  thrpt    5    971106.975 ±   55372.302   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       648.531 ±      36.792  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      1051.061 ±      16.865    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5       674.145 ±       0.609  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5      1092.755 ±      61.571    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        38.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                                128  thrpt    5     82416.810 ±    1520.315   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2524.887 ±      42.075  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     48212.968 ±     169.501    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.001 ±       0.006  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.019 ±       0.121    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           128  thrpt    5      2589.509 ±    1172.781  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     49454.815 ±   22656.794    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         2.538 ±      21.849    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        19.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        32.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                                  128  thrpt    5    297159.943 ±   24329.895   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       461.217 ±      36.735  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      2443.108 ±      12.779    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             128  thrpt    5       404.294 ±    1421.152  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      2168.055 ±    7621.079    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.713 ±       6.140    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         3.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        26.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                           128  thrpt    5    838533.685 ±   56684.172   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       606.233 ±      40.650  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1137.934 ±      15.287    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5       672.890 ±       1.392  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5      1263.360 ±      86.119    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        47.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                          128  thrpt    5   1958809.858 ±   64367.869   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       907.965 ±      17.940  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       729.524 ±      11.388    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     128  thrpt    5       943.833 ±    1421.907  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                128  thrpt    5       760.150 ±    1167.678    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        55.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2297565.758 ±  115084.776   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.659 ±       5.662  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.449 ±       3.860    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                               128  thrpt    5    416808.978 ±    5422.587   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       602.394 ±       7.626  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      2274.423 ±      20.855    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          128  thrpt    5       538.580 ±    1159.335  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      2035.548 ±    4381.712    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         1.009 ±       5.323    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         4.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        36.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                                      128  thrpt    5     16606.951 ±    1129.463   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1138.863 ±      68.900  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5    107930.796 ±    1955.952    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1214.369 ±    1163.064  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    115301.127 ±  112935.012    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.599 ±       7.390  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5       150.145 ±     690.810    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                            128  thrpt    5         9.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                             128  thrpt    5        64.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                               128  thrpt    5     28638.546 ±     655.931   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5       716.883 ±      16.094  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5     39398.948 ±     128.582    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5       807.301 ±    1158.494  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5     44433.533 ±   64915.336    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5        56.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                              128  thrpt    5     42187.860 ±    1837.146   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       571.154 ±      14.780  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5     21311.317 ±    1432.157    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5       674.111 ±       0.389  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5     25151.665 ±    1112.661    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5         5.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        37.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                                   128  thrpt    5     23797.892 ±     542.505   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      1171.806 ±      46.722  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     77482.111 ±    2046.154    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1214.267 ±    1158.023  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     80305.338 ±   76780.864    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.732 ±       7.166  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5       114.850 ±     476.098    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5         9.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        70.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                                     128  thrpt    5     22767.791 ±    1108.884   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5      1298.503 ±      46.837  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     89771.827 ±    1707.963    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.002 ±       0.015  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.120 ±       1.033    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1353.038 ±      27.817  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     93545.866 ±    2931.991    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.599 ±       8.621  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5       110.257 ±     595.987    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5        60.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                              128  thrpt    5     21091.394 ±    2519.656   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1165.012 ±      91.363  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     86962.725 ±    4220.888    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5      1078.136 ±    1416.678  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5     80853.502 ±  110415.588    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         1.599 ±       8.621  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5       116.501 ±     629.381    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         8.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        69.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                             128  thrpt    5     25165.308 ±    1283.110   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1303.636 ±      56.871  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5     81542.179 ±     664.071    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5      1352.192 ±      25.378  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5     84586.386 ±    3369.975    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                 128  thrpt    5         1.598 ±       7.821  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            128  thrpt    5        99.701 ±     487.435    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        63.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5     25767.011 ±    1090.615   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5      1283.464 ±      54.071  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5     78397.613 ±     144.486    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'          128  thrpt    5         0.012 ±       0.100  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     128  thrpt    5         0.699 ±       6.018    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                128  thrpt    5      1352.439 ±      24.913  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                           128  thrpt    5     82616.723 ±    2881.008    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                         128  thrpt    5         1.466 ±       8.193  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                    128  thrpt    5        89.560 ±     501.324    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                            128  thrpt    5        62.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                                  128  thrpt    5      7308.596 ±     176.903   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5       957.664 ±      20.877  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    206222.923 ±     653.922    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1076.906 ±    1418.631  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5    232252.068 ±  309759.269    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.799 ±       5.561  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5       173.336 ±    1207.481    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5         8.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        72.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                          128  thrpt    5     17175.849 ±     647.060   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                           128  thrpt    5      1331.594 ±      20.651  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                      128  thrpt    5    122030.869 ±    3071.776    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1217.163 ±    1169.302  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5    111373.571 ±  104983.385    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         1.598 ±       7.389  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5       146.378 ±     677.773    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                                128  thrpt    5         9.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                                 128  thrpt    5        54.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                                   128  thrpt    5     34027.953 ±    1185.843   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       838.622 ±      23.948  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5     38787.958 ±     283.164    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       807.797 ±    1160.004  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     37393.974 ±   54241.692    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         6.194 ±      53.330    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                         128  thrpt    5         6.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                          128  thrpt    5        56.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                                  128  thrpt    5     58998.212 ±    3187.765   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       763.811 ±      44.827  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5     20376.911 ±     271.710    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       808.907 ±    1161.021  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     21626.401 ±   31819.899    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                        128  thrpt    5         6.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                         128  thrpt    5        44.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                       128  thrpt    5     24031.568 ±    2804.708   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                        128  thrpt    5      1484.629 ±     148.230  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     97232.209 ±    2702.676    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.001 ±       0.005  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.035 ±       0.305    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1490.187 ±    1191.773  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     97384.929 ±   70678.743    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.732 ±       7.609  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5       113.722 ±     499.070    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                             128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                              128  thrpt    5        60.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                                  128  thrpt    5     25516.579 ±    1053.143   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                   128  thrpt    5      1445.781 ±      61.093  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5     89177.970 ±     123.814    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       128  thrpt    5         0.003 ±       0.029  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  128  thrpt    5         0.202 ±       1.737    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1490.372 ±    1192.835  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     91887.282 ±   72207.936    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         1.865 ±       7.779  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5       115.964 ±     485.814    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                        128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                         128  thrpt    5        64.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                                 128  thrpt    5     34981.281 ±     733.429   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5      1379.063 ±      24.912  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5     62052.243 ±     206.573    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.002 ±       0.019  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         0.100 ±       0.857    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5      1353.858 ±      26.099  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     60918.411 ±     924.990    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         1.465 ±       7.779  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        66.002 ±     350.778    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                       128  thrpt    5        10.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                        128  thrpt    5        53.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                         128  thrpt    5     35256.608 ±     811.201   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          128  thrpt    5      1327.973 ±      30.484  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     128  thrpt    5     59279.339 ±      26.401    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'              128  thrpt    5         0.005 ±       0.045  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         128  thrpt    5         0.230 ±       1.983    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                    128  thrpt    5      1354.023 ±      26.656  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                               128  thrpt    5     60442.553 ±     561.328    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                             128  thrpt    5         1.466 ±       7.781  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                        128  thrpt    5        65.452 ±     347.543    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                128  thrpt    5        53.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                         128  thrpt    5    303501.654 ±   19786.792   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5      1534.753 ±      78.520  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5      7958.568 ±     121.915    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.003 ±       0.029  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.017 ±       0.147    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1492.017 ±    1189.099  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      7728.432 ±    5886.857    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.465 ±       8.192  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         7.729 ±      43.491    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                               128  thrpt    5        11.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                                128  thrpt    5        53.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                                   128  thrpt    5   1331281.473 ±   30131.765   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                                    128  thrpt    5       420.050 ±       9.675  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                               128  thrpt    5       496.592 ±       2.551    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                              128  thrpt    5       536.657 ±    1155.196  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       636.086 ±    1369.228    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                         128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                          128  thrpt    5        47.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                                  128  thrpt    5    611172.172 ±   32662.546   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       491.892 ±      28.253  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5      1266.626 ±      13.835    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       538.507 ±    1159.177  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      1389.041 ±    2991.494    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.340 ±       2.932    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        37.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                                 128  thrpt    5   1730403.839 ±   86540.763   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       337.495 ±      29.343  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5       306.950 ±      15.696    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       404.497 ±    1421.866  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5       366.852 ±    1289.738    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        23.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                                      128  thrpt    5     69011.780 ±    3234.637   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      2237.159 ±     101.184  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5     51019.381 ±      72.855    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.005 ±       0.038  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.122 ±       0.869    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      2179.610 ±    1176.042  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     49705.728 ±   26628.545    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.799 ±       6.880  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        18.183 ±     156.565    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        16.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        36.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                        128  thrpt    5    324417.080 ±   11805.390   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5       504.615 ±       9.896  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5      2448.511 ±      49.076    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       404.291 ±    1421.140  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      1972.274 ±    6933.267    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.647 ±       5.569    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                              128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        24.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                                  128  thrpt    5   1205949.885 ±   81928.276   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                                   128  thrpt    5       559.050 ±      36.844  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                              128  thrpt    5       729.552 ±      13.265    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                             128  thrpt    5       536.698 ±    1155.284  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5       703.988 ±    1516.116    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                        128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                         128  thrpt    5        40.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                                 128  thrpt    5    937959.923 ±   19034.640   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       665.192 ±      11.602  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5      1116.129 ±      22.233    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       673.482 ±       0.484  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      1130.049 ±      22.745    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        44.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                                128  thrpt    5   2410315.317 ±  120816.680   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      1115.178 ±      54.581  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       728.204 ±       1.464    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1214.891 ±    1164.279  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5       794.748 ±     778.120    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         1.466 ±       8.193  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         0.953 ±       5.332    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        64.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5   2747414.388 ±   27188.869   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5         0.006 ±       0.044  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5         0.003 ±       0.025    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                                     128  thrpt    5    491136.971 ±    6256.569   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5       553.119 ±       9.828  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5      1771.845 ±      19.872    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5       672.588 ±       4.638  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      2154.572 ±      38.242    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.853 ±       4.499    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        45.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                            128  thrpt    5    144930.101 ±   12933.789   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1741.407 ±     152.035  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     18912.097 ±      47.832    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.013 ±       0.113  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.141 ±       1.210    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1746.244 ±    1368.733  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     18971.620 ±   14962.837    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         1.599 ±       8.622  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        17.796 ±      95.884    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        13.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        47.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                                     128  thrpt    5    364724.673 ±    9567.857   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5       302.710 ±       5.332  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5      1306.256 ±      11.905    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       269.381 ±    1420.370  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      1170.951 ±    6174.097    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        18.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                                    128  thrpt    5   1159659.328 ±   26170.506   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       224.398 ±       2.722  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5       304.531 ±       4.573    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       269.801 ±    1422.582  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5       368.211 ±    1941.481    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        15.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                         128  thrpt    5     59614.310 ±    3030.436   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      2305.280 ±     118.091  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     60862.708 ±      55.862    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.001 ±       0.006  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.031 ±       0.165    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      2315.823 ±    1430.894  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     61101.632 ±   36340.349    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±       6.881  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        21.027 ±     181.048    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        17.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        29.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                           128  thrpt    5    256020.682 ±    1719.405   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5      1133.039 ±      15.057  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5      6965.775 ±      93.539    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1215.481 ±    1167.023  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      7474.019 ±    7192.516    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         1.732 ±       8.233  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        10.641 ±      50.567    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5         9.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        60.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                                    128  thrpt    5   1655494.180 ±   48431.461   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       852.000 ±      22.118  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5       810.098 ±       9.403    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       942.595 ±    1419.421  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5       897.934 ±    1373.218    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.127 ±       1.091    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5         7.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        64.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                                   128  thrpt    5   2352853.689 ±   36822.178   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       635.559 ±       4.398  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5       425.182 ±       8.044    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       674.054 ±       0.248  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       450.935 ±       7.104    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5         5.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        38.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5   2642500.121 ±   10962.522   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5         0.169 ±       0.722  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5         0.100 ±       0.431    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                        128  thrpt    5     39032.855 ±    1013.925   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      1651.688 ±      44.602  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     66603.217 ±      60.543    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.030 ±       0.258  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         1.216 ±      10.467    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1628.451 ±    1431.319  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     65675.311 ±   57890.866    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.732 ±      12.112  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        69.524 ±     485.943    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5        12.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        47.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                            128  thrpt    5    240003.441 ±   12466.221   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      2473.224 ±     134.428  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     16216.205 ±     107.691    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.008 ±       0.063  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.054 ±       0.421    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      2453.538 ±    1436.967  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     16079.364 ±    9141.082    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        18.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        26.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                                     128  thrpt    5    305020.766 ±   26772.419   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1464.245 ±     123.231  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5      7556.097 ±      61.070    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1490.271 ±    1192.268  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      7685.369 ±    5951.205    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.865 ±       7.780  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         9.698 ±      40.489    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5        11.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        58.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                                    128  thrpt    5   2072581.125 ±  184535.923   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       718.357 ±      71.855  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5       545.505 ±      10.053    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       674.089 ±       0.513  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5       512.129 ±      45.149    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         5.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        37.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                         128  thrpt    5     63079.980 ±    3459.311   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      2400.860 ±     126.784  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     59908.491 ±     163.850    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.001 ±       0.009  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.027 ±       0.230    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      2451.888 ±    1433.376  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     61246.995 ±   37566.936    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±       6.881  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        20.119 ±     173.229    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        18.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        31.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                           128  thrpt    5    203854.923 ±   13721.314   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5      1725.628 ±     116.268  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     13323.344 ±      17.219    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.002 ±       0.019  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.017 ±       0.147    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1765.440 ±    1415.580  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     13648.886 ±   11282.127    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         1.599 ±       8.622  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        12.472 ±      66.989    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5        13.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        45.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                                    128  thrpt    5   1351038.065 ±   94193.399   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       790.098 ±      54.699  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5       920.325 ±       1.402    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       807.956 ±    1160.463  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5       943.566 ±    1395.477    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.307 ±       1.619    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        54.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                                   128  thrpt    5   2741582.611 ±   76074.074   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       934.362 ±      23.259  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5       536.380 ±       3.031    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       943.870 ±    1422.810  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       542.885 ±     831.270    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5         7.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        53.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5   3078100.455 ±    4363.335   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                        128  thrpt    5    259100.982 ±    4573.403   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      2121.115 ±      30.398  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     12885.441 ±     124.531    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.004 ±       0.035  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.025 ±       0.209    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      2043.143 ±       9.020  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     12411.954 ±     262.211    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         4.827 ±      41.559    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5        15.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        26.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                          128  thrpt    5     24091.202 ±    1597.810   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                           128  thrpt    5      1379.129 ±      87.782  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                                      128  thrpt    5     90082.964 ±     386.732    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.004 ±       0.039  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.289 ±       2.485    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1391.109 ±    1624.749  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     90635.678 ±  101948.386    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         1.732 ±       8.235  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5       113.389 ±     542.226    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                                128  thrpt    5        11.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                                 128  thrpt    5        54.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                                    128  thrpt    5     84708.161 ±    1757.350   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                                     128  thrpt    5       763.418 ±      13.786  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                128  thrpt    5     14182.935 ±      42.662    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                               128  thrpt    5       804.925 ±    1153.978  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     14978.527 ±   21907.645    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         2.499 ±      21.520    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                          128  thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                           128  thrpt    5        62.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                                   128  thrpt    5     53419.435 ±     871.270   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       880.744 ±      13.418  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5     25946.715 ±      65.085    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       942.016 ±    1419.498  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     27787.635 ±   42318.006    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                         128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                          128  thrpt    5        65.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                                  128  thrpt    5    135399.942 ±    1929.078   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       872.910 ±      13.067  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5     10147.567 ±      21.680    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       808.875 ±    1160.764  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      9413.666 ±   13695.474    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                        128  thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                         128  thrpt    5        46.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                       128  thrpt    5     29865.299 ±     650.810   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                        128  thrpt    5      1444.841 ±      31.424  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     76137.817 ±     611.375    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1354.031 ±      32.254  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     71352.266 ±     541.429    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.732 ±       7.164  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        91.524 ±     379.125    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                             128  thrpt    5        10.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                              128  thrpt    5        55.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                         128  thrpt    5     29983.486 ±     842.126   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                          128  thrpt    5       344.369 ±      12.739  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                                     128  thrpt    5     18075.449 ±     669.149    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       269.518 ±    1421.089  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     14233.892 ±   75051.501    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         7.024 ±      60.481    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                               128  thrpt    5         2.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                                128  thrpt    5        16.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                                  128  thrpt    5     29513.260 ±     537.968   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       330.527 ±       5.071  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5     17626.751 ±     127.681    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       269.245 ±    1419.652  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     14430.625 ±   76088.591    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         7.136 ±      61.446    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                        128  thrpt    5         2.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                         128  thrpt    5        18.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                                 128  thrpt    5     32546.549 ±     728.445   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       358.961 ±       8.790  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5     17360.585 ±     287.008    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       404.421 ±    1421.597  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     19630.132 ±   69003.764    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                       128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                        128  thrpt    5        23.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                         128  thrpt    5     31946.402 ±    4067.577   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          128  thrpt    5       317.474 ±      21.524  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     128  thrpt    5     15648.961 ±    1355.601    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                    128  thrpt    5       269.640 ±    1421.736  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                               128  thrpt    5     13279.286 ±   70031.827    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               128  thrpt    5         2.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                128  thrpt    5        15.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                        128  thrpt    5     20858.707 ±    1111.165   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5       730.763 ±      25.115  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     55136.287 ±    1182.909    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       808.348 ±    1159.364  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     61079.266 ±   89134.724    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         9.979 ±      85.925    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                              128  thrpt    5         6.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                               128  thrpt    5        49.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                                 128  thrpt    5     18357.429 ±     268.934   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       521.166 ±       6.835  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     44681.653 ±     408.102    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       538.247 ±    1158.617  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     46214.588 ±   99481.159    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        38.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                                128  thrpt    5    100617.333 ±    2040.315   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       262.494 ±       4.105  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5      4105.446 ±      80.143    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       269.861 ±    1422.900  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      4244.187 ±   22378.371    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5         2.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        15.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                                     128  thrpt    5     15116.536 ±     838.942   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5       926.418 ±      36.240  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     96453.725 ±    2713.183    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5       942.373 ±    1418.916  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     98435.969 ±  152152.342    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        27.960 ±     147.426    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        65.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                       128  thrpt    5     42627.056 ±    1717.414   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5       648.001 ±       7.020  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5     23927.006 ±     775.221    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       673.861 ±       1.280  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     24882.412 ±    1048.807    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         9.769 ±      51.510    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                             128  thrpt    5         5.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        41.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                                128  thrpt    5     57303.626 ±    1976.056   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       679.818 ±      22.404  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5     18673.342 ±      62.183    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       672.995 ±       1.533  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     18487.114 ±     664.263    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         7.298 ±      38.480    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         5.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        45.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                               128  thrpt    5    168069.361 ±    5169.434   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5       266.901 ±       7.676  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5      2499.397 ±      25.924    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5       269.682 ±    1421.953  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      2546.159 ±   13425.299    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5         2.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5        15.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    176282.715 ±     184.294   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5         1.113 ±       8.018  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5         9.943 ±      71.609    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                                    128  thrpt    5     53140.824 ±     868.777   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5       827.751 ±      14.652  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     24516.867 ±     162.146    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               128  thrpt    5       807.993 ±    1160.382  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     23953.521 ±   34787.170    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         3.943 ±      33.950    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5         6.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        53.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                            128  thrpt    5     85884.028 ±    5069.530   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1785.185 ±      91.246  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     32714.749 ±     283.408    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.001 ±       0.009  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.020 ±       0.169    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1766.563 ±    1446.899  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     32340.944 ±   25775.788    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         1.599 ±       9.177  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        29.606 ±     169.134    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        13.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        41.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                                     128  thrpt    5     98722.800 ±    3052.252   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1293.368 ±      39.004  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     20620.198 ±      20.212    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.002 ±       0.020  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.036 ±       0.310    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1352.626 ±      28.477  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     21565.402 ±     386.809    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.865 ±       8.773  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        29.774 ±     140.220    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5        10.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        63.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                                    128  thrpt    5    186232.137 ±    1865.849   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       121.278 ±       1.482  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      1024.897 ±       7.702    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                         128  thrpt    5     41666.980 ±    1023.037   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      2137.340 ±      51.924  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     80727.386 ±      35.097    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.010 ±       0.069  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.375 ±       2.640    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      2176.739 ±    1183.047  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     82218.781 ±   44736.633    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.732 ±      12.248  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        64.978 ±     458.209    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        16.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        49.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                           128  thrpt    5    165341.364 ±    4520.895   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5       575.991 ±      11.216  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5      5483.079 ±     162.280    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       539.157 ±    1160.577  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      5146.122 ±   11077.879    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         1.266 ±      10.901    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        32.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                                    128  thrpt    5    365849.021 ±   34329.471   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       372.120 ±      26.849  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5      1600.987 ±      55.788    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       404.087 ±    1420.424  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1736.098 ±    6105.324    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5         3.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        26.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                                   128  thrpt    5    636780.276 ±   15282.236   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       489.345 ±      10.085  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5      1209.505 ±       7.988    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       539.312 ±    1160.910  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      1335.133 ±    2874.164    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        31.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5    702299.416 ±    1306.143   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5         0.034 ±       0.293  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5         0.077 ±       0.657    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                        128  thrpt    5    248059.551 ±   16939.041   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5       684.182 ±      45.857  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5      4340.960 ±      25.507    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       673.196 ±       1.107  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      4272.309 ±     291.844    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.864 ±       7.435    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5         5.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        46.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                           128  thrpt    5     34741.328 ±    1144.574   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                            128  thrpt    5      1610.969 ±      51.357  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     72984.754 ±     197.999    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.002 ±       0.019  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.098 ±       0.842    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1629.253 ±    1431.990  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     73816.158 ±   64900.007    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         1.465 ±      11.237  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        66.875 ±     513.104    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                                 128  thrpt    5        12.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                                  128  thrpt    5        44.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                                     128  thrpt    5    283705.707 ±   17216.579   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                                      128  thrpt    5       294.747 ±      15.630  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                 128  thrpt    5      1634.901 ±      15.340    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                128  thrpt    5       268.367 ±    1415.022  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      1509.959 ±    7962.638    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                           128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                            128  thrpt    5        20.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                                    128  thrpt    5     94506.629 ±    3877.922   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                                     128  thrpt    5      1041.024 ±      40.898  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5     17338.235 ±     137.702    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1077.185 ±    1421.490  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     17938.746 ±   23642.985    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.066 ±       7.822  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        17.822 ±     130.922    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                          128  thrpt    5         8.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                           128  thrpt    5        70.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                                   128  thrpt    5    422489.459 ±   15738.467   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       276.602 ±      17.942  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5      1030.317 ±      48.702    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       269.679 ±    1421.940  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      1012.253 ±    5337.677    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5        15.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                        128  thrpt    5     32350.846 ±    1737.691   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      1545.632 ±      73.998  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     75197.699 ±     665.330    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.044 ±       0.297  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         2.154 ±      14.698    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1626.380 ±    1424.488  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     79329.622 ±   73743.820    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.732 ±       9.176  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        83.627 ±     443.326    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        12.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        59.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                          128  thrpt    5     70189.975 ±    1840.030   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                           128  thrpt    5       339.518 ±      20.275  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                                      128  thrpt    5      7612.890 ±     455.347    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       269.408 ±    1420.509  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      6073.437 ±   32023.875    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                                128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                                 128  thrpt    5        15.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                                    128  thrpt    5     80415.179 ±    3083.404   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                     128  thrpt    5       403.323 ±      13.918  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                128  thrpt    5      7893.414 ±      46.172    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                               128  thrpt    5       402.642 ±    1415.343  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      7923.242 ±   27852.272    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                          128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                           128  thrpt    5        36.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                                   128  thrpt    5     70167.140 ±    1380.696   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       370.381 ±       9.960  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5      8308.330 ±     233.430    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       404.044 ±    1420.270  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      9082.530 ±   31926.473    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5        26.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                                  128  thrpt    5     80030.294 ±    1315.000   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       401.878 ±       6.866  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5      7902.739 ±     103.704    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       404.479 ±    1421.801  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      7978.542 ±   28045.713    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        23.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5     81120.760 ±    4358.639   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5       343.061 ±      19.253  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5      6655.188 ±      50.813    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                     128  thrpt    5       404.550 ±    1422.049  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                128  thrpt    5      7841.550 ±   27564.960    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                 128  thrpt    5        24.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                         128  thrpt    5      8406.811 ±     296.217   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5      1419.490 ±      51.501  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5    266121.957 ±     409.059    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1451.601 ±     857.453  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5    272247.274 ±  164350.179    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.594 ±       7.369  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5       299.433 ±    1383.359    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                               128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                                128  thrpt    5        63.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                                  128  thrpt    5      6784.330 ±     255.457   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5      1098.360 ±      41.733  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5    254783.707 ±     644.353    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1212.899 ±    1162.789  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5    281693.729 ±  274012.909    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         1.599 ±       7.390  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5       369.974 ±    1711.906    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5         9.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        76.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                                 128  thrpt    5    137873.241 ±    7904.201   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       359.223 ±      21.942  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5      4100.738 ±      40.768    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       404.477 ±    1421.793  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      4627.141 ±   16266.303    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5         3.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        22.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                                      128  thrpt    5      4147.893 ±     127.924   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      1158.359 ±      35.409  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5    439480.784 ±     231.327    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1078.234 ±    1417.306  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    409920.397 ±  547877.983    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.732 ±       8.233  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5       656.527 ±    3126.080    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5         8.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        66.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                        128  thrpt    5     19587.298 ±    1008.273   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5      1054.981 ±      49.421  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     84759.368 ±     491.530    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1078.551 ±    1417.948  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     86939.896 ±  117367.586    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.199 ±       4.934  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        95.972 ±     395.581    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                              128  thrpt    5         8.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        63.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                                 128  thrpt    5     21892.212 ±    1132.805   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5      1159.212 ±      38.367  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     83340.349 ±    1875.536    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5      1214.645 ±    1166.637  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     87439.631 ±   85337.255    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         1.865 ±       8.774  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5       133.232 ±     626.092    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         9.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        68.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                                128  thrpt    5    127973.474 ±    9684.696   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       283.339 ±      20.568  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5      3484.077 ±      35.071    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       269.695 ±    1422.025  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      3380.666 ±   17825.780    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5         2.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        15.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5    136848.975 ±     752.687   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5         0.261 ±       2.243  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5         3.007 ±      25.860    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                                     128  thrpt    5     21256.857 ±     364.529   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5      1161.568 ±      28.806  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     85992.603 ±    1001.250    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1214.890 ±    1167.074  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     89977.494 ±   86868.788    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.732 ±       9.178  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5       128.602 ±     681.776    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5         9.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        67.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                             128  thrpt    5    116151.136 ±    3406.598   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                              128  thrpt    5      1499.663 ±      41.245  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                         128  thrpt    5     20319.831 ±     111.137    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.004 ±       0.033    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1492.372 ±    1188.973  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     20234.213 ±   16478.139    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         1.599 ±       8.624  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        21.686 ±     117.127    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                                   128  thrpt    5        12.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                                    128  thrpt    5        49.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                       128  thrpt    5    515667.093 ±    9559.666   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                        128  thrpt    5       535.041 ±       9.166  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                   128  thrpt    5      1633.014 ±       6.915    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       536.667 ±    1155.216  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      1641.398 ±    3533.244    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                             128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                              128  thrpt    5        40.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                                      128  thrpt    5    261945.083 ±   21735.363   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                       128  thrpt    5       365.308 ±      16.511  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5      2195.159 ±      89.337    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       404.096 ±    1420.455  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      2452.200 ±    8624.253    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                            128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                             128  thrpt    5        27.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                                     128  thrpt    5    695053.381 ±   49389.617   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       452.764 ±      29.551  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      1025.225 ±       8.388    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       404.459 ±    1421.732  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       917.735 ±    3227.202    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.310 ±       2.667    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                           128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                            128  thrpt    5        22.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                          128  thrpt    5     54333.392 ±    3036.343   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                           128  thrpt    5      2166.273 ±     122.372  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5     62750.201 ±      59.568    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.004 ±       0.028  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.110 ±       0.807    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      2178.597 ±    1177.404  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     63091.075 ±   33180.916    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         1.066 ±       9.177  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        31.530 ±     271.479    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                                128  thrpt    5        16.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                                 128  thrpt    5        39.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                            128  thrpt    5    169619.489 ±    5629.739   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                             128  thrpt    5       846.036 ±      26.078  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                        128  thrpt    5      7850.337 ±     146.526    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       943.541 ±    1421.892  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      8758.468 ±   13238.615    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5         2.453 ±      12.933    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                                  128  thrpt    5         7.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                                   128  thrpt    5        56.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                                      128  thrpt    5    619524.670 ±   12241.882   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                       128  thrpt    5       337.730 ±       7.130  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                  128  thrpt    5       857.939 ±       9.354    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       268.330 ±    1414.825  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5       685.075 ±    3612.202    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                            128  thrpt    5         2.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                             128  thrpt    5        23.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                                     128  thrpt    5    611577.302 ±   42602.155   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                      128  thrpt    5       483.892 ±      21.035  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5      1245.265 ±      35.369    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       538.823 ±    1159.857  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      1392.468 ±    2999.319    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                           128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                            128  thrpt    5        36.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                                    128  thrpt    5    982916.455 ±   57651.908   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       535.925 ±      26.253  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5       858.153 ±      10.078    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       539.268 ±    1160.814  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5       867.187 ±    1867.406    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                          128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                           128  thrpt    5        30.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                            128  thrpt    5   1055514.928 ±   10578.885   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                             128  thrpt    5         0.020 ±       0.172  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                        128  thrpt    5         0.030 ±       0.257    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                         128  thrpt    5     32455.346 ±    1002.214   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                          128  thrpt    5      1641.412 ±      52.240  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     79590.899 ±     358.519    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.020 ±       0.151  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.968 ±       7.334    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1763.403 ±    1433.004  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     85559.534 ±   70552.056    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.732 ±       9.177  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        83.940 ±     444.770    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                               128  thrpt    5        13.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                                128  thrpt    5        65.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                        128  thrpt    5    120470.804 ±    4764.724   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5      1329.019 ±      51.671  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     17364.593 ±      20.320    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.004 ±       0.038  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.056 ±       0.486    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1353.178 ±      27.542  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     17680.983 ±     368.503    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.599 ±       8.622  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        20.817 ±     112.405    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                              128  thrpt    5        10.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                               128  thrpt    5        57.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                                 128  thrpt    5    144917.514 ±    1003.322   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       766.779 ±       5.399  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5      8328.231 ±       1.967    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       673.006 ±       1.331  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      7309.745 ±      37.760    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         1.448 ±      12.467    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        46.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                                128  thrpt    5    191227.368 ±   16808.118   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       872.428 ±      64.537  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5      7180.922 ±     107.373    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       808.940 ±    1160.513  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      6706.884 ±   10449.691    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5         6.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        44.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                                     128  thrpt    5     50580.032 ±    2520.327   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      1935.656 ±      96.689  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     60227.180 ±      18.148    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.002 ±       0.008  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.071 ±       0.257    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1904.177 ±    1195.259  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     59306.882 ±   38479.465    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.732 ±       9.178  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        53.237 ±     282.068    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        14.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        37.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                       128  thrpt    5    163224.716 ±    1340.441   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5       565.611 ±       4.999  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5      5453.000 ±      40.879    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       673.716 ±       1.308  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      6495.247 ±      61.693    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         1.284 ±      11.056    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                             128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        42.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                                128  thrpt    5    676767.972 ±   20697.938   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       684.902 ±      19.065  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5      1592.693 ±       5.962    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       673.111 ±       1.293  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      1565.348 ±      48.863    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         0.621 ±       3.273    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        46.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                               128  thrpt    5    619846.994 ±   34299.299   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5       476.907 ±      22.243  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5      1210.782 ±      15.973    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5       539.407 ±    1161.114  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      1375.371 ±    2961.477    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5        31.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    696979.086 ±   10563.475   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5         0.411 ±       3.532  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5         0.930 ±       7.998    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                                    128  thrpt    5    309277.169 ±    5256.451   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5       845.887 ±      20.053  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5      4304.433 ±      55.135    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               128  thrpt    5       807.376 ±    1158.525  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      4112.156 ±    5965.649    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5         6.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        57.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                                   128  thrpt    5      8564.462 ±     335.061   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1158.006 ±      45.998  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    212802.490 ±    1340.786    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1079.188 ±    1418.009  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5    198474.291 ±  262505.895    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.598 ±       7.821  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5       296.575 ±    1460.017    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                         128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                          128  thrpt    5        58.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                            128  thrpt    5      7463.408 ±     405.763   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       957.044 ±      51.790  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5    201821.565 ±      96.587    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       128  thrpt    5       942.004 ±    1419.823  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5    199423.784 ±  309963.328    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                128  thrpt    5         0.799 ±       5.560  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           128  thrpt    5       166.867 ±    1158.338    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        66.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                           128  thrpt    5    247606.994 ±    6994.909   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1611.658 ±      46.476  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     10243.929 ±      19.112    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                128  thrpt    5         0.011 ±       0.097  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           128  thrpt    5         0.072 ±       0.616    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5      1493.624 ±    1179.973  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5      9489.313 ±    7362.478    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                               128  thrpt    5         1.466 ±       6.883  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          128  thrpt    5         9.338 ±      43.902    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        11.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        40.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                                128  thrpt    5      5906.863 ±     161.058   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1169.804 ±      30.790  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    311524.397 ±     638.857    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1076.974 ±    1412.659  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5    287281.751 ±  382020.060    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         1.466 ±       6.884  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5       389.843 ±    1833.415    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        68.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                                  128  thrpt    5     23886.840 ±     705.217   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       957.594 ±      29.318  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     63062.294 ±     355.843    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             128  thrpt    5       942.075 ±    1415.624  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     62140.922 ±   94619.524    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.799 ±       5.562  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5        52.680 ±     365.884    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         7.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        58.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                           128  thrpt    5     27402.060 ±    1257.232   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1054.459 ±      48.296  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     60559.226 ±      32.026    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5       942.876 ±    1415.421  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5     54200.619 ±   81937.362    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                               128  thrpt    5         1.066 ±       5.318  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                          128  thrpt    5        61.252 ±     307.138    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        61.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                          128  thrpt    5    377017.172 ±    6958.453   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       681.316 ±       9.305  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      2843.950 ±      15.113    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     128  thrpt    5       674.178 ±       0.538  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                128  thrpt    5      2814.192 ±      51.963    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        38.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    527746.108 ±    1385.580   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                               128  thrpt    5     26471.991 ±     601.657   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1064.972 ±      23.974  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     63313.622 ±     138.334    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1077.838 ±    1421.366  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5     64181.307 ±   85746.007    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         1.066 ±       6.439  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5        63.565 ±     383.676    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        68.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                       128  thrpt    5     25917.174 ±    1302.796   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                        128  thrpt    5      1373.157 ±      69.222  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                                   128  thrpt    5     83388.183 ±      53.168    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.011 ±       0.096  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.675 ±       5.813    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1353.528 ±      27.938  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     82204.463 ±    3295.961    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.732 ±       8.232  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5       105.163 ±     502.237    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                             128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                              128  thrpt    5        56.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                                128  thrpt    5     24294.632 ±    1151.962   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                                 128  thrpt    5      1110.440 ±      53.464  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5     71887.779 ±     388.702    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1076.643 ±    1419.578  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     69635.581 ±   91040.227    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         1.466 ±       7.781  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5        95.390 ±     505.461    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                       128  thrpt    5        67.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                               128  thrpt    5    407684.277 ±    3970.884   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                                128  thrpt    5      1061.353 ±      10.770  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5      4097.193 ±       8.266    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1079.431 ±    1424.633  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      4169.029 ±    5524.569    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.933 ±       6.689  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         3.602 ±      25.821    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                                     128  thrpt    5         8.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                                      128  thrpt    5        58.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                                    128  thrpt    5     13298.567 ±     222.435   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                                     128  thrpt    5      1349.349 ±      17.835  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                128  thrpt    5    159680.605 ±    2885.029    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1352.288 ±      30.611  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5    160027.450 ±    3338.823    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.732 ±       9.176  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5       204.877 ±    1085.154    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                          128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                           128  thrpt    5        65.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                                      128  thrpt    5     51153.959 ±    1181.368   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                       128  thrpt    5      1144.093 ±      18.380  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     35201.679 ±     402.540    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1215.384 ±    1166.759  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     37416.767 ±   36172.267    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.599 ±       8.622  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        49.150 ±     265.484    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                            128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                             128  thrpt    5        63.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                               128  thrpt    5    119043.138 ±    3511.484   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                                128  thrpt    5      1241.711 ±      37.837  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5     16416.535 ±      44.611    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1215.964 ±    1169.622  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5     16089.817 ±   15640.570    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         1.865 ±       6.641  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5        24.681 ±      87.642    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                                     128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                                      128  thrpt    5        59.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                              128  thrpt    5    840968.900 ±   17155.600   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       903.044 ±      18.846  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      1690.030 ±      10.381    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5       943.797 ±    1421.867  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5      1769.140 ±    2700.498    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                                    128  thrpt    5         7.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                                     128  thrpt    5        54.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                                      128  thrpt    5    944976.111 ±    7314.889   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                                   128  thrpt    5     61983.983 ±    1653.405   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                                    128  thrpt    5      1319.008 ±      34.876  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     33491.372 ±      17.205    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.011 ±       0.098  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.288 ±       2.481    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1352.773 ±      28.248  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     34349.157 ±     508.079    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.732 ±       8.030  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        43.903 ±     203.386    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                         128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                          128  thrpt    5        60.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                       128  thrpt    5     12915.493 ±     224.915   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                        128  thrpt    5      1265.053 ±      26.894  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                   128  thrpt    5    154140.708 ±    1521.044    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1215.244 ±    1150.595  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5    148195.880 ±  141796.160    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.597 ±       6.428  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5       194.961 ±     785.468    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                             128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                              128  thrpt    5        62.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                                128  thrpt    5      9842.073 ±     269.229   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       892.267 ±      23.165  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5    142696.640 ±    1907.141    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       941.791 ±    1418.844  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5    150871.491 ±  230441.282    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5        21.143 ±     182.046    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                                      128  thrpt    5         7.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                       128  thrpt    5        64.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                               128  thrpt    5    559682.636 ±   46913.904   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                128  thrpt    5      1457.604 ±     119.626  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5      4098.746 ±      15.201    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    128  thrpt    5         0.029 ±       0.238  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               128  thrpt    5         0.081 ±       0.653    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1490.599 ±    1144.781  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      4201.149 ±    3479.790    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         1.466 ±       7.781  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         4.172 ±      22.146    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                                     128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                                      128  thrpt    5        52.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                                    128  thrpt    5      8761.161 ±     714.583   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                                     128  thrpt    5      1330.597 ±     112.193  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                128  thrpt    5    239025.386 ±    2353.859    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.006 ±       0.052  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         1.046 ±       9.007    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1352.170 ±      29.799  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5    242966.461 ±   14416.589    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.732 ±       8.029  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5       311.819 ±    1442.824    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                          128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                           128  thrpt    5        66.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                                      128  thrpt    5     42542.759 ±    1548.575   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                       128  thrpt    5      1322.661 ±      48.608  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     48932.780 ±     118.815    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.003 ±       0.029  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.122 ±       1.048    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1353.113 ±      28.380  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     50060.921 ±     787.837    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.599 ±       8.623  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        59.152 ±     319.571    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                            128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                             128  thrpt    5        57.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                               128  thrpt    5     52332.743 ±    2601.316   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                128  thrpt    5      1390.426 ±      66.183  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5     41815.286 ±     399.003    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    128  thrpt    5         0.009 ±       0.076  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               128  thrpt    5         0.261 ±       2.247    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1354.129 ±      30.384  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5     40729.452 ±    2433.298    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         1.865 ±       6.640  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5        56.044 ±     200.543    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                                      128  thrpt    5        60.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                              128  thrpt    5    973625.422 ±   29087.418   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       886.041 ±      26.930  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      1432.146 ±       0.934    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5       809.018 ±    1160.821  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5      1309.653 ±    1914.095    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                                    128  thrpt    5         6.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                                     128  thrpt    5        47.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                                      128  thrpt    5   1096441.107 ±   29675.078   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                                   128  thrpt    5     39276.983 ±     560.019   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                                    128  thrpt    5      1188.271 ±      17.570  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     47586.034 ±     120.499    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1212.905 ±    1161.609  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     48596.931 ±   46828.861    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.998 ±       8.315  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        80.093 ±     333.483    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                         128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                          128  thrpt    5        66.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                            128  thrpt    5    119662.476 ±    3974.361   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1669.728 ±      54.581  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     21962.242 ±     130.833    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.001 ±       0.008  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.012 ±       0.104    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1629.298 ±    1420.568  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     21416.568 ±   18358.296    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         1.465 ±       6.882  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        19.227 ±      90.453    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        12.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        44.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                                      128  thrpt    5    344501.020 ±   23077.422   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                       128  thrpt    5       690.828 ±      43.100  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                  128  thrpt    5      3156.306 ±      18.266    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       670.760 ±       0.287  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      3065.307 ±     204.749    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                            128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                             128  thrpt    5        60.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                                     128  thrpt    5    210023.292 ±    4857.987   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5       456.775 ±       6.210  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5      3423.010 ±      39.988    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       403.789 ±    1419.374  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      3037.387 ±   10676.983    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         1.002 ±       8.624    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        28.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                                    128  thrpt    5    480011.321 ±    7126.808   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       605.369 ±       9.469  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      1985.233 ±       7.469    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       539.209 ±    1160.687  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1770.872 ±    3811.975    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        31.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                         128  thrpt    5     52707.101 ±    3381.242   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      2151.547 ±     115.706  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     64244.694 ±    1298.991    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.014 ±       0.106  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.410 ±       3.145    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      2178.796 ±    1179.490  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     65028.637 ±   33756.859    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.066 ±       9.179  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        32.432 ±     279.246    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        16.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        33.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                           128  thrpt    5    119806.386 ±     783.813   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5       653.112 ±       1.458  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5      8579.903 ±      61.290    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       674.115 ±       0.573  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      8855.808 ±      58.203    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        40.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                                     128  thrpt    5    205383.962 ±    8041.471   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                      128  thrpt    5       163.416 ±      16.585  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                 128  thrpt    5      1252.667 ±     177.930    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                128  thrpt    5       134.145 ±    1155.030  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      1046.887 ±    9014.010    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                           128  thrpt    5         1.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                            128  thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                                    128  thrpt    5    385088.293 ±   13533.464   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       378.148 ±      11.278  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5      1545.351 ±       9.784    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       404.118 ±    1420.533  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1654.969 ±    5818.065    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        26.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                                   128  thrpt    5    430251.771 ±   30849.477   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       337.541 ±      25.488  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5      1234.671 ±      10.201    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       404.457 ±    1421.725  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      1491.318 ±    5244.357    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        22.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5    471311.523 ±     464.288   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5         0.131 ±       1.127  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5         0.438 ±       3.765    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                        128  thrpt    5     26195.232 ±     605.378   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      1294.678 ±      29.375  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     77784.970 ±      35.219    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.032 ±       0.272  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         1.884 ±      16.224    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1216.392 ±    1170.497  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     73107.435 ±   70636.202    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.865 ±       7.781  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5       112.178 ±     468.318    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5         9.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        59.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                                  128  thrpt    5      5658.759 ±     464.923   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5       894.574 ±      70.681  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5    248827.391 ±    1581.402    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                             128  thrpt    5       942.745 ±    1420.419  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5    262239.027 ±  394770.967    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                        128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                         128  thrpt    5        56.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                           128  thrpt    5      5595.727 ±     370.103   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       858.568 ±      58.263  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    241488.157 ±    2621.851    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5       941.807 ±    1418.991  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5    266035.811 ±  414611.231    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        65.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                          128  thrpt    5    165567.153 ±    5429.833   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1604.279 ±      52.442  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     15251.652 ±      21.827    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                     128  thrpt    5      1629.434 ±    1431.929  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                128  thrpt    5     15499.029 ±   13793.995    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                              128  thrpt    5         1.465 ±      12.616  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                         128  thrpt    5        13.827 ±     119.052    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5        12.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5        48.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                               128  thrpt    5      5392.191 ±     122.203   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      1022.787 ±      22.732  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    298503.547 ±     148.026    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1077.228 ±    1421.821  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5    314903.867 ±  421152.994    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         1.066 ±       7.822  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5       312.163 ±    2290.821    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        72.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                                 128  thrpt    5     19185.828 ±     406.485   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5       799.809 ±      12.390  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5     65609.503 ±    1186.563    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                            128  thrpt    5       808.409 ±    1160.742  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     66352.200 ±   95933.389    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        10.966 ±      94.416    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        49.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                          128  thrpt    5     21187.286 ±     374.671   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       817.944 ±      15.755  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     60758.912 ±     271.343    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                     128  thrpt    5       807.767 ±    1158.111  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                128  thrpt    5     60081.743 ±   87537.200    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                              128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                         128  thrpt    5         9.975 ±      85.888    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        55.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                         128  thrpt    5    306028.208 ±    4984.477   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       694.318 ±       9.427  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3570.614 ±      21.965    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                    128  thrpt    5       674.028 ±       1.189  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                               128  thrpt    5      3466.311 ±      58.962    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                             128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                        128  thrpt    5         0.683 ±       5.884    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5        39.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    347353.821 ±     931.658   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5         0.034 ±       0.293  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5         0.155 ±       1.327    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                              128  thrpt    5     19546.302 ±    1291.288   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5       864.895 ±      56.527  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     69598.723 ±     940.817    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                         128  thrpt    5       940.621 ±    1410.843  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5     75950.270 ±  116996.913    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         0.266 ±       1.401  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5        21.386 ±     112.784    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        64.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                                      128  thrpt    5     10231.274 ±     145.586   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1109.563 ±      13.627  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5    170681.529 ±     414.049    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1079.234 ±    1426.738  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    166135.354 ±  220921.276    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.599 ±       7.390  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5       246.148 ±    1139.099    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                            128  thrpt    5         8.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                             128  thrpt    5        59.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                               128  thrpt    5      8570.647 ±     221.152   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5       892.274 ±      18.539  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5    163836.148 ±    1108.574    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5       941.990 ±    1419.036  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5    173255.393 ±  264603.303    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5         7.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5        66.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                              128  thrpt    5    250532.286 ±    7064.523   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5      1450.851 ±      33.303  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      9115.486 ±      71.680    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   128  thrpt    5         0.010 ±       0.089  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              128  thrpt    5         0.064 ±       0.552    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5      1355.417 ±      28.729  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5      8515.935 ±     114.914    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         1.465 ±       7.779  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5         9.260 ±      49.134    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        44.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                                   128  thrpt    5      8607.838 ±     648.478   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      1163.528 ±      85.715  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5    212637.879 ±     454.980    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1076.271 ±    1411.609  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5    197403.194 ±  266569.098    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.465 ±       7.780  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5       265.631 ±    1411.743    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5         8.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        69.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                                     128  thrpt    5     29190.770 ±    1671.507   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5       954.009 ±      55.158  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     51436.364 ±      16.160    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                128  thrpt    5       943.071 ±    1421.376  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     50987.232 ±   78533.540    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.666 ±       4.442  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        36.150 ±     242.296    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                           128  thrpt    5         7.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                            128  thrpt    5        60.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                              128  thrpt    5     67291.837 ±    2349.227   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1467.244 ±      43.927  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     34321.975 ±     374.493    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   128  thrpt    5         0.001 ±       0.010  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              128  thrpt    5         0.026 ±       0.224    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5      1490.481 ±    1170.815  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5     34894.035 ±   28217.322    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         1.732 ±       9.528  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5        40.816 ±     224.678    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        55.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                             128  thrpt    5    486681.752 ±   11000.730   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       668.719 ±      13.386  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      2162.397 ±       7.837    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5       674.168 ±       0.447  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5      2180.072 ±      49.473    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        38.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5    657939.617 ±    4436.020   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5         0.140 ±       0.739  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5         0.335 ±       1.772    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                                  128  thrpt    5     66345.130 ±    4863.221   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1430.289 ±     104.298  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     33930.977 ±      19.267    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       128  thrpt    5         0.001 ±       0.010  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  128  thrpt    5         0.027 ±       0.231    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1353.758 ±      32.090  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     32123.195 ±    2089.110    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         1.732 ±       7.163  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5        41.588 ±     173.698    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        57.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                          128  thrpt    5     18850.491 ±     871.105   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                           128  thrpt    5       660.868 ±       3.579  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                                      128  thrpt    5     55180.599 ±    2492.952    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       674.005 ±       1.381  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     56277.601 ±    2548.596    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        11.366 ±      97.865    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                                128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                                 128  thrpt    5        41.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                                   128  thrpt    5     18329.150 ±    1426.048   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       514.438 ±      34.475  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5     44174.416 ±     865.661    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       538.190 ±    1158.495  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     46454.840 ±  100072.157    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                         128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                          128  thrpt    5        38.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                                  128  thrpt    5    114087.199 ±    1975.442   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       286.543 ±       4.931  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5      3952.567 ±       3.912    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       269.402 ±    1420.478  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      3733.118 ±   19683.774    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                        128  thrpt    5         2.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                         128  thrpt    5        14.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                       128  thrpt    5     14837.159 ±    1061.908   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                        128  thrpt    5       902.355 ±      54.322  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     95719.179 ±    1582.882    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       942.313 ±    1418.662  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     99843.334 ±  148677.745    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        28.523 ±     150.429    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                             128  thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                              128  thrpt    5        64.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                         128  thrpt    5     47319.599 ±    1277.456   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                          128  thrpt    5       844.569 ±      16.815  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     128  thrpt    5     28090.662 ±     210.633    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       808.421 ±    1159.191  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     26935.277 ±   39451.941    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         4.402 ±      37.902    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                               128  thrpt    5         6.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                                128  thrpt    5        49.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                                  128  thrpt    5     69167.846 ±    2222.718   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       990.810 ±      34.670  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5     22543.109 ±     246.703    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1077.888 ±    1423.511  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     24558.481 ±   32802.944    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         1.066 ±       6.440  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5        24.483 ±     148.744    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                        128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                         128  thrpt    5        69.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                                 128  thrpt    5    289180.579 ±    5210.983   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       554.775 ±       8.546  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5      3019.704 ±      11.617    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       539.104 ±    1160.462  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      2939.679 ±    6327.959    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         0.728 ±       6.268    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                       128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                        128  thrpt    5        31.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                         128  thrpt    5    326653.685 ±    4354.219   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          128  thrpt    5         0.135 ±       1.137  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     128  thrpt    5         0.651 ±       5.476    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                                      128  thrpt    5     57883.225 ±    2278.645   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                       128  thrpt    5      1037.801 ±      45.956  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5     28219.134 ±     216.425    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       943.209 ±    1419.008  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     25688.368 ±   39151.393    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.933 ±       4.292  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        25.212 ±     116.106    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                            128  thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                             128  thrpt    5        59.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                           128  thrpt    5    134824.732 ±    6831.878   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                            128  thrpt    5      1649.953 ±      82.053  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     19259.784 ±      19.329    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1629.336 ±    1419.077  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     19043.715 ±   17092.649    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         1.599 ±       7.390  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        18.885 ±      87.413    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                                 128  thrpt    5        12.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                                  128  thrpt    5        43.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                                     128  thrpt    5    758672.043 ±   19801.011   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                                      128  thrpt    5       421.784 ±      11.273  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                 128  thrpt    5       874.904 ±      10.253    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                128  thrpt    5       536.692 ±    1155.269  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      1115.489 ±    2401.333    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                           128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                            128  thrpt    5        40.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                                    128  thrpt    5    299179.444 ±    6874.378   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       306.082 ±       6.192  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5      1610.072 ±       8.355    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       269.167 ±    1419.241  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1424.374 ±    7510.327    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                          128  thrpt    5         2.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                           128  thrpt    5        18.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                                   128  thrpt    5   1085045.320 ±   64641.565   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       375.520 ±      19.819  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5       544.631 ±       3.967    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       404.521 ±    1421.947  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       590.679 ±    2076.887    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5        22.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                        128  thrpt    5     56880.315 ±     877.874   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      2218.660 ±      26.722  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     61389.111 ±     338.519    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      2179.760 ±    1174.824  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     60308.123 ±   32304.925    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.799 ±       6.884  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        22.109 ±     190.369    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        16.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        27.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                          128  thrpt    5    240130.258 ±   10994.073   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                           128  thrpt    5      1096.567 ±      56.262  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                                      128  thrpt    5      7187.208 ±      89.147    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1079.635 ±    1418.020  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      7096.354 ±    9535.774    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         1.599 ±       7.822  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        10.532 ±      51.902    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                                128  thrpt    5         8.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                                 128  thrpt    5        57.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                                    128  thrpt    5   1153595.625 ±   32209.581   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                     128  thrpt    5       393.557 ±       8.959  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                128  thrpt    5       536.897 ±       7.718    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                               128  thrpt    5       402.501 ±    1414.849  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5       551.959 ±    1940.223    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                          128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                           128  thrpt    5        30.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                                   128  thrpt    5    878036.042 ±   40690.744   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       515.665 ±      22.824  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5       924.331 ±      22.907    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       538.776 ±    1159.755  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       967.918 ±    2084.160    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5        36.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                                  128  thrpt    5   1754736.858 ±   38639.269   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       598.594 ±      12.702  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5       536.916 ±       3.158    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       539.283 ±    1160.848  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5       484.496 ±    1042.967    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        31.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5   1850959.215 ±   48728.553   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5         0.953 ±       7.189  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5         0.818 ±       6.184    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                       128  thrpt    5     38547.746 ±     971.996   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5      1726.924 ±      43.832  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     70507.218 ±      55.324    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.005 ±       0.029  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.189 ±       1.185    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1630.473 ±    1439.404  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     66597.051 ±   59375.459    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.599 ±       9.179  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        65.707 ±     377.178    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5        12.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5        42.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                            128  thrpt    5     37060.848 ±    1316.423   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5       692.959 ±      18.373  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     29429.419 ±     461.481    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       808.899 ±    1161.006  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     34391.633 ±   50029.803    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        46.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                                     128  thrpt    5     59442.513 ±    2744.969   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5       624.841 ±      21.550  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     16545.803 ±     222.110    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       538.337 ±    1158.812  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     14301.541 ±   30792.321    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         3.598 ±      30.981    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5         4.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        36.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                                    128  thrpt    5    192574.414 ±    7586.253   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       629.686 ±       6.993  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      5146.665 ±     189.040    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       674.126 ±       0.275  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      5509.946 ±     219.105    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         5.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        37.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                         128  thrpt    5     21153.467 ±     995.436   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      1057.776 ±      47.958  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     78710.132 ±    4412.310    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1077.315 ±    1414.749  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     80224.176 ±  106088.034    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.332 ±       5.130  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        99.434 ±     384.950    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5         8.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        71.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                           128  thrpt    5     45471.804 ±     423.562   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5       673.775 ±       3.026  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     23320.764 ±     141.945    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       674.108 ±       0.371  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     23332.336 ±     219.689    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5         5.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        41.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                                    128  thrpt    5     95224.747 ±    2538.364   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5      1304.841 ±      32.375  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5     21566.471 ±      43.457    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.006 ±       0.055  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.106 ±       0.912    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1352.391 ±      29.471  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     22353.216 ±     782.775    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.865 ±       8.774  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        31.030 ±     146.199    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5        10.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        63.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                                   128  thrpt    5    174228.361 ±    9855.649   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       557.464 ±      22.921  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5      5036.636 ±      94.580    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       539.227 ±    1160.726  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      4893.723 ±   10537.337    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5         4.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        31.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5    192908.400 ±     731.273   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5         0.034 ±       0.293  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5         0.280 ±       2.392    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                        128  thrpt    5     68214.421 ±    2938.955   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      1009.707 ±      41.341  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     23295.780 ±      85.920    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       942.915 ±    1420.695  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     21731.295 ±   32428.509    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.533 ±       4.588  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        12.120 ±     104.355    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5         7.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        62.000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                                       128  thrpt    5     19445.178 ±    1258.031   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                                        128  thrpt    5      1155.271 ±      70.332  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                                   128  thrpt    5     93509.258 ±    1909.822    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1213.946 ±    1162.248  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     98449.321 ±   96464.093    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.465 ±       6.881  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5       117.350 ±     548.548    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                             128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                              128  thrpt    5        66.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                                128  thrpt    5     15617.132 ±     212.835   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       712.556 ±      11.568  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5     71811.433 ±     420.138    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       807.322 ±    1158.374  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     81446.512 ±  118363.043    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                                      128  thrpt    5         6.000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                                       128  thrpt    5        56.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                               128  thrpt    5    482513.484 ±    9577.621   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                                128  thrpt    5      1255.915 ±      25.217  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5      4097.084 ±       5.682    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    128  thrpt    5         0.026 ±       0.220  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               128  thrpt    5         0.083 ±       0.712    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1352.610 ±      24.493  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      4412.557 ±      63.710    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         1.599 ±       6.177  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         5.213 ±      20.173    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                                      128  thrpt    5        57.000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                                    128  thrpt    5     16577.880 ±    1138.759   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                                     128  thrpt    5      1308.717 ±      65.235  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                128  thrpt    5    124242.415 ±    2828.286    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.001 ±       0.011  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.114 ±       0.985    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1350.365 ±      27.404  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5    128211.809 ±    6979.390    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.732 ±       7.609  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5       163.769 ±     717.190    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                          128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                           128  thrpt    5        74.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                                      128  thrpt    5     67604.829 ±    2134.527   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                                       128  thrpt    5      1299.394 ±      43.426  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     30249.144 ±     169.704    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.003 ±       0.027  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.072 ±       0.618    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1353.382 ±      27.737  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     31507.021 ±     754.710    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.599 ±       8.623  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        37.114 ±     200.302    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                            128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                             128  thrpt    5        55.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                               128  thrpt    5    152073.241 ±    9883.874   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                                128  thrpt    5      1155.518 ±      61.038  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5     11958.993 ±     189.188    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1214.982 ±    1165.678  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5     12602.053 ±   12414.048    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         1.732 ±       8.030  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5        17.918 ±      83.151    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                                     128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                                      128  thrpt    5        66.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                              128  thrpt    5   1061044.357 ±   38567.348   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       879.387 ±      31.759  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      1304.506 ±       3.203    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5       808.902 ±    1160.673  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5      1203.177 ±    1782.884    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                                    128  thrpt    5         6.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                                     128  thrpt    5        46.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                                      128  thrpt    5   1177072.535 ±   15949.680   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       128  thrpt    5         0.618 ±       4.957  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  128  thrpt    5         0.830 ±       6.664    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                                   128  thrpt    5    115036.718 ±    7272.302   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                                    128  thrpt    5      1298.623 ±      79.012  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     17766.738 ±     320.580    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.002 ±       0.013  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.020 ±       0.175    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1352.161 ±      29.450  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     18502.295 ±    1056.872    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.732 ±       8.232  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        23.798 ±     112.793    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                         128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                          128  thrpt    5        64.000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                                     128  thrpt    5     28607.711 ±     900.927   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1213.354 ±      36.998  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     66745.524 ±     251.950    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.021 ±       0.179  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         1.136 ±       9.784    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1215.934 ±    1169.204  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     66969.119 ±   65330.151    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.732 ±       7.164  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        95.804 ±     397.224    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5         9.000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        64.000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                                    128  thrpt    5    641303.023 ±   40989.869   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1253.021 ±      84.967  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      3075.471 ±      21.981    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.017 ±       0.145  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.041 ±       0.351    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1217.669 ±    1170.536  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      2997.195 ±    2975.246    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.465 ±       7.779  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         3.635 ±      19.290    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         9.000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        52.000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                         128  thrpt    5     21453.610 ±    1112.895   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      1620.479 ±      76.839  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5    118872.309 ±     723.139    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.003 ±       0.029  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.241 ±       2.078    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1627.977 ±    1453.337  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5    119608.015 ±  110626.291    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.732 ±       9.177  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5       126.599 ±     670.813    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        12.000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        53.000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                                    128  thrpt    5    304700.545 ±    9089.601   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       847.422 ±      23.317  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5      4377.572 ±      10.262    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       942.485 ±    1420.081  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      4880.029 ±    7493.449    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.683 ±       5.883    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5         7.000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        63.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                                   128  thrpt    5   1380774.011 ±   61292.803   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       807.403 ±      35.509  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5       920.371 ±       2.075    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       808.967 ±    1161.696  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       923.314 ±    1345.340    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5         6.000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        46.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5   1589588.014 ±   56553.685   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5         0.034 ±       0.293  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5         0.034 ±       0.290    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                                        128  thrpt    5    203709.322 ±   11942.583   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      1317.868 ±      78.437  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     10181.700 ±      24.478    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.002 ±       0.015  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.013 ±       0.114    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1352.131 ±      29.651  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     10447.938 ±     506.746    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.732 ±       9.179  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        13.370 ±      70.930    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5        10.000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        64.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                          128  thrpt    5     51664.209 ±    1493.280   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                           128  thrpt    5       920.899 ±      25.009  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                                      128  thrpt    5     28043.320 ±     159.454    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       941.173 ±    1414.283  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     28674.291 ±   43253.539    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±       4.215  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        24.418 ±     129.359    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                                128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                                 128  thrpt    5        57.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                                   128  thrpt    5     53578.106 ±    3259.194   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       621.192 ±      38.941  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5     18247.875 ±      67.739    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       537.951 ±    1157.981  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     15829.875 ±   34095.382    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         4.021 ±      34.626    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                         128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                          128  thrpt    5        38.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                                  128  thrpt    5     64154.561 ±    1941.640   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       696.757 ±      23.167  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5     17094.716 ±      74.666    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       808.059 ±    1159.725  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     19857.764 ±   29062.178    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                        128  thrpt    5         6.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                         128  thrpt    5        48.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                       128  thrpt    5     29229.166 ±    1094.141   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                        128  thrpt    5      1291.449 ±      50.079  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     69537.690 ±     172.558    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5        ≈ 10⁻³                MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.025 ±       0.213    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1215.977 ±    1169.416  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     65539.225 ±   63761.548    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.732 ±       8.233  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        92.720 ±     441.192    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                             128  thrpt    5         9.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                              128  thrpt    5        64.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                         128  thrpt    5    108056.662 ±    4235.804   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                          128  thrpt    5       476.660 ±      20.098  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     128  thrpt    5      6942.631 ±      53.882    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       403.953 ±    1419.954  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      5886.696 ±   20693.458    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         1.929 ±      16.612    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                               128  thrpt    5         3.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                                128  thrpt    5        25.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                                  128  thrpt    5    235056.076 ±    6894.876   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       349.570 ±      10.298  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5      2340.492 ±      21.261    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       403.353 ±    1417.844  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      2711.599 ±    9532.057    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                        128  thrpt    5         3.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                         128  thrpt    5        28.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                                 128  thrpt    5    721075.980 ±   55278.127   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       894.383 ±      68.352  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5      1952.324 ±       1.777    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       943.020 ±    1421.711  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      2072.058 ±    3285.826    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         0.573 ±       3.023    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                       128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                        128  thrpt    5        56.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                         128  thrpt    5    780369.728 ±    7408.011   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                                      128  thrpt    5    180882.962 ±    2109.684   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                       128  thrpt    5       583.924 ±       6.896  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5      5080.877 ±       4.672    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       538.183 ±    1158.479  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      4685.813 ±   10086.755    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                            128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                             128  thrpt    5        37.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                                      128  thrpt    5    103392.447 ±    7181.628   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1141.427 ±      80.165  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     17375.857 ±     353.267    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1215.268 ±    1166.498  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     18505.618 ±   17824.896    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.732 ±       8.232  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        26.247 ±     124.692    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                            128  thrpt    5         9.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                             128  thrpt    5        63.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                               128  thrpt    5    146900.805 ±    9044.470   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5       778.073 ±      49.245  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5      8335.354 ±      30.675    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5       807.784 ±    1158.851  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      8668.181 ±   12670.718    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         2.889 ±      15.234    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5        55.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                              128  thrpt    5    405218.450 ±   25971.880   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       789.876 ±      38.756  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      3068.291 ±      56.856    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5       808.875 ±    1160.543  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5      3156.615 ±    4780.622    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        44.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                                   128  thrpt    5     49883.983 ±    4058.478   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      1910.475 ±     153.926  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     60269.729 ±      21.366    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.046 ±       0.379  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         1.471 ±      12.157    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1902.600 ±    1162.426  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     60140.772 ±   39210.172    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.732 ±       9.179  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        55.824 ±     295.593    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        14.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        46.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                                     128  thrpt    5    168442.048 ±   17212.428   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5       574.846 ±      56.667  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5      5371.256 ±      21.691    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                128  thrpt    5       539.311 ±    1160.908  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      5072.331 ±   10933.486    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5         4.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5        31.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                              128  thrpt    5    401198.931 ±   11766.230   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       398.715 ±      20.232  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1564.286 ±      71.474    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5       404.033 ±    1420.234  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5      1590.593 ±    5591.381    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                             128  thrpt    5   1025060.832 ±   36231.820   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       761.363 ±      26.255  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      1169.030 ±       4.986    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5       808.911 ±    1160.343  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5      1242.859 ±    1796.447    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        46.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5   1139724.031 ±   15743.005   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5         1.967 ±      13.007  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5         2.730 ±      18.078    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                                  128  thrpt    5    288676.476 ±    3590.901   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5       785.405 ±       9.986  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5      4282.400 ±      12.039    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             128  thrpt    5       807.316 ±    1158.610  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      4405.774 ±    6392.296    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        58.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                                   128  thrpt    5      3981.333 ±     278.634   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       813.109 ±      57.704  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    321369.737 ±     631.709    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              128  thrpt    5       805.797 ±    1156.618  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5    318500.168 ±  456379.489    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                         128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                          128  thrpt    5        54.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                            128  thrpt    5      3473.407 ±     114.816   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       688.450 ±      21.593  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5    311937.015 ±    1027.403    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       128  thrpt    5       670.611 ±       0.828  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5    303871.218 ±   10282.492    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           128  thrpt    5        60.073 ±     517.248    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         5.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        52.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                           128  thrpt    5     35052.974 ±    1436.635   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       576.261 ±      26.147  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     25872.876 ±     420.682    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5       537.715 ±    1157.473  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5     24135.367 ±   51967.911    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        34.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                                128  thrpt    5      3141.219 ±     101.779   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5       837.718 ±      26.822  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    419707.091 ±     471.468    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           128  thrpt    5       804.896 ±    1155.428  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5    403989.059 ±  592601.121    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        64.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                                  128  thrpt    5     13972.786 ±     244.392   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       728.249 ±       9.149  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     82028.751 ±    1079.210    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             128  thrpt    5       805.703 ±    1155.977  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     90810.275 ±  131307.970    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        59.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                           128  thrpt    5     17277.346 ±    1333.016   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       830.230 ±      64.276  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     75626.272 ±     313.461    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5       939.112 ±    1414.851  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5     85856.803 ±  133067.579    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        73.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                          128  thrpt    5    237746.026 ±   14056.570   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       840.348 ±      48.927  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      5563.528 ±      82.685    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     128  thrpt    5       806.461 ±    1157.163  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                128  thrpt    5      5362.939 ±    8104.522    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        55.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    265735.674 ±   17386.237   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.016 ±       0.132  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.092 ±       0.776    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                               128  thrpt    5     15857.642 ±     595.195   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       824.362 ±      32.883  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     81815.422 ±    2998.496    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          128  thrpt    5       805.008 ±    1156.027  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5     80021.597 ±  117146.309    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        63.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                          128  thrpt    5   1353045.168 ±    2643.921   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5        56.741 ±      14.833  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5        66.007 ±      17.275    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.readPlayJson                                                                               128  thrpt    5     59797.358 ±     610.815   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      2464.097 ±      25.536  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     64854.428 ±     422.823    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.001 ±       0.007  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.039 ±       0.176    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      2453.133 ±    1438.208  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     64557.226 ±   37592.771    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.133 ±       1.147  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5         3.513 ±      30.249    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        18.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        26.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                          128  thrpt    5   1617606.082 ±   73976.252   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       848.056 ±      28.841  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5       825.127 ±       9.482    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       807.686 ±    1158.712  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       788.677 ±    1181.013    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.266 ±       1.405  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         0.261 ±       1.379    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         6.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        54.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                         128  thrpt    5   1947397.651 ±   58892.496   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       544.958 ±      13.308  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       440.441 ±       2.849    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       539.288 ±    1160.858  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       436.903 ±     940.548    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         4.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        30.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5    983849.390 ±   12123.650   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        10.226 ±       1.817  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5        16.361 ±       3.107    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                              128  thrpt    5     41190.253 ±    3873.193   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1659.247 ±     152.100  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     63397.234 ±     654.837    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.012 ±       0.080  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.445 ±       3.004    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1764.573 ±    1429.503  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     67403.984 ±   53982.562    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         1.732 ±       7.164  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        67.442 ±     281.252    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        13.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        52.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                           N/A  thrpt    5    781844.100 ±   29234.161   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                            N/A  thrpt    5      2408.538 ±      92.351  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5      4848.900 ±       5.623    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                N/A  thrpt    5         0.001 ±       0.004  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           N/A  thrpt    5         0.001 ±       0.009    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5      2451.358 ±    1431.814  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5      4935.771 ±    2898.234    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               N/A  thrpt    5         0.932 ±       8.029  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          N/A  thrpt    5         1.894 ±      16.311    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                                 N/A  thrpt    5        18.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                                  N/A  thrpt    5        40.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                                     N/A  thrpt    5   4285319.904 ±  361256.569   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                                      N/A  thrpt    5       261.394 ±      22.053  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                 N/A  thrpt    5        96.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                N/A  thrpt    5       268.199 ±    1414.139  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                           N/A  thrpt    5        97.404 ±     513.581    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                         N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                    N/A  thrpt    5         0.048 ±       0.417    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                           N/A  thrpt    5         2.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                            N/A  thrpt    5        20.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                                    N/A  thrpt    5    779385.922 ±   20827.379   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5       907.905 ±      20.681  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5      1833.258 ±      10.376    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               N/A  thrpt    5       941.825 ±    1419.285  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          N/A  thrpt    5      1905.879 ±    2923.158    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                        N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   N/A  thrpt    5         0.268 ±       2.307    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                          N/A  thrpt    5         7.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                           N/A  thrpt    5        68.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                                   N/A  thrpt    5   8152886.320 ±  183134.277   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5       373.728 ±       7.374  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5        72.151 ±       0.836    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5       404.433 ±    1421.640  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5        78.358 ±     275.442    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                         N/A  thrpt    5         3.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                          N/A  thrpt    5        22.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                        N/A  thrpt    5    400343.874 ±   26143.825   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      1903.241 ±     122.924  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5      7481.781 ±      13.458    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             N/A  thrpt    5         0.001 ±       0.006  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        N/A  thrpt    5         0.004 ±       0.025    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5      1900.620 ±    1181.737  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5      7462.699 ±    4416.317    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            N/A  thrpt    5         1.732 ±       7.608  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       N/A  thrpt    5         6.896 ±      30.487    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                              N/A  thrpt    5        14.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                               N/A  thrpt    5        57.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                                 N/A  thrpt    5      4359.251 ±     153.027   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                                  N/A  thrpt    5      1999.404 ±      52.261  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                             N/A  thrpt    5    721876.761 ±    8331.989    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.082 ±       0.294  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5        29.601 ±     105.942    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      2040.702 ±      28.828  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5    736805.176 ±   17189.323    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         1.598 ±      12.379  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5       585.014 ±    4537.870    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                                       N/A  thrpt    5        15.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                                        N/A  thrpt    5        50.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                          N/A  thrpt    5      5149.223 ±     274.746   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                           N/A  thrpt    5      2042.686 ±     107.927  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      N/A  thrpt    5    624307.787 ±     645.876    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               N/A  thrpt    5         0.011 ±       0.042  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          N/A  thrpt    5         3.335 ±      12.748    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5      2039.814 ±      33.510  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5    623497.505 ±   23840.906    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                              N/A  thrpt    5         1.865 ±      12.221  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         N/A  thrpt    5       580.546 ±    3824.735    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                                N/A  thrpt    5        15.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                                 N/A  thrpt    5        42.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                         N/A  thrpt    5     44031.204 ±    2136.093   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                          N/A  thrpt    5       710.147 ±      34.239  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5     25381.970 ±     105.351    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       674.165 ±       0.421  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5     24099.000 ±    1187.127    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                               N/A  thrpt    5         5.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                                N/A  thrpt    5        38.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                                N/A  thrpt    5      4554.629 ±      74.230   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                                 N/A  thrpt    5       799.196 ±      13.253  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                            N/A  thrpt    5    276157.844 ±     154.089    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5       808.123 ±    1160.169  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5    279429.861 ±  404455.839    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                                      N/A  thrpt    5         6.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                                       N/A  thrpt    5        52.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                         N/A  thrpt    5      4347.480 ±     260.142   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                          N/A  thrpt    5       508.212 ±      30.716  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5    183970.772 ±     770.129    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       537.671 ±    1157.377  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5    195299.301 ±  420602.051    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                               N/A  thrpt    5         4.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                                N/A  thrpt    5        40.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                                        N/A  thrpt    5      6208.082 ±     108.998   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         N/A  thrpt    5       269.405 ±       5.212  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5     68295.751 ±     254.300    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5       269.480 ±    1420.891  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5     68644.237 ±  361942.922    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                            N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       N/A  thrpt    5        33.869 ±     291.620    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                              N/A  thrpt    5         2.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                               N/A  thrpt    5        16.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                                N/A  thrpt    5      6344.989 ±     294.101   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 N/A  thrpt    5       229.025 ±       8.245  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            N/A  thrpt    5     56812.397 ±     707.888    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                           N/A  thrpt    5       269.617 ±    1421.613  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                      N/A  thrpt    5     67705.904 ±  357006.722    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      N/A  thrpt    5         2.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                       N/A  thrpt    5        16.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                           N/A  thrpt    5      6996.842 ±     106.453   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                            N/A  thrpt    5      1292.938 ±       6.530  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5    290844.883 ±    3103.109    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5      1351.460 ±      26.466  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5    304015.361 ±   10563.246    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               N/A  thrpt    5         1.599 ±       7.389  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          N/A  thrpt    5       359.548 ±    1660.777    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                                 N/A  thrpt    5        10.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                                  N/A  thrpt    5        62.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                                     N/A  thrpt    5     14876.954 ±    1059.135   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                                      N/A  thrpt    5       344.934 ±      19.626  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                 N/A  thrpt    5     36491.100 ±     730.208    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                N/A  thrpt    5       402.091 ±    1413.406  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                           N/A  thrpt    5     42368.707 ±  149000.836    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                           N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                            N/A  thrpt    5        36.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                                    N/A  thrpt    5     12380.026 ±     250.543   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5       311.862 ±      11.867  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5     39641.433 ±    1263.382    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               N/A  thrpt    5       268.862 ±    1417.634  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          N/A  thrpt    5     34351.081 ±  181123.351    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                        N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   N/A  thrpt    5        17.017 ±     146.520    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                          N/A  thrpt    5         2.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                           N/A  thrpt    5        20.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                                   N/A  thrpt    5     20701.950 ±     587.430   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5       348.512 ±       4.855  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5     26496.954 ±     695.694    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5       404.329 ±    1421.275  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5     30891.280 ±  108589.094    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                       N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  N/A  thrpt    5        10.172 ±      87.588    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                         N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                          N/A  thrpt    5        23.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                        N/A  thrpt    5      3719.820 ±     360.535   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      2106.732 ±     204.517  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5    891482.622 ±     179.714    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             N/A  thrpt    5         0.026 ±       0.094  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        N/A  thrpt    5        11.023 ±      39.315    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5      2174.297 ±    1185.873  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5    919661.286 ±  473702.613    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            N/A  thrpt    5         1.731 ±       9.175  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       N/A  thrpt    5       748.691 ±    3982.658    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                              N/A  thrpt    5        16.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                               N/A  thrpt    5        57.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                          N/A  thrpt    5      9223.415 ±     629.590   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                           N/A  thrpt    5      1593.293 ±     100.596  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5    271889.872 ±    5433.204    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                               N/A  thrpt    5         0.016 ±       0.091  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          N/A  thrpt    5         2.747 ±      15.399    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5      1628.393 ±    1429.880  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5    277984.570 ±  245743.553    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                              N/A  thrpt    5         1.597 ±      12.368  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                         N/A  thrpt    5       275.534 ±    2139.571    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                                N/A  thrpt    5        12.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                                 N/A  thrpt    5        47.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                                    N/A  thrpt    5     52447.871 ±    2250.039   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                                     N/A  thrpt    5       490.788 ±      20.324  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                N/A  thrpt    5     14720.347 ±      69.432    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                               N/A  thrpt    5       401.875 ±    1412.652  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                          N/A  thrpt    5     12140.116 ±   42676.818    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                        N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                   N/A  thrpt    5         4.011 ±      34.538    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                          N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                           N/A  thrpt    5        35.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                                   N/A  thrpt    5     35026.159 ±    2053.282   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5       503.830 ±      34.638  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5     22640.931 ±     242.335    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5       537.920 ±    1157.915  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5     24147.571 ±   52008.313    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                       N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  N/A  thrpt    5         6.071 ±      52.273    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                         N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                          N/A  thrpt    5        40.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                                  N/A  thrpt    5     81920.436 ±    1822.461   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5       617.057 ±      10.316  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5     11854.911 ±      95.673    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             N/A  thrpt    5       673.993 ±       1.099  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        N/A  thrpt    5     12949.014 ±     288.704    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                      N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                 N/A  thrpt    5         2.561 ±      22.055    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                        N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                         N/A  thrpt    5        40.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                          N/A  thrpt    5     91902.643 ±    6740.678   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           N/A  thrpt    5         0.092 ±       0.509  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      N/A  thrpt    5         1.570 ±       8.740    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                       N/A  thrpt    5      6687.643 ±     249.386   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                        N/A  thrpt    5      2025.431 ±      75.006  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   N/A  thrpt    5    476633.269 ±     181.416    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            N/A  thrpt    5         0.027 ±       0.066  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       N/A  thrpt    5         6.440 ±      15.446    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                  N/A  thrpt    5      2040.161 ±      33.346  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                             N/A  thrpt    5    480123.791 ±   13182.931    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                           N/A  thrpt    5         1.732 ±      12.246  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                      N/A  thrpt    5       411.729 ±    2920.078    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                             N/A  thrpt    5        15.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                              N/A  thrpt    5        52.000                    ms
[info] IntBenchmark.readCirce                                                                                     N/A  thrpt    5   7997616.797 ±  439193.135   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                                      N/A  thrpt    5      4195.407 ±     223.901  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                                 N/A  thrpt    5       825.660 ±       5.703    B/op
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                          N/A  thrpt    5         0.004 ±       0.024  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                     N/A  thrpt    5         0.001 ±       0.005    B/op
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                N/A  thrpt    5      4224.795 ±    1174.018  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                           N/A  thrpt    5       831.393 ±     221.969    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                           N/A  thrpt    5        31.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                            N/A  thrpt    5        49.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                               N/A  thrpt    5  34321118.163 ± 2861472.693   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                                N/A  thrpt    5         0.911 ±       7.241  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                           N/A  thrpt    5         0.041 ±       0.328    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                                     N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readJacksonScala                                                                              N/A  thrpt    5   9242212.887 ±  146960.436   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                               N/A  thrpt    5      3242.114 ±      49.407  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                          N/A  thrpt    5       552.147 ±       0.591    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   N/A  thrpt    5         0.001 ±       0.005  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5      3270.652 ±    1173.915  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5       556.848 ±     192.395    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                                    N/A  thrpt    5        24.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                                     N/A  thrpt    5        32.000                    ms
[info] IntBenchmark.readJsoniterScala                                                                             N/A  thrpt    5  37166686.677 ±  698859.813   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                              N/A  thrpt    5         0.663 ±       3.710  MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                         N/A  thrpt    5         0.028 ±       0.156    B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                                   N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                                N/A  thrpt    5  24527503.145 ± 1750974.320   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                                 N/A  thrpt    5       875.511 ±      53.496  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                            N/A  thrpt    5        56.180 ±       0.676    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5       944.387 ±    1422.751  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5        60.883 ±      95.165    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         0.400 ±       1.405  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5         0.026 ±       0.091    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                                      N/A  thrpt    5         7.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                       N/A  thrpt    5        52.000                    ms
[info] IntBenchmark.readPlayJson                                                                                  N/A  thrpt    5   8917148.179 ±  282531.260   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                                   N/A  thrpt    5      3219.877 ±      95.818  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                              N/A  thrpt    5       568.281 ±       1.600    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       N/A  thrpt    5         0.002 ±       0.006  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                             N/A  thrpt    5      3271.154 ±    1174.626  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                        N/A  thrpt    5       577.616 ±     219.285    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                        N/A  thrpt    5        24.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                         N/A  thrpt    5        39.000                    ms
[info] IntBenchmark.writeCirce                                                                                    N/A  thrpt    5  14111492.493 ±  485884.577   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                                     N/A  thrpt    5      1435.705 ±      48.063  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                                N/A  thrpt    5       160.116 ±       0.641    B/op
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.021 ±       0.163  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.002 ±       0.018    B/op
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1355.730 ±      28.386  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5       151.201 ±       2.676    B/op
[info] IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         1.466 ±       7.781  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         0.164 ±       0.869    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                          N/A  thrpt    5        10.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                           N/A  thrpt    5        46.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                              N/A  thrpt    5  42246414.956 ± 1410797.935   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                               N/A  thrpt    5       860.230 ±      21.005  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                          N/A  thrpt    5        32.052 ±       0.429    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5       804.865 ±    1154.951  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5        30.053 ±      44.251    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                                    N/A  thrpt    5         6.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                                     N/A  thrpt    5        61.000                    ms
[info] IntBenchmark.writeJacksonScala                                                                             N/A  thrpt    5  10752930.506 ± 1261693.563   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                              N/A  thrpt    5      2133.869 ±     241.280  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                         N/A  thrpt    5       312.369 ±       2.948    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  N/A  thrpt    5         0.043 ±       0.368  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             N/A  thrpt    5         0.006 ±       0.054    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5      2042.146 ±      17.388  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5       299.163 ±      36.361    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                 N/A  thrpt    5         1.066 ±       9.176  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                            N/A  thrpt    5         0.148 ±       1.277    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                                   N/A  thrpt    5        15.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                                    N/A  thrpt    5        37.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                            N/A  thrpt    5  40959495.864 ± 3457073.895   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                             N/A  thrpt    5       833.492 ±      70.456  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5        32.030 ±       0.165    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       808.859 ±    1160.320  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5        31.056 ±      43.897    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                                  N/A  thrpt    5         6.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                                   N/A  thrpt    5        46.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                                    N/A  thrpt    5  46278239.093 ± 3828191.050   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                     N/A  thrpt    5         0.390 ±       3.281  MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                N/A  thrpt    5         0.013 ±       0.110    B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                          N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                               N/A  thrpt    5  22943327.966 ±  632252.247   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                                N/A  thrpt    5       933.284 ±      23.259  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5        64.028 ±       0.181    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5       809.269 ±    1161.290  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5        55.637 ±      81.899    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Survivor_Space                                                   N/A  thrpt    5         0.266 ±       1.405  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Survivor_Space.norm                                              N/A  thrpt    5         0.018 ±       0.096    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                                     N/A  thrpt    5         6.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                                      N/A  thrpt    5        43.000                    ms
[info] IntBenchmark.writePlayJson                                                                                 N/A  thrpt    5   2291609.952 ±  111124.592   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                                  N/A  thrpt    5      1678.783 ±      81.729  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                             N/A  thrpt    5      1152.975 ±       3.660    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.006 ±       0.047  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         0.004 ±       0.033    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1763.414 ±    1431.445  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5      1212.695 ±    1014.811    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         1.599 ±       8.429  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5         1.106 ±       5.834    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                       N/A  thrpt    5        13.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                        N/A  thrpt    5        55.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                                128  thrpt    5    163890.038 ±    6064.217   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      3008.773 ±     111.413  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5     28892.100 ±      27.075    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.002 ±       0.013  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.021 ±       0.122    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      3134.913 ±    1437.349  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     30108.186 ±   13950.331    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5        23.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        32.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                                     128  thrpt    5     25969.570 ±    1259.408   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      1869.990 ±      42.192  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5    113332.556 ±    3362.930    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.004 ±       0.027  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.257 ±       1.613    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1765.969 ±    1447.897  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5    106936.671 ±   85830.659    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.732 ±      10.195  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5       105.689 ±     619.284    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        13.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        46.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                                128  thrpt    5    118068.597 ±    2710.352   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       948.945 ±      22.112  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5     12649.209 ±      10.191    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       942.058 ±    1419.699  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     12580.396 ±   19243.061    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.799 ±       5.562  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5        10.651 ±      73.999    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         7.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        65.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                               128  thrpt    5    403831.413 ±   16880.379   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5      1568.938 ±      63.572  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5      6115.351 ±      19.091    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1628.183 ±    1424.570  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      6351.371 ±    5662.246    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         1.465 ±       8.192  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         5.729 ±      32.108    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5        12.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5        51.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    444656.562 ±   13551.679   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5      1242.492 ±      32.760  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5      4397.407 ±      23.148    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'            128  thrpt    5         0.027 ±       0.228  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       128  thrpt    5         0.095 ±       0.819    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                  128  thrpt    5      1352.691 ±      24.511  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                             128  thrpt    5      4787.749 ±     225.314    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                           128  thrpt    5         1.465 ±       8.192  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                      128  thrpt    5         5.161 ±      28.871    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5        10.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                              128  thrpt    5        63.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                                    128  thrpt    5     54562.147 ±    2325.533   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5      1184.406 ±      32.580  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     34167.691 ±     911.863    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1213.900 ±    1165.048  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     35057.820 ±   34137.430    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.732 ±       9.178  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        50.313 ±     266.234    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5         9.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        72.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                          128  thrpt    5    258102.125 ±   11414.098   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                           128  thrpt    5      1754.748 ±      79.018  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                      128  thrpt    5     10698.586 ±      14.573    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.004 ±       0.032  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.023 ±       0.197    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1767.475 ±    1427.483  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     10773.057 ±    8620.290    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         1.466 ±       7.781  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         8.877 ±      47.171    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                                128  thrpt    5        13.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                                 128  thrpt    5        39.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                                   128  thrpt    5    373576.319 ±   18588.154   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       961.129 ±      47.022  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5      4049.080 ±       4.964    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       942.011 ±    1419.994  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      3978.795 ±    6121.071    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         2.767 ±      23.827    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                         128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                          128  thrpt    5        65.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                                  128  thrpt    5   1154033.664 ±   27530.207   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5      2255.426 ±      57.765  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5      3076.180 ±      14.040    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       128  thrpt    5         0.001 ±       0.009  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  128  thrpt    5         0.001 ±       0.013    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5      2179.937 ±    1173.893  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      2973.626 ±    1615.123    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.533 ±       4.589  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.733 ±       6.309    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                                        128  thrpt    5        16.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                         128  thrpt    5        25.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                                       128  thrpt    5     77833.206 ±    4262.925   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                        128  thrpt    5      2515.574 ±     117.231  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     50869.771 ±     418.901    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.003 ±       0.021  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.063 ±       0.432    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      2589.293 ±    1172.360  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     52395.137 ±   24814.977    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         2.689 ±      23.154    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                             128  thrpt    5        19.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                              128  thrpt    5        27.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                         128  thrpt    5    321032.263 ±   68684.440   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                          128  thrpt    5       500.371 ±      97.389  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                     128  thrpt    5      2453.650 ±      56.353    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       539.170 ±    1160.604  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      2671.848 ±    5796.694    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.725 ±       6.243    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                               128  thrpt    5         4.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                                128  thrpt    5        32.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                                  128  thrpt    5    783664.212 ±   77608.830   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       566.256 ±      56.517  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5      1137.236 ±       4.713    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       672.806 ±       0.493  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      1351.938 ±     132.690    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                                        128  thrpt    5         5.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                         128  thrpt    5        46.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                                 128  thrpt    5   1953252.830 ±   49347.648   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       903.722 ±      21.127  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5       728.201 ±       1.548    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       943.789 ±    1421.941  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5       761.966 ±    1166.298    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                       128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                        128  thrpt    5        54.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                         128  thrpt    5   2152802.930 ±    4095.653   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          128  thrpt    5         0.016 ±       0.139  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     128  thrpt    5         0.012 ±       0.102    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                                      128  thrpt    5    399701.355 ±   35735.858   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                       128  thrpt    5       577.800 ±      52.069  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5      2275.239 ±      17.605    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       673.031 ±       1.703  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      2651.430 ±     246.555    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.519 ±       4.470    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                            128  thrpt    5         5.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                             128  thrpt    5        44.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                                     128  thrpt    5     42007.055 ±    7951.968   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      1313.772 ±     245.004  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     49228.795 ±     842.282    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.004 ±       0.030  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.127 ±       1.091    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1230.377 ±    1068.803  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     46128.168 ±   40434.833    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.599 ±       8.622  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        59.506 ±     323.570    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                           128  thrpt    5        10.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                            128  thrpt    5        65.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                              128  thrpt    5     56392.582 ±   14965.044   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1012.086 ±     266.578  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     28248.777 ±      72.600    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5      1077.073 ±    1421.073  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5     30472.976 ±   44419.180    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         0.799 ±       6.883  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5        21.722 ±     187.030    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         8.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        74.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                             128  thrpt    5     93506.217 ±    4270.984   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1434.613 ±      62.593  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5     24145.036 ±     195.023    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5      1490.243 ±    1145.480  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5     25096.430 ±   19688.349    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                 128  thrpt    5         1.466 ±       6.884  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            128  thrpt    5        24.578 ±     115.532    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        53.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                                  128  thrpt    5     21445.057 ±    2186.170   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      1397.485 ±      99.731  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    102582.265 ±    3599.420    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       128  thrpt    5        ≈ 10⁻⁵                MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  128  thrpt    5         0.002 ±       0.014    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1488.187 ±    1185.695  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5    109108.983 ±   82548.938    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         1.732 ±       9.177  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5       125.671 ±     666.252    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        11.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        72.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                             128  thrpt    5    117109.689 ±    3909.361   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1075.962 ±      34.162  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     14460.364 ±      22.804    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5      1077.020 ±    1416.608  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5     14506.661 ±   19426.464    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                 128  thrpt    5         0.799 ±       4.588  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                            128  thrpt    5        10.768 ±      62.063    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         8.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        74.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                            128  thrpt    5    423862.804 ±   29977.793   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       468.370 ±      34.143  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1739.089 ±      15.631    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                       128  thrpt    5       404.519 ±    1421.940  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5      1504.659 ±    5289.443    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        23.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    428917.201 ±    7274.749   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         4.719 ±       2.855  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5        17.326 ±      10.806    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                                 128  thrpt    5     56101.782 ±    8640.671   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1056.626 ±     163.505  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     29642.682 ±      49.764    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                            128  thrpt    5      1077.128 ±    1415.583  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     30125.537 ±   38248.628    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.799 ±       5.560  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        22.228 ±     152.020    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5         8.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        75.000                    ms
[info] MathBenchmark.sumDoubles                                                                                   128  thrpt    5   8597747.537 ±   79235.262   ops/s
[info] MathBenchmark.sumDoubles:·gc.alloc.rate                                                                    128  thrpt    5         0.233 ±       1.684  MB/sec
[info] MathBenchmark.sumDoubles:·gc.alloc.rate.norm                                                               128  thrpt    5         0.043 ±       0.310    B/op
[info] MathBenchmark.sumDoubles:·gc.count                                                                         128  thrpt    5           ≈ 0                counts
[info] MathBenchmark.sumDoublesUnrolled16                                                                         128  thrpt    5  15627972.124 ± 1930948.443   ops/s
[info] MathBenchmark.sumDoublesUnrolled16:·gc.alloc.rate                                                          128  thrpt    5         2.268 ±      19.513  MB/sec
[info] MathBenchmark.sumDoublesUnrolled16:·gc.alloc.rate.norm                                                     128  thrpt    5         0.242 ±       2.085    B/op
[info] MathBenchmark.sumDoublesUnrolled16:·gc.count                                                               128  thrpt    5           ≈ 0                counts
[info] MathBenchmark.sumDoublesUnrolled4                                                                          128  thrpt    5  18523849.816 ±  137802.308   ops/s
[info] MathBenchmark.sumDoublesUnrolled4:·gc.alloc.rate                                                           128  thrpt    5         0.057 ±       0.475  MB/sec
[info] MathBenchmark.sumDoublesUnrolled4:·gc.alloc.rate.norm                                                      128  thrpt    5         0.005 ±       0.041    B/op
[info] MathBenchmark.sumDoublesUnrolled4:·gc.count                                                                128  thrpt    5           ≈ 0                counts
[info] MathBenchmark.sumDoublesUnrolled8                                                                          128  thrpt    5  21582990.418 ±  213649.137   ops/s
[info] MathBenchmark.sumDoublesUnrolled8:·gc.alloc.rate                                                           128  thrpt    5         0.853 ±       7.026  MB/sec
[info] MathBenchmark.sumDoublesUnrolled8:·gc.alloc.rate.norm                                                      128  thrpt    5         0.062 ±       0.515    B/op
[info] MathBenchmark.sumDoublesUnrolled8:·gc.count                                                                128  thrpt    5           ≈ 0                counts
[info] MathBenchmark.sumLongs                                                                                     128  thrpt    5   8613561.284 ±    8384.502   ops/s
[info] MathBenchmark.sumLongs:·gc.alloc.rate                                                                      128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] MathBenchmark.sumLongs:·gc.alloc.rate.norm                                                                 128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] MathBenchmark.sumLongs:·gc.count                                                                           128  thrpt    5           ≈ 0                counts
[info] MathBenchmark.sumLongsUnrolled16                                                                           128  thrpt    5  15822611.574 ±   91754.247   ops/s
[info] MathBenchmark.sumLongsUnrolled16:·gc.alloc.rate                                                            128  thrpt    5         0.058 ±       0.498  MB/sec
[info] MathBenchmark.sumLongsUnrolled16:·gc.alloc.rate.norm                                                       128  thrpt    5         0.006 ±       0.050    B/op
[info] MathBenchmark.sumLongsUnrolled16:·gc.count                                                                 128  thrpt    5           ≈ 0                counts
[info] MathBenchmark.sumLongsUnrolled4                                                                            128  thrpt    5  18436656.192 ±  428422.116   ops/s
[info] MathBenchmark.sumLongsUnrolled4:·gc.alloc.rate                                                             128  thrpt    5         0.583 ±       2.617  MB/sec
[info] MathBenchmark.sumLongsUnrolled4:·gc.alloc.rate.norm                                                        128  thrpt    5         0.050 ±       0.225    B/op
[info] MathBenchmark.sumLongsUnrolled4:·gc.count                                                                  128  thrpt    5           ≈ 0                counts
[info] MathBenchmark.sumLongsUnrolled8                                                                            128  thrpt    5  21209754.186 ± 2892849.794   ops/s
[info] MathBenchmark.sumLongsUnrolled8:·gc.alloc.rate                                                             128  thrpt    5         0.275 ±       2.364  MB/sec
[info] MathBenchmark.sumLongsUnrolled8:·gc.alloc.rate.norm                                                        128  thrpt    5         0.022 ±       0.187    B/op
[info] MathBenchmark.sumLongsUnrolled8:·gc.count                                                                  128  thrpt    5           ≈ 0                counts
[info] MissingReqFieldBenchmark.readCirce                                                                         N/A  thrpt    5   2563821.277 ±   98667.868   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                          N/A  thrpt    5      3233.660 ±     115.417  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5      1984.996 ±       5.567    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              N/A  thrpt    5         0.001 ±       0.007  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         N/A  thrpt    5         0.001 ±       0.004    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5      3271.067 ±    1173.164  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5      2007.882 ±     714.486    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                               N/A  thrpt    5        24.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                                N/A  thrpt    5        36.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                                   N/A  thrpt    5    768666.905 ±   52495.590   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                                    N/A  thrpt    5       473.168 ±      30.750  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                               N/A  thrpt    5       968.613 ±       4.817    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5       402.540 ±    1414.986  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5       832.444 ±    2926.534    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                         N/A  thrpt    5         3.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                          N/A  thrpt    5        32.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                                  N/A  thrpt    5    302792.912 ±   12382.831   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5       568.276 ±      22.961  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5      2953.414 ±      12.154    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             N/A  thrpt    5       538.293 ±    1158.717  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        N/A  thrpt    5      2786.148 ±    5997.786    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                        N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                         N/A  thrpt    5        38.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                                 N/A  thrpt    5    499606.194 ±  138814.388   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       376.298 ±     105.413  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5      1185.260 ±       8.830    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            N/A  thrpt    5       404.569 ±    1422.117  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       N/A  thrpt    5      1222.689 ±    4298.644    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                       N/A  thrpt    5         3.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                        N/A  thrpt    5        22.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                             N/A  thrpt    5   1310558.915 ±   46049.455   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                              N/A  thrpt    5       420.920 ±      12.734  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                         N/A  thrpt    5       505.539 ±       4.282    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen                                        N/A  thrpt    5       539.260 ±    1160.799  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm                                   N/A  thrpt    5       649.510 ±    1398.275    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                                   N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                                    N/A  thrpt    5        30.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                       N/A  thrpt    5   3645585.866 ±   70634.531   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                        N/A  thrpt    5       297.865 ±       4.916  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                                   N/A  thrpt    5       128.598 ±       4.159    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen                                  N/A  thrpt    5       269.676 ±    1421.922  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm                             N/A  thrpt    5       116.921 ±     616.501    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                             N/A  thrpt    5         2.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                              N/A  thrpt    5        15.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                                      N/A  thrpt    5    225770.341 ±    3352.665   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                       N/A  thrpt    5      1467.214 ±      22.058  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  N/A  thrpt    5     10227.521 ±      16.251    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           N/A  thrpt    5         0.004 ±       0.035  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      N/A  thrpt    5         0.029 ±       0.246    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 N/A  thrpt    5      1486.756 ±    1144.673  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            N/A  thrpt    5     10366.917 ±    8073.509    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          N/A  thrpt    5         1.732 ±       9.177  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     N/A  thrpt    5        12.098 ±      64.129    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                            N/A  thrpt    5        11.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                             N/A  thrpt    5        77.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                                   128  thrpt    5   1356665.652 ±   40591.949   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5        76.350 ±       1.945  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5        88.573 ±       4.931    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       135.515 ±    1166.825  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       159.393 ±    1372.425    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5         1.000                counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5         8.000                    ms
[info] MutableBitSetBenchmark.readPlayJson                                                                        128  thrpt    5     57688.108 ±    2339.588   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      2454.261 ±      93.592  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     66952.781 ±     228.782    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.002 ±       0.011  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.049 ±       0.298    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      2452.404 ±    1433.376  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     66949.137 ±   40430.864    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.799 ±       6.882  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        22.226 ±     191.371    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        18.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        32.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                                   128  thrpt    5   1373670.609 ±   55515.906   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       719.556 ±      29.277  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5       824.469 ±       3.225    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       807.579 ±    1159.439  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       923.169 ±    1285.391    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.133 ±       1.147  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         0.152 ±       1.308    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5         6.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5        54.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                                  128  thrpt    5   1495448.494 ±   16228.532   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       418.399 ±       5.024  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5       440.347 ±       2.364    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       404.471 ±    1421.772  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5       425.056 ±    1494.138    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         3.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        23.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5   1662832.162 ±   17596.163   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5        16.940 ±       0.240  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5        16.033 ±       0.278    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                                       128  thrpt    5     46385.279 ±    1320.534   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5      1865.235 ±      53.730  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     63283.916 ±      71.535    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.024 ±       0.207  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.808 ±       6.959    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1902.415 ±    1161.550  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     64566.916 ±   39906.906    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.732 ±       9.176  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        58.530 ±     310.336    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5        14.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5        46.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                                        128  thrpt    5    220933.819 ±    2886.387   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       865.377 ±      10.727  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      6162.662 ±      12.025    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                   128  thrpt    5       807.533 ±    1149.423  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                              128  thrpt    5      5750.689 ±    8184.003    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         6.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        47.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                             128  thrpt    5     27889.358 ±    1803.188   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1342.401 ±      87.997  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     75761.215 ±     123.473    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                        128  thrpt    5      1351.723 ±      29.886  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5     76299.835 ±    3625.882    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                 128  thrpt    5         1.732 ±       9.176  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                            128  thrpt    5        96.870 ±     512.968    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        10.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        67.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                                        128  thrpt    5     88159.091 ±    4014.996   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1079.269 ±      22.216  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     19267.567 ±     637.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                   128  thrpt    5      1078.040 ±    1424.354  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                              128  thrpt    5     19282.481 ±   25884.289    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                            128  thrpt    5         1.466 ±       8.194  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                       128  thrpt    5        26.096 ±     145.850    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5         8.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        69.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                                       128  thrpt    5    310522.174 ±   16332.445   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       418.663 ±      21.650  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      2121.824 ±      13.412    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                  128  thrpt    5       404.476 ±    1421.792  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                             128  thrpt    5      2069.865 ±    7276.062    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         3.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        23.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5    341307.420 ±     608.873   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5         3.634 ±       1.026  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        16.758 ±       4.747    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                            128  thrpt    5     44356.430 ±    1526.454   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1091.472 ±      34.778  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     38725.123 ±     131.819    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                       128  thrpt    5      1212.707 ±    1162.178  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5     43087.973 ±   42005.021    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                128  thrpt    5         1.465 ±       7.780  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                           128  thrpt    5        51.933 ±     275.649    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         9.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        80.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                              128  thrpt    5     60325.089 ±   12499.780   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1281.898 ±     265.108  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     33445.834 ±     367.766    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                   128  thrpt    5         0.002 ±       0.014  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              128  thrpt    5         0.042 ±       0.362    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                         128  thrpt    5      1353.672 ±      26.157  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5     35402.894 ±    7600.733    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         1.598 ±       8.621  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5        44.185 ±     241.616    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                    128  thrpt    5        10.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                     128  thrpt    5        53.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                                       128  thrpt    5    104254.056 ±     643.270   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5       703.768 ±      28.249  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     10622.993 ±     459.428    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                  128  thrpt    5       672.896 ±       0.366  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                             128  thrpt    5     10156.938 ±      62.905    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5        47.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                                      128  thrpt    5    225016.688 ±   35142.810   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       928.941 ±     154.376  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      6497.012 ±     121.767    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                 128  thrpt    5       943.823 ±    1422.517  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                            128  thrpt    5      6560.644 ±    9287.047    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         7.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5        56.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                           128  thrpt    5     20866.145 ±     666.779   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1029.691 ±      33.535  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     77661.847 ±     490.169    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                      128  thrpt    5      1077.184 ±    1421.599  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5     81369.261 ±  108732.062    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                               128  thrpt    5         0.933 ±       8.030  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                          128  thrpt    5        70.062 ±     603.254    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        76.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                                      128  thrpt    5    132724.779 ±    2176.712   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5       684.900 ±      12.018  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      8121.527 ±      13.120    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                 128  thrpt    5       672.819 ±       0.444  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                            128  thrpt    5      7978.402 ±     130.462    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5        48.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                                     128  thrpt    5    428179.690 ±   12180.642   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1254.568 ±      31.617  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      4611.705 ±      20.125    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'          128  thrpt    5         0.007 ±       0.056  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     128  thrpt    5         0.024 ±       0.205    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                128  thrpt    5      1352.567 ±      25.064  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                           128  thrpt    5      4972.015 ±      81.499    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                         128  thrpt    5         1.466 ±       8.192  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                    128  thrpt    5         5.402 ±      30.161    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5        10.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5        60.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5    475160.107 ±   10301.135   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5       872.461 ±      16.731  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5      2889.894 ±      10.229    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                        128  thrpt    5       808.929 ±    1160.614  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                   128  thrpt    5      2682.547 ±    3903.389    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5         6.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                    128  thrpt    5        47.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                          128  thrpt    5     52877.446 ±    2358.748   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5       997.489 ±      40.215  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     29692.406 ±     280.841    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                     128  thrpt    5      1076.931 ±    1420.845  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                128  thrpt    5     32101.395 ±   42832.829    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                              128  thrpt    5         0.799 ±       6.882  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                         128  thrpt    5        24.073 ±     207.275    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        73.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                                        128  thrpt    5     87896.363 ±    4940.186   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5      1325.735 ±      75.222  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     23738.736 ±     318.258    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1353.408 ±      27.023  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     24237.425 ±    1130.106    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.732 ±       8.232  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        30.683 ±     145.501    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                              128  thrpt    5        10.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                               128  thrpt    5        55.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                                 128  thrpt    5    145093.522 ±    2929.454   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       606.453 ±      12.200  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5      6577.977 ±      11.076    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       538.251 ±    1158.626  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      5851.957 ±   12596.825    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5         4.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        39.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                                128  thrpt    5    222467.482 ±    7237.692   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       794.801 ±      12.554  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5      5621.781 ±      98.222    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       808.301 ±    1154.882  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      5730.682 ±    8426.871    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5         6.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        47.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                                     128  thrpt    5     53561.801 ±    2248.690   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      1961.237 ±      87.699  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     57632.945 ±     529.484    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.071 ±       0.592  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         2.081 ±      17.310    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1904.067 ±    1168.153  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     55966.810 ±   34613.072    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.732 ±      12.245  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        51.127 ±     362.030    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        14.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        45.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                                       128  thrpt    5    172078.862 ±   10938.665   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5       811.971 ±      48.382  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5      7426.325 ±      93.525    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       808.626 ±    1159.456  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      7383.751 ±   10352.183    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.266 ±       1.405  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         2.451 ±      12.926    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                             128  thrpt    5         6.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        48.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                                128  thrpt    5    469142.992 ±   15003.514   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       369.965 ±      10.083  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5      1241.178 ±      10.133    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       403.796 ±    1419.401  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      1362.078 ±    4787.986    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.133 ±       1.147  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         0.452 ±       3.888    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        28.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                               128  thrpt    5    567984.860 ±   31638.278   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5       306.464 ±      18.064  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5       849.153 ±       2.773    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5       269.644 ±    1421.755  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5       749.775 ±    3954.065    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5         2.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5        15.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    619217.294 ±    6863.452   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5         6.329 ±       0.274  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5        16.087 ±       0.746    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                                    128  thrpt    5     33137.593 ±    1029.469   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5      1597.399 ±      49.338  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     75867.156 ±      30.611    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1628.582 ±    1432.129  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     77430.285 ±   69829.283    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.732 ±      12.113  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        82.801 ±     580.417    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5        12.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        62.000                    ms
[info] PrimitivesBenchmark.readCirce                                                                              N/A  thrpt    5    800103.380 ±   14355.905   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      2001.382 ±      36.339  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5      3936.867 ±       6.349    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   N/A  thrpt    5         0.024 ±       0.209  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              N/A  thrpt    5         0.048 ±       0.410    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5      1903.198 ±    1198.040  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5      3742.307 ±    2322.875    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         1.599 ±       8.623  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5         3.160 ±      17.039    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        14.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        38.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                                       N/A  thrpt    5   1479580.715 ±   28277.566   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5       948.141 ±      16.362  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1008.523 ±       2.517    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  N/A  thrpt    5       941.913 ±    1418.882  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             N/A  thrpt    5      1002.698 ±    1520.409    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5         7.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        68.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                                      N/A  thrpt    5   7568908.896 ±  444062.827   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5       231.169 ±      14.177  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5        48.068 ±       0.584    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 N/A  thrpt    5       269.789 ±    1422.522  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            N/A  thrpt    5        56.402 ±     297.415    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5         2.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                             N/A  thrpt    5        14.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                           N/A  thrpt    5    323223.732 ±   12394.585   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      1998.643 ±      76.901  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5      9731.695 ±      13.256    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                N/A  thrpt    5         0.019 ±       0.160  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           N/A  thrpt    5         0.093 ±       0.773    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5      1902.477 ±    1199.187  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5      9255.096 ±    5635.866    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               N/A  thrpt    5         1.732 ±       9.528  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          N/A  thrpt    5         8.492 ±      46.644    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        14.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        47.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                             N/A  thrpt    5    916718.815 ±   40372.125   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      1361.924 ±      56.828  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5      2338.015 ±      11.971    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  N/A  thrpt    5         0.002 ±       0.014  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             N/A  thrpt    5         0.003 ±       0.023    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5      1353.162 ±      28.761  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5      2323.093 ±      58.555    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                 N/A  thrpt    5         1.599 ±       8.622  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                            N/A  thrpt    5         2.749 ±      14.865    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        10.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        56.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                                      N/A  thrpt    5   2231749.015 ±  309348.254   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      1056.344 ±     146.553  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       744.989 ±       4.028    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 N/A  thrpt    5      1076.847 ±    1420.462  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            N/A  thrpt    5       763.220 ±    1045.890    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          N/A  thrpt    5         0.933 ±       6.690  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     N/A  thrpt    5         0.691 ±       5.007    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5         8.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        70.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5   5547706.054 ±  176203.550   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5       621.536 ±      18.483  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5       176.337 ±       2.134    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                N/A  thrpt    5       539.290 ±    1160.863  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           N/A  thrpt    5       153.482 ±     330.397    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         4.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        31.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5   5955504.809 ±  418984.667   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5       272.890 ±      17.841  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5        72.118 ±       0.835    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                        N/A  thrpt    5       269.781 ±    1422.476  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                   N/A  thrpt    5        72.524 ±     382.398    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5         2.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                    N/A  thrpt    5        14.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                          N/A  thrpt    5    359310.548 ±   21206.642   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      1917.952 ±     112.491  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      8401.477 ±      10.787    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               N/A  thrpt    5         0.015 ±       0.131  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          N/A  thrpt    5         0.066 ±       0.567    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5      1900.110 ±    1157.536  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5      8332.393 ±    5266.831    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              N/A  thrpt    5         1.998 ±      10.881  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         N/A  thrpt    5         8.895 ±      48.396    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        14.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        55.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                               128  thrpt    5     56894.115 ±    1175.819   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                                128  thrpt    5      1489.286 ±      26.979  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                           128  thrpt    5     41200.617 ±     164.047    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.003 ±       0.029  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.093 ±       0.799    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1491.495 ±    1142.506  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     41280.166 ±   32160.275    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         1.465 ±       7.780  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        40.646 ±     215.924    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                                     128  thrpt    5        11.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                                      128  thrpt    5        49.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                                        128  thrpt    5     71495.028 ±    4786.000   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1094.335 ±      73.040  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     24090.499 ±      13.612    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1077.775 ±    1423.489  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     23792.057 ±   32110.862    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.465 ±       8.191  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        32.708 ±     182.702    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                              128  thrpt    5         8.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                               128  thrpt    5        68.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                                       128  thrpt    5     98653.033 ±    3975.309   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5      1450.030 ±      55.342  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5     23131.841 ±      97.824    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1490.515 ±    1162.571  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     23800.848 ±   19211.230    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.466 ±      11.240  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        23.574 ±     181.212    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                             128  thrpt    5        11.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                              128  thrpt    5        54.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                            128  thrpt    5     39970.181 ±    1258.034   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                             128  thrpt    5      1956.001 ±      61.802  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5     77018.172 ±     374.724    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.009 ±       0.080  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.374 ±       3.184    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1904.105 ±    1168.417  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     74944.104 ±   45228.769    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         1.732 ±      12.246  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        68.743 ±     486.310    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                                  128  thrpt    5        14.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                                   128  thrpt    5        37.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                              128  thrpt    5    153707.897 ±    6742.978   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                               128  thrpt    5       737.165 ±      29.899  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                          128  thrpt    5      7548.580 ±      91.315    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5       808.742 ±    1160.680  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5      8270.794 ±   11666.633    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.133 ±       1.147  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         1.347 ±      11.595    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                                    128  thrpt    5         6.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                                     128  thrpt    5        50.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                                       128  thrpt    5    366758.556 ±    8779.119   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       323.148 ±       5.057  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      1386.805 ±      18.072    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       269.143 ±    1419.115  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      1161.917 ±    6126.513    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                             128  thrpt    5         2.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                              128  thrpt    5        19.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                                      128  thrpt    5    614184.526 ±   56785.995   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       331.426 ±      30.778  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5       849.203 ±      10.059    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       269.547 ±    1421.245  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5       705.662 ±    3722.056    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.133 ±       1.147  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.356 ±       3.067    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                            128  thrpt    5         2.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                             128  thrpt    5        15.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                              128  thrpt    5    679207.635 ±    7373.864   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                               128  thrpt    5         6.905 ±       0.076  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                          128  thrpt    5        16.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                    128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                           128  thrpt    5     33088.815 ±     434.179   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                            128  thrpt    5      1595.576 ±      19.519  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     75892.653 ±     315.475    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.002 ±       0.020  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.109 ±       0.943    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1628.447 ±    1431.317  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     77497.325 ±   69010.756    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         1.732 ±      13.525  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        82.489 ±     644.495    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                                 128  thrpt    5        12.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                                  128  thrpt    5        48.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                                      128  thrpt    5   3404146.317 ±   43617.835   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      2270.468 ±      25.291  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5      1049.808 ±       9.670    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.003 ±       0.014  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.001 ±       0.006    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      2316.123 ±    1439.334  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1070.552 ±     653.814    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.666 ±       5.736  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.308 ±       2.650    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        17.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                             128  thrpt    5        28.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                                128  thrpt    5   3510705.729 ±  108661.383   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                                 128  thrpt    5       375.040 ±      10.722  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            128  thrpt    5       168.127 ±       1.042    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                           128  thrpt    5       402.475 ±    1414.755  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5       180.438 ±     634.316    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                      128  thrpt    5         3.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                       128  thrpt    5        31.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                               128  thrpt    5   2595368.748 ±   86698.682   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5      1227.627 ±      41.147  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5       744.457 ±       2.217    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1215.713 ±    1169.069  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5       738.272 ±     721.832    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         1.732 ±       7.164  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         1.055 ±       4.362    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5        61.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                              128  thrpt    5   3590638.632 ±   83806.234   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       383.573 ±       8.069  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5       168.144 ±       1.240    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5       404.410 ±    1421.558  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5       178.067 ±     625.932    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5         3.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        23.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                                   128  thrpt    5   2862168.140 ±  189682.071   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      1222.313 ±      80.433  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5       672.195 ±       0.992    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1215.994 ±    1169.664  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       669.874 ±     657.525    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.865 ±       7.779  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         1.015 ±       4.229    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        61.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                                     128  thrpt    5   2220578.161 ±  130837.402   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5       534.153 ±      22.324  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5       378.639 ±      13.119    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                128  thrpt    5       539.019 ±    1160.279  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       383.160 ±     825.190    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.266 ±       1.405  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.191 ±       1.006    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5        33.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                               128  thrpt    5   5617131.439 ±  241671.400   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       542.970 ±      21.902  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5       152.077 ±       0.663    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                          128  thrpt    5       535.800 ±    1153.364  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5       150.660 ±     324.368    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.133 ±       1.142  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         0.037 ±       0.319    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                                     128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                      128  thrpt    5        42.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                              128  thrpt    5   3332758.685 ±  192051.979   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       881.913 ±      43.071  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5       416.495 ±       4.127    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5       942.372 ±    1419.909  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5       446.611 ±     692.179    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         0.133 ±       1.147  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5         0.062 ±       0.538    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         7.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        64.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                             128  thrpt    5   5683076.996 ±  378411.057   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       550.210 ±      31.402  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       152.391 ±       1.797    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5       674.088 ±       0.238  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5       186.741 ±      12.724    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        37.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5   6337044.202 ±   34678.415   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5         0.034 ±       0.286  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5         0.008 ±       0.071    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                                  128  thrpt    5   3432487.832 ±  516626.191   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5       942.121 ±     141.741  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5       432.011 ±       0.088    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             128  thrpt    5       942.372 ±    1417.858  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5       436.376 ±     706.835    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.799 ±       5.560  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.389 ±       2.744    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5         7.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        64.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                                   128  thrpt    5    855079.531 ±   38019.330   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1383.136 ±      57.948  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5      2546.021 ±       8.354    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.003 ±       0.023  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.005 ±       0.042    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1488.589 ±    1149.610  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      2742.162 ±    2173.239    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.599 ±       7.389  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         2.931 ±      13.536    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        11.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        59.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                             128  thrpt    5   1745848.461 ±   46020.971   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       488.492 ±      11.970  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       440.398 ±       2.954    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                        128  thrpt    5       402.340 ±    1414.281  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5       364.496 ±    1281.263    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                 128  thrpt    5         0.133 ±       1.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                            128  thrpt    5         0.121 ±       1.038    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5        31.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                            128  thrpt    5   1191491.700 ±   49626.839   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       769.941 ±      32.806  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1017.027 ±       5.260    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       128  thrpt    5       807.339 ±    1158.308  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5      1066.891 ±    1537.644    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                128  thrpt    5         0.133 ±       1.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           128  thrpt    5         0.178 ±       1.534    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        54.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                           128  thrpt    5   1609083.817 ±  438981.973   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       451.325 ±     126.144  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       441.397 ±       5.876    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5       404.778 ±    1422.852  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5       386.004 ±    1357.139    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                               128  thrpt    5         0.133 ±       1.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          128  thrpt    5         0.129 ±       1.114    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        22.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                                128  thrpt    5   1199182.722 ±   28710.566   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5       774.968 ±      12.581  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5      1017.140 ±       9.519    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           128  thrpt    5       808.014 ±    1159.685  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      1062.366 ±    1557.611    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.133 ±       1.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         0.174 ±       1.499    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        54.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                                  128  thrpt    5   1010007.813 ±   18850.013   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       849.452 ±      12.186  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      1323.710 ±      20.211    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             128  thrpt    5       808.957 ±    1161.053  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      1261.813 ±    1832.506    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        48.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                            128  thrpt    5    807148.289 ±   20909.828   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       209.586 ±       3.683  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       408.644 ±       3.521    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                       128  thrpt    5       268.347 ±    1414.917  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5       527.083 ±    2779.159    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                                  128  thrpt    5         2.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                   128  thrpt    5        20.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                           128  thrpt    5   1961549.689 ±  150971.605   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       840.313 ±      45.024  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       674.287 ±      16.584    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5       808.166 ±    1159.513  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5       648.742 ±     933.607    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        53.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                          128  thrpt    5   2175140.332 ±   13942.247   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       564.777 ±       5.081  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       408.670 ±       2.331    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     128  thrpt    5       674.123 ±       0.425  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                128  thrpt    5       487.794 ±       3.131    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        37.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2299545.437 ±    5893.063   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.364 ±       1.971  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.250 ±       1.350    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                               128  thrpt    5   1905285.602 ±   31339.757   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       920.463 ±      14.905  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5       760.282 ±       1.886    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          128  thrpt    5       808.220 ±    1159.547  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5       668.118 ±     968.212    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        51.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                              N/A  thrpt    5      5752.103 ±      11.570   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5       688.349 ±       2.408  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5    188354.117 ±     555.978    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5       673.333 ±       0.174  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5    184245.296 ±     383.833    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5         5.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        41.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                       N/A  thrpt    5     16350.297 ±     911.996   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5       233.727 ±      10.656  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5     22505.084 ±    2046.710    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  N/A  thrpt    5       268.695 ±    1416.749  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             N/A  thrpt    5     26273.392 ±  138533.459    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5         2.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        21.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                                      N/A  thrpt    5     20086.122 ±     361.931   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5       190.073 ±       8.573  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5     14893.174 ±     802.065    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 N/A  thrpt    5       134.831 ±    1160.938  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            N/A  thrpt    5     10616.898 ±   91414.690    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5         1.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                             N/A  thrpt    5         7.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                           N/A  thrpt    5      5824.862 ±     211.912   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      1619.824 ±      58.170  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5    437664.017 ±     177.853    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                N/A  thrpt    5         0.002 ±       0.016  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           N/A  thrpt    5         0.497 ±       4.281    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5      1625.956 ±    1428.789  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5    439313.879 ±  385427.061    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               N/A  thrpt    5         1.999 ±       9.598  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          N/A  thrpt    5       544.402 ±    2615.385    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        12.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        72.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                                      N/A  thrpt    5     53215.168 ±    2699.015   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5       668.605 ±      34.098  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5     19773.852 ±      78.554    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 N/A  thrpt    5       672.139 ±       0.565  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            N/A  thrpt    5     19881.148 ±    1022.822    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5         5.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        49.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5     79595.388 ±    2752.212   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5       520.875 ±      12.729  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5     10300.701 ±     317.287    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                N/A  thrpt    5       538.990 ±    1160.218  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           N/A  thrpt    5     10691.090 ±   23015.535    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         N/A  thrpt    5         0.266 ±       1.405  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    N/A  thrpt    5         5.275 ±      27.813    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        33.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5     88560.509 ±     570.247   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5         9.651 ±       5.528  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5       171.511 ±      99.068    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                                        128  thrpt    5    233698.603 ±   15872.611   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5      1249.725 ±      84.888  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5      8416.298 ±       2.548    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.004 ±       0.035  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.027 ±       0.232    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1217.331 ±    1169.548  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      8199.176 ±    7883.847    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.599 ±       6.439  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        10.689 ±      42.845    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                              128  thrpt    5         9.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                               128  thrpt    5        51.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                                 128  thrpt    5    390451.304 ±   29907.886   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       438.929 ±      34.666  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5      1769.302 ±       8.991    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       403.670 ±    1418.958  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      1624.823 ±    5712.600    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5         3.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        29.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                                128  thrpt    5    994451.686 ±   14116.259   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       520.955 ±       6.777  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       824.589 ±       3.607    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       539.253 ±    1160.783  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5       854.655 ±    1839.732    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                                     128  thrpt    5     71630.716 ±    2924.082   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      2211.220 ±      81.879  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     48576.007 ±     226.486    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.001 ±       0.006  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.019 ±       0.132    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      2315.248 ±    1427.374  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     50861.032 ±   31281.886    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.066 ±       9.180  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        23.268 ±     200.342    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        17.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        34.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                                       128  thrpt    5    323487.174 ±   14975.084   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5       515.676 ±      19.004  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5      2509.036 ±      31.204    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       539.303 ±    1160.890  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      2632.187 ±    5667.372    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                             128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        32.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                                128  thrpt    5    709456.133 ±   35691.521   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       541.571 ±      27.169  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5      1201.313 ±       6.923    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       538.292 ±    1158.714  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      1199.536 ±    2582.539    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.133 ±       1.147  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         0.300 ±       2.586    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        37.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                               128  thrpt    5   1378420.097 ±   55325.117   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5       639.919 ±      15.087  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5       730.666 ±      13.322    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5       674.132 ±       0.445  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5       769.769 ±      31.195    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5        40.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5   1493650.111 ±    8990.591   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5         0.109 ±       0.639  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5         0.115 ±       0.675    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                                    128  thrpt    5    400653.933 ±   23251.556   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5       595.254 ±      35.421  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5      2338.345 ±      18.777    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               128  thrpt    5       538.350 ±    1158.839  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      2125.248 ±    4576.035    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.133 ±       1.147  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.522 ±       4.497    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        35.000                    ms
[info] Benchmark result is saved to jdk10graal.json
[success] Total time: 7158 s, completed May 11, 2018 10:08:48 PM
