[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 19, 2018 4:06:03 AM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:991:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1077:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:443:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:451:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:967:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.26.1-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.26.1-SNAPSHOT.jar ...
[info] Compiling 57 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "a"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "l"
[info]         case 1 => "r"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d7(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d6(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d9(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d5(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d13(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d8(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d10(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e6(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e7(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e13(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e8(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e10(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e14(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "properties"
[info]         case 1 => "geometry"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "coordinates"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd, 300)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "bd"
[info]         case 2 => "os"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null, 300));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Char] = new Array[Char](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Double] = new Array[Double](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Float] = new Array[Float](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Int] = new Array[Int](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Long] = new Array[Long](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Short] = new Array[Short](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "l"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "destination_addresses"
[info]         case 1 => "origin_addresses"
[info]         case 2 => "rows"
[info]         case 3 => "status"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "distance"
[info]         case 1 => "duration"
[info]         case 2 => "status"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "text"
[info]         case 1 => "value"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]         case 1 => "s"
[info]         case 2 => "i"
[info]         case 3 => "l"
[info]         case 4 => "bl"
[info]         case 5 => "ch"
[info]         case 6 => "dbl"
[info]         case 7 => "f"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "retweeted_status"
[info]         case 18 => "is_quote_status"
[info]         case 19 => "retweet_count"
[info]         case 20 => "favorite_count"
[info]         case 21 => "favorited"
[info]         case 22 => "retweeted"
[info]         case 23 => "possibly_sensitive"
[info]         case 24 => "lang"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "screen_name"
[info]         case 1 => "name"
[info]         case 2 => "id"
[info]         case 3 => "id_str"
[info]         case 4 => "indices"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "expanded_url"
[info]         case 2 => "display_url"
[info]         case 3 => "indices"
[info]       };
[info]       private[this] def f3(i: Int): String = (i: @switch) match {
[info]         case 0 => "id"
[info]         case 1 => "id_str"
[info]         case 2 => "name"
[info]         case 3 => "screen_name"
[info]         case 4 => "location"
[info]         case 5 => "description"
[info]         case 6 => "url"
[info]         case 7 => "entities"
[info]         case 8 => "protected"
[info]         case 9 => "followers_count"
[info]         case 10 => "friends_count"
[info]         case 11 => "listed_count"
[info]         case 12 => "created_at"
[info]         case 13 => "favourites_count"
[info]         case 14 => "utc_offset"
[info]         case 15 => "time_zone"
[info]         case 16 => "geo_enabled"
[info]         case 17 => "verified"
[info]         case 18 => "statuses_count"
[info]         case 19 => "lang"
[info]         case 20 => "contributors_enabled"
[info]         case 21 => "is_translator"
[info]         case 22 => "is_translation_enabled"
[info]         case 23 => "profile_background_color"
[info]         case 24 => "profile_background_image_url"
[info]         case 25 => "profile_background_image_url_https"
[info]         case 26 => "profile_background_tile"
[info]         case 27 => "profile_image_url"
[info]         case 28 => "profile_image_url_https"
[info]         case 29 => "profile_banner_url"
[info]         case 30 => "profile_link_color"
[info]         case 31 => "profile_sidebar_border_color"
[info]         case 32 => "profile_sidebar_fill_color"
[info]         case 33 => "profile_text_color"
[info]         case 34 => "profile_use_background_image"
[info]         case 35 => "has_extended_profile"
[info]         case 36 => "default_profile"
[info]         case 37 => "default_profile_image"
[info]         case 38 => "following"
[info]         case 39 => "follow_request_sent"
[info]         case 40 => "notifications"
[info]         case 41 => "translator_type"
[info]       };
[info]       private[this] def f4(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "description"
[info]       };
[info]       private[this] def f5(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "is_quote_status"
[info]         case 18 => "retweet_count"
[info]         case 19 => "favorite_count"
[info]         case 20 => "favorited"
[info]         case 21 => "retweeted"
[info]         case 22 => "possibly_sensitive"
[info]         case 23 => "lang"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:49:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:50:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:51:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:55:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:56:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:57:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:58:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:59:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:60:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:61:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.26.1-SNAPSHOT.jar ...
[info] Compiling 49 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 421 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 617 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.26.1-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.26.1-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/jdk-10/bin/java -jvmArgsAppend -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -prof gc -rf json -rff jdk10graal.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51290.067 ops/s
[info] # Warmup Iteration   2: 729200.180 ops/s
[info] # Warmup Iteration   3: 735874.483 ops/s
[info] # Warmup Iteration   4: 775714.580 ops/s
[info] # Warmup Iteration   5: 765199.429 ops/s
[info] Iteration   1: 772191.858 ops/s
[info]                  ·gc.alloc.rate:                   2140.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              4363.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4132.929 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 764578.192 ops/s
[info]                  ·gc.alloc.rate:                   2116.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              4357.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4178.216 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 776446.608 ops/s
[info]                  ·gc.alloc.rate:                   2148.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              4355.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4120.342 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 767590.686 ops/s
[info]                  ·gc.alloc.rate:                   2138.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              4384.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4170.620 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 773278.400 ops/s
[info]                  ·gc.alloc.rate:                   2168.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              4412.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4144.650 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   770817.149 ±(99.9%) 18160.700 ops/s [Average]
[info]   (min, avg, max) = (764578.192, 770817.149, 776446.608), stdev = 4716.276
[info]   CI (99.9%): [752656.448, 788977.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2142.384 ±(99.9%) 71.637 MB/sec [Average]
[info]   (min, avg, max) = (2116.763, 2142.384, 2168.237), stdev = 18.604
[info]   CI (99.9%): [2070.747, 2214.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4374.906 ±(99.9%) 93.196 B/op [Average]
[info]   (min, avg, max) = (4355.812, 4374.906, 4412.945), stdev = 24.203
[info]   CI (99.9%): [4281.710, 4468.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.153 ±(99.9%) 0.220 B/op [Average]
[info]   (min, avg, max) = (0.085, 0.153, 0.214), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2031.868 ±(99.9%) 13.713 MB/sec [Average]
[info]   (min, avg, max) = (2027.277, 2031.868, 2036.414), stdev = 3.561
[info]   CI (99.9%): [2018.155, 2045.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4149.351 ±(99.9%) 94.692 B/op [Average]
[info]   (min, avg, max) = (4120.342, 4149.351, 4178.216), stdev = 24.591
[info]   CI (99.9%): [4054.659, 4244.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.24% complete, ETA 01:56:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28012.523 ops/s
[info] # Warmup Iteration   2: 1659931.010 ops/s
[info] # Warmup Iteration   3: 1784131.785 ops/s
[info] # Warmup Iteration   4: 1811292.702 ops/s
[info] # Warmup Iteration   5: 1826564.071 ops/s
[info] Iteration   1: 1820510.862 ops/s
[info]                  ·gc.alloc.rate:                   1189.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              1028.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1165.587 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1833451.959 ops/s
[info]                  ·gc.alloc.rate:                   1211.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              1040.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1157.928 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1826946.132 ops/s
[info]                  ·gc.alloc.rate:                   1191.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              1026.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1162.633 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1814734.187 ops/s
[info]                  ·gc.alloc.rate:                   1179.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              1022.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 585.810 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1828422.773 ops/s
[info]                  ·gc.alloc.rate:                   1203.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              1036.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1163.085 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1824813.182 ±(99.9%) 28053.149 ops/s [Average]
[info]   (min, avg, max) = (1814734.187, 1824813.182, 1833451.959), stdev = 7285.314
[info]   CI (99.9%): [1796760.033, 1852866.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1195.311 ±(99.9%) 49.075 MB/sec [Average]
[info]   (min, avg, max) = (1179.287, 1195.311, 1211.941), stdev = 12.745
[info]   CI (99.9%): [1146.236, 1244.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1030.951 ±(99.9%) 27.546 B/op [Average]
[info]   (min, avg, max) = (1022.935, 1030.951, 1040.232), stdev = 7.154
[info]   CI (99.9%): [1003.405, 1058.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.029 ±(99.9%) 0.125 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.071), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1214.655 ±(99.9%) 1160.903 MB/sec [Average]
[info]   (min, avg, max) = (675.349, 1214.655, 1351.020), stdev = 301.483
[info]   CI (99.9%): [53.752, 2375.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1047.009 ±(99.9%) 992.823 B/op [Average]
[info]   (min, avg, max) = (585.810, 1047.009, 1165.587), stdev = 257.833
[info]   CI (99.9%): [54.186, 2039.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.47% complete, ETA 01:54:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2877063.385 ops/s
[info] # Warmup Iteration   2: 5264850.463 ops/s
[info] # Warmup Iteration   3: 5557171.593 ops/s
[info] # Warmup Iteration   4: 5620759.901 ops/s
[info] # Warmup Iteration   5: 5605087.678 ops/s
[info] Iteration   1: 5589675.656 ops/s
[info]                  ·gc.alloc.rate:                   381.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              107.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.054 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5633281.267 ops/s
[info]                  ·gc.alloc.rate:      372.218 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5616613.168 ops/s
[info]                  ·gc.alloc.rate:                   392.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              109.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 189.089 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5589099.627 ops/s
[info]                  ·gc.alloc.rate:      369.292 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5606551.450 ops/s
[info]                  ·gc.alloc.rate:                   383.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              107.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.242 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 189.245 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   5607044.234 ±(99.9%) 72138.339 ops/s [Average]
[info]   (min, avg, max) = (5589099.627, 5607044.234, 5633281.267), stdev = 18734.098
[info]   CI (99.9%): [5534905.895, 5679182.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   379.608 ±(99.9%) 35.082 MB/sec [Average]
[info]   (min, avg, max) = (369.292, 379.608, 392.037), stdev = 9.111
[info]   CI (99.9%): [344.527, 414.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   106.561 ±(99.9%) 9.774 B/op [Average]
[info]   (min, avg, max) = (104.000, 106.561, 109.874), stdev = 2.538
[info]   CI (99.9%): [96.788, 116.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.508 ±(99.9%) 4.370 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.508, 2.538), stdev = 1.135
[info]   CI (99.9%): [≈ 0, 4.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.142 ±(99.9%) 1.227 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.142, 0.712), stdev = 0.319
[info]   CI (99.9%): [≈ 0, 1.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   372.091 ±(99.9%) 1332.794 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 372.091, 674.682), stdev = 346.122
[info]   CI (99.9%): [≈ 0, 1704.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   104.478 ±(99.9%) 374.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 104.478, 189.245), stdev = 97.136
[info]   CI (99.9%): [≈ 0, 478.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.71% complete, ETA 01:54:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 576.697 ops/s
[info] # Warmup Iteration   2: 197704.356 ops/s
[info] # Warmup Iteration   3: 264559.678 ops/s
[info] # Warmup Iteration   4: 272624.410 ops/s
[info] # Warmup Iteration   5: 266617.977 ops/s
[info] Iteration   1: 272912.146 ops/s
[info]                  ·gc.alloc.rate:                   2387.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              13770.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2699.785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15573.500 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 273280.756 ops/s
[info]                  ·gc.alloc.rate:                   2362.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              13607.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11685.457 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 272953.300 ops/s
[info]                  ·gc.alloc.rate:                   2360.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              13611.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15619.059 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 273727.276 ops/s
[info]                  ·gc.alloc.rate:                   2377.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              13672.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11695.744 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 273497.869 ops/s
[info]                  ·gc.alloc.rate:                   2378.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              13690.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.209 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11720.569 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   273274.269 ±(99.9%) 1346.912 ops/s [Average]
[info]   (min, avg, max) = (272912.146, 273274.269, 273727.276), stdev = 349.789
[info]   CI (99.9%): [271927.357, 274621.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2373.178 ±(99.9%) 43.914 MB/sec [Average]
[info]   (min, avg, max) = (2360.538, 2373.178, 2387.186), stdev = 11.404
[info]   CI (99.9%): [2329.263, 2417.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13670.320 ±(99.9%) 257.247 B/op [Average]
[info]   (min, avg, max) = (13607.227, 13670.320, 13770.299), stdev = 66.806
[info]   CI (99.9%): [13413.072, 13927.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.312 ±(99.9%) 0.527 B/op [Average]
[info]   (min, avg, max) = (0.120, 0.312, 0.480), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2301.425 ±(99.9%) 1416.105 MB/sec [Average]
[info]   (min, avg, max) = (2028.659, 2301.425, 2708.730), stdev = 367.758
[info]   CI (99.9%): [885.320, 3717.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   13258.866 ±(99.9%) 8216.720 B/op [Average]
[info]   (min, avg, max) = (11685.457, 13258.866, 15619.059), stdev = 2133.856
[info]   CI (99.9%): [5042.146, 21475.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.94% complete, ETA 01:53:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58421.574 ops/s
[info] # Warmup Iteration   2: 855685.545 ops/s
[info] # Warmup Iteration   3: 871880.624 ops/s
[info] # Warmup Iteration   4: 897975.545 ops/s
[info] # Warmup Iteration   5: 901343.519 ops/s
[info] Iteration   1: 902692.278 ops/s
[info]                  ·gc.alloc.rate:                   2224.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              3878.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3535.852 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 901517.727 ops/s
[info]                  ·gc.alloc.rate:                   2219.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              3875.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3545.032 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 904447.650 ops/s
[info]                  ·gc.alloc.rate:                   2242.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              3902.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4717.843 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 897902.610 ops/s
[info]                  ·gc.alloc.rate:                   2237.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              3921.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3569.496 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 903645.881 ops/s
[info]                  ·gc.alloc.rate:                   2252.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              3923.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3549.075 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   902041.229 ±(99.9%) 9853.409 ops/s [Average]
[info]   (min, avg, max) = (897902.610, 902041.229, 904447.650), stdev = 2558.899
[info]   CI (99.9%): [892187.820, 911894.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   2235.184 ±(99.9%) 51.607 MB/sec [Average]
[info]   (min, avg, max) = (2219.469, 2235.184, 2252.229), stdev = 13.402
[info]   CI (99.9%): [2183.577, 2286.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3900.384 ±(99.9%) 88.247 B/op [Average]
[info]   (min, avg, max) = (3875.431, 3900.384, 3923.539), stdev = 22.918
[info]   CI (99.9%): [3812.136, 3988.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.123 ±(99.9%) 0.159 B/op [Average]
[info]   (min, avg, max) = (0.073, 0.123, 0.182), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2168.551 ±(99.9%) 1168.358 MB/sec [Average]
[info]   (min, avg, max) = (2027.752, 2168.551, 2711.276), stdev = 303.419
[info]   CI (99.9%): [1000.192, 3336.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3783.460 ±(99.9%) 2011.889 B/op [Average]
[info]   (min, avg, max) = (3535.852, 3783.460, 4717.843), stdev = 522.481
[info]   CI (99.9%): [1771.571, 5795.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.18% complete, ETA 01:53:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_aee5aee3/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 113551.974 ops/s
[info] # Warmup Iteration   2: 2796514.594 ops/s
[info] # Warmup Iteration   3: 2793246.413 ops/s
[info] # Warmup Iteration   4: 2831773.465 ops/s
[info] # Warmup Iteration   5: 2833062.422 ops/s
[info] Iteration   1: 2863860.420 ops/s
[info]                  ·gc.alloc.rate:                   964.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              530.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 740.422 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2854884.055 ops/s
[info]                  ·gc.alloc.rate:                   947.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              522.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 371.443 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2864460.933 ops/s
[info]                  ·gc.alloc.rate:                   953.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              523.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 370.397 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 2779544.928 ops/s
[info]                  ·gc.alloc.rate:                   943.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              534.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 763.800 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2862294.910 ops/s
[info]                  ·gc.alloc.rate:                   947.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              521.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 371.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2845009.049 ±(99.9%) 141686.140 ops/s [Average]
[info]   (min, avg, max) = (2779544.928, 2845009.049, 2864460.933), stdev = 36795.441
[info]   CI (99.9%): [2703322.909, 2986695.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   951.290 ±(99.9%) 30.869 MB/sec [Average]
[info]   (min, avg, max) = (943.372, 951.290, 964.207), stdev = 8.017
[info]   CI (99.9%): [920.421, 982.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   526.315 ±(99.9%) 21.442 B/op [Average]
[info]   (min, avg, max) = (521.106, 526.315, 534.209), stdev = 5.568
[info]   CI (99.9%): [504.873, 547.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.016 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.059), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   943.714 ±(99.9%) 1420.717 MB/sec [Average]
[info]   (min, avg, max) = (673.659, 943.714, 1348.813), stdev = 368.956
[info]   CI (99.9%): [≈ 0, 2364.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   523.419 ±(99.9%) 804.518 B/op [Average]
[info]   (min, avg, max) = (370.397, 523.419, 763.800), stdev = 208.931
[info]   CI (99.9%): [≈ 0, 1327.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.41% complete, ETA 01:52:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2636560.821 ops/s
[info] # Warmup Iteration   2: 12547959.918 ops/s
[info] # Warmup Iteration   3: 13608753.913 ops/s
[info] # Warmup Iteration   4: 13941979.534 ops/s
[info] # Warmup Iteration   5: 13688692.704 ops/s
[info] Iteration   1: 13818649.174 ops/s
[info]                  ·gc.alloc.rate:                   721.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              82.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.932 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 13950624.187 ops/s
[info]                  ·gc.alloc.rate:                   725.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              81.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.129 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 13969914.713 ops/s
[info]                  ·gc.alloc.rate:                   727.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              82.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 13906215.407 ops/s
[info]                  ·gc.alloc.rate:                   726.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              82.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.297 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 13916719.940 ops/s
[info]                  ·gc.alloc.rate:                   730.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              82.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.239 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   13912424.684 ±(99.9%) 224654.270 ops/s [Average]
[info]   (min, avg, max) = (13818649.174, 13912424.684, 13969914.713), stdev = 58342.001
[info]   CI (99.9%): [13687770.414, 14137078.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   726.390 ±(99.9%) 12.931 MB/sec [Average]
[info]   (min, avg, max) = (721.610, 726.390, 730.664), stdev = 3.358
[info]   CI (99.9%): [713.459, 739.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   82.181 ±(99.9%) 1.205 B/op [Average]
[info]   (min, avg, max) = (81.798, 82.181, 82.644), stdev = 0.313
[info]   CI (99.9%): [80.976, 83.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.497 ±(99.9%) 4.238 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.497, 2.466), stdev = 1.101
[info]   CI (99.9%): [≈ 0, 4.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.057 ±(99.9%) 0.483 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.281), stdev = 0.125
[info]   CI (99.9%): [≈ 0, 0.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   674.608 ±(99.9%) 2.159 MB/sec [Average]
[info]   (min, avg, max) = (674.036, 674.608, 675.346), stdev = 0.561
[info]   CI (99.9%): [672.449, 676.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   76.323 ±(99.9%) 1.372 B/op [Average]
[info]   (min, avg, max) = (76.021, 76.323, 76.932), stdev = 0.356
[info]   CI (99.9%): [74.952, 77.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.65% complete, ETA 01:52:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2252485.764 ops/s
[info] # Warmup Iteration   2: 15147023.967 ops/s
[info] # Warmup Iteration   3: 15992983.014 ops/s
[info] # Warmup Iteration   4: 15956214.128 ops/s
[info] # Warmup Iteration   5: 15941912.864 ops/s
[info] Iteration   1: 15991174.060 ops/s
[info]                  ·gc.alloc.rate:      0.171 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 16010148.822 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 16000188.457 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 15952182.615 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 15993542.857 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   15989447.362 ±(99.9%) 85070.858 ops/s [Average]
[info]   (min, avg, max) = (15952182.615, 15989447.362, 16010148.822), stdev = 22092.632
[info]   CI (99.9%): [15904376.504, 16074518.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.034 ±(99.9%) 0.293 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.034, 0.171), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.003, 0.017), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.88% complete, ETA 01:52:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11282.444 ops/s
[info] # Warmup Iteration   2: 521448.848 ops/s
[info] # Warmup Iteration   3: 669080.720 ops/s
[info] # Warmup Iteration   4: 678755.744 ops/s
[info] # Warmup Iteration   5: 680405.992 ops/s
[info] Iteration   1: 678612.193 ops/s
[info]                  ·gc.alloc.rate:                   1933.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              4486.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.549 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4691.978 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 672998.220 ops/s
[info]                  ·gc.alloc.rate:                   1930.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              4514.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4737.413 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 676228.948 ops/s
[info]                  ·gc.alloc.rate:                   1927.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              4486.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4720.194 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 675319.855 ops/s
[info]                  ·gc.alloc.rate:                   1940.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              4522.707 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4731.246 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 680648.253 ops/s
[info]                  ·gc.alloc.rate:                   1928.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              4461.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3133.066 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   676761.494 ±(99.9%) 11399.490 ops/s [Average]
[info]   (min, avg, max) = (672998.220, 676761.494, 680648.253), stdev = 2960.411
[info]   CI (99.9%): [665362.004, 688160.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1932.182 ±(99.9%) 20.286 MB/sec [Average]
[info]   (min, avg, max) = (1927.359, 1932.182, 1940.558), stdev = 5.268
[info]   CI (99.9%): [1911.896, 1952.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4494.257 ±(99.9%) 95.005 B/op [Average]
[info]   (min, avg, max) = (4461.054, 4494.257, 4522.707), stdev = 24.673
[info]   CI (99.9%): [4399.252, 4589.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.155 ±(99.9%) 0.307 B/op [Average]
[info]   (min, avg, max) = (0.096, 0.155, 0.291), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1892.086 ±(99.9%) 1156.755 MB/sec [Average]
[info]   (min, avg, max) = (1354.727, 1892.086, 2030.035), stdev = 300.405
[info]   CI (99.9%): [735.331, 3048.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4402.779 ±(99.9%) 2733.977 B/op [Average]
[info]   (min, avg, max) = (3133.066, 4402.779, 4737.413), stdev = 710.005
[info]   CI (99.9%): [1668.803, 7136.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.12% complete, ETA 01:51:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 384700.230 ops/s
[info] # Warmup Iteration   2: 1958701.064 ops/s
[info] # Warmup Iteration   3: 2006007.376 ops/s
[info] # Warmup Iteration   4: 2007179.190 ops/s
[info] # Warmup Iteration   5: 2008020.371 ops/s
[info] Iteration   1: 2007178.682 ops/s
[info]                  ·gc.alloc.rate:                   2750.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              2156.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2121.643 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2003073.220 ops/s
[info]                  ·gc.alloc.rate:                   2754.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              2163.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2129.282 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2009532.107 ops/s
[info]                  ·gc.alloc.rate:                   2790.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              2185.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.384 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2125.506 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1988799.092 ops/s
[info]                  ·gc.alloc.rate:                   2765.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              2188.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2150.270 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2012936.424 ops/s
[info]                  ·gc.alloc.rate:                   2799.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              2188.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2126.582 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   2004303.905 ±(99.9%) 36123.916 ops/s [Average]
[info]   (min, avg, max) = (1988799.092, 2004303.905, 2012936.424), stdev = 9381.266
[info]   CI (99.9%): [1968179.989, 2040427.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2772.044 ±(99.9%) 83.810 MB/sec [Average]
[info]   (min, avg, max) = (2750.769, 2772.044, 2799.224), stdev = 21.765
[info]   CI (99.9%): [2688.234, 2855.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2176.756 ±(99.9%) 58.711 B/op [Average]
[info]   (min, avg, max) = (2156.787, 2176.756, 2188.823), stdev = 15.247
[info]   CI (99.9%): [2118.045, 2235.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.052 ±(99.9%) 0.093 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.052, 0.082), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2713.298 ±(99.9%) 21.193 MB/sec [Average]
[info]   (min, avg, max) = (2705.947, 2713.298, 2719.626), stdev = 5.504
[info]   CI (99.9%): [2692.104, 2734.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2130.657 ±(99.9%) 43.521 B/op [Average]
[info]   (min, avg, max) = (2121.643, 2130.657, 2150.270), stdev = 11.302
[info]   CI (99.9%): [2087.136, 2174.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.35% complete, ETA 01:51:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.671 ops/s
[info] # Warmup Iteration   2: 9263585.908 ops/s
[info] # Warmup Iteration   3: 10169956.055 ops/s
[info] # Warmup Iteration   4: 10025086.779 ops/s
[info] # Warmup Iteration   5: 9886897.076 ops/s
[info] Iteration   1: 9996526.300 ops/s
[info]                  ·gc.alloc.rate:                   1267.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              199.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 210.594 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 9960677.518 ops/s
[info]                  ·gc.alloc.rate:                   1252.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              197.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 211.408 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 10019107.168 ops/s
[info]                  ·gc.alloc.rate:                   1238.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              194.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105.113 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 9993229.326 ops/s
[info]                  ·gc.alloc.rate:                   1246.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              196.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 210.988 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 10040123.120 ops/s
[info]                  ·gc.alloc.rate:                   1252.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              196.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 210.422 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   10001932.686 ±(99.9%) 114882.826 ops/s [Average]
[info]   (min, avg, max) = (9960677.518, 10001932.686, 10040123.120), stdev = 29834.705
[info]   CI (99.9%): [9887049.861, 10116815.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1251.559 ±(99.9%) 40.633 MB/sec [Average]
[info]   (min, avg, max) = (1238.664, 1251.559, 1267.321), stdev = 10.552
[info]   CI (99.9%): [1210.926, 1292.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   196.951 ±(99.9%) 7.227 B/op [Average]
[info]   (min, avg, max) = (194.592, 196.951, 199.565), stdev = 1.877
[info]   CI (99.9%): [189.724, 204.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.007 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   1205.298 ±(99.9%) 1154.243 MB/sec [Average]
[info]   (min, avg, max) = (669.094, 1205.298, 1342.231), stdev = 299.753
[info]   CI (99.9%): [51.055, 2359.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   189.705 ±(99.9%) 182.096 B/op [Average]
[info]   (min, avg, max) = (105.113, 189.705, 211.408), stdev = 47.290
[info]   CI (99.9%): [7.609, 371.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.59% complete, ETA 01:51:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108489.295 ops/s
[info] # Warmup Iteration   2: 3088445.785 ops/s
[info] # Warmup Iteration   3: 3135904.932 ops/s
[info] # Warmup Iteration   4: 3266775.519 ops/s
[info] # Warmup Iteration   5: 3275377.945 ops/s
[info] Iteration   1: 3226432.268 ops/s
[info]                  ·gc.alloc.rate:                   1975.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              964.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 987.331 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3291404.055 ops/s
[info]                  ·gc.alloc.rate:                   2018.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              965.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 969.266 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3279326.871 ops/s
[info]                  ·gc.alloc.rate:                   1995.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              957.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.537 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 974.157 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3266246.628 ops/s
[info]                  ·gc.alloc.rate:                   2009.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              968.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.822 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 979.179 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3281352.983 ops/s
[info]                  ·gc.alloc.rate:                   2004.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              961.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.654 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 650.330 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   3268952.561 ±(99.9%) 97808.701 ops/s [Average]
[info]   (min, avg, max) = (3226432.268, 3268952.561, 3291404.055), stdev = 25400.609
[info]   CI (99.9%): [3171143.860, 3366761.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2000.845 ±(99.9%) 62.666 MB/sec [Average]
[info]   (min, avg, max) = (1975.837, 2000.845, 2018.801), stdev = 16.274
[info]   CI (99.9%): [1938.180, 2063.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   963.465 ±(99.9%) 15.191 B/op [Average]
[info]   (min, avg, max) = (957.948, 963.465, 968.362), stdev = 3.945
[info]   CI (99.9%): [948.275, 978.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.036 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.060), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1893.489 ±(99.9%) 1157.790 MB/sec [Average]
[info]   (min, avg, max) = (1355.654, 1893.489, 2031.822), stdev = 300.674
[info]   CI (99.9%): [735.699, 3051.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   912.052 ±(99.9%) 563.965 B/op [Average]
[info]   (min, avg, max) = (650.330, 912.052, 987.331), stdev = 146.460
[info]   CI (99.9%): [348.087, 1476.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.82% complete, ETA 01:51:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6219403.285 ops/s
[info] # Warmup Iteration   2: 12842955.498 ops/s
[info] # Warmup Iteration   3: 13180877.413 ops/s
[info] # Warmup Iteration   4: 13279207.444 ops/s
[info] # Warmup Iteration   5: 13350812.757 ops/s
[info] Iteration   1: 13404618.095 ops/s
[info]                  ·gc.alloc.rate:                   1748.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              205.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 236.907 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 13237513.572 ops/s
[info]                  ·gc.alloc.rate:                   1709.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              203.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 160.214 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 13293212.504 ops/s
[info]                  ·gc.alloc.rate:                   1757.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 239.598 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13359803.114 ops/s
[info]                  ·gc.alloc.rate:                   1736.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              204.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.169 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159.148 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 13341890.959 ops/s
[info]                  ·gc.alloc.rate:                   1749.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              206.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 239.351 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   13327407.649 ±(99.9%) 247094.192 ops/s [Average]
[info]   (min, avg, max) = (13237513.572, 13327407.649, 13404618.095), stdev = 64169.577
[info]   CI (99.9%): [13080313.456, 13574501.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1740.296 ±(99.9%) 71.727 MB/sec [Average]
[info]   (min, avg, max) = (1709.882, 1740.296, 1757.900), stdev = 18.627
[info]   CI (99.9%): [1668.568, 1812.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   205.518 ±(99.9%) 7.067 B/op [Average]
[info]   (min, avg, max) = (203.322, 205.518, 208.141), stdev = 1.835
[info]   CI (99.9%): [198.451, 212.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.004 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1753.748 ±(99.9%) 1421.911 MB/sec [Average]
[info]   (min, avg, max) = (1347.353, 1753.748, 2028.605), stdev = 369.266
[info]   CI (99.9%): [331.837, 3175.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   207.044 ±(99.9%) 166.542 B/op [Average]
[info]   (min, avg, max) = (159.148, 207.044, 239.598), stdev = 43.250
[info]   CI (99.9%): [40.502, 373.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.06% complete, ETA 01:51:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6572.356 ops/s
[info] # Warmup Iteration   2: 245620.616 ops/s
[info] # Warmup Iteration   3: 1131707.174 ops/s
[info] # Warmup Iteration   4: 1216161.328 ops/s
[info] # Warmup Iteration   5: 1219827.530 ops/s
[info] Iteration   1: 1220018.900 ops/s
[info]                  ·gc.alloc.rate:                   2847.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              3674.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2701.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3486.311 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1223644.737 ops/s
[info]                  ·gc.alloc.rate:                   2878.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              3702.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2706.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3481.987 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1225755.998 ops/s
[info]                  ·gc.alloc.rate:                   2857.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              3668.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3481.118 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1213467.326 ops/s
[info]                  ·gc.alloc.rate:                   2871.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              3724.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3520.634 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1222260.650 ops/s
[info]                  ·gc.alloc.rate:                   2889.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              3721.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.200 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3499.631 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   1221029.522 ±(99.9%) 18153.526 ops/s [Average]
[info]   (min, avg, max) = (1213467.326, 1221029.522, 1225755.998), stdev = 4714.413
[info]   CI (99.9%): [1202875.996, 1239183.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2868.725 ±(99.9%) 64.186 MB/sec [Average]
[info]   (min, avg, max) = (2847.737, 2868.725, 2889.714), stdev = 16.669
[info]   CI (99.9%): [2804.539, 2932.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3698.323 ±(99.9%) 99.623 B/op [Average]
[info]   (min, avg, max) = (3668.793, 3698.323, 3724.247), stdev = 25.872
[info]   CI (99.9%): [3598.700, 3797.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.107 ±(99.9%) 0.145 B/op [Average]
[info]   (min, avg, max) = (0.054, 0.107, 0.160), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2710.183 ±(99.9%) 23.166 MB/sec [Average]
[info]   (min, avg, max) = (2701.865, 2710.183, 2717.200), stdev = 6.016
[info]   CI (99.9%): [2687.017, 2733.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3493.936 ±(99.9%) 64.157 B/op [Average]
[info]   (min, avg, max) = (3481.118, 3493.936, 3520.634), stdev = 16.661
[info]   CI (99.9%): [3429.779, 3558.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.29% complete, ETA 01:50:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 506514.322 ops/s
[info] # Warmup Iteration   2: 2412468.661 ops/s
[info] # Warmup Iteration   3: 2479116.491 ops/s
[info] # Warmup Iteration   4: 2536091.561 ops/s
[info] # Warmup Iteration   5: 2536397.204 ops/s
[info] Iteration   1: 2527883.650 ops/s
[info]                  ·gc.alloc.rate:                   2045.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              1273.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1261.814 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2533341.567 ops/s
[info]                  ·gc.alloc.rate:                   2024.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              1257.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.806 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1261.135 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2538785.034 ops/s
[info]                  ·gc.alloc.rate:                   2027.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              1257.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1259.726 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2542700.333 ops/s
[info]                  ·gc.alloc.rate:                   2057.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              1273.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1259.415 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2537176.275 ops/s
[info]                  ·gc.alloc.rate:                   2053.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              1274.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1263.000 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2535977.372 ±(99.9%) 21695.085 ops/s [Average]
[info]   (min, avg, max) = (2527883.650, 2535977.372, 2542700.333), stdev = 5634.145
[info]   CI (99.9%): [2514282.286, 2557672.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2041.864 ±(99.9%) 57.595 MB/sec [Average]
[info]   (min, avg, max) = (2024.648, 2041.864, 2057.660), stdev = 14.957
[info]   CI (99.9%): [1984.269, 2099.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1267.273 ±(99.9%) 34.051 B/op [Average]
[info]   (min, avg, max) = (1257.260, 1267.273, 1274.097), stdev = 8.843
[info]   CI (99.9%): [1233.221, 1301.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.036 ±(99.9%) 0.129 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.078), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2031.785 ±(99.9%) 15.317 MB/sec [Average]
[info]   (min, avg, max) = (2026.215, 2031.785, 2035.758), stdev = 3.978
[info]   CI (99.9%): [2016.467, 2047.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1261.018 ±(99.9%) 5.715 B/op [Average]
[info]   (min, avg, max) = (1259.415, 1261.018, 1263.000), stdev = 1.484
[info]   CI (99.9%): [1255.303, 1266.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.53% complete, ETA 01:50:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.725 ops/s
[info] # Warmup Iteration   2: 15860529.478 ops/s
[info] # Warmup Iteration   3: 16789890.937 ops/s
[info] # Warmup Iteration   4: 16813831.816 ops/s
[info] # Warmup Iteration   5: 16762901.555 ops/s
[info] Iteration   1: 16800784.332 ops/s
[info]                  ·gc.alloc.rate:                   526.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.843 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16724199.196 ops/s
[info]                  ·gc.alloc.rate:      512.277 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.211 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 16671854.654 ops/s
[info]                  ·gc.alloc.rate:                   529.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.264 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 16824256.953 ops/s
[info]                  ·gc.alloc.rate:                   527.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.690 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 16930241.164 ops/s
[info]                  ·gc.alloc.rate:                   538.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.236 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   16790267.260 ±(99.9%) 381413.697 ops/s [Average]
[info]   (min, avg, max) = (16671854.654, 16790267.260, 16930241.164), stdev = 99051.926
[info]   CI (99.9%): [16408853.563, 17171680.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   526.782 ±(99.9%) 35.899 MB/sec [Average]
[info]   (min, avg, max) = (512.277, 526.782, 538.036), stdev = 9.323
[info]   CI (99.9%): [490.884, 562.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   49.381 ±(99.9%) 2.857 B/op [Average]
[info]   (min, avg, max) = (48.211, 49.381, 50.030), stdev = 0.742
[info]   CI (99.9%): [46.524, 52.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.785 ±(99.9%) 6.673 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.785, 3.886), stdev = 1.733
[info]   CI (99.9%): [≈ 0, 7.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.074 ±(99.9%) 0.625 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.364), stdev = 0.162
[info]   CI (99.9%): [≈ 0, 0.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   536.089 ±(99.9%) 1153.973 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.089, 670.733), stdev = 299.683
[info]   CI (99.9%): [≈ 0, 1690.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   50.207 ±(99.9%) 108.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.207, 63.264), stdev = 28.069
[info]   CI (99.9%): [≈ 0, 158.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.76% complete, ETA 01:50:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_aee5aee3/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 189774.997 ops/s
[info] # Warmup Iteration   2: 5593282.585 ops/s
[info] # Warmup Iteration   3: 6245391.803 ops/s
[info] # Warmup Iteration   4: 6280300.153 ops/s
[info] # Warmup Iteration   5: 6274314.024 ops/s
[info] Iteration   1: 6283481.496 ops/s
[info]                  ·gc.alloc.rate:                   1759.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.599 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 338.042 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6204454.391 ops/s
[info]                  ·gc.alloc.rate:                   1766.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              447.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 513.945 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6286819.062 ops/s
[info]                  ·gc.alloc.rate:                   1765.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              442.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 338.444 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6272311.471 ops/s
[info]                  ·gc.alloc.rate:                   1775.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              445.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 509.326 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6272385.474 ops/s
[info]                  ·gc.alloc.rate:                   1786.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              448.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 510.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6263890.379 ±(99.9%) 130372.229 ops/s [Average]
[info]   (min, avg, max) = (6204454.391, 6263890.379, 6286819.062), stdev = 33857.254
[info]   CI (99.9%): [6133518.150, 6394262.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1770.738 ±(99.9%) 39.897 MB/sec [Average]
[info]   (min, avg, max) = (1759.816, 1770.738, 1786.261), stdev = 10.361
[info]   CI (99.9%): [1730.841, 1810.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   444.942 ±(99.9%) 13.119 B/op [Average]
[info]   (min, avg, max) = (440.792, 444.942, 448.289), stdev = 3.407
[info]   CI (99.9%): [431.823, 458.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.019 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.019, 0.036), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1757.967 ±(99.9%) 1431.647 MB/sec [Average]
[info]   (min, avg, max) = (1349.599, 1757.967, 2032.410), stdev = 371.794
[info]   CI (99.9%): [326.319, 3189.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   441.964 ±(99.9%) 364.657 B/op [Average]
[info]   (min, avg, max) = (338.042, 441.964, 513.945), stdev = 94.700
[info]   CI (99.9%): [77.307, 806.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.00% complete, ETA 01:50:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10175574.916 ops/s
[info] # Warmup Iteration   2: 19402636.482 ops/s
[info] # Warmup Iteration   3: 20872157.618 ops/s
[info] # Warmup Iteration   4: 20465722.092 ops/s
[info] # Warmup Iteration   5: 20640768.208 ops/s
[info] Iteration   1: 21255580.429 ops/s
[info]                  ·gc.alloc.rate:                   671.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.916 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 20730829.147 ops/s
[info]                  ·gc.alloc.rate:                   665.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.329 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.129 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 20904998.023 ops/s
[info]                  ·gc.alloc.rate:                   650.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.703 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 21240202.106 ops/s
[info]                  ·gc.alloc.rate:                   665.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.853 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 21186740.255 ops/s
[info]                  ·gc.alloc.rate:                   671.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.979 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   21063669.992 ±(99.9%) 901205.586 ops/s [Average]
[info]   (min, avg, max) = (20730829.147, 21063669.992, 21255580.429), stdev = 234040.229
[info]   CI (99.9%): [20162464.406, 21964875.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   664.891 ±(99.9%) 32.551 MB/sec [Average]
[info]   (min, avg, max) = (650.926, 664.891, 671.926), stdev = 8.453
[info]   CI (99.9%): [632.340, 697.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49.690 ±(99.9%) 2.249 B/op [Average]
[info]   (min, avg, max) = (49.012, 49.690, 50.518), stdev = 0.584
[info]   CI (99.9%): [47.441, 51.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.566 ±(99.9%) 4.652 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.566, 2.727), stdev = 1.208
[info]   CI (99.9%): [≈ 0, 5.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.042 ±(99.9%) 0.345 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.202), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   673.225 ±(99.9%) 2.154 MB/sec [Average]
[info]   (min, avg, max) = (672.684, 673.225, 674.031), stdev = 0.559
[info]   CI (99.9%): [671.072, 675.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   50.316 ±(99.9%) 2.194 B/op [Average]
[info]   (min, avg, max) = (49.853, 50.316, 51.129), stdev = 0.570
[info]   CI (99.9%): [48.122, 52.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.24% complete, ETA 01:49:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12024329.387 ops/s
[info] # Warmup Iteration   2: 23518424.779 ops/s
[info] # Warmup Iteration   3: 23711424.762 ops/s
[info] # Warmup Iteration   4: 23690466.436 ops/s
[info] # Warmup Iteration   5: 23707570.635 ops/s
[info] Iteration   1: 23706894.151 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 23675375.917 ops/s
[info]                  ·gc.alloc.rate:      1.184 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.079 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23354100.941 ops/s
[info]                  ·gc.alloc.rate:      0.002 MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 23727957.519 ops/s
[info]                  ·gc.alloc.rate:      0.012 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 23732107.891 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   23639287.284 ±(99.9%) 619948.901 ops/s [Average]
[info]   (min, avg, max) = (23354100.941, 23639287.284, 23732107.891), stdev = 160998.761
[info]   CI (99.9%): [23019338.383, 24259236.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.240 ±(99.9%) 2.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.240, 1.184), stdev = 0.528
[info]   CI (99.9%): [≈ 0, 2.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.016 ±(99.9%) 0.135 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.016, 0.079), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.47% complete, ETA 01:49:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32448.874 ops/s
[info] # Warmup Iteration   2: 1673479.246 ops/s
[info] # Warmup Iteration   3: 1762075.758 ops/s
[info] # Warmup Iteration   4: 1780296.662 ops/s
[info] # Warmup Iteration   5: 1776583.497 ops/s
[info] Iteration   1: 1781491.558 ops/s
[info]                  ·gc.alloc.rate:                   2736.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              2418.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2704.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2389.942 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1778541.938 ops/s
[info]                  ·gc.alloc.rate:                   2732.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              2417.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.948 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1797.944 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1780369.817 ops/s
[info]                  ·gc.alloc.rate:                   2776.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              2454.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2397.615 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1773489.163 ops/s
[info]                  ·gc.alloc.rate:                   2766.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              2455.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2409.871 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1784742.101 ops/s
[info]                  ·gc.alloc.rate:                   2782.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              2454.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2397.294 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1779726.915 ±(99.9%) 15992.126 ops/s [Average]
[info]   (min, avg, max) = (1773489.163, 1779726.915, 1784742.101), stdev = 4153.104
[info]   CI (99.9%): [1763734.790, 1795719.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2759.047 ±(99.9%) 89.068 MB/sec [Average]
[info]   (min, avg, max) = (2732.588, 2759.047, 2782.748), stdev = 23.131
[info]   CI (99.9%): [2669.979, 2848.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2440.205 ±(99.9%) 77.873 B/op [Average]
[info]   (min, avg, max) = (2417.895, 2440.205, 2455.712), stdev = 20.223
[info]   CI (99.9%): [2362.333, 2518.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.059 ±(99.9%) 0.116 B/op [Average]
[info]   (min, avg, max) = (0.037, 0.059, 0.110), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2576.304 ±(99.9%) 1171.930 MB/sec [Average]
[info]   (min, avg, max) = (2031.948, 2576.304, 2718.037), stdev = 304.347
[info]   CI (99.9%): [1404.374, 3748.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2278.533 ±(99.9%) 1034.872 B/op [Average]
[info]   (min, avg, max) = (1797.944, 2278.533, 2409.871), stdev = 268.753
[info]   CI (99.9%): [1243.661, 3313.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.71% complete, ETA 01:49:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 164824.514 ops/s
[info] # Warmup Iteration   2: 291793.044 ops/s
[info] # Warmup Iteration   3: 307860.225 ops/s
[info] # Warmup Iteration   4: 304849.827 ops/s
[info] # Warmup Iteration   5: 306383.529 ops/s
[info] Iteration   1: 307559.863 ops/s
[info]                  ·gc.alloc.rate:                   1733.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              8871.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10320.160 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 304256.271 ops/s
[info]                  ·gc.alloc.rate:                   1707.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              8835.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6960.437 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 307510.884 ops/s
[info]                  ·gc.alloc.rate:                   1740.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              8910.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10342.260 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 307416.549 ops/s
[info]                  ·gc.alloc.rate:                   1725.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              8832.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6905.863 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 306967.218 ops/s
[info]                  ·gc.alloc.rate:                   1763.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              9042.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10393.032 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   306742.157 ±(99.9%) 5426.768 ops/s [Average]
[info]   (min, avg, max) = (304256.271, 306742.157, 307559.863), stdev = 1409.314
[info]   CI (99.9%): [301315.389, 312168.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1733.974 ±(99.9%) 78.696 MB/sec [Average]
[info]   (min, avg, max) = (1707.723, 1733.974, 1763.234), stdev = 20.437
[info]   CI (99.9%): [1655.278, 1812.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8898.280 ±(99.9%) 332.453 B/op [Average]
[info]   (min, avg, max) = (8832.485, 8898.280, 9042.066), stdev = 86.337
[info]   CI (99.9%): [8565.827, 9230.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.050, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.006, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.256 ±(99.9%) 0.223 B/op [Average]
[info]   (min, avg, max) = (0.213, 0.256, 0.320), stdev = 0.058
[info]   CI (99.9%): [0.033, 0.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1751.500 ±(99.9%) 1421.885 MB/sec [Average]
[info]   (min, avg, max) = (1345.309, 1751.500, 2026.678), stdev = 369.259
[info]   CI (99.9%): [329.615, 3173.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8984.350 ±(99.9%) 7211.360 B/op [Average]
[info]   (min, avg, max) = (6905.863, 8984.350, 10393.032), stdev = 1872.767
[info]   CI (99.9%): [1772.991, 16195.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.94% complete, ETA 01:48:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104272.900 ops/s
[info] # Warmup Iteration   2: 470716.156 ops/s
[info] # Warmup Iteration   3: 477083.431 ops/s
[info] # Warmup Iteration   4: 506122.188 ops/s
[info] # Warmup Iteration   5: 504760.307 ops/s
[info] Iteration   1: 501674.522 ops/s
[info]                  ·gc.alloc.rate:      652.270 MB/sec
[info]                  ·gc.alloc.rate.norm: 2046.868 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 494361.957 ops/s
[info]                  ·gc.alloc.rate:                   644.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              2051.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2146.170 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 497697.493 ops/s
[info]                  ·gc.alloc.rate:                   653.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              2068.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2131.839 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 501850.850 ops/s
[info]                  ·gc.alloc.rate:                   654.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              2054.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2114.204 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 502065.289 ops/s
[info]                  ·gc.alloc.rate:                   659.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              2066.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2113.265 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   499530.022 ±(99.9%) 13126.088 ops/s [Average]
[info]   (min, avg, max) = (494361.957, 499530.022, 502065.289), stdev = 3408.803
[info]   CI (99.9%): [486403.934, 512656.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   652.966 ±(99.9%) 20.820 MB/sec [Average]
[info]   (min, avg, max) = (644.458, 652.966, 659.223), stdev = 5.407
[info]   CI (99.9%): [632.146, 673.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2057.582 ±(99.9%) 36.080 B/op [Average]
[info]   (min, avg, max) = (2046.868, 2057.582, 2068.049), stdev = 9.370
[info]   CI (99.9%): [2021.502, 2093.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.052 ±(99.9%) 0.328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.196), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.252 ±(99.9%) 1160.780 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.252, 674.088), stdev = 301.451
[info]   CI (99.9%): [≈ 0, 1700.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1701.095 ±(99.9%) 3662.112 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1701.095, 2146.170), stdev = 951.039
[info]   CI (99.9%): [≈ 0, 5363.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.18% complete, ETA 01:48:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 993122.061 ops/s
[info] # Warmup Iteration   2: 1277112.099 ops/s
[info] # Warmup Iteration   3: 1302830.664 ops/s
[info] # Warmup Iteration   4: 1288447.434 ops/s
[info] # Warmup Iteration   5: 1306287.138 ops/s
[info] Iteration   1: 1304202.847 ops/s
[info]                  ·gc.alloc.rate:                   893.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              1078.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 811.912 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1295617.307 ops/s
[info]                  ·gc.alloc.rate:                   904.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              1098.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1632.971 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1305666.039 ops/s
[info]                  ·gc.alloc.rate:                   889.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              1071.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 810.199 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1299773.276 ops/s
[info]                  ·gc.alloc.rate:                   882.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              1068.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 813.856 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1305000.754 ops/s
[info]                  ·gc.alloc.rate:                   884.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              1067.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 811.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1302052.045 ±(99.9%) 16447.753 ops/s [Average]
[info]   (min, avg, max) = (1295617.307, 1302052.045, 1305666.039), stdev = 4271.429
[info]   CI (99.9%): [1285604.292, 1318499.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   890.788 ±(99.9%) 33.016 MB/sec [Average]
[info]   (min, avg, max) = (882.485, 890.788, 904.249), stdev = 8.574
[info]   CI (99.9%): [857.772, 923.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1076.851 ±(99.9%) 48.779 B/op [Average]
[info]   (min, avg, max) = (1067.342, 1076.851, 1098.224), stdev = 12.668
[info]   CI (99.9%): [1028.072, 1125.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.015 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.025), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806.737 ±(99.9%) 1157.673 MB/sec [Average]
[info]   (min, avg, max) = (672.055, 806.737, 1344.545), stdev = 300.644
[info]   CI (99.9%): [≈ 0, 1964.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   975.991 ±(99.9%) 1414.208 B/op [Average]
[info]   (min, avg, max) = (810.199, 975.991, 1632.971), stdev = 367.265
[info]   CI (99.9%): [≈ 0, 2390.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.41% complete, ETA 01:48:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34778.213 ops/s
[info] # Warmup Iteration   2: 114666.162 ops/s
[info] # Warmup Iteration   3: 119089.626 ops/s
[info] # Warmup Iteration   4: 120638.889 ops/s
[info] # Warmup Iteration   5: 121178.340 ops/s
[info] Iteration   1: 120011.602 ops/s
[info]                  ·gc.alloc.rate:                   3602.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              47261.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4068.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53366.136 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 121631.278 ops/s
[info]                  ·gc.alloc.rate:                   3625.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              46899.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3396.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43939.540 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 121823.871 ops/s
[info]                  ·gc.alloc.rate:                   3629.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              46900.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43924.460 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 121998.028 ops/s
[info]                  ·gc.alloc.rate:                   3635.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              46908.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.225 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43894.758 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 119329.762 ops/s
[info]                  ·gc.alloc.rate:                   3558.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              46940.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44895.419 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   120958.908 ±(99.9%) 4649.371 ops/s [Average]
[info]   (min, avg, max) = (119329.762, 120958.908, 121998.028), stdev = 1207.427
[info]   CI (99.9%): [116309.537, 125608.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3610.418 ±(99.9%) 121.763 MB/sec [Average]
[info]   (min, avg, max) = (3558.385, 3610.418, 3635.825), stdev = 31.621
[info]   CI (99.9%): [3488.656, 3732.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   46982.016 ±(99.9%) 604.031 B/op [Average]
[info]   (min, avg, max) = (46899.333, 46982.016, 47261.011), stdev = 156.865
[info]   CI (99.9%): [46377.985, 47586.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.083 ±(99.9%) 1.260 B/op [Average]
[info]   (min, avg, max) = (0.806, 1.083, 1.614), stdev = 0.327
[info]   CI (99.9%): [≈ 0, 2.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3533.954 ±(99.9%) 1150.413 MB/sec [Average]
[info]   (min, avg, max) = (3396.516, 3533.954, 4068.369), stdev = 298.759
[info]   CI (99.9%): [2383.541, 4684.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   46004.063 ±(99.9%) 15930.848 B/op [Average]
[info]   (min, avg, max) = (43894.758, 46004.063, 53366.136), stdev = 4137.191
[info]   CI (99.9%): [30073.215, 61934.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.65% complete, ETA 01:48:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 163808.701 ops/s
[info] # Warmup Iteration   2: 346196.680 ops/s
[info] # Warmup Iteration   3: 341763.621 ops/s
[info] # Warmup Iteration   4: 352348.293 ops/s
[info] # Warmup Iteration   5: 352072.779 ops/s
[info] Iteration   1: 353211.327 ops/s
[info]                  ·gc.alloc.rate:                   562.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              2507.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.891 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3003.980 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 351417.588 ops/s
[info]                  ·gc.alloc.rate:                   559.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              2503.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.099 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3019.159 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 353521.967 ops/s
[info]                  ·gc.alloc.rate:                   561.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              2500.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3001.261 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 354765.994 ops/s
[info]                  ·gc.alloc.rate:      549.991 MB/sec
[info]                  ·gc.alloc.rate.norm: 2440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 354273.936 ops/s
[info]                  ·gc.alloc.rate:                   562.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              2500.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.217 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2994.824 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   353438.162 ±(99.9%) 4947.311 ops/s [Average]
[info]   (min, avg, max) = (351417.588, 353438.162, 354765.994), stdev = 1284.801
[info]   CI (99.9%): [348490.852, 358385.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   559.211 ±(99.9%) 20.659 MB/sec [Average]
[info]   (min, avg, max) = (549.991, 559.211, 562.867), stdev = 5.365
[info]   CI (99.9%): [538.552, 579.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2490.321 ±(99.9%) 108.924 B/op [Average]
[info]   (min, avg, max) = (2440.001, 2490.321, 2507.360), stdev = 28.287
[info]   CI (99.9%): [2381.397, 2599.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.179 ±(99.9%) 1.452 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.179, 0.853), stdev = 0.377
[info]   CI (99.9%): [≈ 0, 1.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.798 ±(99.9%) 6.472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.798, 3.803), stdev = 1.681
[info]   CI (99.9%): [≈ 0, 7.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   539.289 ±(99.9%) 1160.861 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.289, 674.240), stdev = 301.472
[info]   CI (99.9%): [≈ 0, 1700.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2403.845 ±(99.9%) 5174.571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2403.845, 3019.159), stdev = 1343.820
[info]   CI (99.9%): [≈ 0, 7578.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.88% complete, ETA 01:48:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 281032.318 ops/s
[info] # Warmup Iteration   2: 832446.882 ops/s
[info] # Warmup Iteration   3: 855566.362 ops/s
[info] # Warmup Iteration   4: 859510.009 ops/s
[info] # Warmup Iteration   5: 847887.313 ops/s
[info] Iteration   1: 831548.901 ops/s
[info]                  ·gc.alloc.rate:      600.038 MB/sec
[info]                  ·gc.alloc.rate.norm: 1136.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 833735.576 ops/s
[info]                  ·gc.alloc.rate:                   623.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              1178.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1272.600 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 791245.425 ops/s
[info]                  ·gc.alloc.rate:                   586.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              1165.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1340.912 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 836422.043 ops/s
[info]                  ·gc.alloc.rate:                   616.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1268.444 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 833768.654 ops/s
[info]                  ·gc.alloc.rate:                   619.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              1169.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1272.478 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   825344.120 ±(99.9%) 73700.610 ops/s [Average]
[info]   (min, avg, max) = (791245.425, 825344.120, 836422.043), stdev = 19139.814
[info]   CI (99.9%): [751643.510, 899044.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   609.264 ±(99.9%) 60.720 MB/sec [Average]
[info]   (min, avg, max) = (586.136, 609.264, 623.972), stdev = 15.769
[info]   CI (99.9%): [548.544, 669.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1161.966 ±(99.9%) 60.943 B/op [Average]
[info]   (min, avg, max) = (1136.001, 1161.966, 1178.157), stdev = 15.827
[info]   CI (99.9%): [1101.023, 1222.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.031 ±(99.9%) 0.197 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.118), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.265 ±(99.9%) 1160.808 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.265, 674.185), stdev = 301.458
[info]   CI (99.9%): [≈ 0, 1700.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1030.887 ±(99.9%) 2222.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1030.887, 1340.912), stdev = 577.076
[info]   CI (99.9%): [≈ 0, 3253.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.12% complete, ETA 01:47:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1443646.902 ops/s
[info] # Warmup Iteration   2: 1974242.147 ops/s
[info] # Warmup Iteration   3: 2106987.444 ops/s
[info] # Warmup Iteration   4: 2078045.097 ops/s
[info] # Warmup Iteration   5: 2125786.017 ops/s
[info] Iteration   1: 2119794.689 ops/s
[info]                  ·gc.alloc.rate:                   1020.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              757.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.731 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1001.551 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2109686.725 ops/s
[info]                  ·gc.alloc.rate:                   1000.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              746.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.200 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 502.901 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2126659.993 ops/s
[info]                  ·gc.alloc.rate:                   1019.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              754.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 996.816 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2121950.842 ops/s
[info]                  ·gc.alloc.rate:                   997.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              739.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 499.517 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2062863.566 ops/s
[info]                  ·gc.alloc.rate:                   984.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              751.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1028.116 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2108191.163 ±(99.9%) 100447.499 ops/s [Average]
[info]   (min, avg, max) = (2062863.566, 2108191.163, 2126659.993), stdev = 26085.897
[info]   CI (99.9%): [2007743.664, 2208638.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1004.388 ±(99.9%) 58.308 MB/sec [Average]
[info]   (min, avg, max) = (984.556, 1004.388, 1020.029), stdev = 15.143
[info]   CI (99.9%): [946.080, 1062.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   749.848 ±(99.9%) 26.480 B/op [Average]
[info]   (min, avg, max) = (739.982, 749.848, 757.461), stdev = 6.877
[info]   CI (99.9%): [723.368, 776.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.125), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.034 ±(99.9%) 0.180 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.093), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1078.166 ±(99.9%) 1421.429 MB/sec [Average]
[info]   (min, avg, max) = (673.388, 1078.166, 1348.731), stdev = 369.141
[info]   CI (99.9%): [≈ 0, 2499.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   805.780 ±(99.9%) 1071.606 B/op [Average]
[info]   (min, avg, max) = (499.517, 805.780, 1028.116), stdev = 278.293
[info]   CI (99.9%): [≈ 0, 1877.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.35% complete, ETA 01:47:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1807480.698 ops/s
[info] # Warmup Iteration   2: 2293400.558 ops/s
[info] # Warmup Iteration   3: 2337925.565 ops/s
[info] # Warmup Iteration   4: 2219220.368 ops/s
[info] # Warmup Iteration   5: 2340411.037 ops/s
[info] Iteration   1: 2339693.809 ops/s
[info]                  ·gc.alloc.rate:      0.023 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.016 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2257514.043 ops/s
[info]                  ·gc.alloc.rate:      8.971 MB/sec
[info]                  ·gc.alloc.rate.norm: 6.255 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2339773.560 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2339693.083 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2340570.290 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2323448.957 ±(99.9%) 141937.008 ops/s [Average]
[info]   (min, avg, max) = (2257514.043, 2323448.957, 2340570.290), stdev = 36860.590
[info]   CI (99.9%): [2181511.949, 2465385.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.799 ±(99.9%) 15.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.799, 8.971), stdev = 4.009
[info]   CI (99.9%): [≈ 0, 17.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.254 ±(99.9%) 10.764 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.254, 6.255), stdev = 2.795
[info]   CI (99.9%): [≈ 0, 12.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.59% complete, ETA 01:47:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 203535.020 ops/s
[info] # Warmup Iteration   2: 441426.912 ops/s
[info] # Warmup Iteration   3: 460484.132 ops/s
[info] # Warmup Iteration   4: 459872.491 ops/s
[info] # Warmup Iteration   5: 465529.353 ops/s
[info] Iteration   1: 465223.951 ops/s
[info]                  ·gc.alloc.rate:                   686.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              2324.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2280.713 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 465335.624 ops/s
[info]                  ·gc.alloc.rate:                   693.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              2346.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.233 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2280.081 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 463140.596 ops/s
[info]                  ·gc.alloc.rate:                   684.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              2325.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2290.896 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 463832.761 ops/s
[info]                  ·gc.alloc.rate:                   694.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              2356.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2287.419 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 464881.072 ops/s
[info]                  ·gc.alloc.rate:                   695.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              2355.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.943 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2282.283 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   464482.801 ±(99.9%) 3683.003 ops/s [Average]
[info]   (min, avg, max) = (463140.596, 464482.801, 465335.624), stdev = 956.464
[info]   CI (99.9%): [460799.798, 468165.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   691.001 ±(99.9%) 19.362 MB/sec [Average]
[info]   (min, avg, max) = (684.309, 691.001, 695.574), stdev = 5.028
[info]   CI (99.9%): [671.639, 710.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2341.629 ±(99.9%) 60.248 B/op [Average]
[info]   (min, avg, max) = (2324.374, 2341.629, 2356.228), stdev = 15.646
[info]   CI (99.9%): [2281.381, 2401.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.070 ±(99.9%) 0.332 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.070, 0.211), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   674.073 ±(99.9%) 0.399 MB/sec [Average]
[info]   (min, avg, max) = (673.943, 674.073, 674.233), stdev = 0.104
[info]   CI (99.9%): [673.674, 674.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2284.278 ±(99.9%) 18.057 B/op [Average]
[info]   (min, avg, max) = (2280.081, 2284.278, 2290.896), stdev = 4.689
[info]   CI (99.9%): [2266.221, 2302.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.82% complete, ETA 01:47:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10179.745 ops/s
[info] # Warmup Iteration   2: 16756.358 ops/s
[info] # Warmup Iteration   3: 17290.904 ops/s
[info] # Warmup Iteration   4: 17324.994 ops/s
[info] # Warmup Iteration   5: 16004.839 ops/s
[info] Iteration   1: 17421.947 ops/s
[info]                  ·gc.alloc.rate:                   1193.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              107796.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60654.459 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 17215.657 ops/s
[info]                  ·gc.alloc.rate:                   1225.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              112085.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 122760.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 17413.417 ops/s
[info]                  ·gc.alloc.rate:                   1208.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              109197.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121431.808 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 17478.992 ops/s
[info]                  ·gc.alloc.rate:                   1213.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              109249.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121100.271 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17555.569 ops/s
[info]                  ·gc.alloc.rate:                   1191.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              106830.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60314.469 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   17417.117 ±(99.9%) 485.626 ops/s [Average]
[info]   (min, avg, max) = (17215.657, 17417.117, 17555.569), stdev = 126.116
[info]   CI (99.9%): [16931.490, 17902.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1206.416 ±(99.9%) 55.729 MB/sec [Average]
[info]   (min, avg, max) = (1191.483, 1206.416, 1225.998), stdev = 14.473
[info]   CI (99.9%): [1150.687, 1262.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   109031.820 ±(99.9%) 7646.158 B/op [Average]
[info]   (min, avg, max) = (106830.034, 109031.820, 112085.321), stdev = 1985.683
[info]   CI (99.9%): [101385.662, 116677.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.891 ±(99.9%) 10.324 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.891, 5.709), stdev = 2.681
[info]   CI (99.9%): [≈ 0, 12.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1075.059 ±(99.9%) 1416.849 MB/sec [Average]
[info]   (min, avg, max) = (671.288, 1075.059, 1345.063), stdev = 367.951
[info]   CI (99.9%): [≈ 0, 2491.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   97252.225 ±(99.9%) 129266.816 B/op [Average]
[info]   (min, avg, max) = (60314.469, 97252.225, 122760.117), stdev = 33570.182
[info]   CI (99.9%): [≈ 0, 226519.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.06% complete, ETA 01:46:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12390.202 ops/s
[info] # Warmup Iteration   2: 30312.469 ops/s
[info] # Warmup Iteration   3: 30744.486 ops/s
[info] # Warmup Iteration   4: 29669.956 ops/s
[info] # Warmup Iteration   5: 30820.303 ops/s
[info] Iteration   1: 31161.109 ops/s
[info]                  ·gc.alloc.rate:                   797.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              40271.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34048.608 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 31172.081 ops/s
[info]                  ·gc.alloc.rate:                   793.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              40051.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.128 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34035.503 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 31123.581 ops/s
[info]                  ·gc.alloc.rate:                   793.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              40150.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34089.078 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 31102.455 ops/s
[info]                  ·gc.alloc.rate:                   800.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              40521.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34112.091 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 31099.339 ops/s
[info]                  ·gc.alloc.rate:                   796.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              40329.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34115.381 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   31131.713 ±(99.9%) 128.636 ops/s [Average]
[info]   (min, avg, max) = (31099.339, 31131.713, 31172.081), stdev = 33.406
[info]   CI (99.9%): [31003.077, 31260.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   796.367 ±(99.9%) 11.364 MB/sec [Average]
[info]   (min, avg, max) = (793.284, 796.367, 800.678), stdev = 2.951
[info]   CI (99.9%): [785.004, 807.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   40264.751 ±(99.9%) 689.955 B/op [Average]
[info]   (min, avg, max) = (40051.471, 40264.751, 40521.084), stdev = 179.179
[info]   CI (99.9%): [39574.796, 40954.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.211 ±(99.9%) 1.814 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.211, 1.053), stdev = 0.471
[info]   CI (99.9%): [≈ 0, 2.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.048 ±(99.9%) 0.214 MB/sec [Average]
[info]   (min, avg, max) = (673.976, 674.048, 674.128), stdev = 0.055
[info]   CI (99.9%): [673.834, 674.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   34080.132 ±(99.9%) 140.553 B/op [Average]
[info]   (min, avg, max) = (34035.503, 34080.132, 34115.381), stdev = 36.501
[info]   CI (99.9%): [33939.579, 34220.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.29% complete, ETA 01:46:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26014.005 ops/s
[info] # Warmup Iteration   2: 39107.060 ops/s
[info] # Warmup Iteration   3: 39684.872 ops/s
[info] # Warmup Iteration   4: 39712.222 ops/s
[info] # Warmup Iteration   5: 39576.928 ops/s
[info] Iteration   1: 39583.387 ops/s
[info]                  ·gc.alloc.rate:                   587.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26804.388 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 40188.174 ops/s
[info]                  ·gc.alloc.rate:      591.616 MB/sec
[info]                  ·gc.alloc.rate.norm: 23171.347 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 39964.028 ops/s
[info]                  ·gc.alloc.rate:                   579.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              22835.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26522.650 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 40153.514 ops/s
[info]                  ·gc.alloc.rate:                   593.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              23249.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26396.512 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 40213.732 ops/s
[info]                  ·gc.alloc.rate:                   597.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              23389.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26329.756 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   40020.567 ±(99.9%) 1014.049 ops/s [Average]
[info]   (min, avg, max) = (39583.387, 40020.567, 40213.732), stdev = 263.345
[info]   CI (99.9%): [39006.518, 41034.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   589.896 ±(99.9%) 26.102 MB/sec [Average]
[info]   (min, avg, max) = (579.752, 589.896, 597.631), stdev = 6.779
[info]   CI (99.9%): [563.794, 615.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23199.543 ±(99.9%) 850.997 B/op [Average]
[info]   (min, avg, max) = (22835.316, 23199.543, 23389.582), stdev = 221.001
[info]   CI (99.9%): [22348.545, 24050.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.572 ±(99.9%) 4.750 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.572, 2.779), stdev = 1.234
[info]   CI (99.9%): [≈ 0, 5.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   22.755 ±(99.9%) 188.916 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.755, 110.499), stdev = 49.061
[info]   CI (99.9%): [≈ 0, 211.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538.745 ±(99.9%) 1159.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.745, 674.061), stdev = 301.168
[info]   CI (99.9%): [≈ 0, 1698.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21210.661 ±(99.9%) 45662.912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21210.661, 26804.388), stdev = 11858.513
[info]   CI (99.9%): [≈ 0, 66873.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.53% complete, ETA 01:46:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5874.655 ops/s
[info] # Warmup Iteration   2: 27153.904 ops/s
[info] # Warmup Iteration   3: 28729.492 ops/s
[info] # Warmup Iteration   4: 27890.011 ops/s
[info] # Warmup Iteration   5: 28680.856 ops/s
[info] Iteration   1: 28943.154 ops/s
[info]                  ·gc.alloc.rate:                   1480.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              80530.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110044.697 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 28178.700 ops/s
[info]                  ·gc.alloc.rate:                   1429.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              79862.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75395.234 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 28967.584 ops/s
[info]                  ·gc.alloc.rate:                   1456.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              79130.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73378.243 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 28980.811 ops/s
[info]                  ·gc.alloc.rate:                   1448.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              78667.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73399.596 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 28944.910 ops/s
[info]                  ·gc.alloc.rate:                   1459.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              79379.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73563.311 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   28803.032 ±(99.9%) 1345.299 ops/s [Average]
[info]   (min, avg, max) = (28178.700, 28803.032, 28980.811), stdev = 349.370
[info]   CI (99.9%): [27457.733, 30148.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1455.034 ±(99.9%) 71.241 MB/sec [Average]
[info]   (min, avg, max) = (1429.775, 1455.034, 1480.800), stdev = 18.501
[info]   CI (99.9%): [1383.794, 1526.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79513.933 ±(99.9%) 2747.534 B/op [Average]
[info]   (min, avg, max) = (78667.195, 79513.933, 80530.041), stdev = 713.526
[info]   CI (99.9%): [76766.399, 82261.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.364 ±(99.9%) 4.770 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.364, 3.396), stdev = 1.239
[info]   CI (99.9%): [≈ 0, 6.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1485.620 ±(99.9%) 1157.878 MB/sec [Average]
[info]   (min, avg, max) = (1349.793, 1485.620, 2023.520), stdev = 300.697
[info]   CI (99.9%): [327.742, 2643.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   81156.216 ±(99.9%) 62270.028 B/op [Average]
[info]   (min, avg, max) = (73378.243, 81156.216, 110044.697), stdev = 16171.329
[info]   CI (99.9%): [18886.188, 143426.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.76% complete, ETA 01:46:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8805.077 ops/s
[info] # Warmup Iteration   2: 21971.326 ops/s
[info] # Warmup Iteration   3: 23033.179 ops/s
[info] # Warmup Iteration   4: 23036.890 ops/s
[info] # Warmup Iteration   5: 23128.406 ops/s
[info] Iteration   1: 22645.446 ops/s
[info]                  ·gc.alloc.rate:                   1321.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              91841.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46873.430 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 23189.982 ops/s
[info]                  ·gc.alloc.rate:                   1353.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              91893.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.325 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91589.350 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 23096.694 ops/s
[info]                  ·gc.alloc.rate:                   1344.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              91655.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92030.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23185.267 ops/s
[info]                  ·gc.alloc.rate:                   1360.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              92334.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.546 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91752.661 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 23189.836 ops/s
[info]                  ·gc.alloc.rate:                   1346.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              91425.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.600 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91819.344 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   23061.445 ±(99.9%) 908.449 ops/s [Average]
[info]   (min, avg, max) = (22645.446, 23061.445, 23189.982), stdev = 235.921
[info]   CI (99.9%): [22152.996, 23969.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1345.421 ±(99.9%) 56.562 MB/sec [Average]
[info]   (min, avg, max) = (1321.451, 1345.421, 1360.120), stdev = 14.689
[info]   CI (99.9%): [1288.859, 1401.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   91830.081 ±(99.9%) 1295.476 B/op [Average]
[info]   (min, avg, max) = (91425.810, 91830.081, 92334.693), stdev = 336.431
[info]   CI (99.9%): [90534.605, 93125.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.548 ±(99.9%) 8.968 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.548, 5.674), stdev = 2.329
[info]   CI (99.9%): [≈ 0, 11.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1215.667 ±(99.9%) 1165.051 MB/sec [Average]
[info]   (min, avg, max) = (674.435, 1215.667, 1352.600), stdev = 302.560
[info]   CI (99.9%): [50.615, 2380.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   82812.981 ±(99.9%) 77364.987 B/op [Average]
[info]   (min, avg, max) = (46873.430, 82812.981, 92030.122), stdev = 20091.441
[info]   CI (99.9%): [5447.994, 160177.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.00% complete, ETA 01:45:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7304.271 ops/s
[info] # Warmup Iteration   2: 21288.171 ops/s
[info] # Warmup Iteration   3: 21577.903 ops/s
[info] # Warmup Iteration   4: 21506.061 ops/s
[info] # Warmup Iteration   5: 21724.117 ops/s
[info] Iteration   1: 21665.324 ops/s
[info]                  ·gc.alloc.rate:                   1261.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              91667.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97957.737 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 21651.721 ops/s
[info]                  ·gc.alloc.rate:                   1254.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              91191.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98074.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 21657.514 ops/s
[info]                  ·gc.alloc.rate:                   1261.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              91644.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98099.777 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 21687.657 ops/s
[info]                  ·gc.alloc.rate:                   1271.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              92313.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98032.091 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 21631.849 ops/s
[info]                  ·gc.alloc.rate:                   1256.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              91392.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98358.522 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   21658.813 ±(99.9%) 78.288 ops/s [Average]
[info]   (min, avg, max) = (21631.849, 21658.813, 21687.657), stdev = 20.331
[info]   CI (99.9%): [21580.525, 21737.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1261.153 ±(99.9%) 25.957 MB/sec [Average]
[info]   (min, avg, max) = (1254.802, 1261.153, 1271.903), stdev = 6.741
[info]   CI (99.9%): [1235.196, 1287.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   91641.897 ±(99.9%) 1628.898 B/op [Average]
[info]   (min, avg, max) = (91191.833, 91641.897, 92313.091), stdev = 423.020
[info]   CI (99.9%): [90013.000, 93270.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.907 ±(99.9%) 3.189 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.907, 1.513), stdev = 0.828
[info]   CI (99.9%): [≈ 0, 4.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1350.084 ±(99.9%) 4.952 MB/sec [Average]
[info]   (min, avg, max) = (1348.428, 1350.084, 1351.854), stdev = 1.286
[info]   CI (99.9%): [1345.132, 1355.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   98104.427 ±(99.9%) 584.810 B/op [Average]
[info]   (min, avg, max) = (97957.737, 98104.427, 98358.522), stdev = 151.873
[info]   CI (99.9%): [97519.617, 98689.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.24% complete, ETA 01:45:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15617.143 ops/s
[info] # Warmup Iteration   2: 25033.985 ops/s
[info] # Warmup Iteration   3: 25793.146 ops/s
[info] # Warmup Iteration   4: 26129.684 ops/s
[info] # Warmup Iteration   5: 25938.285 ops/s
[info] Iteration   1: 26313.307 ops/s
[info]                  ·gc.alloc.rate:                   1399.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              83706.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80561.618 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 26145.386 ops/s
[info]                  ·gc.alloc.rate:                   1397.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              84094.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.965 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81119.283 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 26196.265 ops/s
[info]                  ·gc.alloc.rate:                   1396.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              83901.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81004.497 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 26278.574 ops/s
[info]                  ·gc.alloc.rate:                   1400.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              83859.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.233 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80782.439 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 26365.535 ops/s
[info]                  ·gc.alloc.rate:                   1404.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              83851.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80601.576 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   26259.813 ±(99.9%) 341.834 ops/s [Average]
[info]   (min, avg, max) = (26145.386, 26259.813, 26365.535), stdev = 88.773
[info]   CI (99.9%): [25917.979, 26601.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1399.662 ±(99.9%) 12.618 MB/sec [Average]
[info]   (min, avg, max) = (1396.320, 1399.662, 1404.717), stdev = 3.277
[info]   CI (99.9%): [1387.044, 1412.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   83882.533 ±(99.9%) 536.805 B/op [Average]
[info]   (min, avg, max) = (83706.182, 83882.533, 84094.221), stdev = 139.406
[info]   CI (99.9%): [83345.729, 84419.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.498 ±(99.9%) 5.257 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.498, 3.740), stdev = 1.365
[info]   CI (99.9%): [≈ 0, 6.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1348.453 ±(99.9%) 5.245 MB/sec [Average]
[info]   (min, avg, max) = (1346.679, 1348.453, 1350.273), stdev = 1.362
[info]   CI (99.9%): [1343.208, 1353.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   80813.883 ±(99.9%) 941.841 B/op [Average]
[info]   (min, avg, max) = (80561.618, 80813.883, 81119.283), stdev = 244.593
[info]   CI (99.9%): [79872.041, 81755.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.47% complete, ETA 01:45:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16724.155 ops/s
[info] # Warmup Iteration   2: 25411.466 ops/s
[info] # Warmup Iteration   3: 26289.689 ops/s
[info] # Warmup Iteration   4: 26450.856 ops/s
[info] # Warmup Iteration   5: 25861.547 ops/s
[info] Iteration   1: 26375.228 ops/s
[info]                  ·gc.alloc.rate:                   1387.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              82779.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80213.282 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 26372.029 ops/s
[info]                  ·gc.alloc.rate:                   1379.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              82314.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80301.912 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 26490.201 ops/s
[info]                  ·gc.alloc.rate:                   1393.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              82787.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79980.831 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 26513.282 ops/s
[info]                  ·gc.alloc.rate:                   1395.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              82827.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79990.544 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 26397.989 ops/s
[info]                  ·gc.alloc.rate:                   1389.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              82831.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80424.453 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   26429.746 ±(99.9%) 257.915 ops/s [Average]
[info]   (min, avg, max) = (26372.029, 26429.746, 26513.282), stdev = 66.980
[info]   CI (99.9%): [26171.831, 26687.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1388.955 ±(99.9%) 24.534 MB/sec [Average]
[info]   (min, avg, max) = (1379.309, 1388.955, 1395.679), stdev = 6.371
[info]   CI (99.9%): [1364.421, 1413.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   82707.966 ±(99.9%) 851.341 B/op [Average]
[info]   (min, avg, max) = (82314.668, 82707.966, 82831.262), stdev = 221.091
[info]   CI (99.9%): [81856.625, 83559.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1.738 ±(99.9%) 7.256 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.738, 4.969), stdev = 1.884
[info]   CI (99.9%): [≈ 0, 8.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1346.529 ±(99.9%) 7.157 MB/sec [Average]
[info]   (min, avg, max) = (1344.114, 1346.529, 1348.811), stdev = 1.859
[info]   CI (99.9%): [1339.372, 1353.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   80182.204 ±(99.9%) 748.811 B/op [Average]
[info]   (min, avg, max) = (79980.831, 80182.204, 80424.453), stdev = 194.464
[info]   CI (99.9%): [79433.393, 80931.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.71% complete, ETA 01:45:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1722.903 ops/s
[info] # Warmup Iteration   2: 7030.297 ops/s
[info] # Warmup Iteration   3: 7566.673 ops/s
[info] # Warmup Iteration   4: 7601.554 ops/s
[info] # Warmup Iteration   5: 7588.337 ops/s
[info] Iteration   1: 7606.306 ops/s
[info]                  ·gc.alloc.rate:                   1016.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              210306.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139479.352 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 7600.914 ops/s
[info]                  ·gc.alloc.rate:                   1030.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              213359.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.996 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 279142.158 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7610.708 ops/s
[info]                  ·gc.alloc.rate:                   1019.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              210715.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139406.058 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 7595.197 ops/s
[info]                  ·gc.alloc.rate:                   1031.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              213757.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 279638.670 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7558.388 ops/s
[info]                  ·gc.alloc.rate:                   1017.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              211816.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 140554.394 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   7594.303 ±(99.9%) 80.486 ops/s [Average]
[info]   (min, avg, max) = (7558.388, 7594.303, 7610.708), stdev = 20.902
[info]   CI (99.9%): [7513.817, 7674.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1022.952 ±(99.9%) 28.411 MB/sec [Average]
[info]   (min, avg, max) = (1016.258, 1022.952, 1031.571), stdev = 7.378
[info]   CI (99.9%): [994.541, 1051.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   211990.875 ±(99.9%) 5931.345 B/op [Average]
[info]   (min, avg, max) = (210306.055, 211990.875, 213757.306), stdev = 1540.351
[info]   CI (99.9%): [206059.530, 217922.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.725 ±(99.9%) 9.093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.725, 4.313), stdev = 2.362
[info]   CI (99.9%): [≈ 0, 10.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   944.182 ±(99.9%) 1422.122 MB/sec [Average]
[info]   (min, avg, max) = (674.004, 944.182, 1349.508), stdev = 369.320
[info]   CI (99.9%): [≈ 0, 2366.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   195644.126 ±(99.9%) 294385.980 B/op [Average]
[info]   (min, avg, max) = (139406.058, 195644.126, 279638.670), stdev = 76451.104
[info]   CI (99.9%): [≈ 0, 490030.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.94% complete, ETA 01:44:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9233.227 ops/s
[info] # Warmup Iteration   2: 17686.652 ops/s
[info] # Warmup Iteration   3: 17855.366 ops/s
[info] # Warmup Iteration   4: 17802.484 ops/s
[info] # Warmup Iteration   5: 17932.085 ops/s
[info] Iteration   1: 17570.083 ops/s
[info]                  ·gc.alloc.rate:                   1394.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              124925.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120413.496 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 17489.463 ops/s
[info]                  ·gc.alloc.rate:                   1403.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              126300.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121024.121 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 17931.859 ops/s
[info]                  ·gc.alloc.rate:                   1415.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              124242.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.347 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118093.417 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 18005.566 ops/s
[info]                  ·gc.alloc.rate:                   1429.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              124974.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117724.635 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 17836.566 ops/s
[info]                  ·gc.alloc.rate:                   1417.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              125058.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118964.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   17766.708 ±(99.9%) 871.161 ops/s [Average]
[info]   (min, avg, max) = (17489.463, 17766.708, 18005.566), stdev = 226.238
[info]   CI (99.9%): [16895.546, 18637.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1411.979 ±(99.9%) 52.603 MB/sec [Average]
[info]   (min, avg, max) = (1394.251, 1411.979, 1429.879), stdev = 13.661
[info]   CI (99.9%): [1359.376, 1464.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   125100.178 ±(99.9%) 2871.443 B/op [Average]
[info]   (min, avg, max) = (124242.300, 125100.178, 126300.253), stdev = 745.705
[info]   CI (99.9%): [122228.735, 127971.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.834 ±(99.9%) 12.185 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.834, 7.308), stdev = 3.164
[info]   CI (99.9%): [≈ 0, 14.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1345.773 ±(99.9%) 6.384 MB/sec [Average]
[info]   (min, avg, max) = (1343.895, 1345.773, 1347.969), stdev = 1.658
[info]   CI (99.9%): [1339.389, 1352.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   119243.934 ±(99.9%) 5529.149 B/op [Average]
[info]   (min, avg, max) = (117724.635, 119243.934, 121024.121), stdev = 1435.902
[info]   CI (99.9%): [113714.786, 124773.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.18% complete, ETA 01:44:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12407.432 ops/s
[info] # Warmup Iteration   2: 35436.307 ops/s
[info] # Warmup Iteration   3: 36391.510 ops/s
[info] # Warmup Iteration   4: 35321.385 ops/s
[info] # Warmup Iteration   5: 36800.501 ops/s
[info] Iteration   1: 36653.833 ops/s
[info]                  ·gc.alloc.rate:                   936.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              40199.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57849.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 36905.469 ops/s
[info]                  ·gc.alloc.rate:                   924.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              39418.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28733.363 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 36871.020 ops/s
[info]                  ·gc.alloc.rate:                   931.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              39744.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28773.289 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 36744.410 ops/s
[info]                  ·gc.alloc.rate:                   941.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              40325.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57775.533 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 36879.335 ops/s
[info]                  ·gc.alloc.rate:                   922.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              39373.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.961 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28796.256 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   36810.813 ±(99.9%) 414.422 ops/s [Average]
[info]   (min, avg, max) = (36653.833, 36810.813, 36905.469), stdev = 107.624
[info]   CI (99.9%): [36396.391, 37225.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   931.172 ±(99.9%) 29.896 MB/sec [Average]
[info]   (min, avg, max) = (922.886, 931.172, 941.381), stdev = 7.764
[info]   CI (99.9%): [901.275, 961.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39812.400 ±(99.9%) 1684.562 B/op [Average]
[info]   (min, avg, max) = (39373.649, 39812.400, 40325.459), stdev = 437.475
[info]   CI (99.9%): [38127.838, 41496.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.892 ±(99.9%) 5.947 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.892, 3.566), stdev = 1.544
[info]   CI (99.9%): [≈ 0, 6.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   943.728 ±(99.9%) 1420.634 MB/sec [Average]
[info]   (min, avg, max) = (673.897, 943.728, 1348.746), stdev = 368.934
[info]   CI (99.9%): [≈ 0, 2364.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   40385.492 ±(99.9%) 61257.742 B/op [Average]
[info]   (min, avg, max) = (28733.363, 40385.492, 57849.017), stdev = 15908.441
[info]   CI (99.9%): [≈ 0, 101643.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.41% complete, ETA 01:44:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46620.237 ops/s
[info] # Warmup Iteration   2: 58880.573 ops/s
[info] # Warmup Iteration   3: 58413.086 ops/s
[info] # Warmup Iteration   4: 59905.494 ops/s
[info] # Warmup Iteration   5: 60108.530 ops/s
[info] Iteration   1: 59996.290 ops/s
[info]                  ·gc.alloc.rate:                   790.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              20742.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17701.983 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 60089.797 ops/s
[info]                  ·gc.alloc.rate:                   806.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              21118.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35331.732 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 60221.079 ops/s
[info]                  ·gc.alloc.rate:                   802.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              20968.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17618.737 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 60267.105 ops/s
[info]                  ·gc.alloc.rate:                   799.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              20869.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17587.603 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 60353.222 ops/s
[info]                  ·gc.alloc.rate:                   797.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              20808.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17561.672 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   60185.499 ±(99.9%) 548.010 ops/s [Average]
[info]   (min, avg, max) = (59996.290, 60185.499, 60353.222), stdev = 142.316
[info]   CI (99.9%): [59637.489, 60733.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   799.212 ±(99.9%) 22.321 MB/sec [Average]
[info]   (min, avg, max) = (790.634, 799.212, 806.275), stdev = 5.797
[info]   CI (99.9%): [776.891, 821.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20901.716 ±(99.9%) 565.248 B/op [Average]
[info]   (min, avg, max) = (20742.866, 20901.716, 21118.114), stdev = 146.793
[info]   CI (99.9%): [20336.468, 21466.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.763 ±(99.9%) 3.512 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.763, 2.181), stdev = 0.912
[info]   CI (99.9%): [≈ 0, 4.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   808.895 ±(99.9%) 1162.492 MB/sec [Average]
[info]   (min, avg, max) = (673.356, 808.895, 1348.941), stdev = 301.896
[info]   CI (99.9%): [≈ 0, 1971.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21160.345 ±(99.9%) 30505.655 B/op [Average]
[info]   (min, avg, max) = (17561.672, 21160.345, 35331.732), stdev = 7922.222
[info]   CI (99.9%): [≈ 0, 51666.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.65% complete, ETA 01:44:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1776.916 ops/s
[info] # Warmup Iteration   2: 26294.067 ops/s
[info] # Warmup Iteration   3: 27980.237 ops/s
[info] # Warmup Iteration   4: 27767.095 ops/s
[info] # Warmup Iteration   5: 27599.646 ops/s
[info] Iteration   1: 28087.407 ops/s
[info]                  ·gc.alloc.rate:                   1782.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              99885.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113397.903 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 28133.000 ops/s
[info]                  ·gc.alloc.rate:                   1782.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              99699.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75539.807 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 28078.164 ops/s
[info]                  ·gc.alloc.rate:                   1781.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              99877.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113658.275 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 28124.569 ops/s
[info]                  ·gc.alloc.rate:                   1770.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              99091.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75744.985 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 28076.479 ops/s
[info]                  ·gc.alloc.rate:                   1780.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              99838.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113909.088 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   28099.924 ±(99.9%) 103.345 ops/s [Average]
[info]   (min, avg, max) = (28076.479, 28099.924, 28133.000), stdev = 26.838
[info]   CI (99.9%): [27996.578, 28203.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1779.409 ±(99.9%) 19.258 MB/sec [Average]
[info]   (min, avg, max) = (1770.525, 1779.409, 1782.294), stdev = 5.001
[info]   CI (99.9%): [1760.151, 1798.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   99678.648 ±(99.9%) 1295.158 B/op [Average]
[info]   (min, avg, max) = (99091.989, 99678.648, 99885.440), stdev = 336.348
[info]   CI (99.9%): [98383.491, 100973.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.400 ±(99.9%) 5.858 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.500), stdev = 1.521
[info]   CI (99.9%): [≈ 0, 7.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1757.185 ±(99.9%) 1425.072 MB/sec [Average]
[info]   (min, avg, max) = (1350.208, 1757.185, 2031.761), stdev = 370.087
[info]   CI (99.9%): [332.113, 3182.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   98450.012 ±(99.9%) 80175.489 B/op [Average]
[info]   (min, avg, max) = (75539.807, 98450.012, 113909.088), stdev = 20821.320
[info]   CI (99.9%): [18274.522, 178625.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.88% complete, ETA 01:43:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9409.672 ops/s
[info] # Warmup Iteration   2: 25271.854 ops/s
[info] # Warmup Iteration   3: 25034.822 ops/s
[info] # Warmup Iteration   4: 26143.552 ops/s
[info] # Warmup Iteration   5: 25617.229 ops/s
[info] Iteration   1: 26127.920 ops/s
[info]                  ·gc.alloc.rate:                   1516.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              91350.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81292.426 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 26123.589 ops/s
[info]                  ·gc.alloc.rate:                   1511.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              91023.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81345.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 26075.916 ops/s
[info]                  ·gc.alloc.rate:                   1530.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              92412.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 122382.782 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 26160.420 ops/s
[info]                  ·gc.alloc.rate:                   1521.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              91543.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81390.272 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 26096.615 ops/s
[info]                  ·gc.alloc.rate:                   1530.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              92345.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.946 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81673.308 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   26116.892 ±(99.9%) 124.051 ops/s [Average]
[info]   (min, avg, max) = (26075.916, 26116.892, 26160.420), stdev = 32.216
[info]   CI (99.9%): [25992.841, 26240.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1522.265 ±(99.9%) 33.378 MB/sec [Average]
[info]   (min, avg, max) = (1511.219, 1522.265, 1530.951), stdev = 8.668
[info]   CI (99.9%): [1488.887, 1555.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   91734.941 ±(99.9%) 2375.320 B/op [Average]
[info]   (min, avg, max) = (91023.795, 91734.941, 92412.248), stdev = 616.863
[info]   CI (99.9%): [89359.621, 94110.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.509 ±(99.9%) 7.636 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.509, 5.016), stdev = 1.983
[info]   CI (99.9%): [≈ 0, 10.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1486.895 ±(99.9%) 1163.620 MB/sec [Average]
[info]   (min, avg, max) = (1349.930, 1486.895, 2027.459), stdev = 302.188
[info]   CI (99.9%): [323.275, 2650.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   89616.758 ±(99.9%) 70533.619 B/op [Average]
[info]   (min, avg, max) = (81292.426, 89616.758, 122382.782), stdev = 18317.357
[info]   CI (99.9%): [19083.139, 160150.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.12% complete, ETA 01:43:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22963.565 ops/s
[info] # Warmup Iteration   2: 34163.575 ops/s
[info] # Warmup Iteration   3: 34608.048 ops/s
[info] # Warmup Iteration   4: 33675.315 ops/s
[info] # Warmup Iteration   5: 35020.324 ops/s
[info] Iteration   1: 35125.789 ops/s
[info]                  ·gc.alloc.rate:                   1421.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              63701.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60350.127 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 34774.715 ops/s
[info]                  ·gc.alloc.rate:                   1414.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              64002.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60959.164 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 35117.046 ops/s
[info]                  ·gc.alloc.rate:                   1412.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              63287.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.942 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60367.310 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 35162.973 ops/s
[info]                  ·gc.alloc.rate:                   1412.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              63238.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60344.550 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 35207.895 ops/s
[info]                  ·gc.alloc.rate:                   1441.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              64433.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90520.262 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   35077.684 ±(99.9%) 666.626 ops/s [Average]
[info]   (min, avg, max) = (34774.715, 35077.684, 35207.895), stdev = 173.121
[info]   CI (99.9%): [34411.057, 35744.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1420.453 ±(99.9%) 48.392 MB/sec [Average]
[info]   (min, avg, max) = (1412.108, 1420.453, 1441.901), stdev = 12.567
[info]   CI (99.9%): [1372.061, 1468.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   63732.659 ±(99.9%) 1931.330 B/op [Average]
[info]   (min, avg, max) = (63238.750, 63732.659, 64433.325), stdev = 501.560
[info]   CI (99.9%): [61801.328, 65663.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.175 ±(99.9%) 7.433 B/op [Average]
[info]   (min, avg, max) = (1.861, 3.175, 6.522), stdev = 1.930
[info]   CI (99.9%): [≈ 0, 10.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1482.842 ±(99.9%) 1168.498 MB/sec [Average]
[info]   (min, avg, max) = (1346.721, 1482.842, 2025.679), stdev = 303.455
[info]   CI (99.9%): [314.344, 2651.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   66508.283 ±(99.9%) 51697.455 B/op [Average]
[info]   (min, avg, max) = (60344.550, 66508.283, 90520.262), stdev = 13425.665
[info]   CI (99.9%): [14810.828, 118205.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.35% complete, ETA 01:43:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25951.940 ops/s
[info] # Warmup Iteration   2: 34453.458 ops/s
[info] # Warmup Iteration   3: 34884.210 ops/s
[info] # Warmup Iteration   4: 34204.847 ops/s
[info] # Warmup Iteration   5: 34798.664 ops/s
[info] Iteration   1: 35283.076 ops/s
[info]                  ·gc.alloc.rate:                   1366.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              60960.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60022.203 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 35236.409 ops/s
[info]                  ·gc.alloc.rate:                   1358.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              60666.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60130.298 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 35345.702 ops/s
[info]                  ·gc.alloc.rate:                   1384.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              61631.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59972.864 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 35479.238 ops/s
[info]                  ·gc.alloc.rate:                   1364.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              60494.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59807.187 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 35355.802 ops/s
[info]                  ·gc.alloc.rate:                   1384.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              61655.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.305 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60076.211 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   35340.045 ±(99.9%) 353.132 ops/s [Average]
[info]   (min, avg, max) = (35236.409, 35340.045, 35479.238), stdev = 91.707
[info]   CI (99.9%): [34986.914, 35693.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1371.491 ±(99.9%) 47.231 MB/sec [Average]
[info]   (min, avg, max) = (1358.070, 1371.491, 1384.774), stdev = 12.266
[info]   CI (99.9%): [1324.260, 1418.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   61081.546 ±(99.9%) 2076.271 B/op [Average]
[info]   (min, avg, max) = (60494.774, 61081.546, 61655.431), stdev = 539.201
[info]   CI (99.9%): [59005.275, 63157.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   3.154 ±(99.9%) 4.815 B/op [Average]
[info]   (min, avg, max) = (1.847, 3.154, 4.649), stdev = 1.251
[info]   CI (99.9%): [≈ 0, 7.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1347.243 ±(99.9%) 6.367 MB/sec [Average]
[info]   (min, avg, max) = (1345.326, 1347.243, 1349.305), stdev = 1.653
[info]   CI (99.9%): [1340.876, 1353.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   60001.753 ±(99.9%) 476.208 B/op [Average]
[info]   (min, avg, max) = (59807.187, 60001.753, 60130.298), stdev = 123.670
[info]   CI (99.9%): [59525.545, 60477.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.59% complete, ETA 01:42:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141235.616 ops/s
[info] # Warmup Iteration   2: 313870.719 ops/s
[info] # Warmup Iteration   3: 319215.744 ops/s
[info] # Warmup Iteration   4: 326588.363 ops/s
[info] # Warmup Iteration   5: 326312.734 ops/s
[info] Iteration   1: 326340.176 ops/s
[info]                  ·gc.alloc.rate:                   1694.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              8173.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9751.932 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 324903.765 ops/s
[info]                  ·gc.alloc.rate:                   1681.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              8143.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6537.245 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 326271.939 ops/s
[info]                  ·gc.alloc.rate:                   1700.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              8205.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9776.517 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 324372.109 ops/s
[info]                  ·gc.alloc.rate:                   1688.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              8193.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6564.387 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 326947.327 ops/s
[info]                  ·gc.alloc.rate:                   1704.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              8203.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9782.199 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   325767.063 ±(99.9%) 4159.570 ops/s [Average]
[info]   (min, avg, max) = (324372.109, 325767.063, 326947.327), stdev = 1080.227
[info]   CI (99.9%): [321607.493, 329926.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1693.887 ±(99.9%) 35.832 MB/sec [Average]
[info]   (min, avg, max) = (1681.226, 1693.887, 1704.240), stdev = 9.306
[info]   CI (99.9%): [1658.055, 1729.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8183.700 ±(99.9%) 100.329 B/op [Average]
[info]   (min, avg, max) = (8143.154, 8183.700, 8205.763), stdev = 26.055
[info]   CI (99.9%): [8083.372, 8284.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.261 ±(99.9%) 0.440 B/op [Average]
[info]   (min, avg, max) = (0.101, 0.261, 0.401), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1756.642 ±(99.9%) 1425.266 MB/sec [Average]
[info]   (min, avg, max) = (1349.671, 1756.642, 2032.287), stdev = 370.137
[info]   CI (99.9%): [331.376, 3181.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8482.456 ±(99.9%) 6790.228 B/op [Average]
[info]   (min, avg, max) = (6537.245, 8482.456, 9782.199), stdev = 1763.401
[info]   CI (99.9%): [1692.228, 15272.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.82% complete, ETA 01:42:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.781 ops/s
[info] # Warmup Iteration   2: 1275139.136 ops/s
[info] # Warmup Iteration   3: 1317060.933 ops/s
[info] # Warmup Iteration   4: 1326223.760 ops/s
[info] # Warmup Iteration   5: 1332665.189 ops/s
[info] Iteration   1: 1327288.478 ops/s
[info]                  ·gc.alloc.rate:                   428.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              507.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 795.422 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1328154.886 ops/s
[info]                  ·gc.alloc.rate:                   436.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              517.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 794.909 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1333500.110 ops/s
[info]                  ·gc.alloc.rate:      420.206 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1330366.198 ops/s
[info]                  ·gc.alloc.rate:                   432.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              511.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 792.795 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1333907.660 ops/s
[info]                  ·gc.alloc.rate:      420.374 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1330643.467 ±(99.9%) 11606.550 ops/s [Average]
[info]   (min, avg, max) = (1327288.478, 1330643.467, 1333907.660), stdev = 3014.184
[info]   CI (99.9%): [1319036.916, 1342250.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   427.647 ±(99.9%) 28.449 MB/sec [Average]
[info]   (min, avg, max) = (420.206, 427.647, 436.754), stdev = 7.388
[info]   CI (99.9%): [399.197, 456.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   505.823 ±(99.9%) 37.006 B/op [Average]
[info]   (min, avg, max) = (496.000, 505.823, 517.439), stdev = 9.610
[info]   CI (99.9%): [468.816, 542.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.810 ±(99.9%) 6.934 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.810, 4.032), stdev = 1.801
[info]   CI (99.9%): [≈ 0, 7.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.960 ±(99.9%) 8.215 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.960, 4.776), stdev = 2.133
[info]   CI (99.9%): [≈ 0, 9.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   402.372 ±(99.9%) 1414.395 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.372, 670.958), stdev = 367.314
[info]   CI (99.9%): [≈ 0, 1816.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   476.625 ±(99.9%) 1675.409 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 476.625, 795.422), stdev = 435.098
[info]   CI (99.9%): [≈ 0, 2152.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.817
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.06% complete, ETA 01:42:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 252236.526 ops/s
[info] # Warmup Iteration   2: 629866.260 ops/s
[info] # Warmup Iteration   3: 665056.630 ops/s
[info] # Warmup Iteration   4: 665506.232 ops/s
[info] # Warmup Iteration   5: 672190.188 ops/s
[info] Iteration   1: 667618.945 ops/s
[info]                  ·gc.alloc.rate:                   536.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              1265.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1589.292 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 673756.401 ops/s
[info]                  ·gc.alloc.rate:      520.525 MB/sec
[info]                  ·gc.alloc.rate.norm: 1216.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 673149.068 ops/s
[info]                  ·gc.alloc.rate:                   540.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.106 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1576.230 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 673179.827 ops/s
[info]                  ·gc.alloc.rate:                   539.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              1261.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1576.106 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 671170.060 ops/s
[info]                  ·gc.alloc.rate:                   532.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              1249.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1580.802 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   671774.860 ±(99.9%) 9708.339 ops/s [Average]
[info]   (min, avg, max) = (667618.945, 671774.860, 673756.401), stdev = 2521.225
[info]   CI (99.9%): [662066.521, 681483.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   534.075 ±(99.9%) 31.440 MB/sec [Average]
[info]   (min, avg, max) = (520.525, 534.075, 540.720), stdev = 8.165
[info]   CI (99.9%): [502.635, 565.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1251.410 ±(99.9%) 79.864 B/op [Average]
[info]   (min, avg, max) = (1216.001, 1251.410, 1265.002), stdev = 20.740
[info]   CI (99.9%): [1171.547, 1331.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.229 ±(99.9%) 1.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.229, 1.103), stdev = 0.489
[info]   CI (99.9%): [≈ 0, 2.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.540 ±(99.9%) 4.440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.540, 2.601), stdev = 1.153
[info]   CI (99.9%): [≈ 0, 4.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.258 ±(99.9%) 1160.793 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.258, 674.110), stdev = 301.454
[info]   CI (99.9%): [≈ 0, 1700.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1264.486 ±(99.9%) 2721.979 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1264.486, 1589.292), stdev = 706.889
[info]   CI (99.9%): [≈ 0, 3986.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.29% complete, ETA 01:42:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1464597.064 ops/s
[info] # Warmup Iteration   2: 1611590.350 ops/s
[info] # Warmup Iteration   3: 1795268.796 ops/s
[info] # Warmup Iteration   4: 1804933.795 ops/s
[info] # Warmup Iteration   5: 1784744.945 ops/s
[info] Iteration   1: 1793453.996 ops/s
[info]                  ·gc.alloc.rate:                   360.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              316.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 448.953 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1804221.170 ops/s
[info]                  ·gc.alloc.rate:      348.489 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1798629.433 ops/s
[info]                  ·gc.alloc.rate:                   364.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              319.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.347 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 589.889 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1803624.119 ops/s
[info]                  ·gc.alloc.rate:      348.423 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1783093.153 ops/s
[info]                  ·gc.alloc.rate:                   359.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              317.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 595.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1796604.374 ±(99.9%) 33562.025 ops/s [Average]
[info]   (min, avg, max) = (1783093.153, 1796604.374, 1804221.170), stdev = 8715.951
[info]   CI (99.9%): [1763042.349, 1830166.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   356.369 ±(99.9%) 28.908 MB/sec [Average]
[info]   (min, avg, max) = (348.423, 356.369, 364.940), stdev = 7.507
[info]   CI (99.9%): [327.461, 385.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   312.188 ±(99.9%) 29.056 B/op [Average]
[info]   (min, avg, max) = (304.000, 312.188, 319.233), stdev = 7.546
[info]   CI (99.9%): [283.132, 341.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.556 ±(99.9%) 4.785 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.556, 2.779), stdev = 1.243
[info]   CI (99.9%): [≈ 0, 5.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.491 ±(99.9%) 4.224 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.491, 2.453), stdev = 1.097
[info]   CI (99.9%): [≈ 0, 4.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   372.002 ±(99.9%) 1332.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 372.002, 674.347), stdev = 346.021
[info]   CI (99.9%): [≈ 0, 1704.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   326.775 ±(99.9%) 1170.627 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 326.775, 595.036), stdev = 304.008
[info]   CI (99.9%): [≈ 0, 1497.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.53% complete, ETA 01:41:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17890.390 ops/s
[info] # Warmup Iteration   2: 91455.813 ops/s
[info] # Warmup Iteration   3: 100761.049 ops/s
[info] # Warmup Iteration   4: 102316.890 ops/s
[info] # Warmup Iteration   5: 102413.105 ops/s
[info] Iteration   1: 102501.900 ops/s
[info]                  ·gc.alloc.rate:                   3409.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              52356.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3387.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52020.694 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 102598.601 ops/s
[info]                  ·gc.alloc.rate:                   3427.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              52589.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41645.274 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 102345.826 ops/s
[info]                  ·gc.alloc.rate:                   3445.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              52984.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3397.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52247.999 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 102272.704 ops/s
[info]                  ·gc.alloc.rate:                   3444.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              53016.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52335.006 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 101229.584 ops/s
[info]                  ·gc.alloc.rate:                   3412.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              53047.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404.336 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52917.637 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   102189.723 ±(99.9%) 2124.632 ops/s [Average]
[info]   (min, avg, max) = (101229.584, 102189.723, 102598.601), stdev = 551.760
[info]   CI (99.9%): [100065.091, 104314.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3428.004 ±(99.9%) 66.341 MB/sec [Average]
[info]   (min, avg, max) = (3409.031, 3428.004, 3445.612), stdev = 17.229
[info]   CI (99.9%): [3361.662, 3494.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52799.324 ±(99.9%) 1191.627 B/op [Average]
[info]   (min, avg, max) = (52356.982, 52799.324, 53047.967), stdev = 309.462
[info]   CI (99.9%): [51607.697, 53990.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.769 ±(99.9%) 1.097 B/op [Average]
[info]   (min, avg, max) = (0.320, 0.769, 0.960), stdev = 0.285
[info]   CI (99.9%): [≈ 0, 1.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3260.828 ±(99.9%) 1176.413 MB/sec [Average]
[info]   (min, avg, max) = (2714.434, 3260.828, 3404.336), stdev = 305.511
[info]   CI (99.9%): [2084.415, 4437.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   50233.322 ±(99.9%) 18530.242 B/op [Average]
[info]   (min, avg, max) = (41645.274, 50233.322, 52917.637), stdev = 4812.245
[info]   CI (99.9%): [31703.080, 68763.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.76% complete, ETA 01:41:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 198638.946 ops/s
[info] # Warmup Iteration   2: 365243.672 ops/s
[info] # Warmup Iteration   3: 367539.714 ops/s
[info] # Warmup Iteration   4: 366456.601 ops/s
[info] # Warmup Iteration   5: 366538.040 ops/s
[info] Iteration   1: 366459.272 ops/s
[info]                  ·gc.alloc.rate:                   588.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              2525.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2892.517 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 366192.594 ops/s
[info]                  ·gc.alloc.rate:                   584.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              2509.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2896.073 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 367721.420 ops/s
[info]                  ·gc.alloc.rate:                   593.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              2540.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2883.977 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 366038.644 ops/s
[info]                  ·gc.alloc.rate:                   588.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              2528.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.121 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2898.581 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 367469.053 ops/s
[info]                  ·gc.alloc.rate:      570.029 MB/sec
[info]                  ·gc.alloc.rate.norm: 2442.076 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   366776.197 ±(99.9%) 2956.804 ops/s [Average]
[info]   (min, avg, max) = (366038.644, 366776.197, 367721.420), stdev = 767.873
[info]   CI (99.9%): [363819.393, 369733.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   584.743 ±(99.9%) 34.272 MB/sec [Average]
[info]   (min, avg, max) = (570.029, 584.743, 593.565), stdev = 8.900
[info]   CI (99.9%): [550.471, 619.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2509.320 ±(99.9%) 150.913 B/op [Average]
[info]   (min, avg, max) = (2442.076, 2509.320, 2540.724), stdev = 39.192
[info]   CI (99.9%): [2358.407, 2660.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.574 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.333), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 0.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.286 ±(99.9%) 2.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.286, 1.431), stdev = 0.640
[info]   CI (99.9%): [≈ 0, 2.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   539.058 ±(99.9%) 1160.363 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.058, 674.121), stdev = 301.343
[info]   CI (99.9%): [≈ 0, 1699.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2314.230 ±(99.9%) 4981.599 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2314.230, 2898.581), stdev = 1293.706
[info]   CI (99.9%): [≈ 0, 7295.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 12.00% complete, ETA 01:41:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.828 ops/s
[info] # Warmup Iteration   2: 1221468.706 ops/s
[info] # Warmup Iteration   3: 1260435.850 ops/s
[info] # Warmup Iteration   4: 1307755.674 ops/s
[info] # Warmup Iteration   5: 1270604.818 ops/s
[info] Iteration   1: 1315726.435 ops/s
[info]                  ·gc.alloc.rate:                   620.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              742.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 804.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1295166.840 ops/s
[info]                  ·gc.alloc.rate:                   617.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              749.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 815.167 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1317932.838 ops/s
[info]                  ·gc.alloc.rate:                   626.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              748.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 801.067 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1319066.881 ops/s
[info]                  ·gc.alloc.rate:                   627.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              748.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 799.588 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1318842.504 ops/s
[info]                  ·gc.alloc.rate:                   629.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              751.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 799.694 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1313347.100 ±(99.9%) 39463.345 ops/s [Average]
[info]   (min, avg, max) = (1295166.840, 1313347.100, 1319066.881), stdev = 10248.505
[info]   CI (99.9%): [1273883.754, 1352810.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   624.269 ±(99.9%) 20.587 MB/sec [Average]
[info]   (min, avg, max) = (617.001, 624.269, 629.832), stdev = 5.347
[info]   CI (99.9%): [603.681, 644.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   748.161 ±(99.9%) 13.491 B/op [Average]
[info]   (min, avg, max) = (742.346, 748.161, 751.708), stdev = 3.504
[info]   CI (99.9%): [734.670, 761.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.729 ±(99.9%) 6.189 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.729, 3.604), stdev = 1.607
[info]   CI (99.9%): [≈ 0, 6.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.873 ±(99.9%) 7.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.873, 4.312), stdev = 1.923
[info]   CI (99.9%): [≈ 0, 8.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   670.753 ±(99.9%) 3.099 MB/sec [Average]
[info]   (min, avg, max) = (670.038, 670.753, 672.003), stdev = 0.805
[info]   CI (99.9%): [667.654, 673.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   803.908 ±(99.9%) 25.197 B/op [Average]
[info]   (min, avg, max) = (799.588, 803.908, 815.167), stdev = 6.544
[info]   CI (99.9%): [778.711, 829.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.24% complete, ETA 01:41:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 534980.741 ops/s
[info] # Warmup Iteration   2: 975086.169 ops/s
[info] # Warmup Iteration   3: 945687.107 ops/s
[info] # Warmup Iteration   4: 979748.613 ops/s
[info] # Warmup Iteration   5: 980639.848 ops/s
[info] Iteration   1: 984232.475 ops/s
[info]                  ·gc.alloc.rate:                   708.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              1133.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1079.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 971261.461 ops/s
[info]                  ·gc.alloc.rate:                   704.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              1142.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.617 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1093.410 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 979532.172 ops/s
[info]                  ·gc.alloc.rate:                   710.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              1141.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1084.189 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 984467.279 ops/s
[info]                  ·gc.alloc.rate:                   721.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              1153.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1078.794 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 980400.342 ops/s
[info]                  ·gc.alloc.rate:                   714.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              1147.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1083.225 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   979978.746 ±(99.9%) 20611.681 ops/s [Average]
[info]   (min, avg, max) = (971261.461, 979978.746, 984467.279), stdev = 5352.788
[info]   CI (99.9%): [959367.065, 1000590.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   712.008 ±(99.9%) 24.427 MB/sec [Average]
[info]   (min, avg, max) = (704.630, 712.008, 721.262), stdev = 6.344
[info]   CI (99.9%): [687.581, 736.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1143.627 ±(99.9%) 28.499 B/op [Average]
[info]   (min, avg, max) = (1133.527, 1143.627, 1153.219), stdev = 7.401
[info]   CI (99.9%): [1115.129, 1172.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.020 ±(99.9%) 0.071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.034), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.701 ±(99.9%) 0.342 MB/sec [Average]
[info]   (min, avg, max) = (674.617, 674.701, 674.847), stdev = 0.089
[info]   CI (99.9%): [674.359, 675.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1083.733 ±(99.9%) 22.818 B/op [Average]
[info]   (min, avg, max) = (1078.794, 1083.733, 1093.410), stdev = 5.926
[info]   CI (99.9%): [1060.916, 1106.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.47% complete, ETA 01:40:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1934698.707 ops/s
[info] # Warmup Iteration   2: 2431098.674 ops/s
[info] # Warmup Iteration   3: 2513995.511 ops/s
[info] # Warmup Iteration   4: 2446053.694 ops/s
[info] # Warmup Iteration   5: 2515316.070 ops/s
[info] Iteration   1: 2528189.798 ops/s
[info]                  ·gc.alloc.rate:                   1213.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              755.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.611 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 837.672 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2398970.727 ops/s
[info]                  ·gc.alloc.rate:                   1124.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              737.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 441.394 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2519846.098 ops/s
[info]                  ·gc.alloc.rate:                   1196.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              747.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 840.850 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2512114.222 ops/s
[info]                  ·gc.alloc.rate:                   1189.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              745.301 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 843.865 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2519541.763 ops/s
[info]                  ·gc.alloc.rate:                   1219.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              761.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.190 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 842.257 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2495732.522 ±(99.9%) 209435.956 ops/s [Average]
[info]   (min, avg, max) = (2398970.727, 2495732.522, 2528189.798), stdev = 54389.853
[info]   CI (99.9%): [2286296.566, 2705168.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1188.621 ±(99.9%) 145.929 MB/sec [Average]
[info]   (min, avg, max) = (1124.320, 1188.621, 1219.060), stdev = 37.897
[info]   CI (99.9%): [1042.692, 1334.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   749.515 ±(99.9%) 35.583 B/op [Average]
[info]   (min, avg, max) = (737.696, 749.515, 761.586), stdev = 9.241
[info]   CI (99.9%): [713.931, 785.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.146), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.042 ±(99.9%) 0.139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.091), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1211.881 ±(99.9%) 1160.574 MB/sec [Average]
[info]   (min, avg, max) = (672.727, 1211.881, 1348.190), stdev = 301.397
[info]   CI (99.9%): [51.306, 2372.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   761.208 ±(99.9%) 688.479 B/op [Average]
[info]   (min, avg, max) = (441.394, 761.208, 843.865), stdev = 178.796
[info]   CI (99.9%): [72.729, 1449.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 12.71% complete, ETA 01:40:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2207615.745 ops/s
[info] # Warmup Iteration   2: 2732471.722 ops/s
[info] # Warmup Iteration   3: 2814896.510 ops/s
[info] # Warmup Iteration   4: 2818875.798 ops/s
[info] # Warmup Iteration   5: 2819838.526 ops/s
[info] Iteration   1: 2818207.566 ops/s
[info]                  ·gc.alloc.rate:      0.080 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.045 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2818907.313 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2813426.335 ops/s
[info]                  ·gc.alloc.rate:      0.926 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.518 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2818250.962 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2818691.576 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2817496.750 ±(99.9%) 8835.460 ops/s [Average]
[info]   (min, avg, max) = (2813426.335, 2817496.750, 2818907.313), stdev = 2294.541
[info]   CI (99.9%): [2808661.290, 2826332.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.201 ±(99.9%) 1.566 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.201, 0.926), stdev = 0.407
[info]   CI (99.9%): [≈ 0, 1.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.113 ±(99.9%) 0.876 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.113, 0.518), stdev = 0.228
[info]   CI (99.9%): [≈ 0, 0.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.94% complete, ETA 01:40:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 202004.740 ops/s
[info] # Warmup Iteration   2: 464750.909 ops/s
[info] # Warmup Iteration   3: 472454.513 ops/s
[info] # Warmup Iteration   4: 478116.984 ops/s
[info] # Warmup Iteration   5: 477434.739 ops/s
[info] Iteration   1: 477472.541 ops/s
[info]                  ·gc.alloc.rate:                   583.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              1922.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2223.127 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 477289.390 ops/s
[info]                  ·gc.alloc.rate:                   579.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              1910.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2225.073 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 477762.961 ops/s
[info]                  ·gc.alloc.rate:                   578.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              1907.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2222.987 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 477341.567 ops/s
[info]                  ·gc.alloc.rate:                   577.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              1905.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2224.952 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 480550.484 ops/s
[info]                  ·gc.alloc.rate:      566.665 MB/sec
[info]                  ·gc.alloc.rate.norm: 1856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   478083.389 ±(99.9%) 5357.484 ops/s [Average]
[info]   (min, avg, max) = (477289.390, 478083.389, 480550.484), stdev = 1391.321
[info]   CI (99.9%): [472725.905, 483440.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   577.155 ±(99.9%) 23.831 MB/sec [Average]
[info]   (min, avg, max) = (566.665, 577.155, 583.073), stdev = 6.189
[info]   CI (99.9%): [553.324, 600.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1900.250 ±(99.9%) 98.446 B/op [Average]
[info]   (min, avg, max) = (1856.001, 1900.250, 1922.070), stdev = 25.566
[info]   CI (99.9%): [1801.804, 1998.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.167 ±(99.9%) 1.346 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.167, 0.791), stdev = 0.350
[info]   CI (99.9%): [≈ 0, 1.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.549 ±(99.9%) 4.437 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.549, 2.607), stdev = 1.152
[info]   CI (99.9%): [≈ 0, 4.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   539.711 ±(99.9%) 1161.768 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.711, 674.736), stdev = 301.708
[info]   CI (99.9%): [≈ 0, 1701.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1779.228 ±(99.9%) 3829.923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1779.228, 2225.073), stdev = 994.619
[info]   CI (99.9%): [≈ 0, 5609.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.18% complete, ETA 01:40:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86496.298 ops/s
[info] # Warmup Iteration   2: 160800.374 ops/s
[info] # Warmup Iteration   3: 163803.726 ops/s
[info] # Warmup Iteration   4: 164662.706 ops/s
[info] # Warmup Iteration   5: 165285.230 ops/s
[info] Iteration   1: 163331.913 ops/s
[info]                  ·gc.alloc.rate:                   2015.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              19421.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19436.856 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 164807.970 ops/s
[info]                  ·gc.alloc.rate:                   2045.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              19539.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19287.783 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 163339.840 ops/s
[info]                  ·gc.alloc.rate:                   2027.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              19541.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19503.181 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 165079.582 ops/s
[info]                  ·gc.alloc.rate:                   2063.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              19675.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19323.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 164685.847 ops/s
[info]                  ·gc.alloc.rate:                   2057.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              19670.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19400.391 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   164249.031 ±(99.9%) 3256.453 ops/s [Average]
[info]   (min, avg, max) = (163331.913, 164249.031, 165079.582), stdev = 845.691
[info]   CI (99.9%): [160992.577, 167505.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2042.064 ±(99.9%) 78.026 MB/sec [Average]
[info]   (min, avg, max) = (2015.217, 2042.064, 2063.462), stdev = 20.263
[info]   CI (99.9%): [1964.039, 2120.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19569.804 ±(99.9%) 407.901 B/op [Average]
[info]   (min, avg, max) = (19421.752, 19569.804, 19675.324), stdev = 105.931
[info]   CI (99.9%): [19161.903, 19977.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.559 ±(99.9%) 1.378 B/op [Average]
[info]   (min, avg, max) = (0.199, 0.559, 1.003), stdev = 0.358
[info]   CI (99.9%): [≈ 0, 1.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2023.261 ±(99.9%) 20.034 MB/sec [Average]
[info]   (min, avg, max) = (2016.784, 2023.261, 2029.638), stdev = 5.203
[info]   CI (99.9%): [2003.228, 2043.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19390.251 ±(99.9%) 333.723 B/op [Average]
[info]   (min, avg, max) = (19287.783, 19390.251, 19503.181), stdev = 86.667
[info]   CI (99.9%): [19056.528, 19723.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.41% complete, ETA 01:39:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141949.918 ops/s
[info] # Warmup Iteration   2: 422063.671 ops/s
[info] # Warmup Iteration   3: 439756.522 ops/s
[info] # Warmup Iteration   4: 440755.409 ops/s
[info] # Warmup Iteration   5: 438456.893 ops/s
[info] Iteration   1: 441805.347 ops/s
[info]                  ·gc.alloc.rate:      354.886 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.069 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 439474.516 ops/s
[info]                  ·gc.alloc.rate:                   372.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              1334.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2413.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 424903.318 ops/s
[info]                  ·gc.alloc.rate:      341.482 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.632 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 439579.301 ops/s
[info]                  ·gc.alloc.rate:                   370.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              1326.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2412.518 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 441196.566 ops/s
[info]                  ·gc.alloc.rate:      354.239 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   437391.809 ±(99.9%) 27162.785 ops/s [Average]
[info]   (min, avg, max) = (424903.318, 437391.809, 441805.347), stdev = 7054.089
[info]   CI (99.9%): [410229.025, 464554.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   358.720 ±(99.9%) 49.495 MB/sec [Average]
[info]   (min, avg, max) = (341.482, 358.720, 372.612), stdev = 12.854
[info]   CI (99.9%): [309.225, 408.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1290.689 ±(99.9%) 139.947 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1290.689, 1334.512), stdev = 36.344
[info]   CI (99.9%): [1150.742, 1430.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.221 ±(99.9%) 1.855 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.221, 1.082), stdev = 0.482
[info]   CI (99.9%): [≈ 0, 2.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.790 ±(99.9%) 6.643 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.790, 3.876), stdev = 1.725
[info]   CI (99.9%): [≈ 0, 7.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   269.499 ±(99.9%) 1420.993 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.499, 673.751), stdev = 369.027
[info]   CI (99.9%): [≈ 0, 1690.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   965.108 ±(99.9%) 5088.737 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 965.108, 2413.023), stdev = 1321.529
[info]   CI (99.9%): [≈ 0, 6053.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:39:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 872137.763 ops/s
[info] # Warmup Iteration   2: 1104244.072 ops/s
[info] # Warmup Iteration   3: 1139899.245 ops/s
[info] # Warmup Iteration   4: 1140606.154 ops/s
[info] # Warmup Iteration   5: 1125125.444 ops/s
[info] Iteration   1: 1140326.770 ops/s
[info]                  ·gc.alloc.rate:      220.259 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1132963.096 ops/s
[info]                  ·gc.alloc.rate:                   228.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              317.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 710.702 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1140866.503 ops/s
[info]                  ·gc.alloc.rate:      220.372 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1132943.570 ops/s
[info]                  ·gc.alloc.rate:                   235.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              326.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 710.710 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1139227.580 ops/s
[info]                  ·gc.alloc.rate:      220.121 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1137265.504 ±(99.9%) 15327.560 ops/s [Average]
[info]   (min, avg, max) = (1132943.570, 1137265.504, 1140866.503), stdev = 3980.519
[info]   CI (99.9%): [1121937.944, 1152593.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   224.882 ±(99.9%) 26.279 MB/sec [Average]
[info]   (min, avg, max) = (220.121, 224.882, 235.394), stdev = 6.825
[info]   CI (99.9%): [198.602, 251.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   311.228 ±(99.9%) 40.396 B/op [Average]
[info]   (min, avg, max) = (304.000, 311.228, 326.990), stdev = 10.491
[info]   CI (99.9%): [270.832, 351.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.006 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.628 ±(99.9%) 1078.945 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.628, 511.625), stdev = 280.199
[info]   CI (99.9%): [≈ 0, 1283.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   284.282 ±(99.9%) 1498.939 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 284.282, 710.710), stdev = 389.270
[info]   CI (99.9%): [≈ 0, 1783.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.88% complete, ETA 01:39:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18796.094 ops/s
[info] # Warmup Iteration   2: 81411.858 ops/s
[info] # Warmup Iteration   3: 84771.969 ops/s
[info] # Warmup Iteration   4: 85794.544 ops/s
[info] # Warmup Iteration   5: 86275.268 ops/s
[info] Iteration   1: 86609.885 ops/s
[info]                  ·gc.alloc.rate:                   3428.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              62312.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3386.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61552.062 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 86267.205 ops/s
[info]                  ·gc.alloc.rate:                   3469.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              63304.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3392.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61896.124 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 86426.520 ops/s
[info]                  ·gc.alloc.rate:                   3476.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              63305.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61877.884 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 86536.293 ops/s
[info]                  ·gc.alloc.rate:                   3481.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              63321.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.304 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61847.702 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 86302.364 ops/s
[info]                  ·gc.alloc.rate:                   3477.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              63427.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62078.984 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   86428.453 ±(99.9%) 566.091 ops/s [Average]
[info]   (min, avg, max) = (86267.205, 86428.453, 86609.885), stdev = 147.012
[info]   CI (99.9%): [85862.363, 86994.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3466.686 ±(99.9%) 83.840 MB/sec [Average]
[info]   (min, avg, max) = (3428.516, 3466.686, 3481.336), stdev = 21.773
[info]   CI (99.9%): [3382.846, 3550.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63134.333 ±(99.9%) 1780.462 B/op [Average]
[info]   (min, avg, max) = (62312.282, 63134.333, 63427.692), stdev = 462.380
[info]   CI (99.9%): [61353.871, 64914.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.910 ±(99.9%) 1.309 B/op [Average]
[info]   (min, avg, max) = (0.379, 0.910, 1.139), stdev = 0.340
[info]   CI (99.9%): [≈ 0, 2.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3396.206 ±(99.9%) 26.040 MB/sec [Average]
[info]   (min, avg, max) = (3386.688, 3396.206, 3403.624), stdev = 6.762
[info]   CI (99.9%): [3370.166, 3422.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   61850.551 ±(99.9%) 730.885 B/op [Average]
[info]   (min, avg, max) = (61552.062, 61850.551, 62078.984), stdev = 189.809
[info]   CI (99.9%): [61119.666, 62581.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.12% complete, ETA 01:39:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137136.441 ops/s
[info] # Warmup Iteration   2: 278093.284 ops/s
[info] # Warmup Iteration   3: 282293.064 ops/s
[info] # Warmup Iteration   4: 286286.298 ops/s
[info] # Warmup Iteration   5: 286210.163 ops/s
[info] Iteration   1: 285618.149 ops/s
[info]                  ·gc.alloc.rate:                   1281.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              7061.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3718.407 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 278536.832 ops/s
[info]                  ·gc.alloc.rate:                   1265.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              7152.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7629.580 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 284713.570 ops/s
[info]                  ·gc.alloc.rate:                   1287.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              7118.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7471.417 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 286692.385 ops/s
[info]                  ·gc.alloc.rate:                   1294.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              7104.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7427.243 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 286904.336 ops/s
[info]                  ·gc.alloc.rate:                   1294.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              7103.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.600 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7427.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   284493.054 ±(99.9%) 13261.315 ops/s [Average]
[info]   (min, avg, max) = (278536.832, 284493.054, 286904.336), stdev = 3443.921
[info]   CI (99.9%): [271231.739, 297754.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1284.731 ±(99.9%) 45.757 MB/sec [Average]
[info]   (min, avg, max) = (1265.824, 1284.731, 1294.631), stdev = 11.883
[info]   CI (99.9%): [1238.974, 1330.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7108.190 ±(99.9%) 125.536 B/op [Average]
[info]   (min, avg, max) = (7061.734, 7108.190, 7152.308), stdev = 32.601
[info]   CI (99.9%): [6982.655, 7233.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.138 ±(99.9%) 0.487 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.138, 0.235), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1216.611 ±(99.9%) 1166.640 MB/sec [Average]
[info]   (min, avg, max) = (674.642, 1216.611, 1353.600), stdev = 302.973
[info]   CI (99.9%): [49.972, 2383.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6734.735 ±(99.9%) 6500.784 B/op [Average]
[info]   (min, avg, max) = (3718.407, 6734.735, 7629.580), stdev = 1688.233
[info]   CI (99.9%): [233.951, 13235.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.35% complete, ETA 01:38:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 813797.228 ops/s
[info] # Warmup Iteration   2: 1679630.438 ops/s
[info] # Warmup Iteration   3: 1801134.925 ops/s
[info] # Warmup Iteration   4: 1808163.337 ops/s
[info] # Warmup Iteration   5: 1796329.462 ops/s
[info] Iteration   1: 1804651.291 ops/s
[info]                  ·gc.alloc.rate:                   945.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              825.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.090 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 587.920 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1806024.591 ops/s
[info]                  ·gc.alloc.rate:                   942.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              821.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 587.471 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1797059.111 ops/s
[info]                  ·gc.alloc.rate:                   962.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              843.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1180.762 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1802345.792 ops/s
[info]                  ·gc.alloc.rate:                   941.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              822.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 589.249 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1802655.549 ops/s
[info]                  ·gc.alloc.rate:                   941.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              822.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 589.115 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1802547.267 ±(99.9%) 13155.863 ops/s [Average]
[info]   (min, avg, max) = (1797059.111, 1802547.267, 1806024.591), stdev = 3416.536
[info]   CI (99.9%): [1789391.404, 1815703.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   947.008 ±(99.9%) 34.254 MB/sec [Average]
[info]   (min, avg, max) = (941.790, 947.008, 962.632), stdev = 8.896
[info]   CI (99.9%): [912.754, 981.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   826.872 ±(99.9%) 35.491 B/op [Average]
[info]   (min, avg, max) = (821.606, 826.872, 843.187), stdev = 9.217
[info]   CI (99.9%): [791.381, 862.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.015 ±(99.9%) 0.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.073), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   809.189 ±(99.9%) 1159.891 MB/sec [Average]
[info]   (min, avg, max) = (674.029, 809.189, 1348.028), stdev = 301.220
[info]   CI (99.9%): [≈ 0, 1969.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   706.903 ±(99.9%) 1020.020 B/op [Average]
[info]   (min, avg, max) = (587.471, 706.903, 1180.762), stdev = 264.896
[info]   CI (99.9%): [≈ 0, 1726.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.59% complete, ETA 01:38:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1865322.773 ops/s
[info] # Warmup Iteration   2: 2411395.750 ops/s
[info] # Warmup Iteration   3: 2352216.915 ops/s
[info] # Warmup Iteration   4: 2367071.459 ops/s
[info] # Warmup Iteration   5: 2432945.044 ops/s
[info] Iteration   1: 2444462.991 ops/s
[info]                  ·gc.alloc.rate:                   682.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              439.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 434.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2446728.423 ops/s
[info]                  ·gc.alloc.rate:                   671.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 433.208 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2443066.090 ops/s
[info]                  ·gc.alloc.rate:                   672.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              433.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 433.859 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2447625.367 ops/s
[info]                  ·gc.alloc.rate:                   672.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 432.604 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2454089.371 ops/s
[info]                  ·gc.alloc.rate:                   685.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              439.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 431.475 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2447194.448 ±(99.9%) 16387.536 ops/s [Average]
[info]   (min, avg, max) = (2443066.090, 2447194.448, 2454089.371), stdev = 4255.791
[info]   CI (99.9%): [2430806.912, 2463581.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   676.908 ±(99.9%) 24.457 MB/sec [Average]
[info]   (min, avg, max) = (671.825, 676.908, 685.429), stdev = 6.351
[info]   CI (99.9%): [652.451, 701.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   435.342 ±(99.9%) 13.957 B/op [Average]
[info]   (min, avg, max) = (432.224, 435.342, 439.464), stdev = 3.625
[info]   CI (99.9%): [421.385, 449.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.566 ±(99.9%) 4.653 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.566, 2.727), stdev = 1.208
[info]   CI (99.9%): [≈ 0, 5.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.365 ±(99.9%) 2.996 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.365, 1.756), stdev = 0.778
[info]   CI (99.9%): [≈ 0, 3.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   673.316 ±(99.9%) 2.178 MB/sec [Average]
[info]   (min, avg, max) = (672.674, 673.316, 674.173), stdev = 0.565
[info]   CI (99.9%): [671.139, 675.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   433.037 ±(99.9%) 4.008 B/op [Average]
[info]   (min, avg, max) = (431.475, 433.037, 434.038), stdev = 1.041
[info]   CI (99.9%): [429.028, 437.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 14.82% complete, ETA 01:38:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2215485.903 ops/s
[info] # Warmup Iteration   2: 2572718.439 ops/s
[info] # Warmup Iteration   3: 2671249.231 ops/s
[info] # Warmup Iteration   4: 2671804.078 ops/s
[info] # Warmup Iteration   5: 2669894.973 ops/s
[info] Iteration   1: 2671808.321 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2672389.566 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2671088.358 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2670797.600 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.100 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2670798.880 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   2671376.545 ±(99.9%) 2698.592 ops/s [Average]
[info]   (min, avg, max) = (2670797.600, 2671376.545, 2672389.566), stdev = 700.816
[info]   CI (99.9%): [2668677.953, 2674075.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.034 ±(99.9%) 0.293 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.034, 0.170), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.020 ±(99.9%) 0.173 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.020, 0.100), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:37:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12228.314 ops/s
[info] # Warmup Iteration   2: 45175.835 ops/s
[info] # Warmup Iteration   3: 45276.524 ops/s
[info] # Warmup Iteration   4: 46853.479 ops/s
[info] # Warmup Iteration   5: 46857.024 ops/s
[info] Iteration   1: 45770.045 ops/s
[info]                  ·gc.alloc.rate:                   2014.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              69276.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.654 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69701.970 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 46936.504 ops/s
[info]                  ·gc.alloc.rate:                   2038.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              68375.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68034.817 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 46833.618 ops/s
[info]                  ·gc.alloc.rate:                   2034.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              68379.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68275.411 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 46574.386 ops/s
[info]                  ·gc.alloc.rate:                   2036.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              68839.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68724.025 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 46774.138 ops/s
[info]                  ·gc.alloc.rate:                   2059.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              69321.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.451 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68498.926 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   46577.738 ±(99.9%) 1811.379 ops/s [Average]
[info]   (min, avg, max) = (45770.045, 46577.738, 46936.504), stdev = 470.409
[info]   CI (99.9%): [44766.359, 48389.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2036.903 ±(99.9%) 62.375 MB/sec [Average]
[info]   (min, avg, max) = (2014.273, 2036.903, 2059.884), stdev = 16.199
[info]   CI (99.9%): [1974.528, 2099.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68838.310 ±(99.9%) 1774.770 B/op [Average]
[info]   (min, avg, max) = (68375.647, 68838.310, 69321.163), stdev = 460.902
[info]   CI (99.9%): [67063.539, 70613.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.678 ±(99.9%) 6.195 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.678, 3.490), stdev = 1.609
[info]   CI (99.9%): [≈ 0, 7.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2031.159 ±(99.9%) 13.584 MB/sec [Average]
[info]   (min, avg, max) = (2026.654, 2031.159, 2035.451), stdev = 3.528
[info]   CI (99.9%): [2017.575, 2044.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   68647.030 ±(99.9%) 2475.867 B/op [Average]
[info]   (min, avg, max) = (68034.817, 68647.030, 69701.970), stdev = 642.975
[info]   CI (99.9%): [66171.162, 71122.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.29% complete, ETA 01:37:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133664.268 ops/s
[info] # Warmup Iteration   2: 243998.659 ops/s
[info] # Warmup Iteration   3: 252193.170 ops/s
[info] # Warmup Iteration   4: 249497.002 ops/s
[info] # Warmup Iteration   5: 249014.566 ops/s
[info] Iteration   1: 252277.146 ops/s
[info]                  ·gc.alloc.rate:                   2673.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              16683.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2696.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16822.230 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 248795.825 ops/s
[info]                  ·gc.alloc.rate:                   2651.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              16771.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2703.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17100.379 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 252134.282 ops/s
[info]                  ·gc.alloc.rate:                   2700.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              16855.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16906.816 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 252007.190 ops/s
[info]                  ·gc.alloc.rate:                   2673.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              16696.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12703.091 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 253111.772 ops/s
[info]                  ·gc.alloc.rate:                   2709.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              16849.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16882.587 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   251665.243 ±(99.9%) 6396.405 ops/s [Average]
[info]   (min, avg, max) = (248795.825, 251665.243, 253111.772), stdev = 1661.126
[info]   CI (99.9%): [245268.838, 258061.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2681.654 ±(99.9%) 89.848 MB/sec [Average]
[info]   (min, avg, max) = (2651.472, 2681.654, 2709.859), stdev = 23.333
[info]   CI (99.9%): [2591.807, 2771.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16771.297 ±(99.9%) 314.397 B/op [Average]
[info]   (min, avg, max) = (16683.100, 16771.297, 16855.420), stdev = 81.648
[info]   CI (99.9%): [16456.900, 17085.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.469 ±(99.9%) 0.842 B/op [Average]
[info]   (min, avg, max) = (0.130, 0.469, 0.658), stdev = 0.219
[info]   CI (99.9%): [≈ 0, 1.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2571.339 ±(99.9%) 1157.464 MB/sec [Average]
[info]   (min, avg, max) = (2033.770, 2571.339, 2715.120), stdev = 300.590
[info]   CI (99.9%): [1413.875, 3728.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16083.021 ±(99.9%) 7286.604 B/op [Average]
[info]   (min, avg, max) = (12703.091, 16083.021, 17100.379), stdev = 1892.308
[info]   CI (99.9%): [8796.417, 23369.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.53% complete, ETA 01:37:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154373.723 ops/s
[info] # Warmup Iteration   2: 371690.747 ops/s
[info] # Warmup Iteration   3: 377361.231 ops/s
[info] # Warmup Iteration   4: 380641.811 ops/s
[info] # Warmup Iteration   5: 382544.252 ops/s
[info] Iteration   1: 378613.163 ops/s
[info]                  ·gc.alloc.rate:                   1876.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              7802.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5615.532 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 382330.611 ops/s
[info]                  ·gc.alloc.rate:                   1895.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              7803.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8347.906 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 375867.151 ops/s
[info]                  ·gc.alloc.rate:                   1876.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              7858.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8500.460 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 382241.028 ops/s
[info]                  ·gc.alloc.rate:                   1894.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              7800.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5578.889 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 382646.546 ops/s
[info]                  ·gc.alloc.rate:                   1924.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              7918.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8369.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   380339.700 ±(99.9%) 11533.457 ops/s [Average]
[info]   (min, avg, max) = (375867.151, 380339.700, 382646.546), stdev = 2995.202
[info]   CI (99.9%): [368806.243, 391873.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1893.582 ±(99.9%) 75.632 MB/sec [Average]
[info]   (min, avg, max) = (1876.561, 1893.582, 1924.743), stdev = 19.641
[info]   CI (99.9%): [1817.950, 1969.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7836.512 ±(99.9%) 199.487 B/op [Average]
[info]   (min, avg, max) = (7800.356, 7836.512, 7918.400), stdev = 51.806
[info]   CI (99.9%): [7637.025, 8035.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.189 ±(99.9%) 0.752 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.189, 0.514), stdev = 0.195
[info]   CI (99.9%): [≈ 0, 0.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1759.544 ±(99.9%) 1430.188 MB/sec [Average]
[info]   (min, avg, max) = (1350.616, 1759.544, 2034.272), stdev = 371.415
[info]   CI (99.9%): [329.356, 3189.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7282.358 ±(99.9%) 5928.015 B/op [Average]
[info]   (min, avg, max) = (5578.889, 7282.358, 8500.460), stdev = 1539.487
[info]   CI (99.9%): [1354.343, 13210.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.76% complete, ETA 01:37:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1538680.471 ops/s
[info] # Warmup Iteration   2: 2156458.324 ops/s
[info] # Warmup Iteration   3: 2145996.659 ops/s
[info] # Warmup Iteration   4: 2173031.276 ops/s
[info] # Warmup Iteration   5: 2178621.648 ops/s
[info] Iteration   1: 2174034.796 ops/s
[info]                  ·gc.alloc.rate:                   768.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              556.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 488.537 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2183308.238 ops/s
[info]                  ·gc.alloc.rate:                   770.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              555.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 486.460 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2182996.719 ops/s
[info]                  ·gc.alloc.rate:                   770.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              555.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 486.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2182952.040 ops/s
[info]                  ·gc.alloc.rate:                   798.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              575.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 971.616 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2186481.502 ops/s
[info]                  ·gc.alloc.rate:                   773.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              557.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 484.759 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   2181954.659 ±(99.9%) 17971.555 ops/s [Average]
[info]   (min, avg, max) = (2174034.796, 2181954.659, 2186481.502), stdev = 4667.156
[info]   CI (99.9%): [2163983.104, 2199926.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   776.445 ±(99.9%) 48.573 MB/sec [Average]
[info]   (min, avg, max) = (768.696, 776.445, 798.745), stdev = 12.614
[info]   CI (99.9%): [727.872, 825.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   560.135 ±(99.9%) 34.229 B/op [Average]
[info]   (min, avg, max) = (555.316, 560.135, 575.978), stdev = 8.889
[info]   CI (99.9%): [525.906, 594.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.024 ±(99.9%) 0.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.075), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   808.863 ±(99.9%) 1159.244 MB/sec [Average]
[info]   (min, avg, max) = (673.377, 808.863, 1347.400), stdev = 301.052
[info]   CI (99.9%): [≈ 0, 1968.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   583.484 ±(99.9%) 835.499 B/op [Average]
[info]   (min, avg, max) = (484.759, 583.484, 971.616), stdev = 216.976
[info]   CI (99.9%): [≈ 0, 1418.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.00% complete, ETA 01:36:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6626.768 ops/s
[info] # Warmup Iteration   2: 77524.205 ops/s
[info] # Warmup Iteration   3: 85602.883 ops/s
[info] # Warmup Iteration   4: 88897.438 ops/s
[info] # Warmup Iteration   5: 88563.524 ops/s
[info] Iteration   1: 88225.755 ops/s
[info]                  ·gc.alloc.rate:                   3449.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              61526.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3386.653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60401.077 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 88072.689 ops/s
[info]                  ·gc.alloc.rate:                   3482.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              62228.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3392.537 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60626.399 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 87782.401 ops/s
[info]                  ·gc.alloc.rate:                   3472.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              62270.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3396.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60899.698 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 88318.381 ops/s
[info]                  ·gc.alloc.rate:                   3493.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              62261.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.313 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60600.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 88091.781 ops/s
[info]                  ·gc.alloc.rate:                   3485.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              62274.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.827 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60803.745 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   88098.201 ±(99.9%) 782.474 ops/s [Average]
[info]   (min, avg, max) = (87782.401, 88098.201, 88318.381), stdev = 203.206
[info]   CI (99.9%): [87315.728, 88880.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3476.659 ±(99.9%) 64.561 MB/sec [Average]
[info]   (min, avg, max) = (3449.780, 3476.659, 3493.514), stdev = 16.766
[info]   CI (99.9%): [3412.099, 3541.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   62112.290 ±(99.9%) 1261.898 B/op [Average]
[info]   (min, avg, max) = (61526.946, 62112.290, 62274.096), stdev = 327.711
[info]   CI (99.9%): [60850.392, 63374.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.967 ±(99.9%) 2.596 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.967, 1.855), stdev = 0.674
[info]   CI (99.9%): [≈ 0, 3.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3395.713 ±(99.9%) 24.671 MB/sec [Average]
[info]   (min, avg, max) = (3386.653, 3395.713, 3402.827), stdev = 6.407
[info]   CI (99.9%): [3371.041, 3420.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   60666.185 ±(99.9%) 744.918 B/op [Average]
[info]   (min, avg, max) = (60401.077, 60666.185, 60899.698), stdev = 193.453
[info]   CI (99.9%): [59921.267, 61411.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.24% complete, ETA 01:36:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129550.048 ops/s
[info] # Warmup Iteration   2: 241803.350 ops/s
[info] # Warmup Iteration   3: 251457.190 ops/s
[info] # Warmup Iteration   4: 249060.281 ops/s
[info] # Warmup Iteration   5: 251714.824 ops/s
[info] Iteration   1: 252194.742 ops/s
[info]                  ·gc.alloc.rate:                   1673.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              10449.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.806 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8426.688 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 251905.328 ops/s
[info]                  ·gc.alloc.rate:                   1707.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              10669.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12670.174 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 252266.096 ops/s
[info]                  ·gc.alloc.rate:                   1682.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              10500.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8445.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 251135.174 ops/s
[info]                  ·gc.alloc.rate:                   1689.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              10587.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12734.921 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 251964.736 ops/s
[info]                  ·gc.alloc.rate:                   1680.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              10499.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.990 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8471.694 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   251893.215 ±(99.9%) 1732.627 ops/s [Average]
[info]   (min, avg, max) = (251135.174, 251893.215, 252266.096), stdev = 449.958
[info]   CI (99.9%): [250160.588, 253625.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1686.834 ±(99.9%) 50.152 MB/sec [Average]
[info]   (min, avg, max) = (1673.758, 1686.834, 1707.959), stdev = 13.024
[info]   CI (99.9%): [1636.682, 1736.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10541.138 ±(99.9%) 336.344 B/op [Average]
[info]   (min, avg, max) = (10449.083, 10541.138, 10669.467), stdev = 87.347
[info]   CI (99.9%): [10204.794, 10877.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.286 ±(99.9%) 1.144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.286, 0.652), stdev = 0.297
[info]   CI (99.9%): [≈ 0, 1.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1623.834 ±(99.9%) 1427.633 MB/sec [Average]
[info]   (min, avg, max) = (1349.806, 1623.834, 2031.695), stdev = 370.752
[info]   CI (99.9%): [196.201, 3051.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10149.721 ±(99.9%) 8974.187 B/op [Average]
[info]   (min, avg, max) = (8426.688, 10149.721, 12734.921), stdev = 2330.568
[info]   CI (99.9%): [1175.534, 19123.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:36:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 675661.432 ops/s
[info] # Warmup Iteration   2: 1360574.406 ops/s
[info] # Warmup Iteration   3: 1409493.271 ops/s
[info] # Warmup Iteration   4: 1407024.042 ops/s
[info] # Warmup Iteration   5: 1408195.645 ops/s
[info] Iteration   1: 1401075.169 ops/s
[info]                  ·gc.alloc.rate:                   849.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              953.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.244 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 757.289 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1408895.287 ops/s
[info]                  ·gc.alloc.rate:                   839.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              937.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 753.062 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1403713.505 ops/s
[info]                  ·gc.alloc.rate:                   860.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              964.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1512.364 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1395887.893 ops/s
[info]                  ·gc.alloc.rate:                   835.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              942.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 760.858 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1404941.673 ops/s
[info]                  ·gc.alloc.rate:                   837.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              937.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 756.301 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1402902.705 ±(99.9%) 18594.395 ops/s [Average]
[info]   (min, avg, max) = (1395887.893, 1402902.705, 1408895.287), stdev = 4828.905
[info]   CI (99.9%): [1384308.310, 1421497.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   844.247 ±(99.9%) 40.525 MB/sec [Average]
[info]   (min, avg, max) = (835.317, 844.247, 860.487), stdev = 10.524
[info]   CI (99.9%): [803.722, 884.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   947.202 ±(99.9%) 45.309 B/op [Average]
[info]   (min, avg, max) = (937.451, 947.202, 964.676), stdev = 11.767
[info]   CI (99.9%): [901.893, 992.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.028 ±(99.9%) 0.241 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.140), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   809.384 ±(99.9%) 1161.612 MB/sec [Average]
[info]   (min, avg, max) = (674.061, 809.384, 1349.022), stdev = 301.667
[info]   CI (99.9%): [≈ 0, 1970.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   907.975 ±(99.9%) 1301.037 B/op [Average]
[info]   (min, avg, max) = (753.062, 907.975, 1512.364), stdev = 337.875
[info]   CI (99.9%): [≈ 0, 2209.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.71% complete, ETA 01:36:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2052213.543 ops/s
[info] # Warmup Iteration   2: 2700431.230 ops/s
[info] # Warmup Iteration   3: 2747714.186 ops/s
[info] # Warmup Iteration   4: 2749282.444 ops/s
[info] # Warmup Iteration   5: 2771423.769 ops/s
[info] Iteration   1: 2754195.473 ops/s
[info]                  ·gc.alloc.rate:                   989.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              565.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 769.314 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2761829.483 ops/s
[info]                  ·gc.alloc.rate:                   964.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              549.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 383.401 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2755175.762 ops/s
[info]                  ·gc.alloc.rate:                   977.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              558.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 768.659 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2761934.689 ops/s
[info]                  ·gc.alloc.rate:                   966.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              551.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 383.378 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2763425.884 ops/s
[info]                  ·gc.alloc.rate:                   954.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              543.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 383.174 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2759312.258 ±(99.9%) 16498.063 ops/s [Average]
[info]   (min, avg, max) = (2754195.473, 2759312.258, 2763425.884), stdev = 4284.495
[info]   CI (99.9%): [2742814.195, 2775810.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   970.663 ±(99.9%) 51.103 MB/sec [Average]
[info]   (min, avg, max) = (954.957, 970.663, 989.410), stdev = 13.271
[info]   CI (99.9%): [919.561, 1021.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   553.727 ±(99.9%) 32.362 B/op [Average]
[info]   (min, avg, max) = (543.936, 553.727, 565.517), stdev = 8.404
[info]   CI (99.9%): [521.365, 586.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.026 ±(99.9%) 0.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.071), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   941.936 ±(99.9%) 1419.622 MB/sec [Average]
[info]   (min, avg, max) = (672.672, 941.936, 1345.966), stdev = 368.671
[info]   CI (99.9%): [≈ 0, 2361.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   537.585 ±(99.9%) 813.408 B/op [Average]
[info]   (min, avg, max) = (383.174, 537.585, 769.314), stdev = 211.239
[info]   CI (99.9%): [≈ 0, 1350.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 16.94% complete, ETA 01:35:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2514674.489 ops/s
[info] # Warmup Iteration   2: 3081770.439 ops/s
[info] # Warmup Iteration   3: 3092025.692 ops/s
[info] # Warmup Iteration   4: 3093762.636 ops/s
[info] # Warmup Iteration   5: 3093093.920 ops/s
[info] Iteration   1: 3086819.699 ops/s
[info]                  ·gc.alloc.rate:      0.565 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.288 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3093686.602 ops/s
[info]                  ·gc.alloc.rate:      0.081 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.041 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3093497.839 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3094331.692 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3094024.852 ops/s
[info]                  ·gc.alloc.rate:      0.005 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3092472.137 ±(99.9%) 12229.344 ops/s [Average]
[info]   (min, avg, max) = (3086819.699, 3092472.137, 3094331.692), stdev = 3175.922
[info]   CI (99.9%): [3080242.793, 3104701.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.130 ±(99.9%) 0.945 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.130, 0.565), stdev = 0.245
[info]   CI (99.9%): [≈ 0, 1.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.066 ±(99.9%) 0.482 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.066, 0.288), stdev = 0.125
[info]   CI (99.9%): [≈ 0, 0.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.18% complete, ETA 01:35:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111629.372 ops/s
[info] # Warmup Iteration   2: 366266.671 ops/s
[info] # Warmup Iteration   3: 378005.354 ops/s
[info] # Warmup Iteration   4: 375733.801 ops/s
[info] # Warmup Iteration   5: 376822.417 ops/s
[info] Iteration   1: 378833.560 ops/s
[info]                  ·gc.alloc.rate:                   2422.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              10065.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11230.078 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 372313.159 ops/s
[info]                  ·gc.alloc.rate:                   2367.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              10006.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8584.729 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 378029.756 ops/s
[info]                  ·gc.alloc.rate:                   2445.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              10183.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11286.059 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 378586.642 ops/s
[info]                  ·gc.alloc.rate:                   2435.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              10124.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8462.869 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 369754.224 ops/s
[info]                  ·gc.alloc.rate:                   2419.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              10301.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11563.071 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   375503.468 ±(99.9%) 16132.485 ops/s [Average]
[info]   (min, avg, max) = (369754.224, 375503.468, 378833.560), stdev = 4189.555
[info]   CI (99.9%): [359370.983, 391635.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2418.081 ±(99.9%) 116.828 MB/sec [Average]
[info]   (min, avg, max) = (2367.056, 2418.081, 2445.650), stdev = 30.340
[info]   CI (99.9%): [2301.253, 2534.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10136.474 ±(99.9%) 436.767 B/op [Average]
[info]   (min, avg, max) = (10006.877, 10136.474, 10301.529), stdev = 113.427
[info]   CI (99.9%): [9699.707, 10573.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.365 ±(99.9%) 0.596 B/op [Average]
[info]   (min, avg, max) = (0.089, 0.365, 0.440), stdev = 0.155
[info]   CI (99.9%): [≈ 0, 0.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2439.129 ±(99.9%) 1427.407 MB/sec [Average]
[info]   (min, avg, max) = (2030.657, 2439.129, 2716.220), stdev = 370.693
[info]   CI (99.9%): [1011.722, 3866.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10225.361 ±(99.9%) 6003.195 B/op [Average]
[info]   (min, avg, max) = (8462.869, 10225.361, 11563.071), stdev = 1559.011
[info]   CI (99.9%): [4222.166, 16228.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.41% complete, ETA 01:35:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12227.266 ops/s
[info] # Warmup Iteration   2: 24763.126 ops/s
[info] # Warmup Iteration   3: 24992.700 ops/s
[info] # Warmup Iteration   4: 25237.115 ops/s
[info] # Warmup Iteration   5: 24965.850 ops/s
[info] Iteration   1: 25179.398 ops/s
[info]                  ·gc.alloc.rate:                   1473.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              92101.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.920 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83876.920 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 25359.866 ops/s
[info]                  ·gc.alloc.rate:                   1479.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              91794.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83323.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 24372.187 ops/s
[info]                  ·gc.alloc.rate:                   1436.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              92752.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86786.268 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 25323.985 ops/s
[info]                  ·gc.alloc.rate:                   1485.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              92314.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83627.745 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 25272.483 ops/s
[info]                  ·gc.alloc.rate:                   1484.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              92487.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83882.761 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   25101.584 ±(99.9%) 1591.688 ops/s [Average]
[info]   (min, avg, max) = (24372.187, 25101.584, 25359.866), stdev = 413.356
[info]   CI (99.9%): [23509.896, 26693.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1471.860 ±(99.9%) 79.166 MB/sec [Average]
[info]   (min, avg, max) = (1436.159, 1471.860, 1485.647), stdev = 20.559
[info]   CI (99.9%): [1392.694, 1551.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   92289.923 ±(99.9%) 1407.616 B/op [Average]
[info]   (min, avg, max) = (91794.602, 92289.923, 92752.591), stdev = 365.553
[info]   CI (99.9%): [90882.308, 93697.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.555 ±(99.9%) 5.469 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.555, 3.889), stdev = 1.420
[info]   CI (99.9%): [≈ 0, 7.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1344.180 ±(99.9%) 8.137 MB/sec [Average]
[info]   (min, avg, max) = (1341.920, 1344.180, 1346.832), stdev = 2.113
[info]   CI (99.9%): [1336.043, 1352.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   84299.342 ±(99.9%) 5425.529 B/op [Average]
[info]   (min, avg, max) = (83323.014, 84299.342, 86786.268), stdev = 1408.993
[info]   CI (99.9%): [78873.812, 89724.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 17.65% complete, ETA 01:35:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.907 ops/s
[info] # Warmup Iteration   2: 77575.163 ops/s
[info] # Warmup Iteration   3: 88544.772 ops/s
[info] # Warmup Iteration   4: 88915.605 ops/s
[info] # Warmup Iteration   5: 89102.080 ops/s
[info] Iteration   1: 89185.084 ops/s
[info]                  ·gc.alloc.rate:                   834.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              14733.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.968 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23652.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 89260.177 ops/s
[info]                  ·gc.alloc.rate:                   824.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              14533.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11804.056 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 89289.235 ops/s
[info]                  ·gc.alloc.rate:                   822.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              14500.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11800.355 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 89143.120 ops/s
[info]                  ·gc.alloc.rate:                   817.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              14437.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11819.678 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 89245.437 ops/s
[info]                  ·gc.alloc.rate:                   825.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              14557.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11806.568 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   89224.611 ±(99.9%) 228.442 ops/s [Average]
[info]   (min, avg, max) = (89143.120, 89224.611, 89289.235), stdev = 59.326
[info]   CI (99.9%): [88996.169, 89453.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   824.966 ±(99.9%) 23.623 MB/sec [Average]
[info]   (min, avg, max) = (817.954, 824.966, 834.705), stdev = 6.135
[info]   CI (99.9%): [801.343, 848.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14552.562 ±(99.9%) 426.089 B/op [Average]
[info]   (min, avg, max) = (14437.886, 14552.562, 14733.526), stdev = 110.654
[info]   CI (99.9%): [14126.473, 14978.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.441 ±(99.9%) 1.845 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.441, 1.103), stdev = 0.479
[info]   CI (99.9%): [≈ 0, 2.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   803.566 ±(99.9%) 1154.644 MB/sec [Average]
[info]   (min, avg, max) = (669.371, 803.566, 1339.968), stdev = 299.857
[info]   CI (99.9%): [≈ 0, 1958.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   14176.532 ±(99.9%) 20396.683 B/op [Average]
[info]   (min, avg, max) = (11800.355, 14176.532, 23652.002), stdev = 5296.954
[info]   CI (99.9%): [≈ 0, 34573.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.88% complete, ETA 01:34:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19970.567 ops/s
[info] # Warmup Iteration   2: 56561.656 ops/s
[info] # Warmup Iteration   3: 58026.300 ops/s
[info] # Warmup Iteration   4: 60108.860 ops/s
[info] # Warmup Iteration   5: 59994.113 ops/s
[info] Iteration   1: 58615.187 ops/s
[info]                  ·gc.alloc.rate:                   989.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              26573.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18092.157 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 59832.064 ops/s
[info]                  ·gc.alloc.rate:                   1027.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              27032.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35454.225 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 59013.048 ops/s
[info]                  ·gc.alloc.rate:                   990.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              26416.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17978.126 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 59511.830 ops/s
[info]                  ·gc.alloc.rate:                   1013.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              26799.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35692.456 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 60118.715 ops/s
[info]                  ·gc.alloc.rate:                   1004.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              26289.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.996 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17674.197 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   59418.169 ±(99.9%) 2342.057 ops/s [Average]
[info]   (min, avg, max) = (58615.187, 59418.169, 60118.715), stdev = 608.225
[info]   CI (99.9%): [57076.112, 61760.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1004.984 ±(99.9%) 61.859 MB/sec [Average]
[info]   (min, avg, max) = (989.486, 1004.984, 1027.529), stdev = 16.065
[info]   CI (99.9%): [943.125, 1066.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   26622.318 ±(99.9%) 1147.632 B/op [Average]
[info]   (min, avg, max) = (26289.702, 26622.318, 27032.931), stdev = 298.036
[info]   CI (99.9%): [25474.686, 27769.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.767 ±(99.9%) 3.531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.767, 2.190), stdev = 0.917
[info]   CI (99.9%): [≈ 0, 4.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   944.019 ±(99.9%) 1422.437 MB/sec [Average]
[info]   (min, avg, max) = (673.689, 944.019, 1349.732), stdev = 369.402
[info]   CI (99.9%): [≈ 0, 2366.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   24978.232 ±(99.9%) 37249.356 B/op [Average]
[info]   (min, avg, max) = (17674.197, 24978.232, 35692.456), stdev = 9673.539
[info]   CI (99.9%): [≈ 0, 62227.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.12% complete, ETA 01:34:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96797.069 ops/s
[info] # Warmup Iteration   2: 131143.248 ops/s
[info] # Warmup Iteration   3: 134938.142 ops/s
[info] # Warmup Iteration   4: 130378.616 ops/s
[info] # Warmup Iteration   5: 135284.716 ops/s
[info] Iteration   1: 135091.177 ops/s
[info]                  ·gc.alloc.rate:                   895.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              10436.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7846.450 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 135418.980 ops/s
[info]                  ·gc.alloc.rate:                   889.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              10334.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7819.243 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 134405.336 ops/s
[info]                  ·gc.alloc.rate:                   912.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              10690.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.244 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15756.213 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 135088.267 ops/s
[info]                  ·gc.alloc.rate:                   887.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              10341.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.722 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7838.225 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 135071.026 ops/s
[info]                  ·gc.alloc.rate:                   895.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              10437.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7839.501 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   135014.957 ±(99.9%) 1426.818 ops/s [Average]
[info]   (min, avg, max) = (134405.336, 135014.957, 135418.980), stdev = 370.540
[info]   CI (99.9%): [133588.139, 136441.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   896.185 ±(99.9%) 38.414 MB/sec [Average]
[info]   (min, avg, max) = (887.578, 896.185, 912.732), stdev = 9.976
[info]   CI (99.9%): [857.771, 934.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10448.233 ±(99.9%) 555.338 B/op [Average]
[info]   (min, avg, max) = (10334.429, 10448.233, 10690.397), stdev = 144.220
[info]   CI (99.9%): [9892.895, 11003.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.292 ±(99.9%) 1.677 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.292, 0.975), stdev = 0.436
[info]   CI (99.9%): [≈ 0, 1.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   807.376 ±(99.9%) 1157.802 MB/sec [Average]
[info]   (min, avg, max) = (672.710, 807.376, 1345.244), stdev = 300.678
[info]   CI (99.9%): [≈ 0, 1965.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9419.927 ±(99.9%) 13639.390 B/op [Average]
[info]   (min, avg, max) = (7819.243, 9419.927, 15756.213), stdev = 3542.106
[info]   CI (99.9%): [≈ 0, 23059.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.35% complete, ETA 01:34:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4047.672 ops/s
[info] # Warmup Iteration   2: 32462.375 ops/s
[info] # Warmup Iteration   3: 34752.137 ops/s
[info] # Warmup Iteration   4: 33892.331 ops/s
[info] # Warmup Iteration   5: 34838.111 ops/s
[info] Iteration   1: 35067.318 ops/s
[info]                  ·gc.alloc.rate:                   1729.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              77640.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60539.613 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 34998.248 ops/s
[info]                  ·gc.alloc.rate:                   1734.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              77968.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91065.908 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 35158.526 ops/s
[info]                  ·gc.alloc.rate:                   1739.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              77865.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60502.224 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 34890.046 ops/s
[info]                  ·gc.alloc.rate:                   1739.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              78461.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91525.418 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 35063.978 ops/s
[info]                  ·gc.alloc.rate:                   1734.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              77835.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.255 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60785.715 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   35035.623 ±(99.9%) 382.666 ops/s [Average]
[info]   (min, avg, max) = (34890.046, 35035.623, 35158.526), stdev = 99.377
[info]   CI (99.9%): [34652.957, 35418.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1735.255 ±(99.9%) 15.411 MB/sec [Average]
[info]   (min, avg, max) = (1729.603, 1735.255, 1739.228), stdev = 4.002
[info]   CI (99.9%): [1719.844, 1750.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   77954.263 ±(99.9%) 1184.319 B/op [Average]
[info]   (min, avg, max) = (77640.061, 77954.263, 78461.659), stdev = 307.564
[info]   CI (99.9%): [76769.943, 79138.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.682 ±(99.9%) 7.789 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.682, 4.659), stdev = 2.023
[info]   CI (99.9%): [≈ 0, 9.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1621.704 ±(99.9%) 1425.074 MB/sec [Average]
[info]   (min, avg, max) = (1348.653, 1621.704, 2028.561), stdev = 370.087
[info]   CI (99.9%): [196.630, 3046.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   72883.775 ±(99.9%) 64724.760 B/op [Average]
[info]   (min, avg, max) = (60502.224, 72883.775, 91525.418), stdev = 16808.815
[info]   CI (99.9%): [8159.016, 137608.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.59% complete, ETA 01:33:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15564.733 ops/s
[info] # Warmup Iteration   2: 29814.240 ops/s
[info] # Warmup Iteration   3: 30597.125 ops/s
[info] # Warmup Iteration   4: 30122.050 ops/s
[info] # Warmup Iteration   5: 30386.529 ops/s
[info] Iteration   1: 30674.637 ops/s
[info]                  ·gc.alloc.rate:      350.264 MB/sec
[info]                  ·gc.alloc.rate.norm: 17976.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 30424.883 ops/s
[info]                  ·gc.alloc.rate:                   366.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              18968.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34785.983 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 30637.543 ops/s
[info]                  ·gc.alloc.rate:      350.476 MB/sec
[info]                  ·gc.alloc.rate.norm: 18007.740 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 30589.533 ops/s
[info]                  ·gc.alloc.rate:                   368.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              18950.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34599.512 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 30701.333 ops/s
[info]                  ·gc.alloc.rate:      350.581 MB/sec
[info]                  ·gc.alloc.rate.norm: 17976.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   30605.586 ±(99.9%) 421.237 ops/s [Average]
[info]   (min, avg, max) = (30424.883, 30605.586, 30701.333), stdev = 109.394
[info]   CI (99.9%): [30184.349, 31026.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   357.262 ±(99.9%) 36.032 MB/sec [Average]
[info]   (min, avg, max) = (350.264, 357.262, 368.271), stdev = 9.357
[info]   CI (99.9%): [321.230, 393.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   18375.774 ±(99.9%) 2052.827 B/op [Average]
[info]   (min, avg, max) = (17976.013, 18375.774, 18968.961), stdev = 533.113
[info]   CI (99.9%): [16322.947, 20428.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.595 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.354), stdev = 0.155
[info]   CI (99.9%): [≈ 0, 0.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.072 ±(99.9%) 30.639 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.072, 18.208), stdev = 7.957
[info]   CI (99.9%): [≈ 0, 34.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   268.979 ±(99.9%) 1418.248 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.979, 672.498), stdev = 368.314
[info]   CI (99.9%): [≈ 0, 1687.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13877.099 ±(99.9%) 73170.378 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13877.099, 34785.983), stdev = 19002.115
[info]   CI (99.9%): [≈ 0, 87047.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.82% complete, ETA 01:33:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14343.846 ops/s
[info] # Warmup Iteration   2: 27354.323 ops/s
[info] # Warmup Iteration   3: 30073.297 ops/s
[info] # Warmup Iteration   4: 29722.530 ops/s
[info] # Warmup Iteration   5: 29858.293 ops/s
[info] Iteration   1: 29683.744 ops/s
[info]                  ·gc.alloc.rate:      339.647 MB/sec
[info]                  ·gc.alloc.rate.norm: 18004.982 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 29906.905 ops/s
[info]                  ·gc.alloc.rate:                   347.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              18276.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35440.971 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 30072.656 ops/s
[info]                  ·gc.alloc.rate:      336.310 MB/sec
[info]                  ·gc.alloc.rate.norm: 17600.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 30003.354 ops/s
[info]                  ·gc.alloc.rate:                   348.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              18267.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35326.413 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 30092.797 ops/s
[info]                  ·gc.alloc.rate:      336.466 MB/sec
[info]                  ·gc.alloc.rate.norm: 17600.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   29951.891 ±(99.9%) 641.493 ops/s [Average]
[info]   (min, avg, max) = (29683.744, 29951.891, 30092.797), stdev = 166.594
[info]   CI (99.9%): [29310.398, 30593.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   341.573 ±(99.9%) 22.251 MB/sec [Average]
[info]   (min, avg, max) = (336.310, 341.573, 348.212), stdev = 5.778
[info]   CI (99.9%): [319.322, 363.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   17949.652 ±(99.9%) 1298.600 B/op [Average]
[info]   (min, avg, max) = (17600.014, 17949.652, 18276.201), stdev = 337.242
[info]   CI (99.9%): [16651.051, 19248.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.187 ±(99.9%) 1.613 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.187, 0.937), stdev = 0.419
[info]   CI (99.9%): [≈ 0, 1.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9.827 ±(99.9%) 84.617 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.827, 49.137), stdev = 21.975
[info]   CI (99.9%): [≈ 0, 94.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   269.349 ±(99.9%) 1420.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.349, 673.403), stdev = 368.822
[info]   CI (99.9%): [≈ 0, 1689.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14153.477 ±(99.9%) 74627.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14153.477, 35440.971), stdev = 19380.489
[info]   CI (99.9%): [≈ 0, 88780.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.06% complete, ETA 01:33:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25402.672 ops/s
[info] # Warmup Iteration   2: 33299.567 ops/s
[info] # Warmup Iteration   3: 33422.405 ops/s
[info] # Warmup Iteration   4: 33318.693 ops/s
[info] # Warmup Iteration   5: 33078.299 ops/s
[info] Iteration   1: 33655.943 ops/s
[info]                  ·gc.alloc.rate:      304.165 MB/sec
[info]                  ·gc.alloc.rate.norm: 14223.971 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 33543.082 ops/s
[info]                  ·gc.alloc.rate:                   316.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              14848.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24004.601 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 33720.240 ops/s
[info]                  ·gc.alloc.rate:      304.578 MB/sec
[info]                  ·gc.alloc.rate.norm: 14216.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 33620.718 ops/s
[info]                  ·gc.alloc.rate:                   317.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              14883.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31557.691 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 33733.093 ops/s
[info]                  ·gc.alloc.rate:      304.646 MB/sec
[info]                  ·gc.alloc.rate.norm: 14216.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   33654.615 ±(99.9%) 298.616 ops/s [Average]
[info]   (min, avg, max) = (33543.082, 33654.615, 33733.093), stdev = 77.550
[info]   CI (99.9%): [33355.999, 33953.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   309.570 ±(99.9%) 26.996 MB/sec [Average]
[info]   (min, avg, max) = (304.165, 309.570, 317.888), stdev = 7.011
[info]   CI (99.9%): [282.574, 336.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   14477.657 ±(99.9%) 1366.467 B/op [Average]
[info]   (min, avg, max) = (14216.012, 14477.657, 14883.508), stdev = 354.867
[info]   CI (99.9%): [13111.191, 15844.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.098 ±(99.9%) 0.842 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.098, 0.489), stdev = 0.219
[info]   CI (99.9%): [≈ 0, 0.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   237.159 ±(99.9%) 1269.829 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 237.159, 674.023), stdev = 329.771
[info]   CI (99.9%): [≈ 0, 1506.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11112.458 ±(99.9%) 59488.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11112.458, 31557.691), stdev = 15448.908
[info]   CI (99.9%): [≈ 0, 70600.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 19.29% complete, ETA 01:33:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23849.171 ops/s
[info] # Warmup Iteration   2: 31601.458 ops/s
[info] # Warmup Iteration   3: 33422.931 ops/s
[info] # Warmup Iteration   4: 32869.564 ops/s
[info] # Warmup Iteration   5: 33497.678 ops/s
[info] Iteration   1: 33217.363 ops/s
[info]                  ·gc.alloc.rate:                   338.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              16057.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24240.883 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 33426.844 ops/s
[info]                  ·gc.alloc.rate:      338.142 MB/sec
[info]                  ·gc.alloc.rate.norm: 15918.334 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 33453.662 ops/s
[info]                  ·gc.alloc.rate:                   346.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              16324.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31747.489 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 32891.395 ops/s
[info]                  ·gc.alloc.rate:      323.645 MB/sec
[info]                  ·gc.alloc.rate.norm: 15488.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 33434.434 ops/s
[info]                  ·gc.alloc.rate:                   345.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              16285.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31765.528 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   33284.740 ±(99.9%) 924.147 ops/s [Average]
[info]   (min, avg, max) = (32891.395, 33284.740, 33453.662), stdev = 239.998
[info]   CI (99.9%): [32360.592, 34208.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   338.713 ±(99.9%) 35.901 MB/sec [Average]
[info]   (min, avg, max) = (323.645, 338.713, 346.965), stdev = 9.323
[info]   CI (99.9%): [302.813, 374.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16014.837 ±(99.9%) 1303.305 B/op [Average]
[info]   (min, avg, max) = (15488.012, 16014.837, 16324.905), stdev = 338.464
[info]   CI (99.9%): [14711.532, 17318.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.545 ±(99.9%) 4.696 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.545, 2.727), stdev = 1.219
[info]   CI (99.9%): [≈ 0, 5.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   25.674 ±(99.9%) 221.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.674, 128.371), stdev = 57.409
[info]   CI (99.9%): [≈ 0, 246.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   372.219 ±(99.9%) 1333.307 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 372.219, 674.753), stdev = 346.256
[info]   CI (99.9%): [≈ 0, 1705.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   17550.780 ±(99.9%) 62814.580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17550.780, 31765.528), stdev = 16312.747
[info]   CI (99.9%): [≈ 0, 80365.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.53% complete, ETA 01:32:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4084.908 ops/s
[info] # Warmup Iteration   2: 18630.182 ops/s
[info] # Warmup Iteration   3: 20430.521 ops/s
[info] # Warmup Iteration   4: 20618.992 ops/s
[info] # Warmup Iteration   5: 20710.130 ops/s
[info] Iteration   1: 20637.581 ops/s
[info]                  ·gc.alloc.rate:                   728.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              55579.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51412.738 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 20627.737 ops/s
[info]                  ·gc.alloc.rate:                   754.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              57559.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51435.166 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 20857.374 ops/s
[info]                  ·gc.alloc.rate:                   742.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              56048.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50918.340 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 20742.947 ops/s
[info]                  ·gc.alloc.rate:                   742.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              56333.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51195.657 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 20774.210 ops/s
[info]                  ·gc.alloc.rate:                   750.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              56857.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51121.739 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   20727.970 ±(99.9%) 371.964 ops/s [Average]
[info]   (min, avg, max) = (20627.737, 20727.970, 20857.374), stdev = 96.598
[info]   CI (99.9%): [20356.006, 21099.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   743.725 ±(99.9%) 37.678 MB/sec [Average]
[info]   (min, avg, max) = (728.780, 743.725, 754.367), stdev = 9.785
[info]   CI (99.9%): [706.047, 781.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   56475.454 ±(99.9%) 2936.517 B/op [Average]
[info]   (min, avg, max) = (55579.037, 56475.454, 57559.085), stdev = 762.604
[info]   CI (99.9%): [53538.937, 59411.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.262 ±(99.9%) 7.918 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.262, 4.731), stdev = 2.056
[info]   CI (99.9%): [≈ 0, 9.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   674.470 ±(99.9%) 1.211 MB/sec [Average]
[info]   (min, avg, max) = (674.107, 674.470, 674.745), stdev = 0.315
[info]   CI (99.9%): [673.259, 675.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   51216.728 ±(99.9%) 827.301 B/op [Average]
[info]   (min, avg, max) = (50918.340, 51216.728, 51435.166), stdev = 214.847
[info]   CI (99.9%): [50389.427, 52044.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.76% complete, ETA 01:32:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7481.050 ops/s
[info] # Warmup Iteration   2: 17459.382 ops/s
[info] # Warmup Iteration   3: 18691.390 ops/s
[info] # Warmup Iteration   4: 18689.215 ops/s
[info] # Warmup Iteration   5: 18736.685 ops/s
[info] Iteration   1: 18720.058 ops/s
[info]                  ·gc.alloc.rate:                   546.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              45966.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.329 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56620.752 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 18316.698 ops/s
[info]                  ·gc.alloc.rate:                   546.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              46990.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57866.285 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 18858.618 ops/s
[info]                  ·gc.alloc.rate:      534.338 MB/sec
[info]                  ·gc.alloc.rate.norm: 44592.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 18816.960 ops/s
[info]                  ·gc.alloc.rate:                   546.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              45678.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56325.930 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 18768.324 ops/s
[info]                  ·gc.alloc.rate:                   552.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              46310.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.651 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56500.886 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   18696.132 ±(99.9%) 840.895 ops/s [Average]
[info]   (min, avg, max) = (18316.698, 18696.132, 18858.618), stdev = 218.378
[info]   CI (99.9%): [17855.236, 19537.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   545.204 ±(99.9%) 25.236 MB/sec [Average]
[info]   (min, avg, max) = (534.338, 545.204, 552.155), stdev = 6.554
[info]   CI (99.9%): [519.968, 570.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   45907.637 ±(99.9%) 3401.696 B/op [Average]
[info]   (min, avg, max) = (44592.022, 45907.637, 46990.441), stdev = 883.410
[info]   CI (99.9%): [42505.940, 49309.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.204 ±(99.9%) 1.580 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.204, 0.937), stdev = 0.410
[info]   CI (99.9%): [≈ 0, 1.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17.147 ±(99.9%) 132.875 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.147, 78.757), stdev = 34.507
[info]   CI (99.9%): [≈ 0, 150.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   538.746 ±(99.9%) 1159.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.746, 673.651), stdev = 301.168
[info]   CI (99.9%): [≈ 0, 1698.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   45462.770 ±(99.9%) 97890.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45462.770, 57866.285), stdev = 25421.740
[info]   CI (99.9%): [≈ 0, 143352.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.00% complete, ETA 01:32:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82608.081 ops/s
[info] # Warmup Iteration   2: 98023.998 ops/s
[info] # Warmup Iteration   3: 105370.458 ops/s
[info] # Warmup Iteration   4: 104290.023 ops/s
[info] # Warmup Iteration   5: 105431.961 ops/s
[info] Iteration   1: 105099.069 ops/s
[info]                  ·gc.alloc.rate:                   288.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              4314.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7660.829 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 105873.333 ops/s
[info]                  ·gc.alloc.rate:      275.553 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 104593.444 ops/s
[info]                  ·gc.alloc.rate:                   282.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              4251.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7698.104 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 105390.969 ops/s
[info]                  ·gc.alloc.rate:      274.770 MB/sec
[info]                  ·gc.alloc.rate.norm: 4103.629 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 105130.140 ops/s
[info]                  ·gc.alloc.rate:                   289.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              4340.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10092.146 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   105217.391 ±(99.9%) 1797.174 ops/s [Average]
[info]   (min, avg, max) = (104593.444, 105217.391, 105873.333), stdev = 466.720
[info]   CI (99.9%): [103420.217, 107014.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   282.172 ±(99.9%) 26.804 MB/sec [Average]
[info]   (min, avg, max) = (274.770, 282.172, 289.925), stdev = 6.961
[info]   CI (99.9%): [255.369, 308.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4221.344 ±(99.9%) 445.150 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4221.344, 4340.971), stdev = 115.604
[info]   CI (99.9%): [3776.194, 4666.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.063 ±(99.9%) 0.539 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.313), stdev = 0.140
[info]   CI (99.9%): [≈ 0, 0.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   339.423 ±(99.9%) 1220.158 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.423, 674.036), stdev = 316.871
[info]   CI (99.9%): [≈ 0, 1559.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5090.216 ±(99.9%) 18290.461 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5090.216, 10092.146), stdev = 4749.975
[info]   CI (99.9%): [≈ 0, 23380.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.24% complete, ETA 01:32:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2626.391 ops/s
[info] # Warmup Iteration   2: 13774.941 ops/s
[info] # Warmup Iteration   3: 16362.269 ops/s
[info] # Warmup Iteration   4: 16374.135 ops/s
[info] # Warmup Iteration   5: 15583.956 ops/s
[info] Iteration   1: 16046.068 ops/s
[info]                  ·gc.alloc.rate:                   1003.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.943 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66119.940 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 16313.790 ops/s
[info]                  ·gc.alloc.rate:                   1026.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              99046.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130067.894 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16205.714 ops/s
[info]                  ·gc.alloc.rate:                   1023.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              99393.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65467.266 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 16442.337 ops/s
[info]                  ·gc.alloc.rate:                   1025.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              98195.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64587.589 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 16419.114 ops/s
[info]                  ·gc.alloc.rate:                   1032.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              98979.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.486 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129388.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   16285.405 ±(99.9%) 629.625 ops/s [Average]
[info]   (min, avg, max) = (16046.068, 16285.405, 16442.337), stdev = 163.512
[info]   CI (99.9%): [15655.780, 16915.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1022.358 ±(99.9%) 41.945 MB/sec [Average]
[info]   (min, avg, max) = (1003.783, 1022.358, 1032.334), stdev = 10.893
[info]   CI (99.9%): [980.413, 1064.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   98819.091 ±(99.9%) 1837.817 B/op [Average]
[info]   (min, avg, max) = (98195.477, 98819.091, 99393.513), stdev = 477.275
[info]   CI (99.9%): [96981.274, 100656.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.801 ±(99.9%) 4.222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.801, 2.008), stdev = 1.096
[info]   CI (99.9%): [≈ 0, 5.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   944.046 ±(99.9%) 1422.652 MB/sec [Average]
[info]   (min, avg, max) = (673.943, 944.046, 1349.486), stdev = 369.458
[info]   CI (99.9%): [≈ 0, 2366.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   91126.139 ±(99.9%) 135710.117 B/op [Average]
[info]   (min, avg, max) = (64587.589, 91126.139, 130067.894), stdev = 35243.486
[info]   CI (99.9%): [≈ 0, 226836.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.47% complete, ETA 01:31:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17391.436 ops/s
[info] # Warmup Iteration   2: 41557.747 ops/s
[info] # Warmup Iteration   3: 42304.791 ops/s
[info] # Warmup Iteration   4: 42010.559 ops/s
[info] # Warmup Iteration   5: 42337.442 ops/s
[info] Iteration   1: 42539.769 ops/s
[info]                  ·gc.alloc.rate:                   658.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              24372.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24965.508 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 42526.586 ops/s
[info]                  ·gc.alloc.rate:                   662.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              24533.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24971.965 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 42482.369 ops/s
[info]                  ·gc.alloc.rate:                   659.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              24430.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24998.999 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 42565.175 ops/s
[info]                  ·gc.alloc.rate:                   662.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              24515.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24950.262 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 42615.007 ops/s
[info]                  ·gc.alloc.rate:                   671.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              24810.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24932.709 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   42545.781 ±(99.9%) 188.584 ops/s [Average]
[info]   (min, avg, max) = (42482.369, 42545.781, 42615.007), stdev = 48.975
[info]   CI (99.9%): [42357.197, 42734.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   663.126 ±(99.9%) 20.023 MB/sec [Average]
[info]   (min, avg, max) = (658.677, 663.126, 671.775), stdev = 5.200
[info]   CI (99.9%): [643.104, 683.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   24532.487 ±(99.9%) 648.113 B/op [Average]
[info]   (min, avg, max) = (24372.973, 24532.487, 24810.306), stdev = 168.313
[info]   CI (99.9%): [23884.373, 25180.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.462 ±(99.9%) 2.652 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.462, 1.539), stdev = 0.689
[info]   CI (99.9%): [≈ 0, 3.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   674.783 ±(99.9%) 0.736 MB/sec [Average]
[info]   (min, avg, max) = (674.581, 674.783, 675.089), stdev = 0.191
[info]   CI (99.9%): [674.047, 675.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24963.889 ±(99.9%) 95.464 B/op [Average]
[info]   (min, avg, max) = (24932.709, 24963.889, 24998.999), stdev = 24.792
[info]   CI (99.9%): [24868.425, 25059.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.71% complete, ETA 01:31:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28735.932 ops/s
[info] # Warmup Iteration   2: 52989.769 ops/s
[info] # Warmup Iteration   3: 56008.207 ops/s
[info] # Warmup Iteration   4: 56554.367 ops/s
[info] # Warmup Iteration   5: 56375.537 ops/s
[info] Iteration   1: 54694.830 ops/s
[info]                  ·gc.alloc.rate:                   778.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              22396.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19398.196 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 56760.461 ops/s
[info]                  ·gc.alloc.rate:                   809.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              22449.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18692.906 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 55794.183 ops/s
[info]                  ·gc.alloc.rate:                   799.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              22568.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19016.503 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 56584.858 ops/s
[info]                  ·gc.alloc.rate:                   804.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              22392.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18759.974 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 56866.399 ops/s
[info]                  ·gc.alloc.rate:                   805.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              22287.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18665.973 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   56140.146 ±(99.9%) 3507.382 ops/s [Average]
[info]   (min, avg, max) = (54694.830, 56140.146, 56866.399), stdev = 910.856
[info]   CI (99.9%): [52632.765, 59647.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   799.573 ±(99.9%) 47.979 MB/sec [Average]
[info]   (min, avg, max) = (778.158, 799.573, 809.652), stdev = 12.460
[info]   CI (99.9%): [751.594, 847.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22418.750 ±(99.9%) 392.638 B/op [Average]
[info]   (min, avg, max) = (22287.794, 22418.750, 22568.017), stdev = 101.967
[info]   CI (99.9%): [22026.113, 22811.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.346 ±(99.9%) 1.988 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.346, 1.154), stdev = 0.516
[info]   CI (99.9%): [≈ 0, 2.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.183 ±(99.9%) 0.702 MB/sec [Average]
[info]   (min, avg, max) = (673.997, 674.183, 674.388), stdev = 0.182
[info]   CI (99.9%): [673.481, 674.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18906.710 ±(99.9%) 1184.990 B/op [Average]
[info]   (min, avg, max) = (18665.973, 18906.710, 19398.196), stdev = 307.738
[info]   CI (99.9%): [17721.721, 20091.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.94% complete, ETA 01:31:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132758.843 ops/s
[info] # Warmup Iteration   2: 165908.411 ops/s
[info] # Warmup Iteration   3: 170947.145 ops/s
[info] # Warmup Iteration   4: 169585.773 ops/s
[info] # Warmup Iteration   5: 170759.219 ops/s
[info] Iteration   1: 169820.750 ops/s
[info]                  ·gc.alloc.rate:                   277.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              2571.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.559 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4741.531 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 170614.964 ops/s
[info]                  ·gc.alloc.rate:                   286.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              2646.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4712.315 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 171397.552 ops/s
[info]                  ·gc.alloc.rate:      271.986 MB/sec
[info]                  ·gc.alloc.rate.norm: 2497.074 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 171476.493 ops/s
[info]                  ·gc.alloc.rate:      272.055 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 171021.808 ops/s
[info]                  ·gc.alloc.rate:                   289.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              2667.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6203.359 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   170866.313 ±(99.9%) 2608.147 ops/s [Average]
[info]   (min, avg, max) = (169820.750, 170866.313, 171476.493), stdev = 677.328
[info]   CI (99.9%): [168258.166, 173474.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   279.666 ±(99.9%) 32.186 MB/sec [Average]
[info]   (min, avg, max) = (271.986, 279.666, 289.875), stdev = 8.359
[info]   CI (99.9%): [247.479, 311.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2575.732 ±(99.9%) 310.547 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2575.732, 2667.910), stdev = 80.648
[info]   CI (99.9%): [2265.185, 2886.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.019 ±(99.9%) 0.165 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.096), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   339.323 ±(99.9%) 1219.885 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.323, 674.010), stdev = 316.800
[info]   CI (99.9%): [≈ 0, 1559.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3131.441 ±(99.9%) 11249.562 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3131.441, 6203.359), stdev = 2921.475
[info]   CI (99.9%): [≈ 0, 14381.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 21.18% complete, ETA 01:31:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136598.046 ops/s
[info] # Warmup Iteration   2: 166903.084 ops/s
[info] # Warmup Iteration   3: 176671.492 ops/s
[info] # Warmup Iteration   4: 177025.462 ops/s
[info] # Warmup Iteration   5: 176640.502 ops/s
[info] Iteration   1: 176580.380 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 176812.355 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 176939.445 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 176958.940 ops/s
[info]                  ·gc.alloc.rate:      0.002 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 176788.895 ops/s
[info]                  ·gc.alloc.rate:      0.120 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.072 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   176816.003 ±(99.9%) 583.773 ops/s [Average]
[info]   (min, avg, max) = (176580.380, 176816.003, 176958.940), stdev = 151.604
[info]   CI (99.9%): [176232.230, 177399.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.025 ±(99.9%) 0.206 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.025, 0.120), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.220 ±(99.9%) 1.834 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.220, 1.072), stdev = 0.476
[info]   CI (99.9%): [≈ 0, 2.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.41% complete, ETA 01:30:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23089.170 ops/s
[info] # Warmup Iteration   2: 50106.357 ops/s
[info] # Warmup Iteration   3: 50576.336 ops/s
[info] # Warmup Iteration   4: 51646.347 ops/s
[info] # Warmup Iteration   5: 52004.276 ops/s
[info] Iteration   1: 51572.454 ops/s
[info]                  ·gc.alloc.rate:                   819.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              25003.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20552.740 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 52023.232 ops/s
[info]                  ·gc.alloc.rate:                   834.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              25259.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20374.982 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 51974.198 ops/s
[info]                  ·gc.alloc.rate:                   837.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              25359.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20394.189 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 52052.769 ops/s
[info]                  ·gc.alloc.rate:                   853.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              25803.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40767.549 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 52018.302 ops/s
[info]                  ·gc.alloc.rate:                   827.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              25050.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20417.251 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   51928.191 ±(99.9%) 773.343 ops/s [Average]
[info]   (min, avg, max) = (51572.454, 51928.191, 52052.769), stdev = 200.835
[info]   CI (99.9%): [51154.848, 52701.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   834.566 ±(99.9%) 48.501 MB/sec [Average]
[info]   (min, avg, max) = (819.414, 834.566, 853.315), stdev = 12.596
[info]   CI (99.9%): [786.065, 883.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   25295.334 ±(99.9%) 1231.777 B/op [Average]
[info]   (min, avg, max) = (25003.131, 25295.334, 25803.923), stdev = 319.888
[info]   CI (99.9%): [24063.557, 26527.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.884 ±(99.9%) 4.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.884, 2.518), stdev = 1.054
[info]   CI (99.9%): [≈ 0, 4.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   808.659 ±(99.9%) 1161.297 MB/sec [Average]
[info]   (min, avg, max) = (673.432, 808.659, 1348.150), stdev = 301.585
[info]   CI (99.9%): [≈ 0, 1969.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   24501.342 ±(99.9%) 35015.265 B/op [Average]
[info]   (min, avg, max) = (20374.982, 24501.342, 40767.549), stdev = 9093.353
[info]   CI (99.9%): [≈ 0, 59516.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.65% complete, ETA 01:30:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19049.096 ops/s
[info] # Warmup Iteration   2: 89766.836 ops/s
[info] # Warmup Iteration   3: 94328.806 ops/s
[info] # Warmup Iteration   4: 95188.365 ops/s
[info] # Warmup Iteration   5: 95251.559 ops/s
[info] Iteration   1: 95030.484 ops/s
[info]                  ·gc.alloc.rate:                   1957.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              32428.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.296 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33565.773 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 95375.356 ops/s
[info]                  ·gc.alloc.rate:                   1967.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              32475.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33482.849 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 95060.964 ops/s
[info]                  ·gc.alloc.rate:                   1977.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              32750.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33637.898 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 95433.722 ops/s
[info]                  ·gc.alloc.rate:                   1987.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              32771.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.887 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33539.404 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 92851.208 ops/s
[info]                  ·gc.alloc.rate:                   1918.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              32534.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23000.337 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   94750.347 ±(99.9%) 4146.969 ops/s [Average]
[info]   (min, avg, max) = (92851.208, 94750.347, 95433.722), stdev = 1076.955
[info]   CI (99.9%): [90603.377, 98897.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1961.959 ±(99.9%) 101.877 MB/sec [Average]
[info]   (min, avg, max) = (1918.974, 1961.959, 1987.318), stdev = 26.457
[info]   CI (99.9%): [1860.083, 2063.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32591.993 ±(99.9%) 612.797 B/op [Average]
[info]   (min, avg, max) = (32428.103, 32591.993, 32771.466), stdev = 159.141
[info]   CI (99.9%): [31979.196, 33204.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.963 ±(99.9%) 2.177 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.963, 1.379), stdev = 0.565
[info]   CI (99.9%): [≈ 0, 3.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1895.466 ±(99.9%) 1159.910 MB/sec [Average]
[info]   (min, avg, max) = (1356.642, 1895.466, 2033.887), stdev = 301.225
[info]   CI (99.9%): [735.556, 3055.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   31445.252 ±(99.9%) 18179.584 B/op [Average]
[info]   (min, avg, max) = (23000.337, 31445.252, 33637.898), stdev = 4721.180
[info]   CI (99.9%): [13265.669, 49624.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 4.000), stdev = 1.140
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.88% complete, ETA 01:30:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30225.770 ops/s
[info] # Warmup Iteration   2: 118277.124 ops/s
[info] # Warmup Iteration   3: 117959.603 ops/s
[info] # Warmup Iteration   4: 118246.559 ops/s
[info] # Warmup Iteration   5: 119996.863 ops/s
[info] Iteration   1: 119526.906 ops/s
[info]                  ·gc.alloc.rate:                   1621.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              21360.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26651.204 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 120080.020 ops/s
[info]                  ·gc.alloc.rate:                   1611.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              21114.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17697.596 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 120177.709 ops/s
[info]                  ·gc.alloc.rate:                   1613.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              21134.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17700.467 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 119714.400 ops/s
[info]                  ·gc.alloc.rate:                   1620.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              21310.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26683.574 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 120039.441 ops/s
[info]                  ·gc.alloc.rate:                   1611.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              21132.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17755.747 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   119907.695 ±(99.9%) 1058.618 ops/s [Average]
[info]   (min, avg, max) = (119526.906, 119907.695, 120177.709), stdev = 274.920
[info]   CI (99.9%): [118849.077, 120966.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1615.811 ±(99.9%) 19.937 MB/sec [Average]
[info]   (min, avg, max) = (1611.048, 1615.811, 1621.995), stdev = 5.178
[info]   CI (99.9%): [1595.874, 1635.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21210.647 ±(99.9%) 445.859 B/op [Average]
[info]   (min, avg, max) = (21114.105, 21210.647, 21360.852), stdev = 115.788
[info]   CI (99.9%): [20764.788, 21656.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.125), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.656 ±(99.9%) 2.301 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.656, 1.637), stdev = 0.598
[info]   CI (99.9%): [≈ 0, 2.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1621.790 ±(99.9%) 1422.761 MB/sec [Average]
[info]   (min, avg, max) = (1350.362, 1621.790, 2029.360), stdev = 369.487
[info]   CI (99.9%): [199.029, 3044.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21297.718 ±(99.9%) 18875.414 B/op [Average]
[info]   (min, avg, max) = (17697.596, 21297.718, 26683.574), stdev = 4901.885
[info]   CI (99.9%): [2422.303, 40173.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.12% complete, ETA 01:29:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90975.418 ops/s
[info] # Warmup Iteration   2: 138516.279 ops/s
[info] # Warmup Iteration   3: 149412.900 ops/s
[info] # Warmup Iteration   4: 150151.382 ops/s
[info] # Warmup Iteration   5: 149230.598 ops/s
[info] Iteration   1: 150587.383 ops/s
[info]                  ·gc.alloc.rate:                   1408.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              14725.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.454 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14076.995 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 149678.037 ops/s
[info]                  ·gc.alloc.rate:                   1405.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              14783.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14162.942 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 150079.897 ops/s
[info]                  ·gc.alloc.rate:                   1420.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              14895.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14131.714 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 149916.241 ops/s
[info]                  ·gc.alloc.rate:                   1404.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              14748.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.265 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14153.881 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 150450.933 ops/s
[info]                  ·gc.alloc.rate:                   1410.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              14753.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14118.059 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   150142.498 ±(99.9%) 1445.774 ops/s [Average]
[info]   (min, avg, max) = (149678.037, 150142.498, 150587.383), stdev = 375.463
[info]   CI (99.9%): [148696.724, 151588.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1409.971 ±(99.9%) 23.981 MB/sec [Average]
[info]   (min, avg, max) = (1404.875, 1409.971, 1420.404), stdev = 6.228
[info]   CI (99.9%): [1385.990, 1433.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14781.220 ±(99.9%) 258.013 B/op [Average]
[info]   (min, avg, max) = (14725.875, 14781.220, 14895.345), stdev = 67.005
[info]   CI (99.9%): [14523.207, 15039.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.480 ±(99.9%) 1.247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.480, 0.874), stdev = 0.324
[info]   CI (99.9%): [≈ 0, 1.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1347.727 ±(99.9%) 4.888 MB/sec [Average]
[info]   (min, avg, max) = (1346.454, 1347.727, 1349.603), stdev = 1.269
[info]   CI (99.9%): [1342.839, 1352.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14128.718 ±(99.9%) 130.614 B/op [Average]
[info]   (min, avg, max) = (14076.995, 14128.718, 14162.942), stdev = 33.920
[info]   CI (99.9%): [13998.104, 14259.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.35% complete, ETA 01:29:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2194.839 ops/s
[info] # Warmup Iteration   2: 49131.078 ops/s
[info] # Warmup Iteration   3: 53151.503 ops/s
[info] # Warmup Iteration   4: 53340.302 ops/s
[info] # Warmup Iteration   5: 52644.606 ops/s
[info] Iteration   1: 53863.369 ops/s
[info]                  ·gc.alloc.rate:                   2830.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              82709.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705.544 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79060.692 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 53779.563 ops/s
[info]                  ·gc.alloc.rate:                   2824.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              82665.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2709.488 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79299.644 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 53889.099 ops/s
[info]                  ·gc.alloc.rate:                   2871.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              83890.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79257.475 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 53597.251 ops/s
[info]                  ·gc.alloc.rate:                   2853.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              83808.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79768.924 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 53484.903 ops/s
[info]                  ·gc.alloc.rate:                   2853.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              83946.952 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720.255 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80033.944 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   53722.837 ±(99.9%) 675.221 ops/s [Average]
[info]   (min, avg, max) = (53484.903, 53722.837, 53889.099), stdev = 175.353
[info]   CI (99.9%): [53047.616, 54398.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2846.696 ±(99.9%) 73.847 MB/sec [Average]
[info]   (min, avg, max) = (2824.505, 2846.696, 2871.633), stdev = 19.178
[info]   CI (99.9%): [2772.848, 2920.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83404.186 ±(99.9%) 2526.277 B/op [Average]
[info]   (min, avg, max) = (82665.880, 83404.186, 83946.952), stdev = 656.066
[info]   CI (99.9%): [80877.908, 85930.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.707 ±(99.9%) 4.807 B/op [Average]
[info]   (min, avg, max) = (0.608, 1.707, 3.655), stdev = 1.248
[info]   CI (99.9%): [≈ 0, 6.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2712.894 ±(99.9%) 21.978 MB/sec [Average]
[info]   (min, avg, max) = (2705.544, 2712.894, 2720.255), stdev = 5.708
[info]   CI (99.9%): [2690.916, 2734.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   79484.136 ±(99.9%) 1549.987 B/op [Average]
[info]   (min, avg, max) = (79060.692, 79484.136, 80033.944), stdev = 402.527
[info]   CI (99.9%): [77934.149, 81034.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.59% complete, ETA 01:29:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80114.679 ops/s
[info] # Warmup Iteration   2: 161937.685 ops/s
[info] # Warmup Iteration   3: 161854.142 ops/s
[info] # Warmup Iteration   4: 167504.567 ops/s
[info] # Warmup Iteration   5: 166757.298 ops/s
[info] Iteration   1: 168091.228 ops/s
[info]                  ·gc.alloc.rate:                   599.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              5615.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6311.951 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 170513.332 ops/s
[info]                  ·gc.alloc.rate:                   608.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              5616.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6228.641 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 170694.695 ops/s
[info]                  ·gc.alloc.rate:                   605.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              5585.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6221.563 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 169902.593 ops/s
[info]                  ·gc.alloc.rate:                   612.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              5673.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6250.853 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 168585.872 ops/s
[info]                  ·gc.alloc.rate:                   599.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              5595.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6299.416 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   169557.544 ±(99.9%) 4482.293 ops/s [Average]
[info]   (min, avg, max) = (168091.228, 169557.544, 170694.695), stdev = 1164.037
[info]   CI (99.9%): [165075.251, 174039.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   605.122 ±(99.9%) 21.513 MB/sec [Average]
[info]   (min, avg, max) = (599.302, 605.122, 612.357), stdev = 5.587
[info]   CI (99.9%): [583.609, 626.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5617.561 ±(99.9%) 130.827 B/op [Average]
[info]   (min, avg, max) = (5585.855, 5617.561, 5673.540), stdev = 33.975
[info]   CI (99.9%): [5486.734, 5748.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.162 ±(99.9%) 1.182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.162, 0.708), stdev = 0.307
[info]   CI (99.9%): [≈ 0, 1.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.518 ±(99.9%) 11.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.518, 6.627), stdev = 2.873
[info]   CI (99.9%): [≈ 0, 12.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   674.568 ±(99.9%) 0.761 MB/sec [Average]
[info]   (min, avg, max) = (674.215, 674.568, 674.667), stdev = 0.198
[info]   CI (99.9%): [673.807, 675.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6262.485 ±(99.9%) 158.370 B/op [Average]
[info]   (min, avg, max) = (6221.563, 6262.485, 6311.951), stdev = 41.128
[info]   CI (99.9%): [6104.115, 6420.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.82% complete, ETA 01:29:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 170086.924 ops/s
[info] # Warmup Iteration   2: 366185.754 ops/s
[info] # Warmup Iteration   3: 372676.434 ops/s
[info] # Warmup Iteration   4: 364853.494 ops/s
[info] # Warmup Iteration   5: 358409.257 ops/s
[info] Iteration   1: 373911.880 ops/s
[info]                  ·gc.alloc.rate:                   392.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              1651.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2834.709 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 376106.964 ops/s
[info]                  ·gc.alloc.rate:      380.651 MB/sec
[info]                  ·gc.alloc.rate.norm: 1593.145 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 370967.073 ops/s
[info]                  ·gc.alloc.rate:                   398.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              1689.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2857.248 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 377520.131 ops/s
[info]                  ·gc.alloc.rate:      381.883 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 378159.713 ops/s
[info]                  ·gc.alloc.rate:                   404.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              1681.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2804.361 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   375333.152 ±(99.9%) 11301.127 ops/s [Average]
[info]   (min, avg, max) = (370967.073, 375333.152, 378159.713), stdev = 2934.867
[info]   CI (99.9%): [364032.026, 386634.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   391.425 ±(99.9%) 39.139 MB/sec [Average]
[info]   (min, avg, max) = (380.651, 391.425, 404.018), stdev = 10.164
[info]   CI (99.9%): [352.286, 430.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1641.631 ±(99.9%) 180.972 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1641.631, 1689.885), stdev = 46.998
[info]   CI (99.9%): [1460.659, 1822.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.888 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.520), stdev = 0.231
[info]   CI (99.9%): [≈ 0, 0.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.459 ±(99.9%) 3.768 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.459, 2.208), stdev = 0.978
[info]   CI (99.9%): [≈ 0, 4.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   404.105 ±(99.9%) 1420.485 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.105, 673.788), stdev = 368.896
[info]   CI (99.9%): [≈ 0, 1824.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1699.264 ±(99.9%) 5973.588 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1699.264, 2857.248), stdev = 1551.322
[info]   CI (99.9%): [≈ 0, 7672.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.06% complete, ETA 01:28:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 512746.731 ops/s
[info] # Warmup Iteration   2: 636883.712 ops/s
[info] # Warmup Iteration   3: 646566.075 ops/s
[info] # Warmup Iteration   4: 644985.928 ops/s
[info] # Warmup Iteration   5: 646038.545 ops/s
[info] Iteration   1: 645217.673 ops/s
[info]                  ·gc.alloc.rate:                   512.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              1249.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.635 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1646.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 643443.154 ops/s
[info]                  ·gc.alloc.rate:                   514.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              1257.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1650.559 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 637813.467 ops/s
[info]                  ·gc.alloc.rate:                   511.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              1263.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1663.527 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 648072.539 ops/s
[info]                  ·gc.alloc.rate:      497.370 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 642630.113 ops/s
[info]                  ·gc.alloc.rate:                   520.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              1274.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1651.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   643435.389 ±(99.9%) 14527.474 ops/s [Average]
[info]   (min, avg, max) = (637813.467, 643435.389, 648072.539), stdev = 3772.739
[info]   CI (99.9%): [628907.915, 657962.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   511.243 ±(99.9%) 32.648 MB/sec [Average]
[info]   (min, avg, max) = (497.370, 511.243, 520.482), stdev = 8.479
[info]   CI (99.9%): [478.595, 543.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1250.771 ±(99.9%) 98.408 B/op [Average]
[info]   (min, avg, max) = (1208.029, 1250.771, 1274.792), stdev = 25.556
[info]   CI (99.9%): [1152.363, 1349.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.541 ±(99.9%) 4.660 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.541, 2.706), stdev = 1.210
[info]   CI (99.9%): [≈ 0, 5.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.324 ±(99.9%) 11.399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.324, 6.619), stdev = 2.960
[info]   CI (99.9%): [≈ 0, 12.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   539.503 ±(99.9%) 1161.321 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.503, 674.724), stdev = 301.591
[info]   CI (99.9%): [≈ 0, 1700.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1322.222 ±(99.9%) 2846.292 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1322.222, 1663.527), stdev = 739.173
[info]   CI (99.9%): [≈ 0, 4168.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:28:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 562022.550 ops/s
[info] # Warmup Iteration   2: 663191.026 ops/s
[info] # Warmup Iteration   3: 704995.778 ops/s
[info] # Warmup Iteration   4: 705502.637 ops/s
[info] # Warmup Iteration   5: 702028.088 ops/s
[info] Iteration   1: 705433.372 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 702544.669 ops/s
[info]                  ·gc.alloc.rate:      3.918 MB/sec
[info]                  ·gc.alloc.rate.norm: 8.779 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 704791.166 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 667949.821 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 705159.896 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   697175.785 ±(99.9%) 63064.499 ops/s [Average]
[info]   (min, avg, max) = (667949.821, 697175.785, 705433.372), stdev = 16377.650
[info]   CI (99.9%): [634111.286, 760240.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.784 ±(99.9%) 6.747 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.784, 3.918), stdev = 1.752
[info]   CI (99.9%): [≈ 0, 7.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.756 ±(99.9%) 15.117 B/op [Average]
[info]   (min, avg, max) = (0.001, 1.756, 8.779), stdev = 3.926
[info]   CI (99.9%): [≈ 0, 16.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.53% complete, ETA 01:28:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100828.209 ops/s
[info] # Warmup Iteration   2: 248953.820 ops/s
[info] # Warmup Iteration   3: 261513.278 ops/s
[info] # Warmup Iteration   4: 260465.106 ops/s
[info] # Warmup Iteration   5: 261847.954 ops/s
[info] Iteration   1: 259173.199 ops/s
[info]                  ·gc.alloc.rate:                   748.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              4547.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.629 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4097.817 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 263370.974 ops/s
[info]                  ·gc.alloc.rate:                   745.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              4455.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4032.556 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 262413.379 ops/s
[info]                  ·gc.alloc.rate:                   736.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              4417.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4047.276 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 261869.500 ops/s
[info]                  ·gc.alloc.rate:                   762.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8111.457 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 261231.980 ops/s
[info]                  ·gc.alloc.rate:                   738.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              4449.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4065.508 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   261611.806 ±(99.9%) 6056.253 ops/s [Average]
[info]   (min, avg, max) = (259173.199, 261611.806, 263370.974), stdev = 1572.790
[info]   CI (99.9%): [255555.554, 267668.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   746.351 ±(99.9%) 40.006 MB/sec [Average]
[info]   (min, avg, max) = (736.431, 746.351, 762.642), stdev = 10.390
[info]   CI (99.9%): [706.344, 786.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4490.776 ±(99.9%) 273.580 B/op [Average]
[info]   (min, avg, max) = (4417.555, 4490.776, 4584.032), stdev = 71.048
[info]   CI (99.9%): [4217.196, 4764.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.150 ±(99.9%) 0.403 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.251), stdev = 0.105
[info]   CI (99.9%): [≈ 0, 0.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   809.675 ±(99.9%) 1162.006 MB/sec [Average]
[info]   (min, avg, max) = (674.629, 809.675, 1349.497), stdev = 301.769
[info]   CI (99.9%): [≈ 0, 1971.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4870.923 ±(99.9%) 6976.125 B/op [Average]
[info]   (min, avg, max) = (4032.556, 4870.923, 8111.457), stdev = 1811.678
[info]   CI (99.9%): [≈ 0, 11847.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.76% complete, ETA 01:28:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16940.218 ops/s
[info] # Warmup Iteration   2: 35773.712 ops/s
[info] # Warmup Iteration   3: 37005.542 ops/s
[info] # Warmup Iteration   4: 33482.961 ops/s
[info] # Warmup Iteration   5: 36194.810 ops/s
[info] Iteration   1: 37480.949 ops/s
[info]                  ·gc.alloc.rate:                   1771.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              74356.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56515.360 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 37541.446 ops/s
[info]                  ·gc.alloc.rate:                   1784.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              74793.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84684.192 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 37487.215 ops/s
[info]                  ·gc.alloc.rate:                   1792.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              75252.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84934.264 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 37031.247 ops/s
[info]                  ·gc.alloc.rate:                   1770.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              75246.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.651 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57387.573 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 37437.452 ops/s
[info]                  ·gc.alloc.rate:                   1802.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              75789.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85245.983 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   37395.662 ±(99.9%) 797.217 ops/s [Average]
[info]   (min, avg, max) = (37031.247, 37395.662, 37541.446), stdev = 207.035
[info]   CI (99.9%): [36598.445, 38192.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1784.173 ±(99.9%) 52.463 MB/sec [Average]
[info]   (min, avg, max) = (1770.976, 1784.173, 1802.527), stdev = 13.625
[info]   CI (99.9%): [1731.709, 1836.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   75087.753 ±(99.9%) 2079.557 B/op [Average]
[info]   (min, avg, max) = (74356.531, 75087.753, 75789.856), stdev = 540.054
[info]   CI (99.9%): [73008.196, 77167.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.125), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.748 ±(99.9%) 7.892 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.748, 5.244), stdev = 2.049
[info]   CI (99.9%): [≈ 0, 9.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1753.389 ±(99.9%) 1423.512 MB/sec [Average]
[info]   (min, avg, max) = (1346.224, 1753.389, 2027.425), stdev = 369.682
[info]   CI (99.9%): [329.877, 3176.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   73753.474 ±(99.9%) 59078.332 B/op [Average]
[info]   (min, avg, max) = (56515.360, 73753.474, 85245.983), stdev = 15342.455
[info]   CI (99.9%): [14675.143, 132831.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.00% complete, ETA 01:27:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.828 ops/s
[info] # Warmup Iteration   2: 264901.816 ops/s
[info] # Warmup Iteration   3: 280638.613 ops/s
[info] # Warmup Iteration   4: 285155.525 ops/s
[info] # Warmup Iteration   5: 287549.822 ops/s
[info] Iteration   1: 286946.104 ops/s
[info]                  ·gc.alloc.rate:                   305.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              1675.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2806.053 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 287871.765 ops/s
[info]                  ·gc.alloc.rate:      299.757 MB/sec
[info]                  ·gc.alloc.rate.norm: 1638.823 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 284486.904 ops/s
[info]                  ·gc.alloc.rate:                   313.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3711.167 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 287939.308 ops/s
[info]                  ·gc.alloc.rate:      298.586 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 286048.418 ops/s
[info]                  ·gc.alloc.rate:                   315.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3690.904 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   286658.500 ±(99.9%) 5541.191 ops/s [Average]
[info]   (min, avg, max) = (284486.904, 286658.500, 287939.308), stdev = 1439.030
[info]   CI (99.9%): [281117.309, 292199.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   306.625 ±(99.9%) 30.123 MB/sec [Average]
[info]   (min, avg, max) = (298.586, 306.625, 315.605), stdev = 7.823
[info]   CI (99.9%): [276.502, 336.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1683.800 ±(99.9%) 195.321 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1683.800, 1736.639), stdev = 50.724
[info]   CI (99.9%): [1488.479, 1879.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.783 ±(99.9%) 6.696 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.894), stdev = 1.739
[info]   CI (99.9%): [≈ 0, 7.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   4.311 ±(99.9%) 36.845 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.311, 21.428), stdev = 9.569
[info]   CI (99.9%): [≈ 0, 41.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   370.599 ±(99.9%) 1326.546 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.599, 670.761), stdev = 344.500
[info]   CI (99.9%): [≈ 0, 1697.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   2041.625 ±(99.9%) 7313.261 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2041.625, 3711.167), stdev = 1899.231
[info]   CI (99.9%): [≈ 0, 9354.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.24% complete, ETA 01:27:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39376.151 ops/s
[info] # Warmup Iteration   2: 97357.328 ops/s
[info] # Warmup Iteration   3: 107545.257 ops/s
[info] # Warmup Iteration   4: 109982.042 ops/s
[info] # Warmup Iteration   5: 109708.483 ops/s
[info] Iteration   1: 108489.381 ops/s
[info]                  ·gc.alloc.rate:                   1225.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              17770.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19559.812 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 110071.710 ops/s
[info]                  ·gc.alloc.rate:                   1251.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              17890.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19287.375 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 106677.498 ops/s
[info]                  ·gc.alloc.rate:                   1205.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              17782.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19916.202 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 110299.764 ops/s
[info]                  ·gc.alloc.rate:                   1228.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              17527.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9633.174 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 110189.028 ops/s
[info]                  ·gc.alloc.rate:                   1240.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              17724.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19305.483 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   109145.476 ±(99.9%) 6027.416 ops/s [Average]
[info]   (min, avg, max) = (106677.498, 109145.476, 110299.764), stdev = 1565.301
[info]   CI (99.9%): [103118.060, 115172.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1230.144 ±(99.9%) 66.335 MB/sec [Average]
[info]   (min, avg, max) = (1205.393, 1230.144, 1251.030), stdev = 17.227
[info]   CI (99.9%): [1163.810, 1296.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17739.081 ±(99.9%) 512.736 B/op [Average]
[info]   (min, avg, max) = (17527.207, 17739.081, 17890.447), stdev = 133.156
[info]   CI (99.9%): [17226.346, 18251.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.418 ±(99.9%) 1.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.418, 0.604), stdev = 0.268
[info]   CI (99.9%): [≈ 0, 1.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1214.765 ±(99.9%) 1161.649 MB/sec [Average]
[info]   (min, avg, max) = (675.114, 1214.765, 1351.363), stdev = 301.676
[info]   CI (99.9%): [53.117, 2376.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17540.409 ±(99.9%) 17049.062 B/op [Average]
[info]   (min, avg, max) = (9633.174, 17540.409, 19916.202), stdev = 4427.587
[info]   CI (99.9%): [491.347, 34589.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.47% complete, ETA 01:27:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 392299.832 ops/s
[info] # Warmup Iteration   2: 432052.156 ops/s
[info] # Warmup Iteration   3: 463759.843 ops/s
[info] # Warmup Iteration   4: 452864.570 ops/s
[info] # Warmup Iteration   5: 451736.524 ops/s
[info] Iteration   1: 455332.931 ops/s
[info]                  ·gc.alloc.rate:      296.277 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.254 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 447256.949 ops/s
[info]                  ·gc.alloc.rate:                   301.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              1059.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1800.267 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 456814.661 ops/s
[info]                  ·gc.alloc.rate:      297.266 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 455367.964 ops/s
[info]                  ·gc.alloc.rate:                   311.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              1075.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2329.934 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 457672.185 ops/s
[info]                  ·gc.alloc.rate:      297.750 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   454488.938 ±(99.9%) 16030.977 ops/s [Average]
[info]   (min, avg, max) = (447256.949, 454488.938, 457672.185), stdev = 4163.194
[info]   CI (99.9%): [438457.961, 470519.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   300.717 ±(99.9%) 23.668 MB/sec [Average]
[info]   (min, avg, max) = (296.277, 300.717, 311.232), stdev = 6.146
[info]   CI (99.9%): [277.049, 324.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1041.398 ±(99.9%) 93.949 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1041.398, 1075.525), stdev = 24.398
[info]   CI (99.9%): [947.449, 1135.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   237.184 ±(99.9%) 1270.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 237.184, 674.229), stdev = 329.822
[info]   CI (99.9%): [≈ 0, 1507.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   826.040 ±(99.9%) 4414.760 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 826.040, 2329.934), stdev = 1146.499
[info]   CI (99.9%): [≈ 0, 5240.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.71% complete, ETA 01:26:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2830.477 ops/s
[info] # Warmup Iteration   2: 34252.214 ops/s
[info] # Warmup Iteration   3: 38792.833 ops/s
[info] # Warmup Iteration   4: 37969.612 ops/s
[info] # Warmup Iteration   5: 38295.760 ops/s
[info] Iteration   1: 39295.849 ops/s
[info]                  ·gc.alloc.rate:                   1905.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              76289.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54018.683 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 39251.582 ops/s
[info]                  ·gc.alloc.rate:                   1927.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              77267.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81224.709 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 38529.169 ops/s
[info]                  ·gc.alloc.rate:                   1904.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              77807.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82868.959 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 39213.698 ops/s
[info]                  ·gc.alloc.rate:                   1923.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              77226.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81503.925 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 39224.709 ops/s
[info]                  ·gc.alloc.rate:                   1910.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              76686.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54362.490 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   39103.001 ±(99.9%) 1241.223 ops/s [Average]
[info]   (min, avg, max) = (38529.169, 39103.001, 39295.849), stdev = 322.342
[info]   CI (99.9%): [37861.779, 40344.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1914.348 ±(99.9%) 40.431 MB/sec [Average]
[info]   (min, avg, max) = (1904.542, 1914.348, 1927.025), stdev = 10.500
[info]   CI (99.9%): [1873.917, 1954.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   77055.423 ±(99.9%) 2248.634 B/op [Average]
[info]   (min, avg, max) = (76289.006, 77055.423, 77807.841), stdev = 583.963
[info]   CI (99.9%): [74806.789, 79304.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.013 ±(99.9%) 5.860 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.013, 4.177), stdev = 1.522
[info]   CI (99.9%): [≈ 0, 7.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1757.676 ±(99.9%) 1426.404 MB/sec [Average]
[info]   (min, avg, max) = (1349.100, 1757.676, 2030.446), stdev = 370.433
[info]   CI (99.9%): [331.272, 3184.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   70795.753 ±(99.9%) 58420.518 B/op [Average]
[info]   (min, avg, max) = (54018.683, 70795.753, 82868.959), stdev = 15171.623
[info]   CI (99.9%): [12375.236, 129216.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.94% complete, ETA 01:26:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36515.412 ops/s
[info] # Warmup Iteration   2: 68939.557 ops/s
[info] # Warmup Iteration   3: 68416.207 ops/s
[info] # Warmup Iteration   4: 70710.436 ops/s
[info] # Warmup Iteration   5: 71808.531 ops/s
[info] Iteration   1: 72059.387 ops/s
[info]                  ·gc.alloc.rate:      346.061 MB/sec
[info]                  ·gc.alloc.rate.norm: 7560.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 71365.092 ops/s
[info]                  ·gc.alloc.rate:                   369.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              8160.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.325 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14852.268 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 72041.825 ops/s
[info]                  ·gc.alloc.rate:      346.133 MB/sec
[info]                  ·gc.alloc.rate.norm: 7562.553 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 71868.082 ops/s
[info]                  ·gc.alloc.rate:                   362.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              7930.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14748.335 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 72228.342 ops/s
[info]                  ·gc.alloc.rate:      347.034 MB/sec
[info]                  ·gc.alloc.rate.norm: 7560.604 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   71912.545 ±(99.9%) 1276.657 ops/s [Average]
[info]   (min, avg, max) = (71365.092, 71912.545, 72228.342), stdev = 331.544
[info]   CI (99.9%): [70635.888, 73189.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   354.257 ±(99.9%) 42.763 MB/sec [Average]
[info]   (min, avg, max) = (346.061, 354.257, 369.954), stdev = 11.105
[info]   CI (99.9%): [311.494, 397.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7754.895 ±(99.9%) 1068.816 B/op [Average]
[info]   (min, avg, max) = (7560.006, 7754.895, 8160.474), stdev = 277.568
[info]   CI (99.9%): [6686.079, 8823.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.538 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.312), stdev = 0.140
[info]   CI (99.9%): [≈ 0, 0.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.368 ±(99.9%) 11.776 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.368, 6.838), stdev = 3.058
[info]   CI (99.9%): [≈ 0, 13.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   269.341 ±(99.9%) 1420.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.341, 673.378), stdev = 368.810
[info]   CI (99.9%): [≈ 0, 1689.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5920.121 ±(99.9%) 31215.408 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5920.121, 14852.268), stdev = 8106.542
[info]   CI (99.9%): [≈ 0, 37135.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 25.18% complete, ETA 01:26:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.806 ops/s
[info] # Warmup Iteration   2: 79109.201 ops/s
[info] # Warmup Iteration   3: 83098.151 ops/s
[info] # Warmup Iteration   4: 84310.875 ops/s
[info] # Warmup Iteration   5: 84271.676 ops/s
[info] Iteration   1: 83100.001 ops/s
[info]                  ·gc.alloc.rate:                   428.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              8113.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12704.125 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 84399.027 ops/s
[info]                  ·gc.alloc.rate:                   441.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              8235.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12508.779 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 84700.609 ops/s
[info]                  ·gc.alloc.rate:      424.458 MB/sec
[info]                  ·gc.alloc.rate.norm: 7888.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 84464.559 ops/s
[info]                  ·gc.alloc.rate:                   445.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              8305.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12474.772 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 84829.449 ops/s
[info]                  ·gc.alloc.rate:      425.276 MB/sec
[info]                  ·gc.alloc.rate.norm: 7888.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   84298.729 ±(99.9%) 2666.191 ops/s [Average]
[info]   (min, avg, max) = (83100.001, 84298.729, 84829.449), stdev = 692.401
[info]   CI (99.9%): [81632.538, 86964.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   433.085 ±(99.9%) 38.077 MB/sec [Average]
[info]   (min, avg, max) = (424.458, 433.085, 445.803), stdev = 9.888
[info]   CI (99.9%): [395.009, 471.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   8086.088 ±(99.9%) 744.658 B/op [Average]
[info]   (min, avg, max) = (7888.005, 8086.088, 8305.492), stdev = 193.385
[info]   CI (99.9%): [7341.431, 8830.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.813 ±(99.9%) 7.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.813, 4.066), stdev = 1.819
[info]   CI (99.9%): [≈ 0, 7.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   15.169 ±(99.9%) 130.606 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.169, 75.843), stdev = 33.918
[info]   CI (99.9%): [≈ 0, 145.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   402.191 ±(99.9%) 1413.760 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.191, 670.684), stdev = 367.149
[info]   CI (99.9%): [≈ 0, 1815.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   7537.535 ±(99.9%) 26497.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7537.535, 12704.125), stdev = 6881.353
[info]   CI (99.9%): [≈ 0, 34035.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.817
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.41% complete, ETA 01:26:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37818.578 ops/s
[info] # Warmup Iteration   2: 68075.382 ops/s
[info] # Warmup Iteration   3: 70880.077 ops/s
[info] # Warmup Iteration   4: 69480.583 ops/s
[info] # Warmup Iteration   5: 72072.059 ops/s
[info] Iteration   1: 71830.230 ops/s
[info]                  ·gc.alloc.rate:                   398.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              8735.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14756.752 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 72279.112 ops/s
[info]                  ·gc.alloc.rate:      379.869 MB/sec
[info]                  ·gc.alloc.rate.norm: 8272.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 72031.340 ops/s
[info]                  ·gc.alloc.rate:                   394.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              8619.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14715.375 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 72295.424 ops/s
[info]                  ·gc.alloc.rate:      379.961 MB/sec
[info]                  ·gc.alloc.rate.norm: 8272.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 71981.288 ops/s
[info]                  ·gc.alloc.rate:                   395.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              8639.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14740.365 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   72083.479 ±(99.9%) 771.306 ops/s [Average]
[info]   (min, avg, max) = (71830.230, 72083.479, 72295.424), stdev = 200.306
[info]   CI (99.9%): [71312.172, 72854.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   389.627 ±(99.9%) 34.667 MB/sec [Average]
[info]   (min, avg, max) = (379.869, 389.627, 398.643), stdev = 9.003
[info]   CI (99.9%): [354.960, 424.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   8507.875 ±(99.9%) 846.169 B/op [Average]
[info]   (min, avg, max) = (8272.006, 8507.875, 8735.871), stdev = 219.747
[info]   CI (99.9%): [7661.706, 9354.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.183 ±(99.9%) 1.533 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.183, 0.895), stdev = 0.398
[info]   CI (99.9%): [≈ 0, 1.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.003 ±(99.9%) 33.494 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.003, 19.559), stdev = 8.698
[info]   CI (99.9%): [≈ 0, 37.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   404.212 ±(99.9%) 1420.864 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.212, 674.038), stdev = 368.994
[info]   CI (99.9%): [≈ 0, 1825.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8842.499 ±(99.9%) 31082.680 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8842.499, 14756.752), stdev = 8072.073
[info]   CI (99.9%): [≈ 0, 39925.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.65% complete, ETA 01:25:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61202.857 ops/s
[info] # Warmup Iteration   2: 82013.227 ops/s
[info] # Warmup Iteration   3: 83887.139 ops/s
[info] # Warmup Iteration   4: 83072.477 ops/s
[info] # Warmup Iteration   5: 83623.313 ops/s
[info] Iteration   1: 84942.317 ops/s
[info]                  ·gc.alloc.rate:      425.680 MB/sec
[info]                  ·gc.alloc.rate.norm: 7888.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 84457.037 ops/s
[info]                  ·gc.alloc.rate:                   445.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              8294.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12562.405 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 84326.717 ops/s
[info]                  ·gc.alloc.rate:                   443.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              8271.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12581.619 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 83916.030 ops/s
[info]                  ·gc.alloc.rate:      420.585 MB/sec
[info]                  ·gc.alloc.rate.norm: 7888.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 83713.694 ops/s
[info]                  ·gc.alloc.rate:                   441.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              8306.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12661.209 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   84271.159 ±(99.9%) 1851.689 ops/s [Average]
[info]   (min, avg, max) = (83713.694, 84271.159, 84942.317), stdev = 480.878
[info]   CI (99.9%): [82419.470, 86122.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   435.271 ±(99.9%) 43.490 MB/sec [Average]
[info]   (min, avg, max) = (420.585, 435.271, 445.212), stdev = 11.294
[info]   CI (99.9%): [391.781, 478.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   8129.674 ±(99.9%) 850.911 B/op [Average]
[info]   (min, avg, max) = (7888.005, 8129.674, 8306.531), stdev = 220.979
[info]   CI (99.9%): [7278.763, 8980.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.566 ±(99.9%) 4.742 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.566, 2.768), stdev = 1.231
[info]   CI (99.9%): [≈ 0, 5.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10.569 ±(99.9%) 88.500 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.569, 51.673), stdev = 22.983
[info]   CI (99.9%): [≈ 0, 99.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   404.336 ±(99.9%) 1421.298 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.336, 674.282), stdev = 369.106
[info]   CI (99.9%): [≈ 0, 1825.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7561.047 ±(99.9%) 26578.527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7561.047, 12661.209), stdev = 6902.359
[info]   CI (99.9%): [≈ 0, 34139.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.88% complete, ETA 01:25:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65650.406 ops/s
[info] # Warmup Iteration   2: 83068.527 ops/s
[info] # Warmup Iteration   3: 85840.688 ops/s
[info] # Warmup Iteration   4: 86280.685 ops/s
[info] # Warmup Iteration   5: 81624.713 ops/s
[info] Iteration   1: 86986.453 ops/s
[info]                  ·gc.alloc.rate:      197.593 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 87041.503 ops/s
[info]                  ·gc.alloc.rate:      204.460 MB/sec
[info]                  ·gc.alloc.rate.norm: 3696.859 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 87175.715 ops/s
[info]                  ·gc.alloc.rate:      198.700 MB/sec
[info]                  ·gc.alloc.rate.norm: 3587.766 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 87047.044 ops/s
[info]                  ·gc.alloc.rate:      197.837 MB/sec
[info]                  ·gc.alloc.rate.norm: 3577.544 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 86633.828 ops/s
[info]                  ·gc.alloc.rate:                   209.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              3806.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.483 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9293.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   86976.909 ±(99.9%) 785.405 ops/s [Average]
[info]   (min, avg, max) = (86633.828, 86976.909, 87175.715), stdev = 203.967
[info]   CI (99.9%): [86191.503, 87762.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   201.622 ±(99.9%) 20.146 MB/sec [Average]
[info]   (min, avg, max) = (197.593, 201.622, 209.518), stdev = 5.232
[info]   CI (99.9%): [181.475, 221.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3648.972 ±(99.9%) 391.452 B/op [Average]
[info]   (min, avg, max) = (3576.006, 3648.972, 3806.683), stdev = 101.659
[info]   CI (99.9%): [3257.519, 4040.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.038 ±(99.9%) 0.325 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.189), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   102.297 ±(99.9%) 880.805 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.297, 511.483), stdev = 228.742
[info]   CI (99.9%): [≈ 0, 983.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1858.607 ±(99.9%) 16003.163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1858.607, 9293.033), stdev = 4155.971
[info]   CI (99.9%): [≈ 0, 17861.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.12% complete, ETA 01:25:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3155.301 ops/s
[info] # Warmup Iteration   2: 10127.718 ops/s
[info] # Warmup Iteration   3: 10378.039 ops/s
[info] # Warmup Iteration   4: 10366.344 ops/s
[info] # Warmup Iteration   5: 10373.604 ops/s
[info] Iteration   1: 10342.528 ops/s
[info]                  ·gc.alloc.rate:                   1704.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              259357.707 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 307710.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 10363.133 ops/s
[info]                  ·gc.alloc.rate:                   1701.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              258361.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 204960.441 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 10355.374 ops/s
[info]                  ·gc.alloc.rate:                   1702.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              258773.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 205321.244 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 10190.217 ops/s
[info]                  ·gc.alloc.rate:                   1677.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              259082.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 313297.185 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 10385.908 ops/s
[info]                  ·gc.alloc.rate:                   1706.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              258612.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 205193.475 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   10327.432 ±(99.9%) 301.547 ops/s [Average]
[info]   (min, avg, max) = (10190.217, 10327.432, 10385.908), stdev = 78.311
[info]   CI (99.9%): [10025.884, 10628.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1698.367 ±(99.9%) 45.957 MB/sec [Average]
[info]   (min, avg, max) = (1677.249, 1698.367, 1706.348), stdev = 11.935
[info]   CI (99.9%): [1652.410, 1744.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   258837.438 ±(99.9%) 1506.162 B/op [Average]
[info]   (min, avg, max) = (258361.199, 258837.438, 259357.707), stdev = 391.145
[info]   CI (99.9%): [257331.276, 260343.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.462 ±(99.9%) 18.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.462, 9.644), stdev = 4.842
[info]   CI (99.9%): [≈ 0, 23.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1620.927 ±(99.9%) 1420.281 MB/sec [Average]
[info]   (min, avg, max) = (1350.075, 1620.927, 2028.226), stdev = 368.842
[info]   CI (99.9%): [200.646, 3041.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   247296.473 ±(99.9%) 222312.689 B/op [Average]
[info]   (min, avg, max) = (204960.441, 247296.473, 313297.185), stdev = 57733.899
[info]   CI (99.9%): [24983.784, 469609.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.35% complete, ETA 01:25:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2291.484 ops/s
[info] # Warmup Iteration   2: 8873.729 ops/s
[info] # Warmup Iteration   3: 9159.497 ops/s
[info] # Warmup Iteration   4: 9211.235 ops/s
[info] # Warmup Iteration   5: 9176.214 ops/s
[info] Iteration   1: 9097.455 ops/s
[info]                  ·gc.alloc.rate:                   1401.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              242400.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 233221.739 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 9191.052 ops/s
[info]                  ·gc.alloc.rate:                   1402.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              240192.679 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 231090.501 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 9032.643 ops/s
[info]                  ·gc.alloc.rate:                   1386.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              241575.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 235247.764 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9179.423 ops/s
[info]                  ·gc.alloc.rate:                   1396.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              239445.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.265 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 231709.944 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9179.248 ops/s
[info]                  ·gc.alloc.rate:                   1393.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              238991.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 231824.143 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   9135.964 ±(99.9%) 265.072 ops/s [Average]
[info]   (min, avg, max) = (9032.643, 9135.964, 9191.052), stdev = 68.838
[info]   CI (99.9%): [8870.892, 9401.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1395.964 ±(99.9%) 25.086 MB/sec [Average]
[info]   (min, avg, max) = (1386.265, 1395.964, 1402.580), stdev = 6.515
[info]   CI (99.9%): [1370.878, 1421.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   240521.148 ±(99.9%) 5530.138 B/op [Average]
[info]   (min, avg, max) = (238991.088, 240521.148, 242400.806), stdev = 1436.159
[info]   CI (99.9%): [234991.010, 246051.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6.436 ±(99.9%) 20.393 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.436, 14.275), stdev = 5.296
[info]   CI (99.9%): [≈ 0, 26.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1350.081 ±(99.9%) 5.772 MB/sec [Average]
[info]   (min, avg, max) = (1347.998, 1350.081, 1351.756), stdev = 1.499
[info]   CI (99.9%): [1344.309, 1355.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   232618.818 ±(99.9%) 6405.331 B/op [Average]
[info]   (min, avg, max) = (231090.501, 232618.818, 235247.764), stdev = 1663.444
[info]   CI (99.9%): [226213.487, 239024.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.59% complete, ETA 01:24:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120016.640 ops/s
[info] # Warmup Iteration   2: 142022.925 ops/s
[info] # Warmup Iteration   3: 151510.140 ops/s
[info] # Warmup Iteration   4: 148453.556 ops/s
[info] # Warmup Iteration   5: 151345.294 ops/s
[info] Iteration   1: 152077.801 ops/s
[info]                  ·gc.alloc.rate:      395.778 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.291 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 151564.272 ops/s
[info]                  ·gc.alloc.rate:                   412.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              4282.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6993.320 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 152076.803 ops/s
[info]                  ·gc.alloc.rate:      395.715 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 151613.550 ops/s
[info]                  ·gc.alloc.rate:                   419.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              4359.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6990.737 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 151845.674 ops/s
[info]                  ·gc.alloc.rate:                   418.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              4334.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6973.522 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   151835.620 ±(99.9%) 942.948 ops/s [Average]
[info]   (min, avg, max) = (151564.272, 151835.620, 152077.801), stdev = 244.881
[info]   CI (99.9%): [150892.672, 152778.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   408.394 ±(99.9%) 45.729 MB/sec [Average]
[info]   (min, avg, max) = (395.715, 408.394, 419.947), stdev = 11.876
[info]   CI (99.9%): [362.665, 454.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4233.898 ±(99.9%) 495.792 B/op [Average]
[info]   (min, avg, max) = (4096.003, 4233.898, 4359.701), stdev = 128.756
[info]   CI (99.9%): [3738.105, 4729.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.606 ±(99.9%) 5.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.606, 3.028), stdev = 1.354
[info]   CI (99.9%): [≈ 0, 5.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6.288 ±(99.9%) 54.142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.288, 31.440), stdev = 14.061
[info]   CI (99.9%): [≈ 0, 60.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   403.891 ±(99.9%) 1419.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 403.891, 673.392), stdev = 368.701
[info]   CI (99.9%): [≈ 0, 1823.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4191.516 ±(99.9%) 14733.797 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4191.516, 6993.320), stdev = 3826.320
[info]   CI (99.9%): [≈ 0, 18925.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.82% complete, ETA 01:24:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 889.170 ops/s
[info] # Warmup Iteration   2: 4603.636 ops/s
[info] # Warmup Iteration   3: 5264.059 ops/s
[info] # Warmup Iteration   4: 5507.886 ops/s
[info] # Warmup Iteration   5: 5512.456 ops/s
[info] Iteration   1: 5494.197 ops/s
[info]                  ·gc.alloc.rate:                   1442.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              413310.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 386227.084 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5510.071 ops/s
[info]                  ·gc.alloc.rate:                   1434.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              409666.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 385226.125 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 5506.831 ops/s
[info]                  ·gc.alloc.rate:                   1427.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              408023.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 385696.256 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5501.349 ops/s
[info]                  ·gc.alloc.rate:                   1436.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              411020.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 386427.790 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5495.249 ops/s
[info]                  ·gc.alloc.rate:                   1448.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              415047.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 387231.086 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5501.539 ±(99.9%) 26.838 ops/s [Average]
[info]   (min, avg, max) = (5494.197, 5501.539, 5510.071), stdev = 6.970
[info]   CI (99.9%): [5474.701, 5528.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1438.015 ±(99.9%) 31.182 MB/sec [Average]
[info]   (min, avg, max) = (1427.783, 1438.015, 1448.991), stdev = 8.098
[info]   CI (99.9%): [1406.833, 1469.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   411413.799 ±(99.9%) 10805.946 B/op [Average]
[info]   (min, avg, max) = (408023.845, 411413.799, 415047.437), stdev = 2806.270
[info]   CI (99.9%): [400607.853, 422219.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.573 ±(99.9%) 12.558 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.573, 5.963), stdev = 3.261
[info]   CI (99.9%): [≈ 0, 16.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1349.757 ±(99.9%) 5.931 MB/sec [Average]
[info]   (min, avg, max) = (1348.015, 1349.757, 1351.880), stdev = 1.540
[info]   CI (99.9%): [1343.827, 1355.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   386161.668 ±(99.9%) 2926.619 B/op [Average]
[info]   (min, avg, max) = (385226.125, 386161.668, 387231.086), stdev = 760.034
[info]   CI (99.9%): [383235.049, 389088.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.06% complete, ETA 01:24:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9484.509 ops/s
[info] # Warmup Iteration   2: 19533.802 ops/s
[info] # Warmup Iteration   3: 19458.072 ops/s
[info] # Warmup Iteration   4: 19889.957 ops/s
[info] # Warmup Iteration   5: 19810.518 ops/s
[info] Iteration   1: 19875.360 ops/s
[info]                  ·gc.alloc.rate:                   1086.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              86080.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53433.648 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 19636.733 ops/s
[info]                  ·gc.alloc.rate:                   1108.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              88900.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.266 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108167.769 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 19963.380 ops/s
[info]                  ·gc.alloc.rate:                   1091.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              86049.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53250.667 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 19940.918 ops/s
[info]                  ·gc.alloc.rate:                   1104.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              87179.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106645.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 19911.386 ops/s
[info]                  ·gc.alloc.rate:                   1099.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              86899.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.552 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106853.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   19865.555 ±(99.9%) 508.684 ops/s [Average]
[info]   (min, avg, max) = (19636.733, 19865.555, 19963.380), stdev = 132.104
[info]   CI (99.9%): [19356.871, 20374.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1098.157 ±(99.9%) 34.980 MB/sec [Average]
[info]   (min, avg, max) = (1086.855, 1098.157, 1108.926), stdev = 9.084
[info]   CI (99.9%): [1063.176, 1133.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   87021.900 ±(99.9%) 4473.472 B/op [Average]
[info]   (min, avg, max) = (86049.855, 87021.900, 88900.259), stdev = 1161.746
[info]   CI (99.9%): [82548.428, 91495.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.983 ±(99.9%) 6.970 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.983, 3.337), stdev = 1.810
[info]   CI (99.9%): [≈ 0, 8.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1080.383 ±(99.9%) 1424.908 MB/sec [Average]
[info]   (min, avg, max) = (674.653, 1080.383, 1351.552), stdev = 370.044
[info]   CI (99.9%): [≈ 0, 2505.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   85670.042 ±(99.9%) 113659.578 B/op [Average]
[info]   (min, avg, max) = (53250.667, 85670.042, 108167.769), stdev = 29517.032
[info]   CI (99.9%): [≈ 0, 199329.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.29% complete, ETA 01:23:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10398.389 ops/s
[info] # Warmup Iteration   2: 21935.049 ops/s
[info] # Warmup Iteration   3: 22019.392 ops/s
[info] # Warmup Iteration   4: 22167.731 ops/s
[info] # Warmup Iteration   5: 22196.911 ops/s
[info] Iteration   1: 22025.381 ops/s
[info]                  ·gc.alloc.rate:                   1202.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              85913.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96341.996 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 22216.669 ops/s
[info]                  ·gc.alloc.rate:                   1211.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              85802.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.155 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95552.444 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 22193.603 ops/s
[info]                  ·gc.alloc.rate:                   1206.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              85544.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95730.921 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 22222.965 ops/s
[info]                  ·gc.alloc.rate:                   1197.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              84796.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47812.650 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 22262.093 ops/s
[info]                  ·gc.alloc.rate:                   1214.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              85860.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95509.191 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   22184.142 ±(99.9%) 354.679 ops/s [Average]
[info]   (min, avg, max) = (22025.381, 22184.142, 22262.093), stdev = 92.109
[info]   CI (99.9%): [21829.463, 22538.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1206.306 ±(99.9%) 26.890 MB/sec [Average]
[info]   (min, avg, max) = (1197.216, 1206.306, 1214.523), stdev = 6.983
[info]   CI (99.9%): [1179.416, 1233.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   85583.640 ±(99.9%) 1779.747 B/op [Average]
[info]   (min, avg, max) = (84796.724, 85583.640, 85913.963), stdev = 462.195
[info]   CI (99.9%): [83803.893, 87363.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.772 ±(99.9%) 4.751 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.772, 2.952), stdev = 1.234
[info]   CI (99.9%): [≈ 0, 6.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1214.610 ±(99.9%) 1161.451 MB/sec [Average]
[info]   (min, avg, max) = (675.050, 1214.610, 1351.011), stdev = 301.625
[info]   CI (99.9%): [53.159, 2376.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   86189.440 ±(99.9%) 82618.880 B/op [Average]
[info]   (min, avg, max) = (47812.650, 86189.440, 96341.996), stdev = 21455.861
[info]   CI (99.9%): [3570.560, 168808.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.53% complete, ETA 01:23:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110742.521 ops/s
[info] # Warmup Iteration   2: 123257.218 ops/s
[info] # Warmup Iteration   3: 132045.958 ops/s
[info] # Warmup Iteration   4: 130744.628 ops/s
[info] # Warmup Iteration   5: 130709.213 ops/s
[info] Iteration   1: 132522.615 ops/s
[info]                  ·gc.alloc.rate:      292.994 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.058 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 131219.760 ops/s
[info]                  ·gc.alloc.rate:                   300.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              3599.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6136.229 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 131647.870 ops/s
[info]                  ·gc.alloc.rate:      291.058 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 130317.096 ops/s
[info]                  ·gc.alloc.rate:                   299.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              3621.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.069 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8153.348 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 131620.786 ops/s
[info]                  ·gc.alloc.rate:      291.013 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   131465.625 ±(99.9%) 3076.954 ops/s [Average]
[info]   (min, avg, max) = (130317.096, 131465.625, 132522.615), stdev = 799.075
[info]   CI (99.9%): [128388.671, 134542.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   295.005 ±(99.9%) 17.759 MB/sec [Average]
[info]   (min, avg, max) = (291.013, 295.005, 300.096), stdev = 4.612
[info]   CI (99.9%): [277.245, 312.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3532.260 ±(99.9%) 277.084 B/op [Average]
[info]   (min, avg, max) = (3480.003, 3532.260, 3621.694), stdev = 71.958
[info]   CI (99.9%): [3255.176, 3809.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   237.330 ±(99.9%) 1271.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 237.330, 675.069), stdev = 330.078
[info]   CI (99.9%): [≈ 0, 1508.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2857.915 ±(99.9%) 15317.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2857.915, 8153.348), stdev = 3977.813
[info]   CI (99.9%): [≈ 0, 18175.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.76% complete, ETA 01:23:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114146.385 ops/s
[info] # Warmup Iteration   2: 127803.430 ops/s
[info] # Warmup Iteration   3: 127051.292 ops/s
[info] # Warmup Iteration   4: 137587.197 ops/s
[info] # Warmup Iteration   5: 137817.478 ops/s
[info] Iteration   1: 137741.718 ops/s
[info]                  ·gc.alloc.rate:      0.164 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.868 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 131200.888 ops/s
[info]                  ·gc.alloc.rate:      2.099 MB/sec
[info]                  ·gc.alloc.rate.norm: 25.173 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 137691.473 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 137694.832 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.948 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 136936.624 ops/s
[info]                  ·gc.alloc.rate:      6.369 MB/sec
[info]                  ·gc.alloc.rate.norm: 73.199 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   136253.107 ±(99.9%) 10951.603 ops/s [Average]
[info]   (min, avg, max) = (131200.888, 136253.107, 137741.718), stdev = 2844.096
[info]   CI (99.9%): [125301.504, 147204.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.760 ±(99.9%) 10.462 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.760, 6.369), stdev = 2.717
[info]   CI (99.9%): [≈ 0, 12.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   20.438 ±(99.9%) 120.398 B/op [Average]
[info]   (min, avg, max) = (0.003, 20.438, 73.199), stdev = 31.267
[info]   CI (99.9%): [≈ 0, 140.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.00% complete, ETA 01:23:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11392.586 ops/s
[info] # Warmup Iteration   2: 21476.109 ops/s
[info] # Warmup Iteration   3: 21905.235 ops/s
[info] # Warmup Iteration   4: 22415.196 ops/s
[info] # Warmup Iteration   5: 21927.991 ops/s
[info] Iteration   1: 22030.748 ops/s
[info]                  ·gc.alloc.rate:                   1260.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              90077.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.248 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96268.176 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 22340.982 ops/s
[info]                  ·gc.alloc.rate:                   1263.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              89007.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95003.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 22368.393 ops/s
[info]                  ·gc.alloc.rate:                   1262.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              88820.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94935.218 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 22453.431 ops/s
[info]                  ·gc.alloc.rate:                   1252.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              87778.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94650.140 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 22494.764 ops/s
[info]                  ·gc.alloc.rate:                   1240.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              86805.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47260.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   22337.664 ±(99.9%) 702.769 ops/s [Average]
[info]   (min, avg, max) = (22030.748, 22337.664, 22494.764), stdev = 182.507
[info]   CI (99.9%): [21634.895, 23040.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1255.759 ±(99.9%) 36.972 MB/sec [Average]
[info]   (min, avg, max) = (1240.489, 1255.759, 1263.315), stdev = 9.601
[info]   CI (99.9%): [1218.787, 1292.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   88498.012 ±(99.9%) 4809.259 B/op [Average]
[info]   (min, avg, max) = (86805.690, 88498.012, 90077.500), stdev = 1248.949
[info]   CI (99.9%): [83688.753, 93307.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.462 ±(99.9%) 7.956 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.462, 4.378), stdev = 2.066
[info]   CI (99.9%): [≈ 0, 9.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1214.063 ±(99.9%) 1159.596 MB/sec [Average]
[info]   (min, avg, max) = (675.365, 1214.063, 1350.166), stdev = 301.143
[info]   CI (99.9%): [54.468, 2373.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   85623.313 ±(99.9%) 82614.681 B/op [Average]
[info]   (min, avg, max) = (47260.026, 85623.313, 96268.176), stdev = 21454.770
[info]   CI (99.9%): [3008.632, 168237.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.24% complete, ETA 01:22:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64990.137 ops/s
[info] # Warmup Iteration   2: 126240.907 ops/s
[info] # Warmup Iteration   3: 130183.612 ops/s
[info] # Warmup Iteration   4: 131082.365 ops/s
[info] # Warmup Iteration   5: 130119.074 ops/s
[info] Iteration   1: 130755.389 ops/s
[info]                  ·gc.alloc.rate:                   1716.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              20672.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.932 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16229.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 130947.653 ops/s
[info]                  ·gc.alloc.rate:                   1731.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              20809.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24335.681 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 129340.468 ops/s
[info]                  ·gc.alloc.rate:                   1708.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              20786.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16455.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 131534.013 ops/s
[info]                  ·gc.alloc.rate:                   1763.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              21102.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24297.352 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 131037.501 ops/s
[info]                  ·gc.alloc.rate:                   1743.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              20938.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16273.614 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   130723.005 ±(99.9%) 3175.069 ops/s [Average]
[info]   (min, avg, max) = (129340.468, 130723.005, 131534.013), stdev = 824.555
[info]   CI (99.9%): [127547.935, 133898.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1732.616 ±(99.9%) 83.908 MB/sec [Average]
[info]   (min, avg, max) = (1708.299, 1732.616, 1763.400), stdev = 21.791
[info]   CI (99.9%): [1648.707, 1816.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20861.764 ±(99.9%) 632.148 B/op [Average]
[info]   (min, avg, max) = (20672.310, 20861.764, 21102.056), stdev = 164.167
[info]   CI (99.9%): [20229.616, 21493.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.800 ±(99.9%) 2.190 B/op [Average]
[info]   (min, avg, max) = (0.251, 0.800, 1.501), stdev = 0.569
[info]   CI (99.9%): [≈ 0, 2.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1622.008 ±(99.9%) 1425.227 MB/sec [Average]
[info]   (min, avg, max) = (1347.932, 1622.008, 2030.416), stdev = 370.127
[info]   CI (99.9%): [196.781, 3047.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19518.144 ±(99.9%) 16870.184 B/op [Average]
[info]   (min, avg, max) = (16229.021, 19518.144, 24335.681), stdev = 4381.133
[info]   CI (99.9%): [2647.960, 36388.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.47% complete, ETA 01:22:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.832 ops/s
[info] # Warmup Iteration   2: 472422.459 ops/s
[info] # Warmup Iteration   3: 497717.001 ops/s
[info] # Warmup Iteration   4: 523798.774 ops/s
[info] # Warmup Iteration   5: 521890.895 ops/s
[info] Iteration   1: 523986.895 ops/s
[info]                  ·gc.alloc.rate:                   562.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              1690.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2014.888 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 525081.372 ops/s
[info]                  ·gc.alloc.rate:                   566.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              1699.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2006.720 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 527452.269 ops/s
[info]                  ·gc.alloc.rate:      547.538 MB/sec
[info]                  ·gc.alloc.rate.norm: 1633.888 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 527005.776 ops/s
[info]                  ·gc.alloc.rate:                   562.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1999.379 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 527135.418 ops/s
[info]                  ·gc.alloc.rate:                   568.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              1696.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.488 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1998.784 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   526132.346 ±(99.9%) 5845.735 ops/s [Average]
[info]   (min, avg, max) = (523986.895, 526132.346, 527452.269), stdev = 1518.119
[info]   CI (99.9%): [520286.611, 531978.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   561.627 ±(99.9%) 31.778 MB/sec [Average]
[info]   (min, avg, max) = (547.538, 561.627, 568.214), stdev = 8.253
[info]   CI (99.9%): [529.849, 593.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1680.137 ±(99.9%) 103.431 B/op [Average]
[info]   (min, avg, max) = (1633.888, 1680.137, 1699.441), stdev = 26.861
[info]   CI (99.9%): [1576.706, 1783.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.814 ±(99.9%) 6.922 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.814, 4.030), stdev = 1.798
[info]   CI (99.9%): [≈ 0, 7.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   2.446 ±(99.9%) 20.797 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.446, 12.108), stdev = 5.401
[info]   CI (99.9%): [≈ 0, 23.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   535.834 ±(99.9%) 1153.424 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.834, 670.673), stdev = 299.540
[info]   CI (99.9%): [≈ 0, 1689.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1603.954 ±(99.9%) 3452.724 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1603.954, 2014.888), stdev = 896.661
[info]   CI (99.9%): [≈ 0, 5056.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:22:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106969.106 ops/s
[info] # Warmup Iteration   2: 299133.771 ops/s
[info] # Warmup Iteration   3: 309238.203 ops/s
[info] # Warmup Iteration   4: 310176.646 ops/s
[info] # Warmup Iteration   5: 311115.830 ops/s
[info] Iteration   1: 310501.659 ops/s
[info]                  ·gc.alloc.rate:                   447.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              2268.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3413.621 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 310478.589 ops/s
[info]                  ·gc.alloc.rate:                   451.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              2290.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3413.962 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 310340.269 ops/s
[info]                  ·gc.alloc.rate:      431.165 MB/sec
[info]                  ·gc.alloc.rate.norm: 2186.837 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 310185.879 ops/s
[info]                  ·gc.alloc.rate:                   451.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              2289.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3420.544 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 310545.672 ops/s
[info]                  ·gc.alloc.rate:                   447.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              2267.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.148 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3416.525 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   310410.414 ±(99.9%) 566.597 ops/s [Average]
[info]   (min, avg, max) = (310185.879, 310410.414, 310545.672), stdev = 147.143
[info]   CI (99.9%): [309843.817, 310977.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   445.833 ±(99.9%) 32.547 MB/sec [Average]
[info]   (min, avg, max) = (431.165, 445.833, 451.807), stdev = 8.452
[info]   CI (99.9%): [413.285, 478.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2260.585 ±(99.9%) 164.358 B/op [Average]
[info]   (min, avg, max) = (2186.837, 2260.585, 2290.348), stdev = 42.683
[info]   CI (99.9%): [2096.227, 2424.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.198 ±(99.9%) 1.703 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.198, 0.989), stdev = 0.442
[info]   CI (99.9%): [≈ 0, 1.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.003 ±(99.9%) 8.635 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.003, 5.014), stdev = 2.242
[info]   CI (99.9%): [≈ 0, 9.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.026 ±(99.9%) 1160.296 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.026, 674.148), stdev = 301.325
[info]   CI (99.9%): [≈ 0, 1699.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2732.931 ±(99.9%) 5882.849 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2732.931, 3420.544), stdev = 1527.757
[info]   CI (99.9%): [≈ 0, 8615.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.94% complete, ETA 01:22:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 570917.262 ops/s
[info] # Warmup Iteration   2: 716592.253 ops/s
[info] # Warmup Iteration   3: 725251.693 ops/s
[info] # Warmup Iteration   4: 727558.626 ops/s
[info] # Warmup Iteration   5: 722321.578 ops/s
[info] Iteration   1: 722858.458 ops/s
[info]                  ·gc.alloc.rate:                   483.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              1053.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1470.672 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 723980.055 ops/s
[info]                  ·gc.alloc.rate:                   483.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              1052.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1468.367 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 728614.138 ops/s
[info]                  ·gc.alloc.rate:      474.042 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 723059.285 ops/s
[info]                  ·gc.alloc.rate:                   486.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              1058.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1468.795 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 728387.212 ops/s
[info]                  ·gc.alloc.rate:                   497.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              1074.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1457.995 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   725379.830 ±(99.9%) 11094.718 ops/s [Average]
[info]   (min, avg, max) = (722858.458, 725379.830, 728614.138), stdev = 2881.263
[info]   CI (99.9%): [714285.112, 736474.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   485.071 ±(99.9%) 31.981 MB/sec [Average]
[info]   (min, avg, max) = (474.042, 485.071, 497.349), stdev = 8.305
[info]   CI (99.9%): [453.090, 517.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1052.589 ±(99.9%) 70.435 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1052.589, 1074.660), stdev = 18.292
[info]   CI (99.9%): [982.154, 1123.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.510 ±(99.9%) 4.391 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.510, 2.550), stdev = 1.140
[info]   CI (99.9%): [≈ 0, 4.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.109 ±(99.9%) 9.546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.109, 5.544), stdev = 2.479
[info]   CI (99.9%): [≈ 0, 10.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   540.024 ±(99.9%) 1162.444 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 540.024, 675.459), stdev = 301.883
[info]   CI (99.9%): [≈ 0, 1702.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1173.166 ±(99.9%) 2525.400 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1173.166, 1470.672), stdev = 655.838
[info]   CI (99.9%): [≈ 0, 3698.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.18% complete, ETA 01:21:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13336.449 ops/s
[info] # Warmup Iteration   2: 73165.759 ops/s
[info] # Warmup Iteration   3: 73848.658 ops/s
[info] # Warmup Iteration   4: 75289.776 ops/s
[info] # Warmup Iteration   5: 75747.267 ops/s
[info] Iteration   1: 75415.951 ops/s
[info]                  ·gc.alloc.rate:                   3084.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              64382.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3385.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70669.196 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 75540.326 ops/s
[info]                  ·gc.alloc.rate:                   3117.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              64965.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56517.937 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 75216.798 ops/s
[info]                  ·gc.alloc.rate:                   3103.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              64954.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56840.262 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 74618.518 ops/s
[info]                  ·gc.alloc.rate:                   3096.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              65322.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71695.943 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 75071.193 ops/s
[info]                  ·gc.alloc.rate:                   3099.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              64999.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57050.065 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   75172.557 ±(99.9%) 1379.915 ops/s [Average]
[info]   (min, avg, max) = (74618.518, 75172.557, 75540.326), stdev = 358.360
[info]   CI (99.9%): [73792.642, 76552.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3100.500 ±(99.9%) 46.240 MB/sec [Average]
[info]   (min, avg, max) = (3084.467, 3100.500, 3117.628), stdev = 12.008
[info]   CI (99.9%): [3054.260, 3146.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64924.808 ±(99.9%) 1307.256 B/op [Average]
[info]   (min, avg, max) = (64382.030, 64924.808, 65322.690), stdev = 339.490
[info]   CI (99.9%): [63617.553, 66232.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.146), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.092 ±(99.9%) 3.833 B/op [Average]
[info]   (min, avg, max) = (0.871, 2.092, 3.073), stdev = 0.995
[info]   CI (99.9%): [≈ 0, 5.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2986.719 ±(99.9%) 1425.558 MB/sec [Average]
[info]   (min, avg, max) = (2712.224, 2986.719, 3398.765), stdev = 370.213
[info]   CI (99.9%): [1561.161, 4412.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   62554.681 ±(99.9%) 30369.211 B/op [Average]
[info]   (min, avg, max) = (56517.937, 62554.681, 71695.943), stdev = 7886.788
[info]   CI (99.9%): [32185.469, 92923.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 29.41% complete, ETA 01:21:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89928.645 ops/s
[info] # Warmup Iteration   2: 180145.734 ops/s
[info] # Warmup Iteration   3: 183739.201 ops/s
[info] # Warmup Iteration   4: 183894.321 ops/s
[info] # Warmup Iteration   5: 184682.302 ops/s
[info] Iteration   1: 184447.646 ops/s
[info]                  ·gc.alloc.rate:                   963.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              8223.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.265 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11504.574 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 182446.541 ops/s
[info]                  ·gc.alloc.rate:                   930.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              8023.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5815.366 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 183223.336 ops/s
[info]                  ·gc.alloc.rate:                   935.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              8035.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5796.304 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 183663.728 ops/s
[info]                  ·gc.alloc.rate:                   943.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              8083.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11568.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 184982.218 ops/s
[info]                  ·gc.alloc.rate:                   934.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              7952.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5744.092 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   183752.694 ±(99.9%) 3845.278 ops/s [Average]
[info]   (min, avg, max) = (182446.541, 183752.694, 184982.218), stdev = 998.606
[info]   CI (99.9%): [179907.416, 187597.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   941.454 ±(99.9%) 51.369 MB/sec [Average]
[info]   (min, avg, max) = (930.218, 941.454, 963.793), stdev = 13.340
[info]   CI (99.9%): [890.085, 992.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8063.951 ±(99.9%) 389.072 B/op [Average]
[info]   (min, avg, max) = (7952.300, 8063.951, 8223.926), stdev = 101.041
[info]   CI (99.9%): [7674.879, 8453.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.285 ±(99.9%) 1.791 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.285, 1.070), stdev = 0.465
[info]   CI (99.9%): [≈ 0, 2.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   944.409 ±(99.9%) 1422.318 MB/sec [Average]
[info]   (min, avg, max) = (674.172, 944.409, 1349.804), stdev = 369.372
[info]   CI (99.9%): [≈ 0, 2366.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8085.669 ±(99.9%) 12130.148 B/op [Average]
[info]   (min, avg, max) = (5744.092, 8085.669, 11568.010), stdev = 3150.161
[info]   CI (99.9%): [≈ 0, 20215.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 29.65% complete, ETA 01:21:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.791 ops/s
[info] # Warmup Iteration   2: 584027.247 ops/s
[info] # Warmup Iteration   3: 622437.769 ops/s
[info] # Warmup Iteration   4: 617074.154 ops/s
[info] # Warmup Iteration   5: 616347.004 ops/s
[info] Iteration   1: 617750.255 ops/s
[info]                  ·gc.alloc.rate:      335.969 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 616171.524 ops/s
[info]                  ·gc.alloc.rate:                   348.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              889.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1715.108 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 618746.916 ops/s
[info]                  ·gc.alloc.rate:      336.497 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 614107.931 ops/s
[info]                  ·gc.alloc.rate:                   354.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              907.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1720.880 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 614682.459 ops/s
[info]                  ·gc.alloc.rate:      334.264 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   616291.817 ±(99.9%) 7586.944 ops/s [Average]
[info]   (min, avg, max) = (614107.931, 616291.817, 618746.916), stdev = 1970.305
[info]   CI (99.9%): [608704.873, 623878.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   341.814 ±(99.9%) 34.067 MB/sec [Average]
[info]   (min, avg, max) = (334.264, 341.814, 354.219), stdev = 8.847
[info]   CI (99.9%): [307.747, 375.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   873.033 ±(99.9%) 93.319 B/op [Average]
[info]   (min, avg, max) = (856.001, 873.033, 907.898), stdev = 24.235
[info]   CI (99.9%): [779.713, 966.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.762 ±(99.9%) 6.494 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.778), stdev = 1.687
[info]   CI (99.9%): [≈ 0, 7.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1.952 ±(99.9%) 16.646 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.952, 9.685), stdev = 4.323
[info]   CI (99.9%): [≈ 0, 18.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   268.564 ±(99.9%) 1416.060 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.564, 671.413), stdev = 367.746
[info]   CI (99.9%): [≈ 0, 1684.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   687.198 ±(99.9%) 3623.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 687.198, 1720.880), stdev = 940.986
[info]   CI (99.9%): [≈ 0, 4310.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.88% complete, ETA 01:21:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 341356.307 ops/s
[info] # Warmup Iteration   2: 591099.415 ops/s
[info] # Warmup Iteration   3: 628323.985 ops/s
[info] # Warmup Iteration   4: 625032.406 ops/s
[info] # Warmup Iteration   5: 627508.960 ops/s
[info] Iteration   1: 629023.609 ops/s
[info]                  ·gc.alloc.rate:      466.783 MB/sec
[info]                  ·gc.alloc.rate.norm: 1168.087 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 626496.305 ops/s
[info]                  ·gc.alloc.rate:                   480.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1693.570 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 619966.368 ops/s
[info]                  ·gc.alloc.rate:                   485.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              1231.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1711.309 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 631016.852 ops/s
[info]                  ·gc.alloc.rate:      468.306 MB/sec
[info]                  ·gc.alloc.rate.norm: 1168.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 628619.273 ops/s
[info]                  ·gc.alloc.rate:                   489.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              1224.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1687.806 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   627024.481 ±(99.9%) 16401.983 ops/s [Average]
[info]   (min, avg, max) = (619966.368, 627024.481, 631016.852), stdev = 4259.543
[info]   CI (99.9%): [610622.498, 643426.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   478.038 ±(99.9%) 38.617 MB/sec [Average]
[info]   (min, avg, max) = (466.783, 478.038, 489.104), stdev = 10.029
[info]   CI (99.9%): [439.421, 516.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1200.142 ±(99.9%) 117.570 B/op [Average]
[info]   (min, avg, max) = (1168.001, 1200.142, 1231.749), stdev = 30.533
[info]   CI (99.9%): [1082.571, 1317.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.150 ±(99.9%) 1.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.729), stdev = 0.324
[info]   CI (99.9%): [≈ 0, 1.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.376 ±(99.9%) 3.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.376, 1.830), stdev = 0.813
[info]   CI (99.9%): [≈ 0, 3.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   404.425 ±(99.9%) 1421.609 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.425, 674.067), stdev = 369.187
[info]   CI (99.9%): [≈ 0, 1826.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1018.537 ±(99.9%) 3580.457 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1018.537, 1711.309), stdev = 929.833
[info]   CI (99.9%): [≈ 0, 4598.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:20:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 781065.173 ops/s
[info] # Warmup Iteration   2: 955338.938 ops/s
[info] # Warmup Iteration   3: 964601.661 ops/s
[info] # Warmup Iteration   4: 976583.256 ops/s
[info] # Warmup Iteration   5: 966744.824 ops/s
[info] Iteration   1: 972150.138 ops/s
[info]                  ·gc.alloc.rate:      528.707 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 970054.692 ops/s
[info]                  ·gc.alloc.rate:                   550.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              892.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1094.823 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 941076.892 ops/s
[info]                  ·gc.alloc.rate:                   541.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              905.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1126.308 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 975403.433 ops/s
[info]                  ·gc.alloc.rate:                   543.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              877.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1086.626 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 977484.213 ops/s
[info]                  ·gc.alloc.rate:      531.566 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   967233.874 ±(99.9%) 57377.357 ops/s [Average]
[info]   (min, avg, max) = (941076.892, 967233.874, 977484.213), stdev = 14900.717
[info]   CI (99.9%): [909856.516, 1024611.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   539.177 ±(99.9%) 34.535 MB/sec [Average]
[info]   (min, avg, max) = (528.707, 539.177, 550.457), stdev = 8.969
[info]   CI (99.9%): [504.642, 573.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   877.591 ±(99.9%) 84.668 B/op [Average]
[info]   (min, avg, max) = (856.000, 877.591, 905.267), stdev = 21.988
[info]   CI (99.9%): [792.923, 962.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.543 ±(99.9%) 4.679 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.543, 2.717), stdev = 1.215
[info]   CI (99.9%): [≈ 0, 5.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.882 ±(99.9%) 7.590 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.882, 4.408), stdev = 1.971
[info]   CI (99.9%): [≈ 0, 8.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   404.331 ±(99.9%) 1421.282 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.331, 674.909), stdev = 369.102
[info]   CI (99.9%): [≈ 0, 1825.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   661.552 ±(99.9%) 2326.146 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 661.552, 1126.308), stdev = 604.093
[info]   CI (99.9%): [≈ 0, 2987.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 30.35% complete, ETA 01:20:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 761889.449 ops/s
[info] # Warmup Iteration   2: 1021920.257 ops/s
[info] # Warmup Iteration   3: 1051780.908 ops/s
[info] # Warmup Iteration   4: 1050007.897 ops/s
[info] # Warmup Iteration   5: 1041764.034 ops/s
[info] Iteration   1: 1051429.190 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1040630.442 ops/s
[info]                  ·gc.alloc.rate:      1.515 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.291 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1053283.155 ops/s
[info]                  ·gc.alloc.rate:      0.003 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1051523.444 ops/s
[info]                  ·gc.alloc.rate:      0.137 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.206 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1052557.727 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1049884.792 ±(99.9%) 20138.426 ops/s [Average]
[info]   (min, avg, max) = (1040630.442, 1049884.792, 1053283.155), stdev = 5229.885
[info]   CI (99.9%): [1029746.366, 1070023.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.331 ±(99.9%) 2.558 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.331, 1.515), stdev = 0.664
[info]   CI (99.9%): [≈ 0, 2.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.500 ±(99.9%) 3.870 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.500, 2.291), stdev = 1.005
[info]   CI (99.9%): [≈ 0, 4.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.59% complete, ETA 01:20:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12023.508 ops/s
[info] # Warmup Iteration   2: 31462.799 ops/s
[info] # Warmup Iteration   3: 33505.985 ops/s
[info] # Warmup Iteration   4: 33336.677 ops/s
[info] # Warmup Iteration   5: 33632.445 ops/s
[info] Iteration   1: 33470.075 ops/s
[info]                  ·gc.alloc.rate:                   1749.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              82284.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95222.579 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 33518.347 ops/s
[info]                  ·gc.alloc.rate:                   1735.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              81460.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63465.701 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 33642.237 ops/s
[info]                  ·gc.alloc.rate:                   1754.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              82061.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94917.162 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 33609.137 ops/s
[info]                  ·gc.alloc.rate:                   1751.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              81991.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63387.470 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 33363.210 ops/s
[info]                  ·gc.alloc.rate:                   1738.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              82038.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95905.000 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   33520.601 ±(99.9%) 430.360 ops/s [Average]
[info]   (min, avg, max) = (33363.210, 33520.601, 33642.237), stdev = 111.763
[info]   CI (99.9%): [33090.241, 33950.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1745.840 ±(99.9%) 32.365 MB/sec [Average]
[info]   (min, avg, max) = (1735.020, 1745.840, 1754.015), stdev = 8.405
[info]   CI (99.9%): [1713.475, 1778.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   81967.428 ±(99.9%) 1173.888 B/op [Average]
[info]   (min, avg, max) = (81460.915, 81967.428, 82284.913), stdev = 304.855
[info]   CI (99.9%): [80793.540, 83141.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.171 ±(99.9%) 4.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.171, 2.921), stdev = 1.066
[info]   CI (99.9%): [≈ 0, 5.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1758.470 ±(99.9%) 1425.736 MB/sec [Average]
[info]   (min, avg, max) = (1351.744, 1758.470, 2032.646), stdev = 370.259
[info]   CI (99.9%): [332.734, 3184.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   82579.582 ±(99.9%) 67339.649 B/op [Average]
[info]   (min, avg, max) = (63387.470, 82579.582, 95905.000), stdev = 17487.893
[info]   CI (99.9%): [15239.934, 149919.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.82% complete, ETA 01:19:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49393.294 ops/s
[info] # Warmup Iteration   2: 118853.214 ops/s
[info] # Warmup Iteration   3: 117179.209 ops/s
[info] # Warmup Iteration   4: 125218.162 ops/s
[info] # Warmup Iteration   5: 125283.547 ops/s
[info] Iteration   1: 125247.722 ops/s
[info]                  ·gc.alloc.rate:                   1424.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              17908.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16967.330 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 125366.981 ops/s
[info]                  ·gc.alloc.rate:                   1429.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              17944.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25443.567 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 125231.542 ops/s
[info]                  ·gc.alloc.rate:                   1420.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              17851.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16994.749 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 125026.840 ops/s
[info]                  ·gc.alloc.rate:                   1418.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              17856.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17035.188 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 125291.324 ops/s
[info]                  ·gc.alloc.rate:                   1433.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              18011.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17011.308 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   125232.882 ±(99.9%) 487.351 ops/s [Average]
[info]   (min, avg, max) = (125026.840, 125232.882, 125366.981), stdev = 126.564
[info]   CI (99.9%): [124745.531, 125720.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1425.251 ±(99.9%) 24.203 MB/sec [Average]
[info]   (min, avg, max) = (1418.273, 1425.251, 1433.547), stdev = 6.286
[info]   CI (99.9%): [1401.048, 1449.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   17914.505 ±(99.9%) 256.015 B/op [Average]
[info]   (min, avg, max) = (17851.635, 17914.505, 18011.314), stdev = 66.486
[info]   CI (99.9%): [17658.491, 18170.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.628 ±(99.9%) 1.147 B/op [Average]
[info]   (min, avg, max) = (0.261, 0.628, 1.045), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1487.127 ±(99.9%) 1161.032 MB/sec [Average]
[info]   (min, avg, max) = (1350.001, 1487.127, 2026.490), stdev = 301.516
[info]   CI (99.9%): [326.095, 2648.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   18690.428 ±(99.9%) 14536.951 B/op [Average]
[info]   (min, avg, max) = (16967.330, 18690.428, 25443.567), stdev = 3775.200
[info]   CI (99.9%): [4153.478, 33227.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.06% complete, ETA 01:19:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47791.326 ops/s
[info] # Warmup Iteration   2: 160119.481 ops/s
[info] # Warmup Iteration   3: 168718.921 ops/s
[info] # Warmup Iteration   4: 169477.045 ops/s
[info] # Warmup Iteration   5: 170813.763 ops/s
[info] Iteration   1: 171553.379 ops/s
[info]                  ·gc.alloc.rate:                   930.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              8533.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12369.189 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 171442.674 ops/s
[info]                  ·gc.alloc.rate:                   913.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6188.526 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 168556.744 ops/s
[info]                  ·gc.alloc.rate:                   919.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              8584.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6294.392 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 171561.566 ops/s
[info]                  ·gc.alloc.rate:                   936.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              8589.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12374.651 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 171884.244 ops/s
[info]                  ·gc.alloc.rate:                   916.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              8391.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.649 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6178.571 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   170999.721 ±(99.9%) 5296.887 ops/s [Average]
[info]   (min, avg, max) = (168556.744, 170999.721, 171884.244), stdev = 1375.585
[info]   CI (99.9%): [165702.834, 176296.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   923.025 ±(99.9%) 37.485 MB/sec [Average]
[info]   (min, avg, max) = (913.293, 923.025, 936.222), stdev = 9.735
[info]   CI (99.9%): [885.540, 960.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8496.682 ±(99.9%) 391.164 B/op [Average]
[info]   (min, avg, max) = (8384.918, 8496.682, 8589.532), stdev = 101.584
[info]   CI (99.9%): [8105.518, 8887.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.306 ±(99.9%) 1.918 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.306, 1.146), stdev = 0.498
[info]   CI (99.9%): [≈ 0, 2.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   943.948 ±(99.9%) 1422.082 MB/sec [Average]
[info]   (min, avg, max) = (674.017, 943.948, 1348.784), stdev = 369.310
[info]   CI (99.9%): [≈ 0, 2366.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8681.066 ±(99.9%) 12975.053 B/op [Average]
[info]   (min, avg, max) = (6178.571, 8681.066, 12374.651), stdev = 3369.580
[info]   CI (99.9%): [≈ 0, 21656.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.29% complete, ETA 01:19:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143522.862 ops/s
[info] # Warmup Iteration   2: 202780.355 ops/s
[info] # Warmup Iteration   3: 208656.063 ops/s
[info] # Warmup Iteration   4: 209231.426 ops/s
[info] # Warmup Iteration   5: 209550.577 ops/s
[info] Iteration   1: 209237.400 ops/s
[info]                  ·gc.alloc.rate:                   984.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              7405.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10126.884 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 207762.735 ops/s
[info]                  ·gc.alloc.rate:                   968.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              7339.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5096.838 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 209449.902 ops/s
[info]                  ·gc.alloc.rate:                   991.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              7451.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10111.678 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 209894.561 ops/s
[info]                  ·gc.alloc.rate:                   971.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              7289.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5044.785 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 209052.057 ops/s
[info]                  ·gc.alloc.rate:                   981.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              7389.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10133.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   209079.331 ±(99.9%) 3081.164 ops/s [Average]
[info]   (min, avg, max) = (207762.735, 209079.331, 209894.561), stdev = 800.168
[info]   CI (99.9%): [205998.168, 212160.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   979.674 ±(99.9%) 35.766 MB/sec [Average]
[info]   (min, avg, max) = (968.840, 979.674, 991.495), stdev = 9.288
[info]   CI (99.9%): [943.907, 1015.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   7375.033 ±(99.9%) 240.257 B/op [Average]
[info]   (min, avg, max) = (7289.582, 7375.033, 7451.440), stdev = 62.394
[info]   CI (99.9%): [7134.776, 7615.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.376 ±(99.9%) 1.571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.376, 0.939), stdev = 0.408
[info]   CI (99.9%): [≈ 0, 1.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1076.654 ±(99.9%) 1419.850 MB/sec [Average]
[info]   (min, avg, max) = (672.628, 1076.654, 1346.468), stdev = 368.731
[info]   CI (99.9%): [≈ 0, 2496.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8102.656 ±(99.9%) 10657.639 B/op [Average]
[info]   (min, avg, max) = (5044.785, 8102.656, 10133.095), stdev = 2767.755
[info]   CI (99.9%): [≈ 0, 18760.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:19:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6723.768 ops/s
[info] # Warmup Iteration   2: 60936.482 ops/s
[info] # Warmup Iteration   3: 66269.898 ops/s
[info] # Warmup Iteration   4: 67095.684 ops/s
[info] # Warmup Iteration   5: 66998.171 ops/s
[info] Iteration   1: 67498.687 ops/s
[info]                  ·gc.alloc.rate:                   2648.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              61768.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63029.498 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 67407.701 ops/s
[info]                  ·gc.alloc.rate:                   2643.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              61729.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.731 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63232.159 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 67168.708 ops/s
[info]                  ·gc.alloc.rate:                   2663.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              62387.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.259 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63493.360 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 66973.436 ops/s
[info]                  ·gc.alloc.rate:                   2643.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              62098.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47855.379 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 67483.594 ops/s
[info]                  ·gc.alloc.rate:                   2685.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              62646.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.549 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63387.167 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   67306.425 ±(99.9%) 879.048 ops/s [Average]
[info]   (min, avg, max) = (66973.436, 67306.425, 67498.687), stdev = 228.286
[info]   CI (99.9%): [66427.378, 68185.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2656.755 ±(99.9%) 69.829 MB/sec [Average]
[info]   (min, avg, max) = (2643.237, 2656.755, 2685.790), stdev = 18.134
[info]   CI (99.9%): [2586.927, 2726.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   62125.944 ±(99.9%) 1522.277 B/op [Average]
[info]   (min, avg, max) = (61729.459, 62125.944, 62646.388), stdev = 395.331
[info]   CI (99.9%): [60603.666, 63648.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.459 ±(99.9%) 1.861 B/op [Average]
[info]   (min, avg, max) = (0.975, 1.459, 1.944), stdev = 0.483
[info]   CI (99.9%): [≈ 0, 3.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2574.983 ±(99.9%) 1158.280 MB/sec [Average]
[info]   (min, avg, max) = (2036.982, 2574.983, 2717.549), stdev = 300.802
[info]   CI (99.9%): [1416.704, 3733.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   60199.513 ±(99.9%) 26580.182 B/op [Average]
[info]   (min, avg, max) = (47855.379, 60199.513, 63493.360), stdev = 6902.789
[info]   CI (99.9%): [33619.330, 86779.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.76% complete, ETA 01:18:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78842.618 ops/s
[info] # Warmup Iteration   2: 168391.989 ops/s
[info] # Warmup Iteration   3: 176097.297 ops/s
[info] # Warmup Iteration   4: 175198.743 ops/s
[info] # Warmup Iteration   5: 175726.603 ops/s
[info] Iteration   1: 177342.856 ops/s
[info]                  ·gc.alloc.rate:      613.683 MB/sec
[info]                  ·gc.alloc.rate.norm: 5448.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 177081.130 ops/s
[info]                  ·gc.alloc.rate:                   632.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              5624.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5991.626 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 176997.126 ops/s
[info]                  ·gc.alloc.rate:                   626.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              5571.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5994.131 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 176516.507 ops/s
[info]                  ·gc.alloc.rate:                   635.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              5669.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6016.741 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 176976.361 ops/s
[info]                  ·gc.alloc.rate:                   626.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              5573.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6000.833 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   176982.796 ±(99.9%) 1150.346 ops/s [Average]
[info]   (min, avg, max) = (176516.507, 176982.796, 177342.856), stdev = 298.741
[info]   CI (99.9%): [175832.450, 178133.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   627.079 ±(99.9%) 32.659 MB/sec [Average]
[info]   (min, avg, max) = (613.683, 627.079, 635.762), stdev = 8.481
[info]   CI (99.9%): [594.419, 659.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5577.365 ±(99.9%) 318.650 B/op [Average]
[info]   (min, avg, max) = (5448.002, 5577.365, 5669.119), stdev = 82.752
[info]   CI (99.9%): [5258.715, 5896.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.111 ±(99.9%) 0.639 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.111, 0.371), stdev = 0.166
[info]   CI (99.9%): [≈ 0, 0.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   539.509 ±(99.9%) 1161.334 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.509, 674.746), stdev = 301.595
[info]   CI (99.9%): [≈ 0, 1700.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4800.666 ±(99.9%) 10333.864 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4800.666, 6016.741), stdev = 2683.672
[info]   CI (99.9%): [≈ 0, 15134.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.00% complete, ETA 01:18:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 322312.001 ops/s
[info] # Warmup Iteration   2: 636948.520 ops/s
[info] # Warmup Iteration   3: 652465.820 ops/s
[info] # Warmup Iteration   4: 678383.826 ops/s
[info] # Warmup Iteration   5: 678361.943 ops/s
[info] Iteration   1: 685138.097 ops/s
[info]                  ·gc.alloc.rate:                   716.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              1644.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1548.576 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 685775.422 ops/s
[info]                  ·gc.alloc.rate:                   708.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              1626.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1547.136 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 683526.931 ops/s
[info]                  ·gc.alloc.rate:                   705.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              1623.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1552.993 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 684268.646 ops/s
[info]                  ·gc.alloc.rate:                   709.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              1631.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1551.252 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 683787.096 ops/s
[info]                  ·gc.alloc.rate:                   716.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              1649.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1553.117 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   684499.238 ±(99.9%) 3623.744 ops/s [Average]
[info]   (min, avg, max) = (683526.931, 684499.238, 685775.422), stdev = 941.075
[info]   CI (99.9%): [680875.494, 688122.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   711.143 ±(99.9%) 19.051 MB/sec [Average]
[info]   (min, avg, max) = (705.066, 711.143, 716.488), stdev = 4.947
[info]   CI (99.9%): [692.093, 730.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1635.241 ±(99.9%) 43.543 B/op [Average]
[info]   (min, avg, max) = (1623.671, 1635.241, 1649.207), stdev = 11.308
[info]   CI (99.9%): [1591.698, 1678.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.105 ±(99.9%) 0.302 B/op [Average]
[info]   (min, avg, max) = (0.048, 0.105, 0.239), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.340 ±(99.9%) 1.010 MB/sec [Average]
[info]   (min, avg, max) = (674.051, 674.340, 674.742), stdev = 0.262
[info]   CI (99.9%): [673.330, 675.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1550.615 ±(99.9%) 10.292 B/op [Average]
[info]   (min, avg, max) = (1547.136, 1550.615, 1553.117), stdev = 2.673
[info]   CI (99.9%): [1540.323, 1560.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.24% complete, ETA 01:18:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 541376.604 ops/s
[info] # Warmup Iteration   2: 624443.594 ops/s
[info] # Warmup Iteration   3: 641038.014 ops/s
[info] # Warmup Iteration   4: 641623.794 ops/s
[info] # Warmup Iteration   5: 646398.258 ops/s
[info] Iteration   1: 645320.937 ops/s
[info]                  ·gc.alloc.rate:                   508.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              1239.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1644.089 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 639143.993 ops/s
[info]                  ·gc.alloc.rate:                   513.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              1263.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1660.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 643572.889 ops/s
[info]                  ·gc.alloc.rate:                   518.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              1268.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.341 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1646.848 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 645213.907 ops/s
[info]                  ·gc.alloc.rate:      501.052 MB/sec
[info]                  ·gc.alloc.rate.norm: 1222.272 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 642155.965 ops/s
[info]                  ·gc.alloc.rate:                   511.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              1253.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1650.589 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   643081.538 ±(99.9%) 9848.220 ops/s [Average]
[info]   (min, avg, max) = (639143.993, 643081.538, 645320.937), stdev = 2557.551
[info]   CI (99.9%): [633233.318, 652929.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   510.475 ±(99.9%) 24.908 MB/sec [Average]
[info]   (min, avg, max) = (501.052, 510.475, 518.519), stdev = 6.469
[info]   CI (99.9%): [485.567, 535.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1249.477 ±(99.9%) 72.362 B/op [Average]
[info]   (min, avg, max) = (1222.272, 1249.477, 1268.185), stdev = 18.792
[info]   CI (99.9%): [1177.116, 1321.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.566 ±(99.9%) 4.875 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.566, 2.831), stdev = 1.266
[info]   CI (99.9%): [≈ 0, 5.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.394 ±(99.9%) 12.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.394, 6.971), stdev = 3.118
[info]   CI (99.9%): [≈ 0, 13.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538.971 ±(99.9%) 1160.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.971, 674.120), stdev = 301.294
[info]   CI (99.9%): [≈ 0, 1699.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1320.309 ±(99.9%) 2842.160 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1320.309, 1660.022), stdev = 738.100
[info]   CI (99.9%): [≈ 0, 4162.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 32.47% complete, ETA 01:18:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 563827.065 ops/s
[info] # Warmup Iteration   2: 688690.101 ops/s
[info] # Warmup Iteration   3: 699421.429 ops/s
[info] # Warmup Iteration   4: 699834.460 ops/s
[info] # Warmup Iteration   5: 698843.950 ops/s
[info] Iteration   1: 697602.152 ops/s
[info]                  ·gc.alloc.rate:      0.908 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.048 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 699307.126 ops/s
[info]                  ·gc.alloc.rate:      0.045 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.101 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 699677.633 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 699626.431 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 699146.069 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   699071.882 ±(99.9%) 3276.109 ops/s [Average]
[info]   (min, avg, max) = (697602.152, 699071.882, 699677.633), stdev = 850.795
[info]   CI (99.9%): [695795.773, 702347.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.191 ±(99.9%) 1.545 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.191, 0.908), stdev = 0.401
[info]   CI (99.9%): [≈ 0, 1.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.430 ±(99.9%) 3.486 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.430, 2.048), stdev = 0.905
[info]   CI (99.9%): [≈ 0, 3.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.71% complete, ETA 01:17:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118700.019 ops/s
[info] # Warmup Iteration   2: 284335.837 ops/s
[info] # Warmup Iteration   3: 295508.424 ops/s
[info] # Warmup Iteration   4: 295286.683 ops/s
[info] # Warmup Iteration   5: 296774.444 ops/s
[info] Iteration   1: 287328.737 ops/s
[info]                  ·gc.alloc.rate:                   804.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              4407.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3696.345 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 296740.533 ops/s
[info]                  ·gc.alloc.rate:                   839.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              4451.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3579.180 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 297079.628 ops/s
[info]                  ·gc.alloc.rate:                   832.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              4412.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3575.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 292816.614 ops/s
[info]                  ·gc.alloc.rate:                   848.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              4562.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7254.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 296653.511 ops/s
[info]                  ·gc.alloc.rate:                   830.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              4406.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3580.145 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   294123.805 ±(99.9%) 16092.890 ops/s [Average]
[info]   (min, avg, max) = (287328.737, 294123.805, 297079.628), stdev = 4179.272
[info]   CI (99.9%): [278030.915, 310216.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   831.139 ±(99.9%) 63.561 MB/sec [Average]
[info]   (min, avg, max) = (804.527, 831.139, 848.839), stdev = 16.507
[info]   CI (99.9%): [767.577, 894.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4448.086 ±(99.9%) 257.028 B/op [Average]
[info]   (min, avg, max) = (4406.278, 4448.086, 4562.696), stdev = 66.749
[info]   CI (99.9%): [4191.058, 4705.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.090 ±(99.9%) 0.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.090, 0.224), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   809.683 ±(99.9%) 1162.125 MB/sec [Average]
[info]   (min, avg, max) = (674.676, 809.683, 1349.560), stdev = 301.800
[info]   CI (99.9%): [≈ 0, 1971.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4336.972 ±(99.9%) 6282.604 B/op [Average]
[info]   (min, avg, max) = (3575.012, 4336.972, 7254.178), stdev = 1631.572
[info]   CI (99.9%): [≈ 0, 10619.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.94% complete, ETA 01:17:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4123.686 ops/s
[info] # Warmup Iteration   2: 10000.283 ops/s
[info] # Warmup Iteration   3: 10254.715 ops/s
[info] # Warmup Iteration   4: 10182.589 ops/s
[info] # Warmup Iteration   5: 10207.476 ops/s
[info] Iteration   1: 10237.941 ops/s
[info]                  ·gc.alloc.rate:                   1239.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              190570.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103475.200 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 10136.424 ops/s
[info]                  ·gc.alloc.rate:                   1241.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              192792.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 209135.991 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 10173.029 ops/s
[info]                  ·gc.alloc.rate:                   1240.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              191891.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.970 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 208561.107 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 10228.438 ops/s
[info]                  ·gc.alloc.rate:                   1253.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              192926.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207624.607 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 10230.037 ops/s
[info]                  ·gc.alloc.rate:                   1255.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              193225.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207829.567 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   10201.174 ±(99.9%) 171.266 ops/s [Average]
[info]   (min, avg, max) = (10136.424, 10201.174, 10237.941), stdev = 44.477
[info]   CI (99.9%): [10029.908, 10372.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1246.154 ±(99.9%) 30.403 MB/sec [Average]
[info]   (min, avg, max) = (1239.532, 1246.154, 1255.660), stdev = 7.896
[info]   CI (99.9%): [1215.751, 1276.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   192281.387 ±(99.9%) 4149.927 B/op [Average]
[info]   (min, avg, max) = (190570.859, 192281.387, 193225.505), stdev = 1077.723
[info]   CI (99.9%): [188131.460, 196431.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.001 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.021, 0.021), stdev = 0.001
[info]   CI (99.9%): [0.021, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.211 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (3.200, 3.211, 3.232), stdev = 0.014
[info]   CI (99.9%): [3.157, 3.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1213.537 ±(99.9%) 1163.485 MB/sec [Average]
[info]   (min, avg, max) = (673.035, 1213.537, 1350.564), stdev = 302.153
[info]   CI (99.9%): [50.052, 2377.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   187325.294 ±(99.9%) 180508.476 B/op [Average]
[info]   (min, avg, max) = (103475.200, 187325.294, 209135.991), stdev = 46877.478
[info]   CI (99.9%): [6816.818, 367833.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.18% complete, ETA 01:17:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2871.331 ops/s
[info] # Warmup Iteration   2: 9393.758 ops/s
[info] # Warmup Iteration   3: 10096.948 ops/s
[info] # Warmup Iteration   4: 10034.744 ops/s
[info] # Warmup Iteration   5: 10029.927 ops/s
[info] Iteration   1: 10092.275 ops/s
[info]                  ·gc.alloc.rate:                   1154.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              180087.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105127.691 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 10031.991 ops/s
[info]                  ·gc.alloc.rate:                   1177.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              184803.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 211596.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 10067.317 ops/s
[info]                  ·gc.alloc.rate:                   1166.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              182462.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 210985.696 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 10110.885 ops/s
[info]                  ·gc.alloc.rate:                   1146.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              178449.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105137.552 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 10097.381 ops/s
[info]                  ·gc.alloc.rate:                   1158.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              180676.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 210649.575 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   10079.970 ±(99.9%) 119.810 ops/s [Average]
[info]   (min, avg, max) = (10031.991, 10079.970, 10110.885), stdev = 31.114
[info]   CI (99.9%): [9960.160, 10199.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1160.961 ±(99.9%) 46.552 MB/sec [Average]
[info]   (min, avg, max) = (1146.263, 1160.961, 1177.950), stdev = 12.089
[info]   CI (99.9%): [1114.409, 1207.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   181296.193 ±(99.9%) 9354.654 B/op [Average]
[info]   (min, avg, max) = (178449.940, 181296.193, 184803.649), stdev = 2429.374
[info]   CI (99.9%): [171941.539, 190650.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.607 ±(99.9%) 16.391 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.607, 9.796), stdev = 4.257
[info]   CI (99.9%): [≈ 0, 18.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1079.749 ±(99.9%) 1423.857 MB/sec [Average]
[info]   (min, avg, max) = (674.028, 1079.749, 1351.253), stdev = 369.771
[info]   CI (99.9%): [≈ 0, 2503.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   168699.314 ±(99.9%) 223449.699 B/op [Average]
[info]   (min, avg, max) = (105127.691, 168699.314, 211596.054), stdev = 58029.177
[info]   CI (99.9%): [≈ 0, 392149.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.41% complete, ETA 01:16:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 175501.533 ops/s
[info] # Warmup Iteration   2: 245499.205 ops/s
[info] # Warmup Iteration   3: 259350.584 ops/s
[info] # Warmup Iteration   4: 259971.533 ops/s
[info] # Warmup Iteration   5: 258510.165 ops/s
[info] Iteration   1: 255523.205 ops/s
[info]                  ·gc.alloc.rate:                   1706.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              10514.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12436.108 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 260454.652 ops/s
[info]                  ·gc.alloc.rate:                   1747.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              10560.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8141.149 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 257721.375 ops/s
[info]                  ·gc.alloc.rate:                   1743.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              10650.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12352.436 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 260545.541 ops/s
[info]                  ·gc.alloc.rate:                   1734.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              10475.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8155.850 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 258680.959 ops/s
[info]                  ·gc.alloc.rate:                   1762.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              10725.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12338.215 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   258585.146 ±(99.9%) 8047.055 ops/s [Average]
[info]   (min, avg, max) = (255523.205, 258585.146, 260545.541), stdev = 2089.795
[info]   CI (99.9%): [250538.091, 266632.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1738.943 ±(99.9%) 79.925 MB/sec [Average]
[info]   (min, avg, max) = (1706.712, 1738.943, 1762.712), stdev = 20.756
[info]   CI (99.9%): [1659.018, 1818.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10585.423 ±(99.9%) 393.274 B/op [Average]
[info]   (min, avg, max) = (10475.344, 10585.423, 10725.989), stdev = 102.132
[info]   CI (99.9%): [10192.150, 10978.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.228 ±(99.9%) 0.409 B/op [Average]
[info]   (min, avg, max) = (0.126, 0.228, 0.381), stdev = 0.106
[info]   CI (99.9%): [≈ 0, 0.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1753.181 ±(99.9%) 1422.241 MB/sec [Average]
[info]   (min, avg, max) = (1347.094, 1753.181, 2027.666), stdev = 369.351
[info]   CI (99.9%): [330.940, 3175.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10684.752 ±(99.9%) 8916.468 B/op [Average]
[info]   (min, avg, max) = (8141.149, 10684.752, 12436.108), stdev = 2315.578
[info]   CI (99.9%): [1768.284, 19601.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.65% complete, ETA 01:16:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1164.290 ops/s
[info] # Warmup Iteration   2: 7357.168 ops/s
[info] # Warmup Iteration   3: 7703.683 ops/s
[info] # Warmup Iteration   4: 7844.658 ops/s
[info] # Warmup Iteration   5: 7846.208 ops/s
[info] Iteration   1: 7831.905 ops/s
[info]                  ·gc.alloc.rate:                   1402.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              281868.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 270945.720 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7759.382 ops/s
[info]                  ·gc.alloc.rate:                   1398.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              283687.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 273594.434 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7821.660 ops/s
[info]                  ·gc.alloc.rate:                   1394.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              280624.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 271560.140 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7799.485 ops/s
[info]                  ·gc.alloc.rate:                   1406.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              283823.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 272594.812 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7813.062 ops/s
[info]                  ·gc.alloc.rate:                   1396.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              281406.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 272409.685 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   7805.099 ±(99.9%) 108.534 ops/s [Average]
[info]   (min, avg, max) = (7759.382, 7805.099, 7831.905), stdev = 28.186
[info]   CI (99.9%): [7696.565, 7913.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1399.686 ±(99.9%) 18.092 MB/sec [Average]
[info]   (min, avg, max) = (1394.500, 1399.686, 1406.325), stdev = 4.698
[info]   CI (99.9%): [1381.595, 1417.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   282281.974 ±(99.9%) 5457.937 B/op [Average]
[info]   (min, avg, max) = (280624.009, 282281.974, 283823.142), stdev = 1417.409
[info]   CI (99.9%): [276824.038, 287739.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.523 ±(99.9%) 8.870 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.523, 4.222), stdev = 2.303
[info]   CI (99.9%): [≈ 0, 11.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1349.800 ±(99.9%) 5.986 MB/sec [Average]
[info]   (min, avg, max) = (1347.962, 1349.800, 1351.953), stdev = 1.554
[info]   CI (99.9%): [1343.814, 1355.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   272220.958 ±(99.9%) 3910.221 B/op [Average]
[info]   (min, avg, max) = (270945.720, 272220.958, 273594.434), stdev = 1015.472
[info]   CI (99.9%): [268310.737, 276131.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.88% complete, ETA 01:16:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9138.332 ops/s
[info] # Warmup Iteration   2: 23810.663 ops/s
[info] # Warmup Iteration   3: 23796.154 ops/s
[info] # Warmup Iteration   4: 24239.111 ops/s
[info] # Warmup Iteration   5: 24264.022 ops/s
[info] Iteration   1: 24147.408 ops/s
[info]                  ·gc.alloc.rate:                   989.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              64483.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43980.105 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 24530.318 ops/s
[info]                  ·gc.alloc.rate:                   1026.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              65847.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86576.533 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 24521.340 ops/s
[info]                  ·gc.alloc.rate:                   1002.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              64318.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43309.447 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 24524.967 ops/s
[info]                  ·gc.alloc.rate:                   1015.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              65198.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86693.796 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 24483.367 ops/s
[info]                  ·gc.alloc.rate:                   995.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              64038.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43440.883 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   24441.480 ±(99.9%) 637.025 ops/s [Average]
[info]   (min, avg, max) = (24147.408, 24441.480, 24530.318), stdev = 165.433
[info]   CI (99.9%): [23804.455, 25078.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1005.843 ±(99.9%) 57.860 MB/sec [Average]
[info]   (min, avg, max) = (989.175, 1005.843, 1026.192), stdev = 15.026
[info]   CI (99.9%): [947.983, 1063.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   64777.221 ±(99.9%) 2833.079 B/op [Average]
[info]   (min, avg, max) = (64038.221, 64777.221, 65847.070), stdev = 735.742
[info]   CI (99.9%): [61944.143, 67610.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.335 ±(99.9%) 8.906 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.335, 5.342), stdev = 2.313
[info]   CI (99.9%): [≈ 0, 10.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   944.999 ±(99.9%) 1423.592 MB/sec [Average]
[info]   (min, avg, max) = (674.657, 944.999, 1350.725), stdev = 369.702
[info]   CI (99.9%): [≈ 0, 2368.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   60800.153 ±(99.9%) 90819.003 B/op [Average]
[info]   (min, avg, max) = (43309.447, 60800.153, 86693.796), stdev = 23585.407
[info]   CI (99.9%): [≈ 0, 151619.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.12% complete, ETA 01:16:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9904.469 ops/s
[info] # Warmup Iteration   2: 29292.756 ops/s
[info] # Warmup Iteration   3: 31061.517 ops/s
[info] # Warmup Iteration   4: 30807.280 ops/s
[info] # Warmup Iteration   5: 30969.514 ops/s
[info] Iteration   1: 31146.458 ops/s
[info]                  ·gc.alloc.rate:                   1153.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              58292.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.990 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34063.910 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 31110.820 ops/s
[info]                  ·gc.alloc.rate:                   1180.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              59729.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68202.257 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 31124.738 ops/s
[info]                  ·gc.alloc.rate:                   1168.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              59067.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68211.841 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 31013.116 ops/s
[info]                  ·gc.alloc.rate:                   1175.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              59654.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68491.955 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 31169.360 ops/s
[info]                  ·gc.alloc.rate:                   1164.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              58801.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34106.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   31112.898 ±(99.9%) 231.161 ops/s [Average]
[info]   (min, avg, max) = (31013.116, 31112.898, 31169.360), stdev = 60.032
[info]   CI (99.9%): [30881.737, 31344.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1168.402 ±(99.9%) 40.392 MB/sec [Average]
[info]   (min, avg, max) = (1153.373, 1168.402, 1180.653), stdev = 10.490
[info]   CI (99.9%): [1128.011, 1208.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   59109.010 ±(99.9%) 2315.346 B/op [Average]
[info]   (min, avg, max) = (58292.259, 59109.010, 59729.476), stdev = 601.288
[info]   CI (99.9%): [56793.664, 61424.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.684 ±(99.9%) 8.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.684, 5.263), stdev = 2.183
[info]   CI (99.9%): [≈ 0, 10.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1079.195 ±(99.9%) 1421.764 MB/sec [Average]
[info]   (min, avg, max) = (673.990, 1079.195, 1349.543), stdev = 369.228
[info]   CI (99.9%): [≈ 0, 2500.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   54615.202 ±(99.9%) 72168.041 B/op [Average]
[info]   (min, avg, max) = (34063.910, 54615.202, 68491.955), stdev = 18741.811
[info]   CI (99.9%): [≈ 0, 126783.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.35% complete, ETA 01:15:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 355658.753 ops/s
[info] # Warmup Iteration   2: 428867.212 ops/s
[info] # Warmup Iteration   3: 464966.670 ops/s
[info] # Warmup Iteration   4: 464699.644 ops/s
[info] # Warmup Iteration   5: 470858.194 ops/s
[info] Iteration   1: 471769.282 ops/s
[info]                  ·gc.alloc.rate:                   874.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              2919.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2249.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 470104.169 ops/s
[info]                  ·gc.alloc.rate:                   875.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              2931.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2254.738 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 473397.726 ops/s
[info]                  ·gc.alloc.rate:                   878.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              2921.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2238.943 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 470959.252 ops/s
[info]                  ·gc.alloc.rate:                   887.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              2966.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.140 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4501.358 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 472230.890 ops/s
[info]                  ·gc.alloc.rate:                   868.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              2894.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.589 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2244.532 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   471692.264 ±(99.9%) 4818.693 ops/s [Average]
[info]   (min, avg, max) = (470104.169, 471692.264, 473397.726), stdev = 1251.399
[info]   CI (99.9%): [466873.570, 476510.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   877.174 ±(99.9%) 26.947 MB/sec [Average]
[info]   (min, avg, max) = (868.709, 877.174, 887.884), stdev = 6.998
[info]   CI (99.9%): [850.227, 904.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2926.805 ±(99.9%) 100.821 B/op [Average]
[info]   (min, avg, max) = (2894.713, 2926.805, 2966.792), stdev = 26.183
[info]   CI (99.9%): [2825.983, 3027.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.083 ±(99.9%) 0.719 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.417), stdev = 0.187
[info]   CI (99.9%): [≈ 0, 0.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   808.325 ±(99.9%) 1159.841 MB/sec [Average]
[info]   (min, avg, max) = (673.403, 808.325, 1347.140), stdev = 301.207
[info]   CI (99.9%): [≈ 0, 1968.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2697.716 ±(99.9%) 3882.540 B/op [Average]
[info]   (min, avg, max) = (2238.943, 2697.716, 4501.358), stdev = 1008.283
[info]   CI (99.9%): [≈ 0, 6580.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 34.59% complete, ETA 01:15:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 410604.409 ops/s
[info] # Warmup Iteration   2: 519532.930 ops/s
[info] # Warmup Iteration   3: 530701.627 ops/s
[info] # Warmup Iteration   4: 521514.918 ops/s
[info] # Warmup Iteration   5: 530881.527 ops/s
[info] Iteration   1: 530823.741 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 529740.599 ops/s
[info]                  ·gc.alloc.rate:      2.145 MB/sec
[info]                  ·gc.alloc.rate.norm: 6.373 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 530801.559 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 530688.276 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 530822.920 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   530575.419 ±(99.9%) 1809.926 ops/s [Average]
[info]   (min, avg, max) = (529740.599, 530575.419, 530823.741), stdev = 470.032
[info]   CI (99.9%): [528765.493, 532385.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.429 ±(99.9%) 3.693 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.429, 2.145), stdev = 0.959
[info]   CI (99.9%): [≈ 0, 4.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.275 ±(99.9%) 10.973 B/op [Average]
[info]   (min, avg, max) = (0.001, 1.275, 6.373), stdev = 2.850
[info]   CI (99.9%): [≈ 0, 12.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.82% complete, ETA 01:15:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9558.109 ops/s
[info] # Warmup Iteration   2: 27264.950 ops/s
[info] # Warmup Iteration   3: 27563.109 ops/s
[info] # Warmup Iteration   4: 27636.931 ops/s
[info] # Warmup Iteration   5: 27516.463 ops/s
[info] Iteration   1: 27823.377 ops/s
[info]                  ·gc.alloc.rate:                   1136.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              64265.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38095.096 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 27713.411 ops/s
[info]                  ·gc.alloc.rate:                   1159.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              65848.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76565.454 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 27695.585 ops/s
[info]                  ·gc.alloc.rate:                   1148.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              65264.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76658.594 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 27732.981 ops/s
[info]                  ·gc.alloc.rate:                   1130.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              64139.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38314.590 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 27697.467 ops/s
[info]                  ·gc.alloc.rate:                   1153.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              65547.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76744.922 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   27732.564 ±(99.9%) 203.878 ops/s [Average]
[info]   (min, avg, max) = (27695.585, 27732.564, 27823.377), stdev = 52.946
[info]   CI (99.9%): [27528.687, 27936.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1145.515 ±(99.9%) 47.064 MB/sec [Average]
[info]   (min, avg, max) = (1130.097, 1145.515, 1159.756), stdev = 12.222
[info]   CI (99.9%): [1098.451, 1192.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   65013.166 ±(99.9%) 2963.626 B/op [Average]
[info]   (min, avg, max) = (64139.401, 65013.166, 65848.674), stdev = 769.644
[info]   CI (99.9%): [62049.541, 67976.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.183 ±(99.9%) 4.554 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.183, 2.366), stdev = 1.183
[info]   CI (99.9%): [≈ 0, 5.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1079.230 ±(99.9%) 1423.509 MB/sec [Average]
[info]   (min, avg, max) = (673.453, 1079.230, 1350.301), stdev = 369.681
[info]   CI (99.9%): [≈ 0, 2502.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   61275.731 ±(99.9%) 81098.342 B/op [Average]
[info]   (min, avg, max) = (38095.096, 61275.731, 76744.922), stdev = 21060.982
[info]   CI (99.9%): [≈ 0, 142374.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.06% complete, ETA 01:15:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10911.228 ops/s
[info] # Warmup Iteration   2: 30344.039 ops/s
[info] # Warmup Iteration   3: 30606.206 ops/s
[info] # Warmup Iteration   4: 30637.563 ops/s
[info] # Warmup Iteration   5: 30097.497 ops/s
[info] Iteration   1: 30741.096 ops/s
[info]                  ·gc.alloc.rate:                   1583.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              81094.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103455.906 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 30364.235 ops/s
[info]                  ·gc.alloc.rate:                   1564.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              81072.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69916.576 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 30862.869 ops/s
[info]                  ·gc.alloc.rate:                   1561.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              79664.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68858.767 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 30794.805 ops/s
[info]                  ·gc.alloc.rate:                   1585.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              81039.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103649.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 30850.156 ops/s
[info]                  ·gc.alloc.rate:                   1586.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              80961.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69055.467 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   30722.632 ±(99.9%) 793.660 ops/s [Average]
[info]   (min, avg, max) = (30364.235, 30722.632, 30862.869), stdev = 206.111
[info]   CI (99.9%): [29928.973, 31516.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1576.510 ±(99.9%) 46.884 MB/sec [Average]
[info]   (min, avg, max) = (1561.992, 1576.510, 1586.628), stdev = 12.176
[info]   CI (99.9%): [1529.626, 1623.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   80766.514 ±(99.9%) 2380.299 B/op [Average]
[info]   (min, avg, max) = (79664.384, 80766.514, 81094.524), stdev = 618.156
[info]   CI (99.9%): [78386.215, 83146.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.128 ±(99.9%) 8.198 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.128, 5.319), stdev = 2.129
[info]   CI (99.9%): [≈ 0, 10.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1620.236 ±(99.9%) 1420.272 MB/sec [Average]
[info]   (min, avg, max) = (1349.224, 1620.236, 2027.790), stdev = 368.840
[info]   CI (99.9%): [199.964, 3040.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   82987.146 ±(99.9%) 72306.684 B/op [Average]
[info]   (min, avg, max) = (68858.767, 82987.146, 103649.014), stdev = 18777.816
[info]   CI (99.9%): [10680.462, 155293.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.29% complete, ETA 01:14:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7024.610 ops/s
[info] # Warmup Iteration   2: 28704.540 ops/s
[info] # Warmup Iteration   3: 28605.825 ops/s
[info] # Warmup Iteration   4: 29017.090 ops/s
[info] # Warmup Iteration   5: 29121.009 ops/s
[info] Iteration   1: 29846.952 ops/s
[info]                  ·gc.alloc.rate:                   1308.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              68972.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71094.661 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 29940.704 ops/s
[info]                  ·gc.alloc.rate:                   1306.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              68677.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.866 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70906.512 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 29922.646 ops/s
[info]                  ·gc.alloc.rate:                   1298.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              68300.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71001.713 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 29912.841 ops/s
[info]                  ·gc.alloc.rate:                   1293.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              68043.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71080.393 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 29748.928 ops/s
[info]                  ·gc.alloc.rate:                   1299.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              68775.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.656 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71520.248 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   29874.414 ±(99.9%) 302.578 ops/s [Average]
[info]   (min, avg, max) = (29748.928, 29874.414, 29940.704), stdev = 78.578
[info]   CI (99.9%): [29571.836, 30176.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1301.224 ±(99.9%) 23.222 MB/sec [Average]
[info]   (min, avg, max) = (1293.313, 1301.224, 1308.024), stdev = 6.031
[info]   CI (99.9%): [1278.002, 1324.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   68553.851 ±(99.9%) 1446.462 B/op [Average]
[info]   (min, avg, max) = (68043.564, 68553.851, 68972.932), stdev = 375.642
[info]   CI (99.9%): [67107.389, 70000.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.975 ±(99.9%) 5.507 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.975, 3.293), stdev = 1.430
[info]   CI (99.9%): [≈ 0, 7.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1349.945 ±(99.9%) 5.485 MB/sec [Average]
[info]   (min, avg, max) = (1348.261, 1349.945, 1351.656), stdev = 1.424
[info]   CI (99.9%): [1344.460, 1355.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   71120.706 ±(99.9%) 907.103 B/op [Average]
[info]   (min, avg, max) = (70906.512, 71120.706, 71520.248), stdev = 235.572
[info]   CI (99.9%): [70213.603, 72027.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.53% complete, ETA 01:14:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 334622.435 ops/s
[info] # Warmup Iteration   2: 436381.882 ops/s
[info] # Warmup Iteration   3: 452487.820 ops/s
[info] # Warmup Iteration   4: 463408.103 ops/s
[info] # Warmup Iteration   5: 462892.829 ops/s
[info] Iteration   1: 460509.806 ops/s
[info]                  ·gc.alloc.rate:                   1237.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              4231.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.964 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4601.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 462536.934 ops/s
[info]                  ·gc.alloc.rate:                   1238.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              4213.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4579.702 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 464183.592 ops/s
[info]                  ·gc.alloc.rate:                   1221.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              4142.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2282.326 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 462739.488 ops/s
[info]                  ·gc.alloc.rate:                   1232.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              4191.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4580.943 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 461992.962 ops/s
[info]                  ·gc.alloc.rate:                   1255.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              4277.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4592.897 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   462392.556 ±(99.9%) 5113.330 ops/s [Average]
[info]   (min, avg, max) = (460509.806, 462392.556, 464183.592), stdev = 1327.916
[info]   CI (99.9%): [457279.226, 467505.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1237.086 ±(99.9%) 47.444 MB/sec [Average]
[info]   (min, avg, max) = (1221.438, 1237.086, 1255.449), stdev = 12.321
[info]   CI (99.9%): [1189.642, 1284.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4211.285 ±(99.9%) 192.548 B/op [Average]
[info]   (min, avg, max) = (4142.044, 4211.285, 4277.743), stdev = 50.004
[info]   CI (99.9%): [4018.737, 4403.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.113 ±(99.9%) 0.565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.113, 0.354), stdev = 0.147
[info]   CI (99.9%): [≈ 0, 0.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1211.941 ±(99.9%) 1160.049 MB/sec [Average]
[info]   (min, avg, max) = (673.030, 1211.941, 1347.941), stdev = 301.261
[info]   CI (99.9%): [51.891, 2371.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4127.384 ±(99.9%) 3971.772 B/op [Average]
[info]   (min, avg, max) = (2282.326, 4127.384, 4601.055), stdev = 1031.456
[info]   CI (99.9%): [155.613, 8099.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.76% complete, ETA 01:14:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2249.885 ops/s
[info] # Warmup Iteration   2: 16006.170 ops/s
[info] # Warmup Iteration   3: 17144.710 ops/s
[info] # Warmup Iteration   4: 17204.907 ops/s
[info] # Warmup Iteration   5: 17170.330 ops/s
[info] Iteration   1: 17095.953 ops/s
[info]                  ·gc.alloc.rate:                   1646.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              151599.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.992 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124119.412 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 17117.824 ops/s
[info]                  ·gc.alloc.rate:                   1662.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              152858.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124021.167 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 17006.671 ops/s
[info]                  ·gc.alloc.rate:                   1669.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              154549.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187492.293 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 17253.284 ops/s
[info]                  ·gc.alloc.rate:                   1668.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              152211.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.922 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123347.585 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 17242.256 ops/s
[info]                  ·gc.alloc.rate:                   1686.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              153963.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.731 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 185302.137 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   17143.198 ±(99.9%) 401.313 ops/s [Average]
[info]   (min, avg, max) = (17006.671, 17143.198, 17253.284), stdev = 104.220
[info]   CI (99.9%): [16741.885, 17544.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1666.701 ±(99.9%) 55.498 MB/sec [Average]
[info]   (min, avg, max) = (1646.437, 1666.701, 1686.457), stdev = 14.413
[info]   CI (99.9%): [1611.203, 1722.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   153036.508 ±(99.9%) 4686.766 B/op [Average]
[info]   (min, avg, max) = (151599.424, 153036.508, 154549.525), stdev = 1217.138
[info]   CI (99.9%): [148349.742, 157723.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.528 ±(99.9%) 6.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.528, 3.800), stdev = 1.592
[info]   CI (99.9%): [≈ 0, 7.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1620.853 ±(99.9%) 1430.309 MB/sec [Average]
[info]   (min, avg, max) = (1347.992, 1620.853, 2029.731), stdev = 371.447
[info]   CI (99.9%): [190.545, 3051.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   148856.519 ±(99.9%) 131999.476 B/op [Average]
[info]   (min, avg, max) = (123347.585, 148856.519, 187492.293), stdev = 34279.845
[info]   CI (99.9%): [16857.043, 280855.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.00% complete, ETA 01:13:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24622.520 ops/s
[info] # Warmup Iteration   2: 53753.907 ops/s
[info] # Warmup Iteration   3: 52510.340 ops/s
[info] # Warmup Iteration   4: 54508.176 ops/s
[info] # Warmup Iteration   5: 54656.884 ops/s
[info] Iteration   1: 54545.229 ops/s
[info]                  ·gc.alloc.rate:                   1254.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              36202.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38921.573 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 54500.273 ops/s
[info]                  ·gc.alloc.rate:                   1252.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              36175.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38981.843 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 54170.505 ops/s
[info]                  ·gc.alloc.rate:                   1245.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              36187.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39240.796 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 54325.444 ops/s
[info]                  ·gc.alloc.rate:                   1238.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              35888.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39155.637 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 54603.793 ops/s
[info]                  ·gc.alloc.rate:                   1243.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              35850.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19487.762 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   54429.049 ±(99.9%) 685.277 ops/s [Average]
[info]   (min, avg, max) = (54170.505, 54429.049, 54603.793), stdev = 177.964
[info]   CI (99.9%): [53743.772, 55114.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1246.950 ±(99.9%) 24.908 MB/sec [Average]
[info]   (min, avg, max) = (1238.673, 1246.950, 1254.459), stdev = 6.469
[info]   CI (99.9%): [1222.042, 1271.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   36060.711 ±(99.9%) 675.705 B/op [Average]
[info]   (min, avg, max) = (35850.610, 36060.711, 36202.026), stdev = 175.479
[info]   CI (99.9%): [35385.006, 36736.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.204 ±(99.9%) 4.331 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.204, 3.006), stdev = 1.125
[info]   CI (99.9%): [≈ 0, 5.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1215.294 ±(99.9%) 1160.971 MB/sec [Average]
[info]   (min, avg, max) = (675.957, 1215.294, 1351.455), stdev = 301.500
[info]   CI (99.9%): [54.323, 2376.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   35157.522 ±(99.9%) 33733.978 B/op [Average]
[info]   (min, avg, max) = (19487.762, 35157.522, 39240.796), stdev = 8760.607
[info]   CI (99.9%): [1423.544, 68891.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.24% complete, ETA 01:13:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63249.463 ops/s
[info] # Warmup Iteration   2: 122840.852 ops/s
[info] # Warmup Iteration   3: 125320.752 ops/s
[info] # Warmup Iteration   4: 124000.759 ops/s
[info] # Warmup Iteration   5: 124588.117 ops/s
[info] Iteration   1: 121835.082 ops/s
[info]                  ·gc.alloc.rate:                   1048.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              13545.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.980 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8708.588 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 124206.046 ops/s
[info]                  ·gc.alloc.rate:                   1094.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              13875.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17083.641 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 125230.862 ops/s
[info]                  ·gc.alloc.rate:                   1075.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              13520.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8480.563 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 125428.694 ops/s
[info]                  ·gc.alloc.rate:                   1093.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              13720.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16938.400 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 125502.257 ops/s
[info]                  ·gc.alloc.rate:                   1091.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              13680.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16920.860 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   124440.588 ±(99.9%) 5956.593 ops/s [Average]
[info]   (min, avg, max) = (121835.082, 124440.588, 125502.257), stdev = 1546.908
[info]   CI (99.9%): [118483.995, 130397.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1080.729 ±(99.9%) 75.786 MB/sec [Average]
[info]   (min, avg, max) = (1048.314, 1080.729, 1094.834), stdev = 19.681
[info]   CI (99.9%): [1004.943, 1156.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13668.450 ±(99.9%) 554.189 B/op [Average]
[info]   (min, avg, max) = (13520.150, 13668.450, 13875.439), stdev = 143.921
[info]   CI (99.9%): [13114.261, 14222.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.576 ±(99.9%) 2.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.576, 1.306), stdev = 0.567
[info]   CI (99.9%): [≈ 0, 2.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1079.280 ±(99.9%) 1423.342 MB/sec [Average]
[info]   (min, avg, max) = (673.980, 1079.280, 1349.987), stdev = 369.637
[info]   CI (99.9%): [≈ 0, 2502.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13626.411 ±(99.9%) 17692.005 B/op [Average]
[info]   (min, avg, max) = (8480.563, 13626.411, 17083.641), stdev = 4594.558
[info]   CI (99.9%): [≈ 0, 31318.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.47% complete, ETA 01:13:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 638368.604 ops/s
[info] # Warmup Iteration   2: 805368.375 ops/s
[info] # Warmup Iteration   3: 833581.661 ops/s
[info] # Warmup Iteration   4: 824317.384 ops/s
[info] # Warmup Iteration   5: 853979.997 ops/s
[info] Iteration   1: 848881.389 ops/s
[info]                  ·gc.alloc.rate:                   936.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              1735.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1248.625 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 851278.344 ops/s
[info]                  ·gc.alloc.rate:                   944.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              1746.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2487.786 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 854461.123 ops/s
[info]                  ·gc.alloc.rate:                   936.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              1725.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1239.206 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 846824.751 ops/s
[info]                  ·gc.alloc.rate:                   953.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              1771.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2500.854 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 853841.907 ops/s
[info]                  ·gc.alloc.rate:                   930.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              1714.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1240.147 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   851057.503 ±(99.9%) 12483.151 ops/s [Average]
[info]   (min, avg, max) = (846824.751, 851057.503, 854461.123), stdev = 3241.835
[info]   CI (99.9%): [838574.351, 863540.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   940.189 ±(99.9%) 34.463 MB/sec [Average]
[info]   (min, avg, max) = (930.124, 940.189, 953.204), stdev = 8.950
[info]   CI (99.9%): [905.725, 974.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1738.922 ±(99.9%) 84.915 B/op [Average]
[info]   (min, avg, max) = (1714.659, 1738.922, 1771.961), stdev = 22.052
[info]   CI (99.9%): [1654.007, 1823.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.054 ±(99.9%) 0.170 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.116), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   941.933 ±(99.9%) 1418.110 MB/sec [Average]
[info]   (min, avg, max) = (672.723, 941.933, 1345.421), stdev = 368.279
[info]   CI (99.9%): [≈ 0, 2360.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1743.324 ±(99.9%) 2639.956 B/op [Average]
[info]   (min, avg, max) = (1239.206, 1743.324, 2500.854), stdev = 685.588
[info]   CI (99.9%): [≈ 0, 4383.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.71% complete, ETA 01:13:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 735866.102 ops/s
[info] # Warmup Iteration   2: 926571.764 ops/s
[info] # Warmup Iteration   3: 955533.062 ops/s
[info] # Warmup Iteration   4: 947681.206 ops/s
[info] # Warmup Iteration   5: 956290.495 ops/s
[info] Iteration   1: 956170.435 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 956227.928 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 956351.775 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 956069.422 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 935255.666 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   952015.045 ±(99.9%) 36077.967 ops/s [Average]
[info]   (min, avg, max) = (935255.666, 952015.045, 956351.775), stdev = 9369.334
[info]   CI (99.9%): [915937.078, 988093.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.94% complete, ETA 01:12:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29689.080 ops/s
[info] # Warmup Iteration   2: 57809.134 ops/s
[info] # Warmup Iteration   3: 59297.809 ops/s
[info] # Warmup Iteration   4: 61481.881 ops/s
[info] # Warmup Iteration   5: 61050.690 ops/s
[info] Iteration   1: 60470.307 ops/s
[info]                  ·gc.alloc.rate:                   1332.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              34673.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35089.493 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 61355.184 ops/s
[info]                  ·gc.alloc.rate:                   1346.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              34542.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34620.455 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 61491.763 ops/s
[info]                  ·gc.alloc.rate:                   1338.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              34265.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34577.433 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 61552.495 ops/s
[info]                  ·gc.alloc.rate:                   1363.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              34871.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34561.327 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 61530.878 ops/s
[info]                  ·gc.alloc.rate:                   1363.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              34868.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34606.637 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   61280.125 ±(99.9%) 1768.041 ops/s [Average]
[info]   (min, avg, max) = (60470.307, 61280.125, 61552.495), stdev = 459.155
[info]   CI (99.9%): [59512.085, 63048.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1348.813 ±(99.9%) 54.701 MB/sec [Average]
[info]   (min, avg, max) = (1332.205, 1348.813, 1363.642), stdev = 14.206
[info]   CI (99.9%): [1294.113, 1403.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   34644.250 ±(99.9%) 974.318 B/op [Average]
[info]   (min, avg, max) = (34265.909, 34644.250, 34871.143), stdev = 253.027
[info]   CI (99.9%): [33669.933, 35618.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.643 ±(99.9%) 2.686 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.643, 1.598), stdev = 0.698
[info]   CI (99.9%): [≈ 0, 3.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1350.584 ±(99.9%) 6.993 MB/sec [Average]
[info]   (min, avg, max) = (1348.179, 1350.584, 1352.860), stdev = 1.816
[info]   CI (99.9%): [1343.591, 1357.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   34691.069 ±(99.9%) 862.328 B/op [Average]
[info]   (min, avg, max) = (34561.327, 34691.069, 35089.493), stdev = 223.944
[info]   CI (99.9%): [33828.741, 35553.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.18% complete, ETA 01:12:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5394.147 ops/s
[info] # Warmup Iteration   2: 15934.714 ops/s
[info] # Warmup Iteration   3: 16221.899 ops/s
[info] # Warmup Iteration   4: 16582.270 ops/s
[info] # Warmup Iteration   5: 16616.786 ops/s
[info] Iteration   1: 16645.184 ops/s
[info]                  ·gc.alloc.rate:                   1461.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              138210.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.716 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127537.173 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 16509.108 ops/s
[info]                  ·gc.alloc.rate:                   1458.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              139076.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128658.853 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16372.481 ops/s
[info]                  ·gc.alloc.rate:                   1444.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              138929.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129855.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 16698.408 ops/s
[info]                  ·gc.alloc.rate:                   1453.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              136939.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.299 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127446.370 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 16686.962 ops/s
[info]                  ·gc.alloc.rate:                   1490.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              140640.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191558.312 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   16582.429 ±(99.9%) 536.922 ops/s [Average]
[info]   (min, avg, max) = (16372.481, 16582.429, 16698.408), stdev = 139.437
[info]   CI (99.9%): [16045.507, 17119.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1461.847 ±(99.9%) 67.108 MB/sec [Average]
[info]   (min, avg, max) = (1444.985, 1461.847, 1490.884), stdev = 17.428
[info]   CI (99.9%): [1394.739, 1528.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   138759.481 ±(99.9%) 5195.437 B/op [Average]
[info]   (min, avg, max) = (136939.664, 138759.481, 140640.699), stdev = 1349.239
[info]   CI (99.9%): [133564.044, 143954.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.536 ±(99.9%) 13.527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.536, 7.848), stdev = 3.513
[info]   CI (99.9%): [≈ 0, 17.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1486.348 ±(99.9%) 1171.651 MB/sec [Average]
[info]   (min, avg, max) = (1348.716, 1486.348, 2030.644), stdev = 304.274
[info]   CI (99.9%): [314.697, 2657.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   141011.223 ±(99.9%) 108871.752 B/op [Average]
[info]   (min, avg, max) = (127446.370, 141011.223, 191558.312), stdev = 28273.648
[info]   CI (99.9%): [32139.471, 249882.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.41% complete, ETA 01:12:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3426.179 ops/s
[info] # Warmup Iteration   2: 14344.770 ops/s
[info] # Warmup Iteration   3: 15290.901 ops/s
[info] # Warmup Iteration   4: 15297.312 ops/s
[info] # Warmup Iteration   5: 14902.351 ops/s
[info] Iteration   1: 15240.494 ops/s
[info]                  ·gc.alloc.rate:                   1211.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              125079.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139154.372 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15304.016 ops/s
[info]                  ·gc.alloc.rate:                   1225.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              126079.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138650.149 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 15251.197 ops/s
[info]                  ·gc.alloc.rate:                   1208.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              124718.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69565.944 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 15229.733 ops/s
[info]                  ·gc.alloc.rate:                   1223.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              126465.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139461.365 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15316.348 ops/s
[info]                  ·gc.alloc.rate:                   1224.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              125802.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138806.275 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   15268.358 ±(99.9%) 150.832 ops/s [Average]
[info]   (min, avg, max) = (15229.733, 15268.358, 15316.348), stdev = 39.171
[info]   CI (99.9%): [15117.526, 15419.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1218.679 ±(99.9%) 31.239 MB/sec [Average]
[info]   (min, avg, max) = (1208.388, 1218.679, 1225.859), stdev = 8.113
[info]   CI (99.9%): [1187.440, 1249.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   125628.902 ±(99.9%) 2765.456 B/op [Average]
[info]   (min, avg, max) = (124718.620, 125628.902, 126465.273), stdev = 718.180
[info]   CI (99.9%): [122863.447, 128394.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.568 ±(99.9%) 14.744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.568, 8.563), stdev = 3.829
[info]   CI (99.9%): [≈ 0, 17.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1213.970 ±(99.9%) 1162.294 MB/sec [Average]
[info]   (min, avg, max) = (674.019, 1213.970, 1350.624), stdev = 301.844
[info]   CI (99.9%): [51.676, 2376.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   125127.621 ±(99.9%) 119606.824 B/op [Average]
[info]   (min, avg, max) = (69565.944, 125127.621, 139461.365), stdev = 31061.512
[info]   CI (99.9%): [5520.797, 244734.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.65% complete, ETA 01:12:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 446517.783 ops/s
[info] # Warmup Iteration   2: 642582.235 ops/s
[info] # Warmup Iteration   3: 681230.879 ops/s
[info] # Warmup Iteration   4: 684688.033 ops/s
[info] # Warmup Iteration   5: 684393.752 ops/s
[info] Iteration   1: 679584.628 ops/s
[info]                  ·gc.alloc.rate:                   1835.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              4249.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4676.060 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 691942.590 ops/s
[info]                  ·gc.alloc.rate:                   1840.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              4186.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.598 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3065.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 688007.222 ops/s
[info]                  ·gc.alloc.rate:                   1870.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              4279.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.858 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4630.028 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 675599.804 ops/s
[info]                  ·gc.alloc.rate:                   1824.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              4250.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4721.393 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 689607.063 ops/s
[info]                  ·gc.alloc.rate:                   1848.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              4218.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3087.678 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   684948.261 ±(99.9%) 26964.444 ops/s [Average]
[info]   (min, avg, max) = (675599.804, 684948.261, 691942.590), stdev = 7002.581
[info]   CI (99.9%): [657983.817, 711912.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1843.779 ±(99.9%) 66.164 MB/sec [Average]
[info]   (min, avg, max) = (1824.668, 1843.779, 1870.440), stdev = 17.183
[info]   CI (99.9%): [1777.614, 1909.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4236.700 ±(99.9%) 136.266 B/op [Average]
[info]   (min, avg, max) = (4186.174, 4236.700, 4279.051), stdev = 35.388
[info]   CI (99.9%): [4100.434, 4372.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.048 ±(99.9%) 0.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.190), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1754.109 ±(99.9%) 1420.079 MB/sec [Average]
[info]   (min, avg, max) = (1347.598, 1754.109, 2026.939), stdev = 368.790
[info]   CI (99.9%): [334.029, 3174.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4036.068 ±(99.9%) 3375.699 B/op [Average]
[info]   (min, avg, max) = (3065.179, 4036.068, 4721.393), stdev = 876.658
[info]   CI (99.9%): [660.369, 7411.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.88% complete, ETA 01:11:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2649.416 ops/s
[info] # Warmup Iteration   2: 10378.505 ops/s
[info] # Warmup Iteration   3: 10988.352 ops/s
[info] # Warmup Iteration   4: 11180.877 ops/s
[info] # Warmup Iteration   5: 11185.425 ops/s
[info] Iteration   1: 11199.552 ops/s
[info]                  ·gc.alloc.rate:                   1493.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              209857.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 189535.517 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 11138.669 ops/s
[info]                  ·gc.alloc.rate:                   1484.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              209780.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 190731.466 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 11079.266 ops/s
[info]                  ·gc.alloc.rate:                   1464.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              208028.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191888.840 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 11182.089 ops/s
[info]                  ·gc.alloc.rate:                   1477.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              207895.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 190326.295 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 11141.690 ops/s
[info]                  ·gc.alloc.rate:                   1502.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              212254.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191150.587 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   11148.253 ±(99.9%) 179.278 ops/s [Average]
[info]   (min, avg, max) = (11079.266, 11148.253, 11199.552), stdev = 46.558
[info]   CI (99.9%): [10968.975, 11327.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1484.377 ±(99.9%) 56.745 MB/sec [Average]
[info]   (min, avg, max) = (1464.161, 1484.377, 1502.582), stdev = 14.737
[info]   CI (99.9%): [1427.632, 1541.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   209563.405 ±(99.9%) 6809.454 B/op [Average]
[info]   (min, avg, max) = (207895.954, 209563.405, 212254.003), stdev = 1768.393
[info]   CI (99.9%): [202753.951, 216372.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.947 ±(99.9%) 11.354 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.947, 5.914), stdev = 2.949
[info]   CI (99.9%): [≈ 0, 14.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1350.927 ±(99.9%) 7.150 MB/sec [Average]
[info]   (min, avg, max) = (1348.524, 1350.927, 1353.188), stdev = 1.857
[info]   CI (99.9%): [1343.777, 1358.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   190726.541 ±(99.9%) 3395.077 B/op [Average]
[info]   (min, avg, max) = (189535.517, 190726.541, 191888.840), stdev = 881.691
[info]   CI (99.9%): [187331.464, 194121.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.12% complete, ETA 01:11:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18949.003 ops/s
[info] # Warmup Iteration   2: 41838.103 ops/s
[info] # Warmup Iteration   3: 42665.693 ops/s
[info] # Warmup Iteration   4: 43451.071 ops/s
[info] # Warmup Iteration   5: 43636.363 ops/s
[info] Iteration   1: 43418.228 ops/s
[info]                  ·gc.alloc.rate:                   1390.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              50414.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.529 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48922.600 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 43898.615 ops/s
[info]                  ·gc.alloc.rate:                   1398.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              50126.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48405.000 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 43685.982 ops/s
[info]                  ·gc.alloc.rate:                   1401.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              50467.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48692.285 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 43806.956 ops/s
[info]                  ·gc.alloc.rate:                   1400.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              50317.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48582.857 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 43691.823 ops/s
[info]                  ·gc.alloc.rate:                   1399.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              50423.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.238 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48757.584 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   43700.321 ±(99.9%) 695.641 ops/s [Average]
[info]   (min, avg, max) = (43418.228, 43700.321, 43898.615), stdev = 180.656
[info]   CI (99.9%): [43004.680, 44395.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1398.055 ±(99.9%) 16.535 MB/sec [Average]
[info]   (min, avg, max) = (1390.670, 1398.055, 1401.193), stdev = 4.294
[info]   CI (99.9%): [1381.520, 1414.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   50349.858 ±(99.9%) 524.847 B/op [Average]
[info]   (min, avg, max) = (50126.563, 50349.858, 50467.622), stdev = 136.301
[info]   CI (99.9%): [49825.010, 50874.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.347 ±(99.9%) 4.259 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.347, 2.985), stdev = 1.106
[info]   CI (99.9%): [≈ 0, 5.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1351.459 ±(99.9%) 6.036 MB/sec [Average]
[info]   (min, avg, max) = (1349.529, 1351.459, 1353.238), stdev = 1.567
[info]   CI (99.9%): [1345.423, 1357.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   48672.065 ±(99.9%) 745.107 B/op [Average]
[info]   (min, avg, max) = (48405.000, 48672.065, 48922.600), stdev = 193.502
[info]   CI (99.9%): [47926.958, 49417.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 01:11:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18089.414 ops/s
[info] # Warmup Iteration   2: 51908.471 ops/s
[info] # Warmup Iteration   3: 54342.933 ops/s
[info] # Warmup Iteration   4: 54600.571 ops/s
[info] # Warmup Iteration   5: 54649.111 ops/s
[info] Iteration   1: 54674.438 ops/s
[info]                  ·gc.alloc.rate:                   1485.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              42746.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38820.169 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 54311.833 ops/s
[info]                  ·gc.alloc.rate:                   1482.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              42951.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39097.448 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 54713.448 ops/s
[info]                  ·gc.alloc.rate:                   1490.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              42883.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38839.697 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 54547.388 ops/s
[info]                  ·gc.alloc.rate:                   1474.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              42553.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38996.310 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 54642.261 ops/s
[info]                  ·gc.alloc.rate:                   1514.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              43640.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58462.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   54577.874 ±(99.9%) 619.576 ops/s [Average]
[info]   (min, avg, max) = (54311.833, 54577.874, 54713.448), stdev = 160.902
[info]   CI (99.9%): [53958.297, 55197.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1489.526 ±(99.9%) 59.051 MB/sec [Average]
[info]   (min, avg, max) = (1474.664, 1489.526, 1514.929), stdev = 15.335
[info]   CI (99.9%): [1430.476, 1548.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   42954.857 ±(99.9%) 1587.017 B/op [Average]
[info]   (min, avg, max) = (42553.394, 42954.857, 43640.128), stdev = 412.143
[info]   CI (99.9%): [41367.840, 44541.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.444 ±(99.9%) 5.348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.444, 3.619), stdev = 1.389
[info]   CI (99.9%): [≈ 0, 6.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1485.788 ±(99.9%) 1170.302 MB/sec [Average]
[info]   (min, avg, max) = (1348.837, 1485.788, 2029.460), stdev = 303.924
[info]   CI (99.9%): [315.486, 2656.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   42843.141 ±(99.9%) 33623.829 B/op [Average]
[info]   (min, avg, max) = (38820.169, 42843.141, 58462.079), stdev = 8732.002
[info]   CI (99.9%): [9219.311, 76466.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.59% complete, ETA 01:10:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 788667.434 ops/s
[info] # Warmup Iteration   2: 999664.702 ops/s
[info] # Warmup Iteration   3: 999485.947 ops/s
[info] # Warmup Iteration   4: 1009660.370 ops/s
[info] # Warmup Iteration   5: 984112.940 ops/s
[info] Iteration   1: 1013740.993 ops/s
[info]                  ·gc.alloc.rate:                   954.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              1482.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2090.227 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1010928.073 ops/s
[info]                  ·gc.alloc.rate:                   942.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              1467.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1047.476 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1012330.772 ops/s
[info]                  ·gc.alloc.rate:                   951.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              1479.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1046.044 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1011108.387 ops/s
[info]                  ·gc.alloc.rate:                   953.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              1483.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2094.591 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1015109.850 ops/s
[info]                  ·gc.alloc.rate:                   938.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              1455.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1043.142 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1012643.615 ±(99.9%) 6857.075 ops/s [Average]
[info]   (min, avg, max) = (1010928.073, 1012643.615, 1015109.850), stdev = 1780.761
[info]   CI (99.9%): [1005786.540, 1019500.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   948.180 ±(99.9%) 26.832 MB/sec [Average]
[info]   (min, avg, max) = (938.910, 948.180, 954.444), stdev = 6.968
[info]   CI (99.9%): [921.348, 975.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1473.832 ±(99.9%) 45.775 B/op [Average]
[info]   (min, avg, max) = (1455.823, 1473.832, 1483.648), stdev = 11.888
[info]   CI (99.9%): [1428.057, 1519.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.045 ±(99.9%) 0.243 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.129), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   941.980 ±(99.9%) 1419.486 MB/sec [Average]
[info]   (min, avg, max) = (672.744, 941.980, 1346.078), stdev = 368.636
[info]   CI (99.9%): [≈ 0, 2361.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1464.296 ±(99.9%) 2207.921 B/op [Average]
[info]   (min, avg, max) = (1043.142, 1464.296, 2094.591), stdev = 573.390
[info]   CI (99.9%): [≈ 0, 3672.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.82% complete, ETA 01:10:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 889508.699 ops/s
[info] # Warmup Iteration   2: 1023631.612 ops/s
[info] # Warmup Iteration   3: 1119246.310 ops/s
[info] # Warmup Iteration   4: 1120518.926 ops/s
[info] # Warmup Iteration   5: 1126697.486 ops/s
[info] Iteration   1: 1127291.692 ops/s
[info]                  ·gc.alloc.rate:      0.001 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1126647.796 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1120815.850 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1126626.732 ops/s
[info]                  ·gc.alloc.rate:      0.079 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.110 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1126303.799 ops/s
[info]                  ·gc.alloc.rate:      0.056 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.078 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1125537.174 ±(99.9%) 10256.305 ops/s [Average]
[info]   (min, avg, max) = (1120815.850, 1125537.174, 1127291.692), stdev = 2663.530
[info]   CI (99.9%): [1115280.869, 1135793.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.027 ±(99.9%) 0.144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.027, 0.079), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.038 ±(99.9%) 0.201 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.038, 0.110), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.06% complete, ETA 01:10:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19939.180 ops/s
[info] # Warmup Iteration   2: 38467.689 ops/s
[info] # Warmup Iteration   3: 39082.029 ops/s
[info] # Warmup Iteration   4: 38732.228 ops/s
[info] # Warmup Iteration   5: 39579.412 ops/s
[info] Iteration   1: 39518.321 ops/s
[info]                  ·gc.alloc.rate:                   1234.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              49161.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53708.845 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 39508.502 ops/s
[info]                  ·gc.alloc.rate:                   1229.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              48989.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53747.613 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 39498.336 ops/s
[info]                  ·gc.alloc.rate:                   1225.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              48820.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.237 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53799.670 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 39171.032 ops/s
[info]                  ·gc.alloc.rate:                   1236.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              49686.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54304.985 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 39565.786 ops/s
[info]                  ·gc.alloc.rate:                   1210.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              48165.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26894.717 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   39452.395 ±(99.9%) 613.775 ops/s [Average]
[info]   (min, avg, max) = (39171.032, 39452.395, 39565.786), stdev = 159.395
[info]   CI (99.9%): [38838.621, 40066.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1227.225 ±(99.9%) 39.426 MB/sec [Average]
[info]   (min, avg, max) = (1210.597, 1227.225, 1236.440), stdev = 10.239
[info]   CI (99.9%): [1187.798, 1266.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   48964.858 ±(99.9%) 2125.868 B/op [Average]
[info]   (min, avg, max) = (48165.949, 48964.858, 49686.632), stdev = 552.081
[info]   CI (99.9%): [46838.991, 51090.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.330 ±(99.9%) 5.345 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.330, 3.316), stdev = 1.388
[info]   CI (99.9%): [≈ 0, 6.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1214.994 ±(99.9%) 1160.301 MB/sec [Average]
[info]   (min, avg, max) = (675.969, 1214.994, 1351.367), stdev = 301.326
[info]   CI (99.9%): [54.693, 2375.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   48491.166 ±(99.9%) 46497.292 B/op [Average]
[info]   (min, avg, max) = (26894.717, 48491.166, 54304.985), stdev = 12075.199
[info]   CI (99.9%): [1993.874, 94988.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.29% complete, ETA 01:10:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70559.967 ops/s
[info] # Warmup Iteration   2: 120380.239 ops/s
[info] # Warmup Iteration   3: 126355.699 ops/s
[info] # Warmup Iteration   4: 126340.159 ops/s
[info] # Warmup Iteration   5: 125648.486 ops/s
[info] Iteration   1: 124725.296 ops/s
[info]                  ·gc.alloc.rate:                   1768.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              22314.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16966.610 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 126468.027 ops/s
[info]                  ·gc.alloc.rate:                   1815.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              22589.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.534 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25122.418 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 125221.338 ops/s
[info]                  ·gc.alloc.rate:                   1825.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              22938.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25414.620 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 117724.409 ops/s
[info]                  ·gc.alloc.rate:                                  1680.991 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22474.771 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.632 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.445 B/op
[info]                  ·gc.churn.Compressed_Class_Space:                0.016 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm:           0.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:                         0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:                    2.226 B/op
[info]                  ·gc.churn.PS_Old_Gen:                            0.049 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:                       0.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:                     1363.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:                18226.024 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        69.000 ms
[info] Iteration   5: 126564.642 ops/s
[info]                  ·gc.alloc.rate:                   1844.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              22931.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25230.366 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   124140.742 ±(99.9%) 14144.273 ops/s [Average]
[info]   (min, avg, max) = (117724.409, 124140.742, 126564.642), stdev = 3673.223
[info]   CI (99.9%): [109996.469, 138285.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1786.706 ±(99.9%) 251.647 MB/sec [Average]
[info]   (min, avg, max) = (1680.991, 1786.706, 1844.049), stdev = 65.352
[info]   CI (99.9%): [1535.059, 2038.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22649.863 ±(99.9%) 1071.722 B/op [Average]
[info]   (min, avg, max) = (22314.328, 22649.863, 22938.997), stdev = 278.323
[info]   CI (99.9%): [21578.141, 23721.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.126 ±(99.9%) 1.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.126, 0.632), stdev = 0.282
[info]   CI (99.9%): [≈ 0, 1.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.689 ±(99.9%) 14.543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.689, 8.445), stdev = 3.777
[info]   CI (99.9%): [≈ 0, 16.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.Compressed_Class_Space":
[info]   0.003 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.Compressed_Class_Space.norm":
[info]   0.043 ±(99.9%) 0.371 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.216), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.257 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.167), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.964 ±(99.9%) 3.407 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.964, 2.226), stdev = 0.885
[info]   CI (99.9%): [≈ 0, 4.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Old_Gen":
[info]   0.010 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Old_Gen.norm":
[info]   0.131 ±(99.9%) 1.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.131, 0.654), stdev = 0.292
[info]   CI (99.9%): [≈ 0, 1.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1755.460 ±(99.9%) 1411.967 MB/sec [Average]
[info]   (min, avg, max) = (1344.522, 1755.460, 2028.903), stdev = 366.683
[info]   CI (99.9%): [343.493, 3167.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   22192.008 ±(99.9%) 16250.215 B/op [Average]
[info]   (min, avg, max) = (16966.610, 22192.008, 25414.620), stdev = 4220.129
[info]   CI (99.9%): [5941.793, 38442.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   80.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 16.000, 69.000), stdev = 29.640
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.53% complete, ETA 01:09:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.765 ops/s
[info] # Warmup Iteration   2: 332812.691 ops/s
[info] # Warmup Iteration   3: 350954.198 ops/s
[info] # Warmup Iteration   4: 354079.900 ops/s
[info] # Warmup Iteration   5: 355636.427 ops/s
[info] Iteration   1: 356110.691 ops/s
[info]                  ·gc.alloc.rate:                   726.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              3211.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2958.861 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 356795.380 ops/s
[info]                  ·gc.alloc.rate:                   730.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              3221.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2953.172 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 354921.705 ops/s
[info]                  ·gc.alloc.rate:                   727.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              3224.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      668.798 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2965.742 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 355337.674 ops/s
[info]                  ·gc.alloc.rate:                   734.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              3253.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      668.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2962.262 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 355921.374 ops/s
[info]                  ·gc.alloc.rate:                   726.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              3211.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      668.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2957.403 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   355817.365 ±(99.9%) 2780.528 ops/s [Average]
[info]   (min, avg, max) = (354921.705, 355817.365, 356795.380), stdev = 722.094
[info]   CI (99.9%): [353036.837, 358597.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   729.001 ±(99.9%) 13.295 MB/sec [Average]
[info]   (min, avg, max) = (726.181, 729.001, 734.483), stdev = 3.453
[info]   CI (99.9%): [715.706, 742.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3224.570 ±(99.9%) 65.961 B/op [Average]
[info]   (min, avg, max) = (3211.701, 3224.570, 3253.445), stdev = 17.130
[info]   CI (99.9%): [3158.610, 3290.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.111 ±(99.9%) 0.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.111, 0.277), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   669.073 ±(99.9%) 1.750 MB/sec [Average]
[info]   (min, avg, max) = (668.683, 669.073, 669.578), stdev = 0.455
[info]   CI (99.9%): [667.322, 670.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   2959.488 ±(99.9%) 18.411 B/op [Average]
[info]   (min, avg, max) = (2953.172, 2959.488, 2965.742), stdev = 4.781
[info]   CI (99.9%): [2941.077, 2977.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 01:09:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105650.682 ops/s
[info] # Warmup Iteration   2: 237934.489 ops/s
[info] # Warmup Iteration   3: 247635.694 ops/s
[info] # Warmup Iteration   4: 248555.483 ops/s
[info] # Warmup Iteration   5: 243412.122 ops/s
[info] Iteration   1: 247925.347 ops/s
[info]                  ·gc.alloc.rate:                   550.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              3493.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4275.328 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 244450.793 ops/s
[info]                  ·gc.alloc.rate:                   544.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              3508.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4336.096 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 247359.389 ops/s
[info]                  ·gc.alloc.rate:      536.818 MB/sec
[info]                  ·gc.alloc.rate.norm: 3416.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 246780.950 ops/s
[info]                  ·gc.alloc.rate:                   552.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              3523.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4295.075 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 247309.284 ops/s
[info]                  ·gc.alloc.rate:                   551.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4290.041 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   246765.152 ±(99.9%) 5220.341 ops/s [Average]
[info]   (min, avg, max) = (244450.793, 246765.152, 247925.347), stdev = 1355.706
[info]   CI (99.9%): [241544.811, 251985.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   547.243 ±(99.9%) 25.142 MB/sec [Average]
[info]   (min, avg, max) = (536.818, 547.243, 552.382), stdev = 6.529
[info]   CI (99.9%): [522.101, 572.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3490.859 ±(99.9%) 166.326 B/op [Average]
[info]   (min, avg, max) = (3416.002, 3490.859, 3523.186), stdev = 43.194
[info]   CI (99.9%): [3324.533, 3657.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.158 ±(99.9%) 1.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.770), stdev = 0.342
[info]   CI (99.9%): [≈ 0, 1.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.004 ±(99.9%) 8.366 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.004, 4.890), stdev = 2.173
[info]   CI (99.9%): [≈ 0, 9.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   538.828 ±(99.9%) 1159.869 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.828, 673.953), stdev = 301.214
[info]   CI (99.9%): [≈ 0, 1698.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3439.308 ±(99.9%) 7403.878 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3439.308, 4336.096), stdev = 1922.764
[info]   CI (99.9%): [≈ 0, 10843.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.00% complete, ETA 01:09:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 374469.100 ops/s
[info] # Warmup Iteration   2: 473125.622 ops/s
[info] # Warmup Iteration   3: 468782.825 ops/s
[info] # Warmup Iteration   4: 471798.728 ops/s
[info] # Warmup Iteration   5: 481081.608 ops/s
[info] Iteration   1: 478671.649 ops/s
[info]                  ·gc.alloc.rate:                   620.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              2040.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2216.529 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 482044.024 ops/s
[info]                  ·gc.alloc.rate:                   626.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              2045.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2198.774 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 480466.104 ops/s
[info]                  ·gc.alloc.rate:                   629.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              2062.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2205.980 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 482427.114 ops/s
[info]                  ·gc.alloc.rate:                   625.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              2038.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2194.947 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 474598.974 ops/s
[info]                  ·gc.alloc.rate:                   622.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              2065.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2231.196 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   479641.573 ±(99.9%) 12264.682 ops/s [Average]
[info]   (min, avg, max) = (474598.974, 479641.573, 482427.114), stdev = 3185.099
[info]   CI (99.9%): [467376.891, 491906.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   624.931 ±(99.9%) 13.018 MB/sec [Average]
[info]   (min, avg, max) = (620.614, 624.931, 629.492), stdev = 3.381
[info]   CI (99.9%): [611.914, 637.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2050.692 ±(99.9%) 48.429 B/op [Average]
[info]   (min, avg, max) = (2038.846, 2050.692, 2065.921), stdev = 12.577
[info]   CI (99.9%): [2002.263, 2099.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.593 ±(99.9%) 4.929 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.593, 2.883), stdev = 1.280
[info]   CI (99.9%): [≈ 0, 5.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.951 ±(99.9%) 16.209 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.951, 9.480), stdev = 4.210
[info]   CI (99.9%): [≈ 0, 18.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   673.313 ±(99.9%) 1.853 MB/sec [Average]
[info]   (min, avg, max) = (672.832, 673.313, 674.013), stdev = 0.481
[info]   CI (99.9%): [671.460, 675.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2209.485 ±(99.9%) 56.441 B/op [Average]
[info]   (min, avg, max) = (2194.947, 2209.485, 2231.196), stdev = 14.657
[info]   CI (99.9%): [2153.045, 2265.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.24% complete, ETA 01:09:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16126.975 ops/s
[info] # Warmup Iteration   2: 66010.917 ops/s
[info] # Warmup Iteration   3: 67762.519 ops/s
[info] # Warmup Iteration   4: 68872.111 ops/s
[info] # Warmup Iteration   5: 68543.901 ops/s
[info] Iteration   1: 69339.576 ops/s
[info]                  ·gc.alloc.rate:                   2900.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              65844.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2706.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61442.599 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 68499.334 ops/s
[info]                  ·gc.alloc.rate:                   2881.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              66192.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62291.340 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 69156.559 ops/s
[info]                  ·gc.alloc.rate:                   2948.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              67108.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3393.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77238.282 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 68332.873 ops/s
[info]                  ·gc.alloc.rate:                   2889.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              66534.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62613.231 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 69442.141 ops/s
[info]                  ·gc.alloc.rate:                   2933.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              66504.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720.085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61657.851 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   68954.097 ±(99.9%) 1944.956 ops/s [Average]
[info]   (min, avg, max) = (68332.873, 68954.097, 69442.141), stdev = 505.099
[info]   CI (99.9%): [67009.141, 70899.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2910.677 ±(99.9%) 111.358 MB/sec [Average]
[info]   (min, avg, max) = (2881.507, 2910.677, 2948.068), stdev = 28.919
[info]   CI (99.9%): [2799.319, 3022.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66436.970 ±(99.9%) 1801.154 B/op [Average]
[info]   (min, avg, max) = (65844.924, 66436.970, 67108.508), stdev = 467.754
[info]   CI (99.9%): [64635.816, 68238.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.140 ±(99.9%) 2.451 B/op [Average]
[info]   (min, avg, max) = (0.472, 1.140, 1.895), stdev = 0.636
[info]   CI (99.9%): [≈ 0, 3.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2850.107 ±(99.9%) 1168.959 MB/sec [Average]
[info]   (min, avg, max) = (2706.592, 2850.107, 3393.068), stdev = 303.575
[info]   CI (99.9%): [1681.147, 4019.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   65048.661 ±(99.9%) 26301.778 B/op [Average]
[info]   (min, avg, max) = (61442.599, 65048.661, 77238.282), stdev = 6830.488
[info]   CI (99.9%): [38746.883, 91350.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40.47% complete, ETA 01:08:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66245.203 ops/s
[info] # Warmup Iteration   2: 119434.849 ops/s
[info] # Warmup Iteration   3: 124076.721 ops/s
[info] # Warmup Iteration   4: 124792.651 ops/s
[info] # Warmup Iteration   5: 124535.430 ops/s
[info] Iteration   1: 124469.083 ops/s
[info]                  ·gc.alloc.rate:                   697.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              8818.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8532.678 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 124632.189 ops/s
[info]                  ·gc.alloc.rate:                   702.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              8873.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8521.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 124698.154 ops/s
[info]                  ·gc.alloc.rate:                   700.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              8840.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8516.533 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 124751.466 ops/s
[info]                  ·gc.alloc.rate:                   692.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              8737.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8513.393 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 124783.549 ops/s
[info]                  ·gc.alloc.rate:                   703.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              8879.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8511.210 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   124666.888 ±(99.9%) 479.678 ops/s [Average]
[info]   (min, avg, max) = (124469.083, 124666.888, 124783.549), stdev = 124.571
[info]   CI (99.9%): [124187.210, 125146.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   699.353 ±(99.9%) 17.496 MB/sec [Average]
[info]   (min, avg, max) = (692.538, 699.353, 703.828), stdev = 4.544
[info]   CI (99.9%): [681.856, 716.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8829.972 ±(99.9%) 220.203 B/op [Average]
[info]   (min, avg, max) = (8737.894, 8829.972, 8879.569), stdev = 57.186
[info]   CI (99.9%): [8609.768, 9050.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.158 ±(99.9%) 0.906 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.526), stdev = 0.235
[info]   CI (99.9%): [≈ 0, 1.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   674.720 ±(99.9%) 0.240 MB/sec [Average]
[info]   (min, avg, max) = (674.630, 674.720, 674.779), stdev = 0.062
[info]   CI (99.9%): [674.480, 674.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8518.971 ±(99.9%) 32.757 B/op [Average]
[info]   (min, avg, max) = (8511.210, 8518.971, 8532.678), stdev = 8.507
[info]   CI (99.9%): [8486.214, 8551.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.71% complete, ETA 01:08:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.740 ops/s
[info] # Warmup Iteration   2: 199402.524 ops/s
[info] # Warmup Iteration   3: 201588.424 ops/s
[info] # Warmup Iteration   4: 205115.610 ops/s
[info] # Warmup Iteration   5: 205220.238 ops/s
[info] Iteration   1: 205887.484 ops/s
[info]                  ·gc.alloc.rate:                   166.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              1276.132 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3910.773 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 207675.930 ops/s
[info]                  ·gc.alloc.rate:      162.560 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 206989.258 ops/s
[info]                  ·gc.alloc.rate:      162.000 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 206021.163 ops/s
[info]                  ·gc.alloc.rate:                   168.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3908.230 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 206785.161 ops/s
[info]                  ·gc.alloc.rate:      161.850 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   206671.799 ±(99.9%) 2829.888 ops/s [Average]
[info]   (min, avg, max) = (205887.484, 206671.799, 207675.930), stdev = 734.913
[info]   CI (99.9%): [203841.911, 209501.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   164.400 ±(99.9%) 12.218 MB/sec [Average]
[info]   (min, avg, max) = (161.850, 164.400, 168.680), stdev = 3.173
[info]   CI (99.9%): [152.182, 176.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1252.113 ±(99.9%) 107.349 B/op [Average]
[info]   (min, avg, max) = (1232.002, 1252.113, 1288.425), stdev = 27.878
[info]   CI (99.9%): [1144.763, 1359.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.007 ±(99.9%) 0.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.051 ±(99.9%) 0.442 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.256), stdev = 0.115
[info]   CI (99.9%): [≈ 0, 0.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   204.635 ±(99.9%) 1078.979 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.635, 511.664), stdev = 280.207
[info]   CI (99.9%): [≈ 0, 1283.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1563.801 ±(99.9%) 8245.470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1563.801, 3910.773), stdev = 2141.322
[info]   CI (99.9%): [≈ 0, 9809.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.94% complete, ETA 01:08:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 220891.721 ops/s
[info] # Warmup Iteration   2: 390368.955 ops/s
[info] # Warmup Iteration   3: 403200.449 ops/s
[info] # Warmup Iteration   4: 401494.786 ops/s
[info] # Warmup Iteration   5: 403689.588 ops/s
[info] Iteration   1: 404683.763 ops/s
[info]                  ·gc.alloc.rate:                   409.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              1591.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.591 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2620.475 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 406303.820 ops/s
[info]                  ·gc.alloc.rate:      398.990 MB/sec
[info]                  ·gc.alloc.rate.norm: 1545.045 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 405661.589 ops/s
[info]                  ·gc.alloc.rate:                   414.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2614.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 405787.669 ops/s
[info]                  ·gc.alloc.rate:                   413.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              1603.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2614.490 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 407443.198 ops/s
[info]                  ·gc.alloc.rate:      399.651 MB/sec
[info]                  ·gc.alloc.rate.norm: 1544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   405976.008 ±(99.9%) 3881.488 ops/s [Average]
[info]   (min, avg, max) = (404683.763, 405976.008, 407443.198), stdev = 1008.010
[info]   CI (99.9%): [402094.520, 409857.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   407.138 ±(99.9%) 28.636 MB/sec [Average]
[info]   (min, avg, max) = (398.990, 407.138, 414.644), stdev = 7.437
[info]   CI (99.9%): [378.502, 435.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1578.529 ±(99.9%) 122.043 B/op [Average]
[info]   (min, avg, max) = (1544.001, 1578.529, 1608.915), stdev = 31.694
[info]   CI (99.9%): [1456.485, 1700.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.137 ±(99.9%) 1.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.137, 0.687), stdev = 0.307
[info]   CI (99.9%): [≈ 0, 1.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.533 ±(99.9%) 4.589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.665), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   404.262 ±(99.9%) 1421.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.262, 674.034), stdev = 369.039
[info]   CI (99.9%): [≈ 0, 1825.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1569.803 ±(99.9%) 5518.087 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1569.803, 2620.475), stdev = 1433.030
[info]   CI (99.9%): [≈ 0, 7087.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.18% complete, ETA 01:08:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 368717.663 ops/s
[info] # Warmup Iteration   2: 414785.026 ops/s
[info] # Warmup Iteration   3: 445060.280 ops/s
[info] # Warmup Iteration   4: 446678.356 ops/s
[info] # Warmup Iteration   5: 422862.770 ops/s
[info] Iteration   1: 433857.552 ops/s
[info]                  ·gc.alloc.rate:                   353.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1855.917 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 444830.212 ops/s
[info]                  ·gc.alloc.rate:      348.171 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 444110.595 ops/s
[info]                  ·gc.alloc.rate:                   369.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              1308.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2388.959 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 445489.325 ops/s
[info]                  ·gc.alloc.rate:      348.675 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 443427.760 ops/s
[info]                  ·gc.alloc.rate:                   362.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              1285.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.951 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2392.568 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   442343.089 ±(99.9%) 18506.091 ops/s [Average]
[info]   (min, avg, max) = (433857.552, 442343.089, 445489.325), stdev = 4805.973
[info]   CI (99.9%): [423836.997, 460849.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   356.194 ±(99.9%) 35.026 MB/sec [Average]
[info]   (min, avg, max) = (348.171, 356.194, 369.075), stdev = 9.096
[info]   CI (99.9%): [321.168, 391.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1267.611 ±(99.9%) 131.426 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1267.611, 1308.133), stdev = 34.131
[info]   CI (99.9%): [1136.185, 1399.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.558 ±(99.9%) 4.713 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.558, 2.747), stdev = 1.224
[info]   CI (99.9%): [≈ 0, 5.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.980 ±(99.9%) 16.730 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.980, 9.752), stdev = 4.345
[info]   CI (99.9%): [≈ 0, 18.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   371.909 ±(99.9%) 1332.010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.909, 674.018), stdev = 345.919
[info]   CI (99.9%): [≈ 0, 1703.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1327.489 ±(99.9%) 4741.455 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1327.489, 2392.568), stdev = 1231.341
[info]   CI (99.9%): [≈ 0, 6068.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 41.41% complete, ETA 01:07:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 347955.935 ops/s
[info] # Warmup Iteration   2: 454337.798 ops/s
[info] # Warmup Iteration   3: 466022.544 ops/s
[info] # Warmup Iteration   4: 470567.314 ops/s
[info] # Warmup Iteration   5: 470942.165 ops/s
[info] Iteration   1: 470996.164 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 470812.276 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 460794.403 ops/s
[info]                  ·gc.alloc.rate:      7.018 MB/sec
[info]                  ·gc.alloc.rate.norm: 23.975 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 471110.714 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 470877.037 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   468918.119 ±(99.9%) 17492.448 ops/s [Average]
[info]   (min, avg, max) = (460794.403, 468918.119, 471110.714), stdev = 4542.733
[info]   CI (99.9%): [451425.671, 486410.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.404 ±(99.9%) 12.085 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.404, 7.018), stdev = 3.138
[info]   CI (99.9%): [≈ 0, 13.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4.796 ±(99.9%) 41.284 B/op [Average]
[info]   (min, avg, max) = (0.001, 4.796, 23.975), stdev = 10.721
[info]   CI (99.9%): [≈ 0, 46.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.65% complete, ETA 01:07:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10925.585 ops/s
[info] # Warmup Iteration   2: 26282.073 ops/s
[info] # Warmup Iteration   3: 26826.465 ops/s
[info] # Warmup Iteration   4: 26900.673 ops/s
[info] # Warmup Iteration   5: 26374.734 ops/s
[info] Iteration   1: 26668.441 ops/s
[info]                  ·gc.alloc.rate:                   1359.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              80255.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.296 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79522.746 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 26437.721 ops/s
[info]                  ·gc.alloc.rate:                   1339.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              79774.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80299.754 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 26669.429 ops/s
[info]                  ·gc.alloc.rate:                   1359.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              80216.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79682.970 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 27082.904 ops/s
[info]                  ·gc.alloc.rate:                   1378.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              80098.600 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78542.554 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 27079.705 ops/s
[info]                  ·gc.alloc.rate:                   1365.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              79362.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78631.585 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   26787.640 ±(99.9%) 1094.403 ops/s [Average]
[info]   (min, avg, max) = (26437.721, 26787.640, 27082.904), stdev = 284.213
[info]   CI (99.9%): [25693.237, 27882.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1360.489 ±(99.9%) 53.443 MB/sec [Average]
[info]   (min, avg, max) = (1339.881, 1360.489, 1378.370), stdev = 13.879
[info]   CI (99.9%): [1307.046, 1413.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   79941.660 ±(99.9%) 1443.240 B/op [Average]
[info]   (min, avg, max) = (79362.758, 79941.660, 80255.655), stdev = 374.805
[info]   CI (99.9%): [78498.420, 81384.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.679 ±(99.9%) 11.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.679, 7.259), stdev = 2.890
[info]   CI (99.9%): [≈ 0, 13.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1350.090 ±(99.9%) 8.435 MB/sec [Average]
[info]   (min, avg, max) = (1347.296, 1350.090, 1352.774), stdev = 2.191
[info]   CI (99.9%): [1341.655, 1358.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   79335.922 ±(99.9%) 2862.094 B/op [Average]
[info]   (min, avg, max) = (78542.554, 79335.922, 80299.754), stdev = 743.277
[info]   CI (99.9%): [76473.828, 82198.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.88% complete, ETA 01:07:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2260.553 ops/s
[info] # Warmup Iteration   2: 7445.853 ops/s
[info] # Warmup Iteration   3: 7872.314 ops/s
[info] # Warmup Iteration   4: 7879.448 ops/s
[info] # Warmup Iteration   5: 7902.589 ops/s
[info] Iteration   1: 7895.829 ops/s
[info]                  ·gc.alloc.rate:                   1112.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              221685.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 268715.855 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7880.019 ops/s
[info]                  ·gc.alloc.rate:                   1117.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              223107.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 269428.550 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 7890.563 ops/s
[info]                  ·gc.alloc.rate:                   1093.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              218051.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 134659.374 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 7855.138 ops/s
[info]                  ·gc.alloc.rate:                   1113.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              223012.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.444 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 270585.190 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7828.616 ops/s
[info]                  ·gc.alloc.rate:                   1083.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              217819.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.210 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135757.924 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   7870.033 ±(99.9%) 107.610 ops/s [Average]
[info]   (min, avg, max) = (7828.616, 7870.033, 7895.829), stdev = 27.946
[info]   CI (99.9%): [7762.423, 7977.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1103.747 ±(99.9%) 56.536 MB/sec [Average]
[info]   (min, avg, max) = (1083.354, 1103.747, 1117.008), stdev = 14.682
[info]   CI (99.9%): [1047.211, 1160.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   220735.390 ±(99.9%) 10082.028 B/op [Average]
[info]   (min, avg, max) = (217819.446, 220735.390, 223107.913), stdev = 2618.271
[info]   CI (99.9%): [210653.361, 230817.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.325 ±(99.9%) 13.374 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.325, 8.298), stdev = 3.473
[info]   CI (99.9%): [≈ 0, 16.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1079.565 ±(99.9%) 1421.614 MB/sec [Average]
[info]   (min, avg, max) = (675.071, 1079.565, 1350.444), stdev = 369.189
[info]   CI (99.9%): [≈ 0, 2501.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   215829.379 ±(99.9%) 283408.812 B/op [Average]
[info]   (min, avg, max) = (134659.374, 215829.379, 270585.190), stdev = 73600.368
[info]   CI (99.9%): [≈ 0, 499238.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.12% complete, ETA 01:06:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1841.978 ops/s
[info] # Warmup Iteration   2: 7102.636 ops/s
[info] # Warmup Iteration   3: 7440.918 ops/s
[info] # Warmup Iteration   4: 7453.344 ops/s
[info] # Warmup Iteration   5: 7488.942 ops/s
[info] Iteration   1: 7496.154 ops/s
[info]                  ·gc.alloc.rate:                   991.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              208187.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.984 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141525.595 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 7454.541 ops/s
[info]                  ·gc.alloc.rate:                   1005.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              212370.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 284607.459 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7502.965 ops/s
[info]                  ·gc.alloc.rate:                   999.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              209629.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141393.593 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 7486.539 ops/s
[info]                  ·gc.alloc.rate:                   1009.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              212300.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 283671.381 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7461.455 ops/s
[info]                  ·gc.alloc.rate:                   986.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              208184.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142451.241 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   7480.331 ±(99.9%) 82.197 ops/s [Average]
[info]   (min, avg, max) = (7454.541, 7480.331, 7502.965), stdev = 21.346
[info]   CI (99.9%): [7398.134, 7562.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   998.646 ±(99.9%) 37.033 MB/sec [Average]
[info]   (min, avg, max) = (986.798, 998.646, 1009.881), stdev = 9.617
[info]   CI (99.9%): [961.613, 1035.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   210134.454 ±(99.9%) 8063.690 B/op [Average]
[info]   (min, avg, max) = (208184.434, 210134.454, 212370.580), stdev = 2094.115
[info]   CI (99.9%): [202070.764, 218198.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.503 ±(99.9%) 14.100 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.503, 8.751), stdev = 3.662
[info]   CI (99.9%): [≈ 0, 17.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   944.105 ±(99.9%) 1422.018 MB/sec [Average]
[info]   (min, avg, max) = (673.984, 944.105, 1349.382), stdev = 369.294
[info]   CI (99.9%): [≈ 0, 2366.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   198729.854 ±(99.9%) 300233.466 B/op [Average]
[info]   (min, avg, max) = (141393.593, 198729.854, 284607.459), stdev = 77969.678
[info]   CI (99.9%): [≈ 0, 498963.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.35% complete, ETA 01:06:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120884.101 ops/s
[info] # Warmup Iteration   2: 164945.070 ops/s
[info] # Warmup Iteration   3: 177892.996 ops/s
[info] # Warmup Iteration   4: 179807.160 ops/s
[info] # Warmup Iteration   5: 174942.990 ops/s
[info] Iteration   1: 179615.336 ops/s
[info]                  ·gc.alloc.rate:                   1768.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              15498.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11793.459 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 177304.663 ops/s
[info]                  ·gc.alloc.rate:                   1794.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              15927.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17937.592 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 175342.837 ops/s
[info]                  ·gc.alloc.rate:                   1752.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              15732.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12107.785 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 179483.221 ops/s
[info]                  ·gc.alloc.rate:                   1791.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              15709.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.996 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17766.485 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 179650.851 ops/s
[info]                  ·gc.alloc.rate:                   1794.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              15719.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11846.470 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   178279.382 ±(99.9%) 7378.858 ops/s [Average]
[info]   (min, avg, max) = (175342.837, 178279.382, 179650.851), stdev = 1916.266
[info]   CI (99.9%): [170900.523, 185658.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1780.264 ±(99.9%) 71.968 MB/sec [Average]
[info]   (min, avg, max) = (1752.971, 1780.264, 1794.404), stdev = 18.690
[info]   CI (99.9%): [1708.295, 1852.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15717.562 ±(99.9%) 584.615 B/op [Average]
[info]   (min, avg, max) = (15498.964, 15717.562, 15927.607), stdev = 151.823
[info]   CI (99.9%): [15132.948, 16302.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.330 ±(99.9%) 1.255 B/op [Average]
[info]   (min, avg, max) = (0.182, 0.330, 0.913), stdev = 0.326
[info]   CI (99.9%): [≈ 0, 1.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1618.729 ±(99.9%) 1422.598 MB/sec [Average]
[info]   (min, avg, max) = (1345.684, 1618.729, 2025.996), stdev = 369.444
[info]   CI (99.9%): [196.131, 3041.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14290.358 ±(99.9%) 12530.355 B/op [Average]
[info]   (min, avg, max) = (11793.459, 14290.358, 17937.592), stdev = 3254.093
[info]   CI (99.9%): [1760.004, 26820.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.59% complete, ETA 01:06:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 429.678 ops/s
[info] # Warmup Iteration   2: 5977.635 ops/s
[info] # Warmup Iteration   3: 6802.383 ops/s
[info] # Warmup Iteration   4: 7132.964 ops/s
[info] # Warmup Iteration   5: 6984.154 ops/s
[info] Iteration   1: 7136.233 ops/s
[info]                  ·gc.alloc.rate:                   1205.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              265913.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 297326.678 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7141.467 ops/s
[info]                  ·gc.alloc.rate:                   1202.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              264964.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 297118.553 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7145.817 ops/s
[info]                  ·gc.alloc.rate:                   1200.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              264401.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.194 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 296952.263 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7147.365 ops/s
[info]                  ·gc.alloc.rate:                   1179.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              259784.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148581.268 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7119.368 ops/s
[info]                  ·gc.alloc.rate:                   1206.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              266587.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 298478.241 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   7138.050 ±(99.9%) 43.527 ops/s [Average]
[info]   (min, avg, max) = (7119.368, 7138.050, 7147.365), stdev = 11.304
[info]   CI (99.9%): [7094.523, 7181.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1198.841 ±(99.9%) 41.855 MB/sec [Average]
[info]   (min, avg, max) = (1179.869, 1198.841, 1206.183), stdev = 10.870
[info]   CI (99.9%): [1156.986, 1240.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   264330.282 ±(99.9%) 10309.351 B/op [Average]
[info]   (min, avg, max) = (259784.553, 264330.282, 266587.283), stdev = 2677.306
[info]   CI (99.9%): [254020.932, 274639.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.668 ±(99.9%) 23.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.668, 13.751), stdev = 5.976
[info]   CI (99.9%): [≈ 0, 26.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1213.906 ±(99.9%) 1160.443 MB/sec [Average]
[info]   (min, avg, max) = (674.815, 1213.906, 1350.475), stdev = 301.363
[info]   CI (99.9%): [53.464, 2374.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   267691.401 ±(99.9%) 256403.867 B/op [Average]
[info]   (min, avg, max) = (148581.268, 267691.401, 298478.241), stdev = 66587.270
[info]   CI (99.9%): [11287.534, 524095.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.82% complete, ETA 01:06:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6705.424 ops/s
[info] # Warmup Iteration   2: 19312.021 ops/s
[info] # Warmup Iteration   3: 19393.161 ops/s
[info] # Warmup Iteration   4: 19415.000 ops/s
[info] # Warmup Iteration   5: 19542.380 ops/s
[info] Iteration   1: 19180.238 ops/s
[info]                  ·gc.alloc.rate:                   819.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              67214.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55317.673 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 19464.952 ops/s
[info]                  ·gc.alloc.rate:                   836.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              67650.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.200 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54507.855 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 19587.962 ops/s
[info]                  ·gc.alloc.rate:                   828.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              66547.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54162.868 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 19540.159 ops/s
[info]                  ·gc.alloc.rate:                   855.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              68946.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108699.088 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 19498.098 ops/s
[info]                  ·gc.alloc.rate:                   831.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              67155.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.945 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54493.476 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   19454.282 ±(99.9%) 616.040 ops/s [Average]
[info]   (min, avg, max) = (19180.238, 19454.282, 19587.962), stdev = 159.984
[info]   CI (99.9%): [18838.242, 20070.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   834.373 ±(99.9%) 52.543 MB/sec [Average]
[info]   (min, avg, max) = (819.233, 834.373, 855.926), stdev = 13.645
[info]   CI (99.9%): [781.829, 886.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   67502.862 ±(99.9%) 3455.908 B/op [Average]
[info]   (min, avg, max) = (66547.170, 67502.862, 68946.095), stdev = 897.488
[info]   CI (99.9%): [64046.954, 70958.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.354 ±(99.9%) 16.831 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.354, 10.060), stdev = 4.371
[info]   CI (99.9%): [≈ 0, 19.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   809.371 ±(99.9%) 1162.531 MB/sec [Average]
[info]   (min, avg, max) = (674.041, 809.371, 1349.436), stdev = 301.906
[info]   CI (99.9%): [≈ 0, 1971.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   65436.192 ±(99.9%) 93141.060 B/op [Average]
[info]   (min, avg, max) = (54162.868, 65436.192, 108699.088), stdev = 24188.437
[info]   CI (99.9%): [≈ 0, 158577.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.06% complete, ETA 01:05:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9360.292 ops/s
[info] # Warmup Iteration   2: 22155.728 ops/s
[info] # Warmup Iteration   3: 22263.906 ops/s
[info] # Warmup Iteration   4: 22326.909 ops/s
[info] # Warmup Iteration   5: 22319.209 ops/s
[info] Iteration   1: 22075.690 ops/s
[info]                  ·gc.alloc.rate:                   899.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              64131.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96119.467 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 22269.027 ops/s
[info]                  ·gc.alloc.rate:                   885.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              62611.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47643.286 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 22348.460 ops/s
[info]                  ·gc.alloc.rate:                   885.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              62379.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47498.354 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 21967.602 ops/s
[info]                  ·gc.alloc.rate:                   867.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              62125.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48322.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 22272.513 ops/s
[info]                  ·gc.alloc.rate:                   891.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              62956.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95367.884 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   22186.658 ±(99.9%) 610.771 ops/s [Average]
[info]   (min, avg, max) = (21967.602, 22186.658, 22348.460), stdev = 158.615
[info]   CI (99.9%): [21575.888, 22797.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   885.791 ±(99.9%) 45.736 MB/sec [Average]
[info]   (min, avg, max) = (867.052, 885.791, 899.426), stdev = 11.878
[info]   CI (99.9%): [840.055, 931.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   62840.915 ±(99.9%) 3017.306 B/op [Average]
[info]   (min, avg, max) = (62125.891, 62840.915, 64131.632), stdev = 783.585
[info]   CI (99.9%): [59823.609, 65858.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.486 ±(99.9%) 7.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.486, 4.474), stdev = 1.827
[info]   CI (99.9%): [≈ 0, 8.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   944.119 ±(99.9%) 1422.815 MB/sec [Average]
[info]   (min, avg, max) = (674.037, 944.119, 1349.726), stdev = 369.501
[info]   CI (99.9%): [≈ 0, 2366.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   66990.203 ±(99.9%) 101084.776 B/op [Average]
[info]   (min, avg, max) = (47498.354, 66990.203, 96119.467), stdev = 26251.395
[info]   CI (99.9%): [≈ 0, 168074.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.29% complete, ETA 01:05:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 268799.903 ops/s
[info] # Warmup Iteration   2: 358627.901 ops/s
[info] # Warmup Iteration   3: 361192.183 ops/s
[info] # Warmup Iteration   4: 369107.098 ops/s
[info] # Warmup Iteration   5: 369269.087 ops/s
[info] Iteration   1: 370543.660 ops/s
[info]                  ·gc.alloc.rate:                   855.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2857.680 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 366251.059 ops/s
[info]                  ·gc.alloc.rate:                   846.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              3638.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2888.300 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 369958.028 ops/s
[info]                  ·gc.alloc.rate:                   859.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              3657.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.183 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2859.256 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 368228.770 ops/s
[info]                  ·gc.alloc.rate:                   872.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              3728.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5745.372 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 368342.574 ops/s
[info]                  ·gc.alloc.rate:                   851.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              3637.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2873.337 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   368664.818 ±(99.9%) 6478.543 ops/s [Average]
[info]   (min, avg, max) = (366251.059, 368664.818, 370543.660), stdev = 1682.457
[info]   CI (99.9%): [362186.275, 375143.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   857.127 ±(99.9%) 37.533 MB/sec [Average]
[info]   (min, avg, max) = (846.787, 857.127, 872.269), stdev = 9.747
[info]   CI (99.9%): [819.594, 894.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3658.993 ±(99.9%) 154.484 B/op [Average]
[info]   (min, avg, max) = (3632.631, 3658.993, 3728.644), stdev = 40.119
[info]   CI (99.9%): [3504.509, 3813.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.160 ±(99.9%) 0.702 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.160, 0.445), stdev = 0.182
[info]   CI (99.9%): [≈ 0, 0.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806.761 ±(99.9%) 1156.572 MB/sec [Average]
[info]   (min, avg, max) = (672.138, 806.761, 1344.057), stdev = 300.358
[info]   CI (99.9%): [≈ 0, 1963.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3444.789 ±(99.9%) 4952.408 B/op [Average]
[info]   (min, avg, max) = (2857.680, 3444.789, 5745.372), stdev = 1286.125
[info]   CI (99.9%): [≈ 0, 8397.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 43.53% complete, ETA 01:05:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 265939.278 ops/s
[info] # Warmup Iteration   2: 341452.253 ops/s
[info] # Warmup Iteration   3: 347763.275 ops/s
[info] # Warmup Iteration   4: 347791.803 ops/s
[info] # Warmup Iteration   5: 347866.899 ops/s
[info] Iteration   1: 348075.050 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.771 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 347332.621 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 347820.424 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 347914.676 ops/s
[info]                  ·gc.alloc.rate:      0.003 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 345720.554 ops/s
[info]                  ·gc.alloc.rate:      1.055 MB/sec
[info]                  ·gc.alloc.rate.norm: 4.805 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   347372.665 ±(99.9%) 3712.770 ops/s [Average]
[info]   (min, avg, max) = (345720.554, 347372.665, 348075.050), stdev = 964.195
[info]   CI (99.9%): [343659.895, 351085.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.246 ±(99.9%) 1.765 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.246, 1.055), stdev = 0.458
[info]   CI (99.9%): [≈ 0, 2.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.118 ±(99.9%) 8.038 B/op [Average]
[info]   (min, avg, max) = (0.001, 1.118, 4.805), stdev = 2.087
[info]   CI (99.9%): [≈ 0, 9.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.76% complete, ETA 01:05:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9917.571 ops/s
[info] # Warmup Iteration   2: 21183.727 ops/s
[info] # Warmup Iteration   3: 21539.569 ops/s
[info] # Warmup Iteration   4: 21462.357 ops/s
[info] # Warmup Iteration   5: 20649.869 ops/s
[info] Iteration   1: 21317.416 ops/s
[info]                  ·gc.alloc.rate:                   917.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              67784.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49772.932 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 21532.141 ops/s
[info]                  ·gc.alloc.rate:                   926.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              67724.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49273.724 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 21481.135 ops/s
[info]                  ·gc.alloc.rate:                   953.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              69905.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98834.779 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 21523.403 ops/s
[info]                  ·gc.alloc.rate:                   926.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              67773.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49340.742 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 21520.089 ops/s
[info]                  ·gc.alloc.rate:                   926.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              67748.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49352.204 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   21474.837 ±(99.9%) 347.152 ops/s [Average]
[info]   (min, avg, max) = (21317.416, 21474.837, 21532.141), stdev = 90.154
[info]   CI (99.9%): [21127.685, 21821.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   930.248 ±(99.9%) 52.863 MB/sec [Average]
[info]   (min, avg, max) = (917.963, 930.248, 953.905), stdev = 13.728
[info]   CI (99.9%): [877.385, 983.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68187.158 ±(99.9%) 3699.523 B/op [Average]
[info]   (min, avg, max) = (67724.592, 68187.158, 69905.307), stdev = 960.754
[info]   CI (99.9%): [64487.635, 71886.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.220 ±(99.9%) 7.657 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.220, 4.576), stdev = 1.989
[info]   CI (99.9%): [≈ 0, 8.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   809.228 ±(99.9%) 1161.182 MB/sec [Average]
[info]   (min, avg, max) = (674.044, 809.228, 1348.667), stdev = 301.555
[info]   CI (99.9%): [≈ 0, 1970.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   59314.876 ±(99.9%) 85072.969 B/op [Average]
[info]   (min, avg, max) = (49273.724, 59314.876, 98834.779), stdev = 22093.180
[info]   CI (99.9%): [≈ 0, 144387.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.00% complete, ETA 01:04:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3471.704 ops/s
[info] # Warmup Iteration   2: 12843.211 ops/s
[info] # Warmup Iteration   3: 13240.844 ops/s
[info] # Warmup Iteration   4: 13363.899 ops/s
[info] # Warmup Iteration   5: 13377.922 ops/s
[info] Iteration   1: 13374.174 ops/s
[info]                  ·gc.alloc.rate:                   1308.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              153984.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.896 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 158419.085 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 13407.695 ops/s
[info]                  ·gc.alloc.rate:                   1315.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              154375.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.617 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 158173.831 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 13405.720 ops/s
[info]                  ·gc.alloc.rate:                   1305.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              153285.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79182.816 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 13342.413 ops/s
[info]                  ·gc.alloc.rate:                   1329.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              156834.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159179.902 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 13440.457 ops/s
[info]                  ·gc.alloc.rate:                   1319.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              154559.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.943 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 158187.319 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   13394.092 ±(99.9%) 143.271 ops/s [Average]
[info]   (min, avg, max) = (13342.413, 13394.092, 13440.457), stdev = 37.207
[info]   CI (99.9%): [13250.821, 13537.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1315.694 ±(99.9%) 37.033 MB/sec [Average]
[info]   (min, avg, max) = (1305.495, 1315.694, 1329.539), stdev = 9.617
[info]   CI (99.9%): [1278.661, 1352.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   154607.828 ±(99.9%) 5148.445 B/op [Average]
[info]   (min, avg, max) = (153285.355, 154607.828, 156834.190), stdev = 1337.035
[info]   CI (99.9%): [149459.383, 159756.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.957 ±(99.9%) 12.269 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.957, 7.330), stdev = 3.186
[info]   CI (99.9%): [≈ 0, 14.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1213.652 ±(99.9%) 1160.844 MB/sec [Average]
[info]   (min, avg, max) = (674.381, 1213.652, 1350.943), stdev = 301.467
[info]   CI (99.9%): [52.808, 2374.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   142628.591 ±(99.9%) 136580.940 B/op [Average]
[info]   (min, avg, max) = (79182.816, 142628.591, 159179.902), stdev = 35469.636
[info]   CI (99.9%): [6047.650, 279209.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.24% complete, ETA 01:04:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1534.118 ops/s
[info] # Warmup Iteration   2: 11724.854 ops/s
[info] # Warmup Iteration   3: 12776.192 ops/s
[info] # Warmup Iteration   4: 12875.055 ops/s
[info] # Warmup Iteration   5: 12933.559 ops/s
[info] Iteration   1: 12716.967 ops/s
[info]                  ·gc.alloc.rate:                   1140.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              141075.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166848.886 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 12915.868 ops/s
[info]                  ·gc.alloc.rate:                   1151.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              140346.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.951 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 164278.801 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 12934.433 ops/s
[info]                  ·gc.alloc.rate:                   1123.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              136660.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82106.167 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 12866.550 ops/s
[info]                  ·gc.alloc.rate:                   1144.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              140050.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 165120.776 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 12742.282 ops/s
[info]                  ·gc.alloc.rate:                   1137.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              140478.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166863.789 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   12835.220 ±(99.9%) 384.825 ops/s [Average]
[info]   (min, avg, max) = (12716.967, 12835.220, 12934.433), stdev = 99.938
[info]   CI (99.9%): [12450.395, 13220.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1139.380 ±(99.9%) 40.829 MB/sec [Average]
[info]   (min, avg, max) = (1123.044, 1139.380, 1151.577), stdev = 10.603
[info]   CI (99.9%): [1098.551, 1180.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   139722.353 ±(99.9%) 6745.316 B/op [Average]
[info]   (min, avg, max) = (136660.697, 139722.353, 141075.674), stdev = 1751.737
[info]   CI (99.9%): [132977.036, 146467.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.056 ±(99.9%) 12.740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.056, 7.609), stdev = 3.309
[info]   CI (99.9%): [≈ 0, 15.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1214.360 ±(99.9%) 1161.607 MB/sec [Average]
[info]   (min, avg, max) = (674.728, 1214.360, 1351.030), stdev = 301.666
[info]   CI (99.9%): [52.752, 2375.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   149043.684 ±(99.9%) 144152.420 B/op [Average]
[info]   (min, avg, max) = (82106.167, 149043.684, 166863.789), stdev = 37435.926
[info]   CI (99.9%): [4891.264, 293196.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.47% complete, ETA 01:04:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 181118.681 ops/s
[info] # Warmup Iteration   2: 262782.006 ops/s
[info] # Warmup Iteration   3: 268526.663 ops/s
[info] # Warmup Iteration   4: 271596.646 ops/s
[info] # Warmup Iteration   5: 266435.120 ops/s
[info] Iteration   1: 271533.508 ops/s
[info]                  ·gc.alloc.rate:                   1600.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              9278.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7795.487 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 271824.048 ops/s
[info]                  ·gc.alloc.rate:                   1600.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              9266.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.621 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7791.000 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 271420.553 ops/s
[info]                  ·gc.alloc.rate:                   1629.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              9446.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11719.602 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 271987.625 ops/s
[info]                  ·gc.alloc.rate:                   1621.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              9383.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.134 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7807.417 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 271560.855 ops/s
[info]                  ·gc.alloc.rate:                   1612.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              9346.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7829.199 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   271665.318 ±(99.9%) 897.441 ops/s [Average]
[info]   (min, avg, max) = (271420.553, 271665.318, 271987.625), stdev = 233.063
[info]   CI (99.9%): [270767.877, 272562.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1612.938 ±(99.9%) 49.149 MB/sec [Average]
[info]   (min, avg, max) = (1600.392, 1612.938, 1629.344), stdev = 12.764
[info]   CI (99.9%): [1563.790, 1662.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9344.342 ±(99.9%) 288.482 B/op [Average]
[info]   (min, avg, max) = (9266.096, 9344.342, 9446.743), stdev = 74.918
[info]   CI (99.9%): [9055.860, 9632.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.265 ±(99.9%) 0.606 B/op [Average]
[info]   (min, avg, max) = (0.120, 0.265, 0.483), stdev = 0.157
[info]   CI (99.9%): [≈ 0, 0.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1482.374 ±(99.9%) 1160.248 MB/sec [Average]
[info]   (min, avg, max) = (1344.741, 1482.374, 2021.359), stdev = 301.313
[info]   CI (99.9%): [322.127, 2642.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8588.541 ±(99.9%) 6740.085 B/op [Average]
[info]   (min, avg, max) = (7791.000, 8588.541, 11719.602), stdev = 1750.379
[info]   CI (99.9%): [1848.456, 15328.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44.71% complete, ETA 01:03:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 894.303 ops/s
[info] # Warmup Iteration   2: 9872.948 ops/s
[info] # Warmup Iteration   3: 11535.805 ops/s
[info] # Warmup Iteration   4: 11595.461 ops/s
[info] # Warmup Iteration   5: 11592.021 ops/s
[info] Iteration   1: 11571.361 ops/s
[info]                  ·gc.alloc.rate:                   1408.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              191602.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183353.592 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 11613.684 ops/s
[info]                  ·gc.alloc.rate:                   1424.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              193072.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.731 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182796.694 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 11631.322 ops/s
[info]                  ·gc.alloc.rate:                   1410.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              190851.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182604.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 11633.808 ops/s
[info]                  ·gc.alloc.rate:                   1422.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              192458.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182737.143 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 11615.998 ops/s
[info]                  ·gc.alloc.rate:                   1411.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              191279.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183216.499 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   11613.234 ±(99.9%) 96.490 ops/s [Average]
[info]   (min, avg, max) = (11571.361, 11613.234, 11633.808), stdev = 25.058
[info]   CI (99.9%): [11516.744, 11709.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1415.467 ±(99.9%) 28.675 MB/sec [Average]
[info]   (min, avg, max) = (1408.470, 1415.467, 1424.553), stdev = 7.447
[info]   CI (99.9%): [1386.792, 1444.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   191852.922 ±(99.9%) 3470.678 B/op [Average]
[info]   (min, avg, max) = (190851.658, 191852.922, 193072.965), stdev = 901.324
[info]   CI (99.9%): [188382.245, 195323.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.819 ±(99.9%) 18.780 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.819, 11.263), stdev = 4.877
[info]   CI (99.9%): [≈ 0, 21.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1349.716 ±(99.9%) 6.287 MB/sec [Average]
[info]   (min, avg, max) = (1347.834, 1349.716, 1352.017), stdev = 1.633
[info]   CI (99.9%): [1343.429, 1356.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   182941.586 ±(99.9%) 1250.835 B/op [Average]
[info]   (min, avg, max) = (182604.003, 182941.586, 183353.592), stdev = 324.838
[info]   CI (99.9%): [181690.751, 184192.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.94% complete, ETA 01:03:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12120.236 ops/s
[info] # Warmup Iteration   2: 30405.240 ops/s
[info] # Warmup Iteration   3: 30704.406 ops/s
[info] # Warmup Iteration   4: 30537.486 ops/s
[info] # Warmup Iteration   5: 30734.609 ops/s
[info] Iteration   1: 30351.767 ops/s
[info]                  ·gc.alloc.rate:                   1020.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              52898.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69978.753 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 30841.445 ops/s
[info]                  ·gc.alloc.rate:                   1031.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              52632.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34431.361 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 30840.274 ops/s
[info]                  ·gc.alloc.rate:                   1046.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              53413.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.621 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68907.880 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 30818.025 ops/s
[info]                  ·gc.alloc.rate:                   1021.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              52170.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34494.422 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 30812.029 ops/s
[info]                  ·gc.alloc.rate:                   1047.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              53511.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.303 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69036.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   30732.708 ±(99.9%) 821.553 ops/s [Average]
[info]   (min, avg, max) = (30351.767, 30732.708, 30841.445), stdev = 213.355
[info]   CI (99.9%): [29911.155, 31554.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1033.500 ±(99.9%) 50.763 MB/sec [Average]
[info]   (min, avg, max) = (1020.409, 1033.500, 1047.414), stdev = 13.183
[info]   CI (99.9%): [982.738, 1084.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   52925.190 ±(99.9%) 2141.255 B/op [Average]
[info]   (min, avg, max) = (52170.785, 52925.190, 53511.052), stdev = 556.077
[info]   CI (99.9%): [50783.935, 55066.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.348 ±(99.9%) 8.888 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.348, 5.312), stdev = 2.308
[info]   CI (99.9%): [≈ 0, 11.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1080.368 ±(99.9%) 1424.866 MB/sec [Average]
[info]   (min, avg, max) = (674.674, 1080.368, 1351.303), stdev = 370.033
[info]   CI (99.9%): [≈ 0, 2505.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   55369.743 ±(99.9%) 73507.824 B/op [Average]
[info]   (min, avg, max) = (34431.361, 55369.743, 69978.753), stdev = 19089.748
[info]   CI (99.9%): [≈ 0, 128877.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 01:03:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24788.043 ops/s
[info] # Warmup Iteration   2: 70465.931 ops/s
[info] # Warmup Iteration   3: 70755.892 ops/s
[info] # Warmup Iteration   4: 71840.396 ops/s
[info] # Warmup Iteration   5: 71730.180 ops/s
[info] Iteration   1: 69522.803 ops/s
[info]                  ·gc.alloc.rate:                   1557.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              35244.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30552.176 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 71974.345 ops/s
[info]                  ·gc.alloc.rate:                   1607.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              35165.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29540.635 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 72012.603 ops/s
[info]                  ·gc.alloc.rate:                   1609.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              35159.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29554.577 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 71358.230 ops/s
[info]                  ·gc.alloc.rate:                   1634.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              36047.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44774.837 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 71629.695 ops/s
[info]                  ·gc.alloc.rate:                   1599.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              35147.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29762.978 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   71299.535 ±(99.9%) 3961.235 ops/s [Average]
[info]   (min, avg, max) = (69522.803, 71299.535, 72012.603), stdev = 1028.720
[info]   CI (99.9%): [67338.301, 75260.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1601.501 ±(99.9%) 107.974 MB/sec [Average]
[info]   (min, avg, max) = (1557.017, 1601.501, 1634.109), stdev = 28.040
[info]   CI (99.9%): [1493.527, 1709.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   35352.968 ±(99.9%) 1502.362 B/op [Average]
[info]   (min, avg, max) = (35147.243, 35352.968, 36047.506), stdev = 390.159
[info]   CI (99.9%): [33850.606, 36855.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.547 ±(99.9%) 1.465 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.547, 0.910), stdev = 0.380
[info]   CI (99.9%): [≈ 0, 2.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1487.420 ±(99.9%) 1167.399 MB/sec [Average]
[info]   (min, avg, max) = (1349.703, 1487.420, 2029.737), stdev = 303.170
[info]   CI (99.9%): [320.020, 2654.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   32837.041 ±(99.9%) 25746.264 B/op [Average]
[info]   (min, avg, max) = (29540.635, 32837.041, 44774.837), stdev = 6686.223
[info]   CI (99.9%): [7090.776, 58583.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.41% complete, ETA 01:03:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 401507.504 ops/s
[info] # Warmup Iteration   2: 553168.235 ops/s
[info] # Warmup Iteration   3: 574281.437 ops/s
[info] # Warmup Iteration   4: 583510.681 ops/s
[info] # Warmup Iteration   5: 587695.104 ops/s
[info] Iteration   1: 590626.502 ops/s
[info]                  ·gc.alloc.rate:                   857.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              2284.285 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3589.312 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 582906.090 ops/s
[info]                  ·gc.alloc.rate:                   827.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              2233.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1816.616 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 589398.461 ops/s
[info]                  ·gc.alloc.rate:                   831.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              2220.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1796.570 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 593127.231 ops/s
[info]                  ·gc.alloc.rate:                   833.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              2210.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.974 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1785.252 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 590644.979 ops/s
[info]                  ·gc.alloc.rate:                   828.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              2208.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1792.677 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   589340.653 ±(99.9%) 14801.179 ops/s [Average]
[info]   (min, avg, max) = (582906.090, 589340.653, 593127.231), stdev = 3843.819
[info]   CI (99.9%): [574539.473, 604141.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   835.554 ±(99.9%) 47.148 MB/sec [Average]
[info]   (min, avg, max) = (827.446, 835.554, 857.088), stdev = 12.244
[info]   CI (99.9%): [788.406, 882.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2231.404 ±(99.9%) 120.374 B/op [Average]
[info]   (min, avg, max) = (2208.294, 2231.404, 2284.285), stdev = 31.261
[info]   CI (99.9%): [2111.030, 2351.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.055 ±(99.9%) 0.213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.055, 0.111), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   807.607 ±(99.9%) 1160.541 MB/sec [Average]
[info]   (min, avg, max) = (672.697, 807.607, 1346.748), stdev = 301.389
[info]   CI (99.9%): [≈ 0, 1968.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2156.085 ±(99.9%) 3085.451 B/op [Average]
[info]   (min, avg, max) = (1785.252, 2156.085, 3589.312), stdev = 801.282
[info]   CI (99.9%): [≈ 0, 5241.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 45.65% complete, ETA 01:02:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 443319.079 ops/s
[info] # Warmup Iteration   2: 525473.119 ops/s
[info] # Warmup Iteration   3: 539440.767 ops/s
[info] # Warmup Iteration   4: 539390.318 ops/s
[info] # Warmup Iteration   5: 539021.478 ops/s
[info] Iteration   1: 538132.727 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 531716.046 ops/s
[info]                  ·gc.alloc.rate:      0.001 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 541649.856 ops/s
[info]                  ·gc.alloc.rate:      0.031 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.091 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 541513.470 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 541417.921 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   538886.004 ±(99.9%) 16441.933 ops/s [Average]
[info]   (min, avg, max) = (531716.046, 538886.004, 541649.856), stdev = 4269.918
[info]   CI (99.9%): [522444.071, 555327.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.007 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.007, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.019 ±(99.9%) 0.156 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.019, 0.091), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.88% complete, ETA 01:02:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24728.085 ops/s
[info] # Warmup Iteration   2: 64793.387 ops/s
[info] # Warmup Iteration   3: 66049.179 ops/s
[info] # Warmup Iteration   4: 65993.851 ops/s
[info] # Warmup Iteration   5: 66274.645 ops/s
[info] Iteration   1: 66322.320 ops/s
[info]                  ·gc.alloc.rate:                   1591.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              37767.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32025.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 67230.851 ops/s
[info]                  ·gc.alloc.rate:                   1621.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              37965.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31624.760 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 65180.630 ops/s
[info]                  ·gc.alloc.rate:                   1585.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              38299.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48961.748 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 65506.725 ops/s
[info]                  ·gc.alloc.rate:                   1578.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              37929.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.920 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32505.920 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 66798.497 ops/s
[info]                  ·gc.alloc.rate:                   1609.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              37931.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31908.201 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   66207.805 ±(99.9%) 3309.795 ops/s [Average]
[info]   (min, avg, max) = (65180.630, 66207.805, 67230.851), stdev = 859.543
[info]   CI (99.9%): [62898.010, 69517.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1597.460 ±(99.9%) 68.565 MB/sec [Average]
[info]   (min, avg, max) = (1578.660, 1597.460, 1621.836), stdev = 17.806
[info]   CI (99.9%): [1528.895, 1666.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   37978.743 ±(99.9%) 752.463 B/op [Average]
[info]   (min, avg, max) = (37767.048, 37978.743, 38299.878), stdev = 195.412
[info]   CI (99.9%): [37226.280, 38731.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.100 ±(99.9%) 5.180 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.100, 3.001), stdev = 1.345
[info]   CI (99.9%): [≈ 0, 6.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1486.933 ±(99.9%) 1163.563 MB/sec [Average]
[info]   (min, avg, max) = (1349.253, 1486.933, 2027.468), stdev = 302.174
[info]   CI (99.9%): [323.370, 2650.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   35405.140 ±(99.9%) 29207.321 B/op [Average]
[info]   (min, avg, max) = (31624.760, 35405.140, 48961.748), stdev = 7585.048
[info]   CI (99.9%): [6197.819, 64612.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.12% complete, ETA 01:02:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8470.137 ops/s
[info] # Warmup Iteration   2: 19599.042 ops/s
[info] # Warmup Iteration   3: 19812.253 ops/s
[info] # Warmup Iteration   4: 19908.790 ops/s
[info] # Warmup Iteration   5: 19995.592 ops/s
[info] Iteration   1: 19960.250 ops/s
[info]                  ·gc.alloc.rate:                   719.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              56732.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.169 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52998.707 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 19914.671 ops/s
[info]                  ·gc.alloc.rate:                   725.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              57308.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.193 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53115.778 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 19654.435 ops/s
[info]                  ·gc.alloc.rate:                   703.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              56331.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53871.599 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 20089.432 ops/s
[info]                  ·gc.alloc.rate:                   722.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              56555.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52707.996 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 20097.070 ops/s
[info]                  ·gc.alloc.rate:                   715.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              56002.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.053 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52710.479 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   19943.172 ±(99.9%) 692.981 ops/s [Average]
[info]   (min, avg, max) = (19654.435, 19943.172, 20097.070), stdev = 179.965
[info]   CI (99.9%): [19250.191, 20636.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   717.129 ±(99.9%) 32.383 MB/sec [Average]
[info]   (min, avg, max) = (703.641, 717.129, 725.255), stdev = 8.410
[info]   CI (99.9%): [684.746, 749.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   56586.115 ±(99.9%) 1875.825 B/op [Average]
[info]   (min, avg, max) = (56002.914, 56586.115, 57308.678), stdev = 487.146
[info]   CI (99.9%): [54710.290, 58461.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.269 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.167), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.931 ±(99.9%) 21.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.931, 13.131), stdev = 5.517
[info]   CI (99.9%): [≈ 0, 25.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   672.668 ±(99.9%) 1.722 MB/sec [Average]
[info]   (min, avg, max) = (672.169, 672.668, 673.053), stdev = 0.447
[info]   CI (99.9%): [670.946, 674.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   53080.912 ±(99.9%) 1836.081 B/op [Average]
[info]   (min, avg, max) = (52707.996, 53080.912, 53871.599), stdev = 476.824
[info]   CI (99.9%): [51244.831, 54916.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.35% complete, ETA 01:02:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6842.364 ops/s
[info] # Warmup Iteration   2: 18302.456 ops/s
[info] # Warmup Iteration   3: 19035.665 ops/s
[info] # Warmup Iteration   4: 18870.900 ops/s
[info] # Warmup Iteration   5: 19032.847 ops/s
[info] Iteration   1: 19020.738 ops/s
[info]                  ·gc.alloc.rate:                   553.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              45801.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55721.962 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 18469.343 ops/s
[info]                  ·gc.alloc.rate:                   546.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              46534.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57387.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 19052.469 ops/s
[info]                  ·gc.alloc.rate:      531.710 MB/sec
[info]                  ·gc.alloc.rate.norm: 43928.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 19062.799 ops/s
[info]                  ·gc.alloc.rate:                   554.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              45782.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55602.137 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 19043.917 ops/s
[info]                  ·gc.alloc.rate:                   549.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              45415.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55685.128 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   18929.853 ±(99.9%) 993.080 ops/s [Average]
[info]   (min, avg, max) = (18469.343, 18929.853, 19062.799), stdev = 257.900
[info]   CI (99.9%): [17936.773, 19922.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   547.036 ±(99.9%) 35.385 MB/sec [Average]
[info]   (min, avg, max) = (531.710, 547.036, 554.443), stdev = 9.189
[info]   CI (99.9%): [511.651, 582.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   45492.456 ±(99.9%) 3712.421 B/op [Average]
[info]   (min, avg, max) = (43928.021, 45492.456, 46534.001), stdev = 964.104
[info]   CI (99.9%): [41780.035, 49204.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.212 ±(99.9%) 1.783 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.212, 1.041), stdev = 0.463
[info]   CI (99.9%): [≈ 0, 1.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17.568 ±(99.9%) 147.588 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.568, 86.118), stdev = 38.328
[info]   CI (99.9%): [≈ 0, 165.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   538.774 ±(99.9%) 1159.751 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.774, 673.696), stdev = 301.184
[info]   CI (99.9%): [≈ 0, 1698.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   44879.248 ±(99.9%) 96648.535 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44879.248, 57387.015), stdev = 25099.318
[info]   CI (99.9%): [≈ 0, 141527.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 01:01:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97213.203 ops/s
[info] # Warmup Iteration   2: 110068.743 ops/s
[info] # Warmup Iteration   3: 116226.451 ops/s
[info] # Warmup Iteration   4: 116002.990 ops/s
[info] # Warmup Iteration   5: 115990.871 ops/s
[info] Iteration   1: 116539.612 ops/s
[info]                  ·gc.alloc.rate:      292.585 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 116078.704 ops/s
[info]                  ·gc.alloc.rate:                   306.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              4149.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6936.615 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 116760.176 ops/s
[info]                  ·gc.alloc.rate:      293.148 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 116231.294 ops/s
[info]                  ·gc.alloc.rate:                   304.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              4123.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9128.406 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 116559.855 ops/s
[info]                  ·gc.alloc.rate:      303.036 MB/sec
[info]                  ·gc.alloc.rate.norm: 4091.859 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   116433.928 ±(99.9%) 1055.787 ops/s [Average]
[info]   (min, avg, max) = (116078.704, 116433.928, 116760.176), stdev = 274.185
[info]   CI (99.9%): [115378.141, 117489.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   299.867 ±(99.9%) 24.960 MB/sec [Average]
[info]   (min, avg, max) = (292.585, 299.867, 306.055), stdev = 6.482
[info]   CI (99.9%): [274.907, 324.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4053.762 ±(99.9%) 366.317 B/op [Average]
[info]   (min, avg, max) = (3952.003, 4053.762, 4149.828), stdev = 95.131
[info]   CI (99.9%): [3687.445, 4420.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   237.151 ±(99.9%) 1269.870 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 237.151, 674.172), stdev = 329.781
[info]   CI (99.9%): [≈ 0, 1507.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3213.004 ±(99.9%) 17202.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3213.004, 9128.406), stdev = 4467.310
[info]   CI (99.9%): [≈ 0, 20415.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.82% complete, ETA 01:01:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3403.205 ops/s
[info] # Warmup Iteration   2: 15570.610 ops/s
[info] # Warmup Iteration   3: 16621.791 ops/s
[info] # Warmup Iteration   4: 16697.237 ops/s
[info] # Warmup Iteration   5: 16629.574 ops/s
[info] Iteration   1: 16638.671 ops/s
[info]                  ·gc.alloc.rate:                   1031.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              97583.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.278 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63763.905 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 16539.069 ops/s
[info]                  ·gc.alloc.rate:                   1041.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              99077.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128298.744 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16527.016 ops/s
[info]                  ·gc.alloc.rate:                   1026.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              97763.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.221 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64195.941 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 16730.422 ops/s
[info]                  ·gc.alloc.rate:                   1047.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              98529.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.259 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 126944.426 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16760.226 ops/s
[info]                  ·gc.alloc.rate:                   1029.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              96718.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63397.469 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   16639.081 ±(99.9%) 411.048 ops/s [Average]
[info]   (min, avg, max) = (16527.016, 16639.081, 16760.226), stdev = 106.748
[info]   CI (99.9%): [16228.033, 17050.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1035.406 ±(99.9%) 32.956 MB/sec [Average]
[info]   (min, avg, max) = (1026.765, 1035.406, 1047.244), stdev = 8.558
[info]   CI (99.9%): [1002.450, 1068.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   97934.444 ±(99.9%) 3492.704 B/op [Average]
[info]   (min, avg, max) = (96718.505, 97934.444, 99077.224), stdev = 907.044
[info]   CI (99.9%): [94441.740, 101427.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.179 ±(99.9%) 4.144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.179, 1.981), stdev = 1.076
[info]   CI (99.9%): [≈ 0, 5.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   944.240 ±(99.9%) 1422.213 MB/sec [Average]
[info]   (min, avg, max) = (674.221, 944.240, 1349.259), stdev = 369.344
[info]   CI (99.9%): [≈ 0, 2366.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   89320.097 ±(99.9%) 134652.149 B/op [Average]
[info]   (min, avg, max) = (63397.469, 89320.097, 128298.744), stdev = 34968.735
[info]   CI (99.9%): [≈ 0, 223972.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.06% complete, ETA 01:01:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19728.706 ops/s
[info] # Warmup Iteration   2: 46792.672 ops/s
[info] # Warmup Iteration   3: 48140.285 ops/s
[info] # Warmup Iteration   4: 48521.441 ops/s
[info] # Warmup Iteration   5: 48817.769 ops/s
[info] Iteration   1: 49034.571 ops/s
[info]                  ·gc.alloc.rate:                   898.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              28840.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21636.875 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 49013.201 ops/s
[info]                  ·gc.alloc.rate:                   916.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              29441.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43292.288 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 47741.964 ops/s
[info]                  ·gc.alloc.rate:                   872.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              28739.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22233.738 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 49064.588 ops/s
[info]                  ·gc.alloc.rate:                   891.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              28597.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21634.773 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 48782.873 ops/s
[info]                  ·gc.alloc.rate:                   916.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              29555.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43541.124 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   48727.439 ±(99.9%) 2164.504 ops/s [Average]
[info]   (min, avg, max) = (47741.964, 48727.439, 49064.588), stdev = 562.115
[info]   CI (99.9%): [46562.935, 50891.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   899.045 ±(99.9%) 72.134 MB/sec [Average]
[info]   (min, avg, max) = (872.000, 899.045, 916.857), stdev = 18.733
[info]   CI (99.9%): [826.911, 971.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   29034.797 ±(99.9%) 1671.467 B/op [Average]
[info]   (min, avg, max) = (28597.095, 29034.797, 29555.755), stdev = 434.075
[info]   CI (99.9%): [27363.329, 30706.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.803 ±(99.9%) 3.354 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.803, 2.004), stdev = 0.871
[info]   CI (99.9%): [≈ 0, 4.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   944.257 ±(99.9%) 1422.910 MB/sec [Average]
[info]   (min, avg, max) = (674.080, 944.257, 1349.914), stdev = 369.525
[info]   CI (99.9%): [≈ 0, 2367.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   30467.759 ±(99.9%) 45528.335 B/op [Average]
[info]   (min, avg, max) = (21634.773, 30467.759, 43541.124), stdev = 11823.564
[info]   CI (99.9%): [≈ 0, 75996.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.29% complete, ETA 01:00:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24094.135 ops/s
[info] # Warmup Iteration   2: 62927.899 ops/s
[info] # Warmup Iteration   3: 62801.794 ops/s
[info] # Warmup Iteration   4: 63379.153 ops/s
[info] # Warmup Iteration   5: 63747.410 ops/s
[info] Iteration   1: 63773.388 ops/s
[info]                  ·gc.alloc.rate:                   1069.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              26401.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33273.514 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 63654.007 ops/s
[info]                  ·gc.alloc.rate:                   1052.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              26019.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16676.089 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 63752.063 ops/s
[info]                  ·gc.alloc.rate:                   1068.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              26374.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33308.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 62874.982 ops/s
[info]                  ·gc.alloc.rate:                   1043.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              26128.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16891.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 63086.032 ops/s
[info]                  ·gc.alloc.rate:                   1073.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              26795.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33702.270 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   63428.095 ±(99.9%) 1608.722 ops/s [Average]
[info]   (min, avg, max) = (62874.982, 63428.095, 63773.388), stdev = 417.780
[info]   CI (99.9%): [61819.373, 65036.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1061.587 ±(99.9%) 49.885 MB/sec [Average]
[info]   (min, avg, max) = (1043.704, 1061.587, 1073.868), stdev = 12.955
[info]   CI (99.9%): [1011.702, 1111.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   26344.056 ±(99.9%) 1155.009 B/op [Average]
[info]   (min, avg, max) = (26019.956, 26344.056, 26795.932), stdev = 299.952
[info]   CI (99.9%): [25189.047, 27499.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.618 ±(99.9%) 2.579 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.618, 1.542), stdev = 0.670
[info]   CI (99.9%): [≈ 0, 3.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1079.439 ±(99.9%) 1423.304 MB/sec [Average]
[info]   (min, avg, max) = (674.356, 1079.439, 1350.645), stdev = 369.628
[info]   CI (99.9%): [≈ 0, 2502.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   26770.194 ±(99.9%) 35111.687 B/op [Average]
[info]   (min, avg, max) = (16676.089, 26770.194, 33702.270), stdev = 9118.394
[info]   CI (99.9%): [≈ 0, 61881.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.53% complete, ETA 01:00:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 228475.481 ops/s
[info] # Warmup Iteration   2: 295434.195 ops/s
[info] # Warmup Iteration   3: 292633.050 ops/s
[info] # Warmup Iteration   4: 296717.710 ops/s
[info] # Warmup Iteration   5: 294543.749 ops/s
[info] Iteration   1: 300104.757 ops/s
[info]                  ·gc.alloc.rate:                   600.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              3147.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.199 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3535.488 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 298870.747 ops/s
[info]                  ·gc.alloc.rate:                   593.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              3127.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3546.504 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 300817.231 ops/s
[info]                  ·gc.alloc.rate:      576.536 MB/sec
[info]                  ·gc.alloc.rate.norm: 3016.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 299866.742 ops/s
[info]                  ·gc.alloc.rate:                   599.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              3148.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3534.679 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 300822.636 ops/s
[info]                  ·gc.alloc.rate:                   593.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              3106.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.754 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3520.162 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   300096.423 ±(99.9%) 3105.714 ops/s [Average]
[info]   (min, avg, max) = (298870.747, 300096.423, 300822.636), stdev = 806.544
[info]   CI (99.9%): [296990.708, 303202.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   592.859 ±(99.9%) 37.178 MB/sec [Average]
[info]   (min, avg, max) = (576.536, 592.859, 600.255), stdev = 9.655
[info]   CI (99.9%): [555.681, 630.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3109.235 ±(99.9%) 211.463 B/op [Average]
[info]   (min, avg, max) = (3016.001, 3109.235, 3148.330), stdev = 54.916
[info]   CI (99.9%): [2897.773, 3320.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.564 ±(99.9%) 4.769 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.564, 2.779), stdev = 1.238
[info]   CI (99.9%): [≈ 0, 5.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.959 ±(99.9%) 25.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.959, 14.575), stdev = 6.494
[info]   CI (99.9%): [≈ 0, 27.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538.784 ±(99.9%) 1159.774 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.784, 674.199), stdev = 301.190
[info]   CI (99.9%): [≈ 0, 1698.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2827.366 ±(99.9%) 6086.226 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2827.366, 3546.504), stdev = 1580.574
[info]   CI (99.9%): [≈ 0, 8913.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.76% complete, ETA 01:00:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 256043.184 ops/s
[info] # Warmup Iteration   2: 318874.121 ops/s
[info] # Warmup Iteration   3: 326321.009 ops/s
[info] # Warmup Iteration   4: 325499.999 ops/s
[info] # Warmup Iteration   5: 326086.424 ops/s
[info] Iteration   1: 325470.862 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.824 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 321207.307 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 326467.092 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 325414.044 ops/s
[info]                  ·gc.alloc.rate:      0.943 MB/sec
[info]                  ·gc.alloc.rate.norm: 4.561 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 325732.478 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   324858.357 ±(99.9%) 8023.357 ops/s [Average]
[info]   (min, avg, max) = (321207.307, 324858.357, 326467.092), stdev = 2083.640
[info]   CI (99.9%): [316835.000, 332881.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.223 ±(99.9%) 1.576 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.223, 0.943), stdev = 0.409
[info]   CI (99.9%): [≈ 0, 1.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.078 ±(99.9%) 7.622 B/op [Average]
[info]   (min, avg, max) = (0.001, 1.078, 4.561), stdev = 1.979
[info]   CI (99.9%): [≈ 0, 8.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.00% complete, ETA 01:00:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27198.574 ops/s
[info] # Warmup Iteration   2: 58395.392 ops/s
[info] # Warmup Iteration   3: 59191.719 ops/s
[info] # Warmup Iteration   4: 60554.404 ops/s
[info] # Warmup Iteration   5: 60625.036 ops/s
[info] Iteration   1: 60766.975 ops/s
[info]                  ·gc.alloc.rate:                   1104.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              28609.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17442.624 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 60618.551 ops/s
[info]                  ·gc.alloc.rate:                   1126.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              29233.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35005.572 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 60671.715 ops/s
[info]                  ·gc.alloc.rate:                   1104.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              28652.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17496.139 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 60390.901 ops/s
[info]                  ·gc.alloc.rate:                   1113.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              29033.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35171.851 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 60514.012 ops/s
[info]                  ·gc.alloc.rate:                   1133.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              29475.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35134.442 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   60592.431 ±(99.9%) 558.668 ops/s [Average]
[info]   (min, avg, max) = (60390.901, 60592.431, 60766.975), stdev = 145.084
[info]   CI (99.9%): [60033.763, 61151.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1116.400 ±(99.9%) 50.065 MB/sec [Average]
[info]   (min, avg, max) = (1104.341, 1116.400, 1133.274), stdev = 13.002
[info]   CI (99.9%): [1066.334, 1166.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   29001.043 ±(99.9%) 1434.096 B/op [Average]
[info]   (min, avg, max) = (28609.848, 29001.043, 29475.354), stdev = 372.430
[info]   CI (99.9%): [27566.947, 30435.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.434 ±(99.9%) 3.737 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.434, 2.170), stdev = 0.970
[info]   CI (99.9%): [≈ 0, 4.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1079.266 ±(99.9%) 1425.163 MB/sec [Average]
[info]   (min, avg, max) = (673.316, 1079.266, 1350.856), stdev = 370.110
[info]   CI (99.9%): [≈ 0, 2504.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   28050.126 ±(99.9%) 37193.637 B/op [Average]
[info]   (min, avg, max) = (17442.624, 28050.126, 35171.851), stdev = 9659.069
[info]   CI (99.9%): [≈ 0, 65243.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.24% complete, ETA 00:59:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81793.288 ops/s
[info] # Warmup Iteration   2: 146198.550 ops/s
[info] # Warmup Iteration   3: 150641.221 ops/s
[info] # Warmup Iteration   4: 151042.064 ops/s
[info] # Warmup Iteration   5: 152357.891 ops/s
[info] Iteration   1: 150806.364 ops/s
[info]                  ·gc.alloc.rate:                   1909.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              19933.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21102.774 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 153970.104 ops/s
[info]                  ·gc.alloc.rate:                   1923.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              19664.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13795.619 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 153926.676 ops/s
[info]                  ·gc.alloc.rate:                   1950.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              19941.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20722.779 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 154070.977 ops/s
[info]                  ·gc.alloc.rate:                   1952.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              19944.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20737.302 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 151745.570 ops/s
[info]                  ·gc.alloc.rate:                   1940.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              20131.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.264 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21082.755 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   152903.938 ±(99.9%) 5867.121 ops/s [Average]
[info]   (min, avg, max) = (150806.364, 152903.938, 154070.977), stdev = 1523.673
[info]   CI (99.9%): [147036.817, 158771.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1935.261 ±(99.9%) 70.278 MB/sec [Average]
[info]   (min, avg, max) = (1909.706, 1935.261, 1952.142), stdev = 18.251
[info]   CI (99.9%): [1864.982, 2005.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19923.128 ±(99.9%) 641.466 B/op [Average]
[info]   (min, avg, max) = (19664.577, 19923.128, 20131.074), stdev = 166.587
[info]   CI (99.9%): [19281.661, 20564.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.257 ±(99.9%) 0.691 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.257, 0.432), stdev = 0.180
[info]   CI (99.9%): [≈ 0, 0.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1891.988 ±(99.9%) 1167.958 MB/sec [Average]
[info]   (min, avg, max) = (1349.447, 1891.988, 2032.264), stdev = 303.315
[info]   CI (99.9%): [724.030, 3059.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19488.246 ±(99.9%) 12273.738 B/op [Average]
[info]   (min, avg, max) = (13795.619, 19488.246, 21102.774), stdev = 3187.451
[info]   CI (99.9%): [7214.508, 31761.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48.47% complete, ETA 00:59:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.850 ops/s
[info] # Warmup Iteration   2: 667640.280 ops/s
[info] # Warmup Iteration   3: 751463.780 ops/s
[info] # Warmup Iteration   4: 748458.999 ops/s
[info] # Warmup Iteration   5: 770949.748 ops/s
[info] Iteration   1: 765527.336 ops/s
[info]                  ·gc.alloc.rate:                   438.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              902.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1377.786 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 771248.771 ops/s
[info]                  ·gc.alloc.rate:      427.313 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 768036.051 ops/s
[info]                  ·gc.alloc.rate:                   446.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              915.761 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1373.280 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 773557.336 ops/s
[info]                  ·gc.alloc.rate:                   443.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              901.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1362.123 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 774687.130 ops/s
[info]                  ·gc.alloc.rate:      429.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   770611.325 ±(99.9%) 14685.106 ops/s [Average]
[info]   (min, avg, max) = (765527.336, 770611.325, 774687.130), stdev = 3813.675
[info]   CI (99.9%): [755926.219, 785296.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   437.059 ±(99.9%) 33.052 MB/sec [Average]
[info]   (min, avg, max) = (427.313, 437.059, 446.914), stdev = 8.584
[info]   CI (99.9%): [404.007, 470.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   892.744 ±(99.9%) 76.068 B/op [Average]
[info]   (min, avg, max) = (872.001, 892.744, 915.761), stdev = 19.755
[info]   CI (99.9%): [816.676, 968.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.829 ±(99.9%) 7.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 4.113), stdev = 1.836
[info]   CI (99.9%): [≈ 0, 7.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1.698 ±(99.9%) 14.488 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.698, 8.428), stdev = 3.762
[info]   CI (99.9%): [≈ 0, 16.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   401.922 ±(99.9%) 1412.812 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.922, 670.196), stdev = 366.903
[info]   CI (99.9%): [≈ 0, 1814.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   822.638 ±(99.9%) 2891.772 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 822.638, 1377.786), stdev = 750.984
[info]   CI (99.9%): [≈ 0, 3714.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.517
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.71% complete, ETA 00:59:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 165798.262 ops/s
[info] # Warmup Iteration   2: 374649.414 ops/s
[info] # Warmup Iteration   3: 382109.740 ops/s
[info] # Warmup Iteration   4: 381566.682 ops/s
[info] # Warmup Iteration   5: 382911.286 ops/s
[info] Iteration   1: 383311.660 ops/s
[info]                  ·gc.alloc.rate:                   405.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              1666.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.279 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2765.219 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 382659.910 ops/s
[info]                  ·gc.alloc.rate:      390.874 MB/sec
[info]                  ·gc.alloc.rate.norm: 1608.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 380617.103 ops/s
[info]                  ·gc.alloc.rate:                   414.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              1713.943 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2784.795 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 368897.284 ops/s
[info]                  ·gc.alloc.rate:      379.574 MB/sec
[info]                  ·gc.alloc.rate.norm: 1619.591 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 382017.530 ops/s
[info]                  ·gc.alloc.rate:                   407.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              1678.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2774.410 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   379500.698 ±(99.9%) 23145.320 ops/s [Average]
[info]   (min, avg, max) = (368897.284, 379500.698, 383311.660), stdev = 6010.766
[info]   CI (99.9%): [356355.377, 402646.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   399.626 ±(99.9%) 54.418 MB/sec [Average]
[info]   (min, avg, max) = (379.574, 399.626, 414.523), stdev = 14.132
[info]   CI (99.9%): [345.208, 454.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1657.345 ±(99.9%) 167.952 B/op [Average]
[info]   (min, avg, max) = (1608.001, 1657.345, 1713.943), stdev = 43.617
[info]   CI (99.9%): [1489.393, 1825.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.183 ±(99.9%) 1.533 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.183, 0.895), stdev = 0.398
[info]   CI (99.9%): [≈ 0, 1.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.757 ±(99.9%) 6.339 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.757, 3.701), stdev = 1.646
[info]   CI (99.9%): [≈ 0, 7.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   404.022 ±(99.9%) 1420.194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.022, 673.511), stdev = 368.820
[info]   CI (99.9%): [≈ 0, 1824.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1664.885 ±(99.9%) 5852.366 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1664.885, 2784.795), stdev = 1519.841
[info]   CI (99.9%): [≈ 0, 7517.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.94% complete, ETA 00:59:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 839262.781 ops/s
[info] # Warmup Iteration   2: 1052257.451 ops/s
[info] # Warmup Iteration   3: 1057377.838 ops/s
[info] # Warmup Iteration   4: 1084849.217 ops/s
[info] # Warmup Iteration   5: 1093148.732 ops/s
[info] Iteration   1: 1089811.014 ops/s
[info]                  ·gc.alloc.rate:                   388.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              560.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 738.807 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1083431.478 ops/s
[info]                  ·gc.alloc.rate:                   394.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              573.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 981.227 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1094338.189 ops/s
[info]                  ·gc.alloc.rate:      378.262 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1071142.014 ops/s
[info]                  ·gc.alloc.rate:                   401.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              590.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.461 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 992.474 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1095374.751 ops/s
[info]                  ·gc.alloc.rate:      378.549 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   1086819.489 ±(99.9%) 38310.250 ops/s [Average]
[info]   (min, avg, max) = (1071142.014, 1086819.489, 1095374.751), stdev = 9949.050
[info]   CI (99.9%): [1048509.239, 1125129.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   388.325 ±(99.9%) 39.470 MB/sec [Average]
[info]   (min, avg, max) = (378.262, 388.325, 401.926), stdev = 10.250
[info]   CI (99.9%): [348.855, 427.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   562.540 ±(99.9%) 76.720 B/op [Average]
[info]   (min, avg, max) = (544.000, 562.540, 590.561), stdev = 19.924
[info]   CI (99.9%): [485.820, 639.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.500 ±(99.9%) 4.302 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.500, 2.498), stdev = 1.117
[info]   CI (99.9%): [≈ 0, 4.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.734 ±(99.9%) 6.321 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.734, 3.670), stdev = 1.641
[info]   CI (99.9%): [≈ 0, 7.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   372.469 ±(99.9%) 1334.412 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 372.469, 675.461), stdev = 346.542
[info]   CI (99.9%): [≈ 0, 1706.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   542.501 ±(99.9%) 1946.487 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 542.501, 992.474), stdev = 505.496
[info]   CI (99.9%): [≈ 0, 2488.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.18% complete, ETA 00:58:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14448.664 ops/s
[info] # Warmup Iteration   2: 77210.894 ops/s
[info] # Warmup Iteration   3: 78319.804 ops/s
[info] # Warmup Iteration   4: 80627.414 ops/s
[info] # Warmup Iteration   5: 80876.574 ops/s
[info] Iteration   1: 80873.649 ops/s
[info]                  ·gc.alloc.rate:                   3239.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              63050.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3386.358 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65919.232 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 80839.265 ops/s
[info]                  ·gc.alloc.rate:                   3253.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              63325.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52834.722 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 80692.234 ops/s
[info]                  ·gc.alloc.rate:                   3274.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              63867.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3396.910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66255.462 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 80963.043 ops/s
[info]                  ·gc.alloc.rate:                   3274.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              63636.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3397.235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66028.351 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 80556.046 ops/s
[info]                  ·gc.alloc.rate:                   3244.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              63399.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2721.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53177.132 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   80784.847 ±(99.9%) 619.486 ops/s [Average]
[info]   (min, avg, max) = (80556.046, 80784.847, 80963.043), stdev = 160.879
[info]   CI (99.9%): [80165.361, 81404.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3257.052 ±(99.9%) 63.724 MB/sec [Average]
[info]   (min, avg, max) = (3239.008, 3257.052, 3274.501), stdev = 16.549
[info]   CI (99.9%): [3193.328, 3320.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63455.824 ±(99.9%) 1197.228 B/op [Average]
[info]   (min, avg, max) = (63050.911, 63455.824, 63867.918), stdev = 310.916
[info]   CI (99.9%): [62258.596, 64653.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.146), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.215 ±(99.9%) 3.646 B/op [Average]
[info]   (min, avg, max) = (0.405, 1.215, 2.830), stdev = 0.947
[info]   CI (99.9%): [≈ 0, 4.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3123.216 ±(99.9%) 1425.268 MB/sec [Average]
[info]   (min, avg, max) = (2714.167, 3123.216, 3397.235), stdev = 370.137
[info]   CI (99.9%): [1697.949, 4548.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   60842.980 ±(99.9%) 27556.247 B/op [Average]
[info]   (min, avg, max) = (52834.722, 60842.980, 66255.462), stdev = 7156.270
[info]   CI (99.9%): [33286.733, 88399.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.41% complete, ETA 00:58:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109174.111 ops/s
[info] # Warmup Iteration   2: 243087.940 ops/s
[info] # Warmup Iteration   3: 247943.906 ops/s
[info] # Warmup Iteration   4: 248652.908 ops/s
[info] # Warmup Iteration   5: 249027.106 ops/s
[info] Iteration   1: 248544.455 ops/s
[info]                  ·gc.alloc.rate:                   1146.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              7261.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4268.917 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 250020.187 ops/s
[info]                  ·gc.alloc.rate:                   1182.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              7442.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8491.801 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 250680.095 ops/s
[info]                  ·gc.alloc.rate:                   1172.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              7363.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8477.710 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 250606.191 ops/s
[info]                  ·gc.alloc.rate:                   1158.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              7274.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4242.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 249753.249 ops/s
[info]                  ·gc.alloc.rate:                   1191.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              7509.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8517.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   249920.835 ±(99.9%) 3322.822 ops/s [Average]
[info]   (min, avg, max) = (248544.455, 249920.835, 250680.095), stdev = 862.926
[info]   CI (99.9%): [246598.014, 253243.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1170.346 ±(99.9%) 69.601 MB/sec [Average]
[info]   (min, avg, max) = (1146.718, 1170.346, 1191.692), stdev = 18.075
[info]   CI (99.9%): [1100.745, 1239.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7370.367 ±(99.9%) 411.606 B/op [Average]
[info]   (min, avg, max) = (7261.957, 7370.367, 7509.870), stdev = 106.893
[info]   CI (99.9%): [6958.762, 7781.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.209 ±(99.9%) 1.263 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.209, 0.784), stdev = 0.328
[info]   CI (99.9%): [≈ 0, 1.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1080.064 ±(99.9%) 1424.684 MB/sec [Average]
[info]   (min, avg, max) = (674.095, 1080.064, 1351.510), stdev = 369.986
[info]   CI (99.9%): [≈ 0, 2504.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6799.499 ±(99.9%) 8942.820 B/op [Average]
[info]   (min, avg, max) = (4242.046, 6799.499, 8517.022), stdev = 2322.422
[info]   CI (99.9%): [≈ 0, 15742.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.65% complete, ETA 00:58:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.811 ops/s
[info] # Warmup Iteration   2: 1062355.551 ops/s
[info] # Warmup Iteration   3: 1135965.023 ops/s
[info] # Warmup Iteration   4: 1163427.597 ops/s
[info] # Warmup Iteration   5: 1156078.326 ops/s
[info] Iteration   1: 1141309.710 ops/s
[info]                  ·gc.alloc.rate:                   403.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              556.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 925.932 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1069821.203 ops/s
[info]                  ·gc.alloc.rate:      364.296 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1092813.734 ops/s
[info]                  ·gc.alloc.rate:                   387.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              558.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 967.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1165127.217 ops/s
[info]                  ·gc.alloc.rate:      396.765 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1165062.041 ops/s
[info]                  ·gc.alloc.rate:                   416.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              562.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.113 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 905.277 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1126826.781 ±(99.9%) 167238.758 ops/s [Average]
[info]   (min, avg, max) = (1069821.203, 1126826.781, 1165127.217), stdev = 43431.374
[info]   CI (99.9%): [959588.023, 1294065.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   393.697 ±(99.9%) 75.409 MB/sec [Average]
[info]   (min, avg, max) = (364.296, 393.697, 416.691), stdev = 19.583
[info]   CI (99.9%): [318.288, 469.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   549.836 ±(99.9%) 49.544 B/op [Average]
[info]   (min, avg, max) = (536.000, 549.836, 562.920), stdev = 12.866
[info]   CI (99.9%): [500.292, 599.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.786 ±(99.9%) 6.651 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.786, 3.876), stdev = 1.727
[info]   CI (99.9%): [≈ 0, 7.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1.132 ±(99.9%) 9.582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.132, 5.583), stdev = 2.488
[info]   CI (99.9%): [≈ 0, 10.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   402.576 ±(99.9%) 1415.114 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.576, 671.400), stdev = 367.501
[info]   CI (99.9%): [≈ 0, 1817.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   559.651 ±(99.9%) 1969.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 559.651, 967.046), stdev = 511.373
[info]   CI (99.9%): [≈ 0, 2528.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.88% complete, ETA 00:57:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 450167.749 ops/s
[info] # Warmup Iteration   2: 868586.058 ops/s
[info] # Warmup Iteration   3: 921340.503 ops/s
[info] # Warmup Iteration   4: 886892.274 ops/s
[info] # Warmup Iteration   5: 915332.000 ops/s
[info] Iteration   1: 919772.669 ops/s
[info]                  ·gc.alloc.rate:                   556.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1152.325 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 915170.569 ops/s
[info]                  ·gc.alloc.rate:                   554.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              953.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1158.161 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 915468.491 ops/s
[info]                  ·gc.alloc.rate:      546.125 MB/sec
[info]                  ·gc.alloc.rate.norm: 938.818 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 917996.593 ops/s
[info]                  ·gc.alloc.rate:                   560.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              960.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1154.616 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 920711.468 ops/s
[info]                  ·gc.alloc.rate:                   560.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              958.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1151.740 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   917823.958 ±(99.9%) 9579.070 ops/s [Average]
[info]   (min, avg, max) = (915170.569, 917823.958, 920711.468), stdev = 2487.654
[info]   CI (99.9%): [908244.888, 927403.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   555.604 ±(99.9%) 22.755 MB/sec [Average]
[info]   (min, avg, max) = (546.125, 555.604, 560.804), stdev = 5.909
[info]   CI (99.9%): [532.848, 578.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   952.782 ±(99.9%) 32.745 B/op [Average]
[info]   (min, avg, max) = (938.818, 952.782, 960.518), stdev = 8.504
[info]   CI (99.9%): [920.037, 985.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.183 ±(99.9%) 1.532 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.183, 0.895), stdev = 0.398
[info]   CI (99.9%): [≈ 0, 1.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.313 ±(99.9%) 2.623 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.313, 1.532), stdev = 0.681
[info]   CI (99.9%): [≈ 0, 2.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   538.770 ±(99.9%) 1159.744 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.770, 673.837), stdev = 301.182
[info]   CI (99.9%): [≈ 0, 1698.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   923.368 ±(99.9%) 1987.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 923.368, 1158.161), stdev = 516.185
[info]   CI (99.9%): [≈ 0, 2911.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.12% complete, ETA 00:57:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1321454.035 ops/s
[info] # Warmup Iteration   2: 1698344.616 ops/s
[info] # Warmup Iteration   3: 1733241.569 ops/s
[info] # Warmup Iteration   4: 1683562.135 ops/s
[info] # Warmup Iteration   5: 1768122.835 ops/s
[info] Iteration   1: 1755389.763 ops/s
[info]                  ·gc.alloc.rate:                   619.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              555.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.964 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 604.420 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1715998.012 ops/s
[info]                  ·gc.alloc.rate:                   609.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              559.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 617.685 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1748717.618 ops/s
[info]                  ·gc.alloc.rate:                   620.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              558.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 606.118 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1750863.663 ops/s
[info]                  ·gc.alloc.rate:                   612.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              550.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 604.786 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1769663.835 ops/s
[info]                  ·gc.alloc.rate:      602.595 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1748126.578 ±(99.9%) 75963.480 ops/s [Average]
[info]   (min, avg, max) = (1715998.012, 1748126.578, 1769663.835), stdev = 19727.475
[info]   CI (99.9%): [1672163.098, 1824090.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   612.998 ±(99.9%) 29.248 MB/sec [Average]
[info]   (min, avg, max) = (602.595, 612.998, 620.935), stdev = 7.596
[info]   CI (99.9%): [583.750, 642.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   552.038 ±(99.9%) 37.105 B/op [Average]
[info]   (min, avg, max) = (536.000, 552.038, 559.093), stdev = 9.636
[info]   CI (99.9%): [514.933, 589.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.574 ±(99.9%) 4.812 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.574, 2.810), stdev = 1.250
[info]   CI (99.9%): [≈ 0, 5.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.515 ±(99.9%) 4.315 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.515, 2.520), stdev = 1.121
[info]   CI (99.9%): [≈ 0, 4.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538.688 ±(99.9%) 1159.568 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.688, 673.964), stdev = 301.136
[info]   CI (99.9%): [≈ 0, 1698.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   486.602 ±(99.9%) 1047.660 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 486.602, 617.685), stdev = 272.074
[info]   CI (99.9%): [≈ 0, 1534.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 50.35% complete, ETA 00:57:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1532588.918 ops/s
[info] # Warmup Iteration   2: 1952667.004 ops/s
[info] # Warmup Iteration   3: 1973940.340 ops/s
[info] # Warmup Iteration   4: 1974392.992 ops/s
[info] # Warmup Iteration   5: 1969945.115 ops/s
[info] Iteration   1: 1975062.558 ops/s
[info]                  ·gc.alloc.rate:      0.065 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.052 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1971764.487 ops/s
[info]                  ·gc.alloc.rate:      1.268 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1974995.395 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1976985.409 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1915729.599 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1962907.490 ±(99.9%) 101810.230 ops/s [Average]
[info]   (min, avg, max) = (1915729.599, 1962907.490, 1976985.409), stdev = 26439.793
[info]   CI (99.9%): [1861097.260, 2064717.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.267 ±(99.9%) 2.159 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.267, 1.268), stdev = 0.561
[info]   CI (99.9%): [≈ 0, 2.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.213 ±(99.9%) 1.723 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.213, 1.013), stdev = 0.448
[info]   CI (99.9%): [≈ 0, 1.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.59% complete, ETA 00:57:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17112.319 ops/s
[info] # Warmup Iteration   2: 39235.380 ops/s
[info] # Warmup Iteration   3: 40743.926 ops/s
[info] # Warmup Iteration   4: 39568.890 ops/s
[info] # Warmup Iteration   5: 40637.689 ops/s
[info] Iteration   1: 40820.457 ops/s
[info]                  ·gc.alloc.rate:                   1885.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              72714.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78101.294 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 40825.808 ops/s
[info]                  ·gc.alloc.rate:                   1881.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              72534.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78203.458 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 40763.062 ops/s
[info]                  ·gc.alloc.rate:                   1878.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              72553.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.492 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78407.220 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 40695.393 ops/s
[info]                  ·gc.alloc.rate:                   1876.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52397.887 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 40846.384 ops/s
[info]                  ·gc.alloc.rate:                   1910.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              73618.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78400.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   40790.221 ±(99.9%) 236.312 ops/s [Average]
[info]   (min, avg, max) = (40695.393, 40790.221, 40846.384), stdev = 61.370
[info]   CI (99.9%): [40553.909, 41026.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1886.688 ±(99.9%) 52.607 MB/sec [Average]
[info]   (min, avg, max) = (1876.841, 1886.688, 1910.399), stdev = 13.662
[info]   CI (99.9%): [1834.081, 1939.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72796.454 ±(99.9%) 1791.921 B/op [Average]
[info]   (min, avg, max) = (72534.650, 72796.454, 73618.845), stdev = 465.356
[info]   CI (99.9%): [71004.533, 74588.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.731 ±(99.9%) 4.688 B/op [Average]
[info]   (min, avg, max) = (1.605, 2.731, 4.019), stdev = 1.218
[info]   CI (99.9%): [≈ 0, 7.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1894.864 ±(99.9%) 1161.502 MB/sec [Average]
[info]   (min, avg, max) = (1355.309, 1894.864, 2034.470), stdev = 301.638
[info]   CI (99.9%): [733.362, 3056.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   73101.973 ±(99.9%) 44569.949 B/op [Average]
[info]   (min, avg, max) = (52397.887, 73101.973, 78407.220), stdev = 11574.674
[info]   CI (99.9%): [28532.024, 117671.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.82% complete, ETA 00:56:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18496.358 ops/s
[info] # Warmup Iteration   2: 38315.254 ops/s
[info] # Warmup Iteration   3: 38217.398 ops/s
[info] # Warmup Iteration   4: 35140.698 ops/s
[info] # Warmup Iteration   5: 38594.714 ops/s
[info] Iteration   1: 38734.203 ops/s
[info]                  ·gc.alloc.rate:                   737.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              29963.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27364.748 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 38652.067 ops/s
[info]                  ·gc.alloc.rate:                   762.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              31041.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54818.462 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 38564.927 ops/s
[info]                  ·gc.alloc.rate:                   739.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              30166.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27458.174 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 38659.944 ops/s
[info]                  ·gc.alloc.rate:                   734.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              29903.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27390.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 38337.717 ops/s
[info]                  ·gc.alloc.rate:                   736.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              30220.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27619.292 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   38589.772 ±(99.9%) 589.708 ops/s [Average]
[info]   (min, avg, max) = (38337.717, 38589.772, 38734.203), stdev = 153.145
[info]   CI (99.9%): [38000.064, 39179.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   741.861 ±(99.9%) 44.839 MB/sec [Average]
[info]   (min, avg, max) = (734.437, 741.861, 762.466), stdev = 11.644
[info]   CI (99.9%): [697.023, 786.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   30259.362 ±(99.9%) 1760.156 B/op [Average]
[info]   (min, avg, max) = (29903.705, 30259.362, 31041.594), stdev = 457.107
[info]   CI (99.9%): [28499.206, 32019.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.056 ±(99.9%) 0.418 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.250), stdev = 0.109
[info]   CI (99.9%): [≈ 0, 0.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.291 ±(99.9%) 17.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.291, 10.172), stdev = 4.419
[info]   CI (99.9%): [≈ 0, 19.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   807.584 ±(99.9%) 1160.038 MB/sec [Average]
[info]   (min, avg, max) = (672.671, 807.584, 1346.491), stdev = 301.258
[info]   CI (99.9%): [≈ 0, 1967.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   32930.135 ±(99.9%) 47117.820 B/op [Average]
[info]   (min, avg, max) = (27364.748, 32930.135, 54818.462), stdev = 12236.348
[info]   CI (99.9%): [≈ 0, 80047.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.06% complete, ETA 00:56:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22566.477 ops/s
[info] # Warmup Iteration   2: 61563.026 ops/s
[info] # Warmup Iteration   3: 61265.277 ops/s
[info] # Warmup Iteration   4: 61683.181 ops/s
[info] # Warmup Iteration   5: 62654.063 ops/s
[info] Iteration   1: 62717.801 ops/s
[info]                  ·gc.alloc.rate:                   677.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              16995.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16932.466 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 62898.687 ops/s
[info]                  ·gc.alloc.rate:                   682.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              17071.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16885.094 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 62885.073 ops/s
[info]                  ·gc.alloc.rate:                   675.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              16896.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16871.644 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 62922.786 ops/s
[info]                  ·gc.alloc.rate:                   675.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              16899.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16861.725 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 62694.887 ops/s
[info]                  ·gc.alloc.rate:                   676.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              16996.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16931.126 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   62823.847 ±(99.9%) 417.467 ops/s [Average]
[info]   (min, avg, max) = (62694.887, 62823.847, 62922.786), stdev = 108.415
[info]   CI (99.9%): [62406.380, 63241.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   677.417 ±(99.9%) 10.855 MB/sec [Average]
[info]   (min, avg, max) = (675.122, 677.417, 682.224), stdev = 2.819
[info]   CI (99.9%): [666.562, 688.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16971.972 ±(99.9%) 285.604 B/op [Average]
[info]   (min, avg, max) = (16896.667, 16971.972, 17071.452), stdev = 74.170
[info]   CI (99.9%): [16686.368, 17257.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.313 ±(99.9%) 1.794 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.313, 1.041), stdev = 0.466
[info]   CI (99.9%): [≈ 0, 2.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.401 ±(99.9%) 1.139 MB/sec [Average]
[info]   (min, avg, max) = (674.122, 674.401, 674.776), stdev = 0.296
[info]   CI (99.9%): [673.261, 675.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16896.411 ±(99.9%) 128.432 B/op [Average]
[info]   (min, avg, max) = (16861.725, 16896.411, 16932.466), stdev = 33.353
[info]   CI (99.9%): [16767.979, 17024.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.29% complete, ETA 00:56:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 148960.993 ops/s
[info] # Warmup Iteration   2: 195967.108 ops/s
[info] # Warmup Iteration   3: 198922.781 ops/s
[info] # Warmup Iteration   4: 206174.988 ops/s
[info] # Warmup Iteration   5: 202388.455 ops/s
[info] Iteration   1: 197130.692 ops/s
[info]                  ·gc.alloc.rate:                   655.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              5230.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5387.732 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 206886.353 ops/s
[info]                  ·gc.alloc.rate:                   694.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              5286.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5123.286 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 202642.492 ops/s
[info]                  ·gc.alloc.rate:                   674.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              5240.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5230.541 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 207197.516 ops/s
[info]                  ·gc.alloc.rate:                   688.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              5231.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5110.488 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 204257.672 ops/s
[info]                  ·gc.alloc.rate:                   689.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              5311.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.775 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5184.110 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   203622.945 ±(99.9%) 15752.487 ops/s [Average]
[info]   (min, avg, max) = (197130.692, 203622.945, 207197.516), stdev = 4090.871
[info]   CI (99.9%): [187870.458, 219375.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   680.532 ±(99.9%) 61.789 MB/sec [Average]
[info]   (min, avg, max) = (655.116, 680.532, 694.917), stdev = 16.046
[info]   CI (99.9%): [618.744, 742.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5260.150 ±(99.9%) 141.142 B/op [Average]
[info]   (min, avg, max) = (5230.967, 5260.150, 5311.316), stdev = 36.654
[info]   CI (99.9%): [5119.009, 5401.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.558 ±(99.9%) 4.714 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.558, 2.748), stdev = 1.224
[info]   CI (99.9%): [≈ 0, 5.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.451 ±(99.9%) 37.648 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.451, 21.939), stdev = 9.777
[info]   CI (99.9%): [≈ 0, 42.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   673.425 ±(99.9%) 3.124 MB/sec [Average]
[info]   (min, avg, max) = (672.750, 673.425, 674.749), stdev = 0.811
[info]   CI (99.9%): [670.301, 676.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5207.231 ±(99.9%) 430.793 B/op [Average]
[info]   (min, avg, max) = (5110.488, 5207.231, 5387.732), stdev = 111.875
[info]   CI (99.9%): [4776.439, 5638.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.53% complete, ETA 00:56:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6981.016 ops/s
[info] # Warmup Iteration   2: 23451.742 ops/s
[info] # Warmup Iteration   3: 24389.460 ops/s
[info] # Warmup Iteration   4: 24161.768 ops/s
[info] # Warmup Iteration   5: 24293.126 ops/s
[info] Iteration   1: 24238.625 ops/s
[info]                  ·gc.alloc.rate:                   1246.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              80967.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.722 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87590.397 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 24407.640 ops/s
[info]                  ·gc.alloc.rate:                   1248.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              80527.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87026.954 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 24382.245 ops/s
[info]                  ·gc.alloc.rate:                   1242.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              80224.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87159.171 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 24376.677 ops/s
[info]                  ·gc.alloc.rate:                   1245.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              80425.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87241.558 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 24344.102 ops/s
[info]                  ·gc.alloc.rate:                   1219.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              78851.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43690.667 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   24349.858 ±(99.9%) 254.790 ops/s [Average]
[info]   (min, avg, max) = (24238.625, 24349.858, 24407.640), stdev = 66.168
[info]   CI (99.9%): [24095.068, 24604.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1240.704 ±(99.9%) 46.497 MB/sec [Average]
[info]   (min, avg, max) = (1219.462, 1240.704, 1248.866), stdev = 12.075
[info]   CI (99.9%): [1194.207, 1287.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80199.392 ±(99.9%) 3084.504 B/op [Average]
[info]   (min, avg, max) = (78851.596, 80199.392, 80967.932), stdev = 801.036
[info]   CI (99.9%): [77114.888, 83283.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.806 ±(99.9%) 2.833 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.806, 1.344), stdev = 0.736
[info]   CI (99.9%): [≈ 0, 3.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1215.103 ±(99.9%) 1161.136 MB/sec [Average]
[info]   (min, avg, max) = (675.688, 1215.103, 1351.224), stdev = 301.543
[info]   CI (99.9%): [53.967, 2376.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   78541.749 ±(99.9%) 75023.878 B/op [Average]
[info]   (min, avg, max) = (43690.667, 78541.749, 87590.397), stdev = 19483.463
[info]   CI (99.9%): [3517.871, 153565.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.76% complete, ETA 00:55:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18512.362 ops/s
[info] # Warmup Iteration   2: 44780.211 ops/s
[info] # Warmup Iteration   3: 45679.867 ops/s
[info] # Warmup Iteration   4: 45667.166 ops/s
[info] # Warmup Iteration   5: 45476.589 ops/s
[info] Iteration   1: 44818.485 ops/s
[info]                  ·gc.alloc.rate:                   680.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              23892.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23672.844 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 45738.111 ops/s
[info]                  ·gc.alloc.rate:                   703.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              24199.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23196.758 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 45939.896 ops/s
[info]                  ·gc.alloc.rate:                   706.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              24217.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23106.190 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 45974.252 ops/s
[info]                  ·gc.alloc.rate:                   699.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              23931.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23089.104 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 45958.042 ops/s
[info]                  ·gc.alloc.rate:                   706.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              24183.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23108.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   45685.757 ±(99.9%) 1902.912 ops/s [Average]
[info]   (min, avg, max) = (44818.485, 45685.757, 45974.252), stdev = 494.180
[info]   CI (99.9%): [43782.846, 47588.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   699.068 ±(99.9%) 42.346 MB/sec [Average]
[info]   (min, avg, max) = (680.182, 699.068, 706.882), stdev = 10.997
[info]   CI (99.9%): [656.722, 741.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   24084.727 ±(99.9%) 611.950 B/op [Average]
[info]   (min, avg, max) = (23892.168, 24084.727, 24217.429), stdev = 158.921
[info]   CI (99.9%): [23472.777, 24696.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.863 ±(99.9%) 3.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.863, 1.462), stdev = 0.788
[info]   CI (99.9%): [≈ 0, 3.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   674.306 ±(99.9%) 1.157 MB/sec [Average]
[info]   (min, avg, max) = (673.938, 674.306, 674.677), stdev = 0.300
[info]   CI (99.9%): [673.149, 675.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23234.588 ±(99.9%) 957.186 B/op [Average]
[info]   (min, avg, max) = (23089.104, 23234.588, 23672.844), stdev = 248.578
[info]   CI (99.9%): [22277.402, 24191.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.00% complete, ETA 00:55:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37628.281 ops/s
[info] # Warmup Iteration   2: 98521.855 ops/s
[info] # Warmup Iteration   3: 99095.733 ops/s
[info] # Warmup Iteration   4: 100705.273 ops/s
[info] # Warmup Iteration   5: 100619.934 ops/s
[info] Iteration   1: 98139.223 ops/s
[info]                  ·gc.alloc.rate:                   1385.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              22227.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21621.886 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 100701.671 ops/s
[info]                  ·gc.alloc.rate:                   1413.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              22089.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.798 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21092.285 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 100170.935 ops/s
[info]                  ·gc.alloc.rate:                   1437.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              22594.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31848.611 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 100885.740 ops/s
[info]                  ·gc.alloc.rate:                   1409.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              21988.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21101.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 100380.113 ops/s
[info]                  ·gc.alloc.rate:                   1414.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              22184.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21223.444 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   100055.536 ±(99.9%) 4260.860 ops/s [Average]
[info]   (min, avg, max) = (98139.223, 100055.536, 100885.740), stdev = 1106.532
[info]   CI (99.9%): [95794.677, 104316.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1412.236 ±(99.9%) 71.275 MB/sec [Average]
[info]   (min, avg, max) = (1385.805, 1412.236, 1437.855), stdev = 18.510
[info]   CI (99.9%): [1340.961, 1483.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22216.933 ±(99.9%) 886.750 B/op [Average]
[info]   (min, avg, max) = (21988.856, 22216.933, 22594.747), stdev = 230.286
[info]   CI (99.9%): [21330.183, 23103.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.586 ±(99.9%) 1.373 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.586, 0.976), stdev = 0.357
[info]   CI (99.9%): [≈ 0, 1.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1486.066 ±(99.9%) 1163.869 MB/sec [Average]
[info]   (min, avg, max) = (1348.061, 1486.066, 2026.740), stdev = 302.253
[info]   CI (99.9%): [322.196, 2649.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23377.446 ±(99.9%) 18253.686 B/op [Average]
[info]   (min, avg, max) = (21092.285, 23377.446, 31848.611), stdev = 4740.424
[info]   CI (99.9%): [5123.760, 41631.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.24% complete, ETA 00:55:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135665.654 ops/s
[info] # Warmup Iteration   2: 175280.901 ops/s
[info] # Warmup Iteration   3: 173948.372 ops/s
[info] # Warmup Iteration   4: 177706.134 ops/s
[info] # Warmup Iteration   5: 178289.607 ops/s
[info] Iteration   1: 177272.367 ops/s
[info]                  ·gc.alloc.rate:                   579.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              5142.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5985.239 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 179573.648 ops/s
[info]                  ·gc.alloc.rate:      584.773 MB/sec
[info]                  ·gc.alloc.rate.norm: 5126.378 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 179304.548 ops/s
[info]                  ·gc.alloc.rate:                   582.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              5112.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5911.374 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 178958.062 ops/s
[info]                  ·gc.alloc.rate:                   594.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              5232.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5922.768 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 179270.115 ops/s
[info]                  ·gc.alloc.rate:                   588.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              5163.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5906.350 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   178875.748 ±(99.9%) 3552.240 ops/s [Average]
[info]   (min, avg, max) = (177272.367, 178875.748, 179573.648), stdev = 922.505
[info]   CI (99.9%): [175323.508, 182427.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   585.874 ±(99.9%) 23.161 MB/sec [Average]
[info]   (min, avg, max) = (579.198, 585.874, 594.903), stdev = 6.015
[info]   CI (99.9%): [562.713, 609.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5155.558 ±(99.9%) 181.863 B/op [Average]
[info]   (min, avg, max) = (5112.277, 5155.558, 5232.768), stdev = 47.229
[info]   CI (99.9%): [4973.695, 5337.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.568 ±(99.9%) 4.804 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.568, 2.800), stdev = 1.247
[info]   CI (99.9%): [≈ 0, 5.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5.045 ±(99.9%) 42.652 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.045, 24.858), stdev = 11.077
[info]   CI (99.9%): [≈ 0, 47.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538.710 ±(99.9%) 1159.616 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.710, 674.105), stdev = 301.149
[info]   CI (99.9%): [≈ 0, 1698.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4745.146 ±(99.9%) 10215.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4745.146, 5985.239), stdev = 2652.806
[info]   CI (99.9%): [≈ 0, 14960.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.47% complete, ETA 00:54:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 157425.082 ops/s
[info] # Warmup Iteration   2: 188407.886 ops/s
[info] # Warmup Iteration   3: 191368.803 ops/s
[info] # Warmup Iteration   4: 191111.809 ops/s
[info] # Warmup Iteration   5: 191909.602 ops/s
[info] Iteration   1: 191816.688 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 191934.695 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 191298.194 ops/s
[info]                  ·gc.alloc.rate:      0.072 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.595 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 191259.709 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 191374.997 ops/s
[info]                  ·gc.alloc.rate:      0.022 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.179 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   191536.857 ±(99.9%) 1212.418 ops/s [Average]
[info]   (min, avg, max) = (191259.709, 191536.857, 191934.695), stdev = 314.861
[info]   CI (99.9%): [190324.438, 192749.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.019 ±(99.9%) 0.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.019, 0.072), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.156 ±(99.9%) 0.989 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.156, 0.595), stdev = 0.257
[info]   CI (99.9%): [≈ 0, 1.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.71% complete, ETA 00:54:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33467.833 ops/s
[info] # Warmup Iteration   2: 66843.520 ops/s
[info] # Warmup Iteration   3: 67804.321 ops/s
[info] # Warmup Iteration   4: 69042.258 ops/s
[info] # Warmup Iteration   5: 65675.366 ops/s
[info] Iteration   1: 69185.068 ops/s
[info]                  ·gc.alloc.rate:                   1064.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              24217.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.160 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30640.355 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 69310.938 ops/s
[info]                  ·gc.alloc.rate:                   1047.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              23791.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.113 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15307.679 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 69011.046 ops/s
[info]                  ·gc.alloc.rate:                   1057.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              24119.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30763.617 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 69018.977 ops/s
[info]                  ·gc.alloc.rate:                   1037.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              23660.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15387.621 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 68940.191 ops/s
[info]                  ·gc.alloc.rate:                   1073.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              24511.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30824.369 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   69093.244 ±(99.9%) 582.451 ops/s [Average]
[info]   (min, avg, max) = (68940.191, 69093.244, 69310.938), stdev = 151.261
[info]   CI (99.9%): [68510.793, 69675.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1056.146 ±(99.9%) 54.481 MB/sec [Average]
[info]   (min, avg, max) = (1037.349, 1056.146, 1073.480), stdev = 14.149
[info]   CI (99.9%): [1001.665, 1110.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24059.804 ±(99.9%) 1311.000 B/op [Average]
[info]   (min, avg, max) = (23660.285, 24059.804, 24511.074), stdev = 340.462
[info]   CI (99.9%): [22748.804, 25370.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.569 ±(99.9%) 3.963 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.569, 2.374), stdev = 1.029
[info]   CI (99.9%): [≈ 0, 4.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1078.928 ±(99.9%) 1422.048 MB/sec [Average]
[info]   (min, avg, max) = (674.113, 1078.928, 1349.975), stdev = 369.301
[info]   CI (99.9%): [≈ 0, 2500.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   24584.728 ±(99.9%) 32470.818 B/op [Average]
[info]   (min, avg, max) = (15307.679, 24584.728, 30824.369), stdev = 8432.568
[info]   CI (99.9%): [≈ 0, 57055.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.94% complete, ETA 00:54:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8744.779 ops/s
[info] # Warmup Iteration   2: 24126.331 ops/s
[info] # Warmup Iteration   3: 24762.747 ops/s
[info] # Warmup Iteration   4: 24612.954 ops/s
[info] # Warmup Iteration   5: 24117.333 ops/s
[info] Iteration   1: 24478.981 ops/s
[info]                  ·gc.alloc.rate:                   1291.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              83046.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86556.880 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 24841.444 ops/s
[info]                  ·gc.alloc.rate:                   1297.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              82211.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85380.127 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 24713.480 ops/s
[info]                  ·gc.alloc.rate:                   1282.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              81687.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42951.825 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 24868.368 ops/s
[info]                  ·gc.alloc.rate:                   1290.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              81705.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85410.484 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 24820.391 ops/s
[info]                  ·gc.alloc.rate:                   1300.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              82484.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85660.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   24744.533 ±(99.9%) 614.788 ops/s [Average]
[info]   (min, avg, max) = (24478.981, 24744.533, 24868.368), stdev = 159.658
[info]   CI (99.9%): [24129.745, 25359.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1292.667 ±(99.9%) 26.536 MB/sec [Average]
[info]   (min, avg, max) = (1282.531, 1292.667, 1300.505), stdev = 6.891
[info]   CI (99.9%): [1266.131, 1319.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   82227.075 ±(99.9%) 2197.093 B/op [Average]
[info]   (min, avg, max) = (81687.174, 82227.075, 83046.828), stdev = 570.578
[info]   CI (99.9%): [80029.982, 84424.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.327 ±(99.9%) 3.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.327, 2.677), stdev = 0.946
[info]   CI (99.9%): [≈ 0, 4.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1213.678 ±(99.9%) 1160.926 MB/sec [Average]
[info]   (min, avg, max) = (674.366, 1213.678, 1350.578), stdev = 301.489
[info]   CI (99.9%): [52.752, 2374.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   77191.884 ±(99.9%) 73727.220 B/op [Average]
[info]   (min, avg, max) = (42951.825, 77191.884, 86556.880), stdev = 19146.725
[info]   CI (99.9%): [3464.664, 150919.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.18% complete, ETA 00:54:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5482.663 ops/s
[info] # Warmup Iteration   2: 18328.780 ops/s
[info] # Warmup Iteration   3: 19322.672 ops/s
[info] # Warmup Iteration   4: 19211.434 ops/s
[info] # Warmup Iteration   5: 19399.134 ops/s
[info] Iteration   1: 19442.253 ops/s
[info]                  ·gc.alloc.rate:                   804.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              65155.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.559 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109252.506 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 18890.817 ops/s
[info]                  ·gc.alloc.rate:                   777.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              64775.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56163.804 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 19462.783 ops/s
[info]                  ·gc.alloc.rate:                   781.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              63177.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54510.655 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 19468.361 ops/s
[info]                  ·gc.alloc.rate:                   774.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              62650.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54550.508 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 19466.460 ops/s
[info]                  ·gc.alloc.rate:                   783.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              63317.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54525.306 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   19346.135 ±(99.9%) 980.928 ops/s [Average]
[info]   (min, avg, max) = (18890.817, 19346.135, 19468.361), stdev = 254.744
[info]   CI (99.9%): [18365.207, 20327.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   784.317 ±(99.9%) 45.925 MB/sec [Average]
[info]   (min, avg, max) = (774.877, 784.317, 804.850), stdev = 11.927
[info]   CI (99.9%): [738.393, 830.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   63815.473 ±(99.9%) 4187.581 B/op [Average]
[info]   (min, avg, max) = (62650.361, 63815.473, 65155.975), stdev = 1087.502
[info]   CI (99.9%): [59627.892, 68003.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.378 ±(99.9%) 16.277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.378, 8.426), stdev = 4.227
[info]   CI (99.9%): [≈ 0, 20.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   809.365 ±(99.9%) 1162.809 MB/sec [Average]
[info]   (min, avg, max) = (674.015, 809.365, 1349.559), stdev = 301.978
[info]   CI (99.9%): [≈ 0, 1972.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   65800.556 ±(99.9%) 93573.334 B/op [Average]
[info]   (min, avg, max) = (54510.655, 65800.556, 109252.506), stdev = 24300.698
[info]   CI (99.9%): [≈ 0, 159373.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 00:53:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 391147.848 ops/s
[info] # Warmup Iteration   2: 521040.876 ops/s
[info] # Warmup Iteration   3: 525875.592 ops/s
[info] # Warmup Iteration   4: 536683.240 ops/s
[info] # Warmup Iteration   5: 536501.775 ops/s
[info] Iteration   1: 540677.064 ops/s
[info]                  ·gc.alloc.rate:                   1442.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              4199.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.555 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3922.734 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 534796.743 ops/s
[info]                  ·gc.alloc.rate:                   1422.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              4185.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3968.686 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 530755.792 ops/s
[info]                  ·gc.alloc.rate:                   1435.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4001.912 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 539994.182 ops/s
[info]                  ·gc.alloc.rate:                   1458.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              4252.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3937.358 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 539745.582 ops/s
[info]                  ·gc.alloc.rate:                   1432.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              4178.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3943.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   537193.873 ±(99.9%) 16526.474 ops/s [Average]
[info]   (min, avg, max) = (530755.792, 537193.873, 540677.064), stdev = 4291.873
[info]   CI (99.9%): [520667.399, 553720.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1438.278 ±(99.9%) 52.132 MB/sec [Average]
[info]   (min, avg, max) = (1422.330, 1438.278, 1458.765), stdev = 13.538
[info]   CI (99.9%): [1386.146, 1490.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4214.317 ±(99.9%) 143.760 B/op [Average]
[info]   (min, avg, max) = (4178.093, 4214.317, 4256.414), stdev = 37.334
[info]   CI (99.9%): [4070.558, 4358.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.171 ±(99.9%) 0.351 B/op [Average]
[info]   (min, avg, max) = (0.061, 0.171, 0.306), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1349.650 ±(99.9%) 6.766 MB/sec [Average]
[info]   (min, avg, max) = (1347.555, 1349.650, 1352.009), stdev = 1.757
[info]   CI (99.9%): [1342.885, 1356.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3954.740 ±(99.9%) 119.987 B/op [Average]
[info]   (min, avg, max) = (3922.734, 3954.740, 4001.912), stdev = 31.160
[info]   CI (99.9%): [3834.753, 4074.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.65% complete, ETA 00:53:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 898.537 ops/s
[info] # Warmup Iteration   2: 19858.128 ops/s
[info] # Warmup Iteration   3: 23212.694 ops/s
[info] # Warmup Iteration   4: 23406.047 ops/s
[info] # Warmup Iteration   5: 23023.457 ops/s
[info] Iteration   1: 23141.191 ops/s
[info]                  ·gc.alloc.rate:                   1735.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              118044.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137590.206 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 23424.976 ops/s
[info]                  ·gc.alloc.rate:                   1724.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              115886.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90674.590 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 23397.650 ops/s
[info]                  ·gc.alloc.rate:                   1727.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              116227.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.552 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136342.211 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23408.225 ops/s
[info]                  ·gc.alloc.rate:                   1741.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              117039.943 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.943 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136243.761 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 23412.857 ops/s
[info]                  ·gc.alloc.rate:                   1725.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              115972.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91034.505 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   23356.980 ±(99.9%) 466.034 ops/s [Average]
[info]   (min, avg, max) = (23141.191, 23356.980, 23424.976), stdev = 121.027
[info]   CI (99.9%): [22890.946, 23823.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1730.787 ±(99.9%) 28.009 MB/sec [Average]
[info]   (min, avg, max) = (1724.659, 1730.787, 1741.241), stdev = 7.274
[info]   CI (99.9%): [1702.778, 1758.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   116634.381 ±(99.9%) 3505.592 B/op [Average]
[info]   (min, avg, max) = (115886.508, 116634.381, 118044.597), stdev = 910.391
[info]   CI (99.9%): [113128.789, 120139.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.679 ±(99.9%) 8.860 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.679, 5.601), stdev = 2.301
[info]   CI (99.9%): [≈ 0, 10.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1755.960 ±(99.9%) 1420.814 MB/sec [Average]
[info]   (min, avg, max) = (1349.448, 1755.960, 2026.943), stdev = 368.981
[info]   CI (99.9%): [335.146, 3176.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   118377.055 ±(99.9%) 96768.313 B/op [Average]
[info]   (min, avg, max) = (90674.590, 118377.055, 137590.206), stdev = 25130.424
[info]   CI (99.9%): [21608.741, 215145.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.88% complete, ETA 00:53:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26234.590 ops/s
[info] # Warmup Iteration   2: 68138.086 ops/s
[info] # Warmup Iteration   3: 68966.811 ops/s
[info] # Warmup Iteration   4: 70897.487 ops/s
[info] # Warmup Iteration   5: 70851.098 ops/s
[info] Iteration   1: 70959.693 ops/s
[info]                  ·gc.alloc.rate:                   1406.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              31196.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29947.917 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 69148.450 ops/s
[info]                  ·gc.alloc.rate:                   1372.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              31226.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30748.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 70748.992 ops/s
[info]                  ·gc.alloc.rate:                   1399.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              31143.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30067.280 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 69518.005 ops/s
[info]                  ·gc.alloc.rate:                   1374.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              31113.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30629.338 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 70761.827 ops/s
[info]                  ·gc.alloc.rate:                   1398.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              31119.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30114.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   70227.393 ±(99.9%) 3199.339 ops/s [Average]
[info]   (min, avg, max) = (69148.450, 70227.393, 70959.693), stdev = 830.858
[info]   CI (99.9%): [67028.055, 73426.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1390.270 ±(99.9%) 61.686 MB/sec [Average]
[info]   (min, avg, max) = (1372.008, 1390.270, 1406.518), stdev = 16.020
[info]   CI (99.9%): [1328.584, 1451.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   31160.119 ±(99.9%) 190.818 B/op [Average]
[info]   (min, avg, max) = (31113.948, 31160.119, 31226.854), stdev = 49.555
[info]   CI (99.9%): [30969.301, 31350.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.581 ±(99.9%) 3.444 B/op [Average]
[info]   (min, avg, max) = (0.926, 1.581, 2.778), stdev = 0.894
[info]   CI (99.9%): [≈ 0, 5.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1351.808 ±(99.9%) 5.308 MB/sec [Average]
[info]   (min, avg, max) = (1350.226, 1351.808, 1353.696), stdev = 1.379
[info]   CI (99.9%): [1346.499, 1357.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   30301.347 ±(99.9%) 1391.045 B/op [Average]
[info]   (min, avg, max) = (29947.917, 30301.347, 30748.162), stdev = 361.250
[info]   CI (99.9%): [28910.301, 31692.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.12% complete, ETA 00:53:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82678.176 ops/s
[info] # Warmup Iteration   2: 144470.736 ops/s
[info] # Warmup Iteration   3: 150230.501 ops/s
[info] # Warmup Iteration   4: 151934.766 ops/s
[info] # Warmup Iteration   5: 150929.225 ops/s
[info] Iteration   1: 153383.334 ops/s
[info]                  ·gc.alloc.rate:                   1498.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              15379.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13841.302 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 153002.658 ops/s
[info]                  ·gc.alloc.rate:                   1516.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              15600.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20831.320 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 153849.647 ops/s
[info]                  ·gc.alloc.rate:                   1504.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              15396.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13827.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 153906.879 ops/s
[info]                  ·gc.alloc.rate:                   1508.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              15415.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13834.966 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 152928.955 ops/s
[info]                  ·gc.alloc.rate:                   1512.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              15564.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13936.683 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   153414.295 ±(99.9%) 1762.620 ops/s [Average]
[info]   (min, avg, max) = (152928.955, 153414.295, 153906.879), stdev = 457.747
[info]   CI (99.9%): [151651.674, 155176.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1508.026 ±(99.9%) 26.897 MB/sec [Average]
[info]   (min, avg, max) = (1498.413, 1508.026, 1516.739), stdev = 6.985
[info]   CI (99.9%): [1481.129, 1534.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15471.082 ±(99.9%) 396.755 B/op [Average]
[info]   (min, avg, max) = (15379.182, 15471.082, 15600.195), stdev = 103.036
[info]   CI (99.9%): [15074.326, 15867.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.104), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.427 ±(99.9%) 1.429 B/op [Average]
[info]   (min, avg, max) = (0.213, 0.427, 1.071), stdev = 0.371
[info]   CI (99.9%): [≈ 0, 1.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1486.554 ±(99.9%) 1159.804 MB/sec [Average]
[info]   (min, avg, max) = (1348.576, 1486.554, 2025.339), stdev = 301.197
[info]   CI (99.9%): [326.750, 2646.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15254.254 ±(99.9%) 12006.280 B/op [Average]
[info]   (min, avg, max) = (13827.001, 15254.254, 20831.320), stdev = 3117.993
[info]   CI (99.9%): [3247.974, 27260.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.35% complete, ETA 00:52:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 818762.699 ops/s
[info] # Warmup Iteration   2: 1023857.198 ops/s
[info] # Warmup Iteration   3: 1071217.791 ops/s
[info] # Warmup Iteration   4: 1083556.122 ops/s
[info] # Warmup Iteration   5: 1080285.290 ops/s
[info] Iteration   1: 1048516.581 ops/s
[info]                  ·gc.alloc.rate:                   890.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              1337.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1012.899 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1081168.292 ops/s
[info]                  ·gc.alloc.rate:                   934.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1962.681 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1084594.635 ops/s
[info]                  ·gc.alloc.rate:                   918.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              1332.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 977.252 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1084357.386 ops/s
[info]                  ·gc.alloc.rate:                   912.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              1324.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 977.518 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1082603.847 ops/s
[info]                  ·gc.alloc.rate:                   928.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              1350.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1959.151 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1076248.148 ±(99.9%) 59934.939 ops/s [Average]
[info]   (min, avg, max) = (1048516.581, 1076248.148, 1084594.635), stdev = 15564.913
[info]   CI (99.9%): [1016313.209, 1136183.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   916.805 ±(99.9%) 64.813 MB/sec [Average]
[info]   (min, avg, max) = (890.918, 916.805, 934.268), stdev = 16.832
[info]   CI (99.9%): [851.992, 981.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1340.854 ±(99.9%) 55.089 B/op [Average]
[info]   (min, avg, max) = (1324.298, 1340.854, 1360.206), stdev = 14.306
[info]   CI (99.9%): [1285.765, 1395.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.073 ±(99.9%) 0.292 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.182), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   943.402 ±(99.9%) 1421.266 MB/sec [Average]
[info]   (min, avg, max) = (673.375, 943.402, 1348.083), stdev = 369.098
[info]   CI (99.9%): [≈ 0, 2364.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1377.900 ±(99.9%) 2050.150 B/op [Average]
[info]   (min, avg, max) = (977.252, 1377.900, 1962.681), stdev = 532.417
[info]   CI (99.9%): [≈ 0, 3428.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.59% complete, ETA 00:52:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 970396.043 ops/s
[info] # Warmup Iteration   2: 1178996.137 ops/s
[info] # Warmup Iteration   3: 1190194.454 ops/s
[info] # Warmup Iteration   4: 1191620.014 ops/s
[info] # Warmup Iteration   5: 1193603.050 ops/s
[info] Iteration   1: 1193732.091 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1192884.036 ops/s
[info]                  ·gc.alloc.rate:      0.081 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.107 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1191861.490 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1194247.887 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1192960.510 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1193137.203 ±(99.9%) 3502.958 ops/s [Average]
[info]   (min, avg, max) = (1191861.490, 1193137.203, 1194247.887), stdev = 909.707
[info]   CI (99.9%): [1189634.245, 1196640.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.016 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.016, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.022 ±(99.9%) 0.184 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.022, 0.107), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 00:52:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44587.269 ops/s
[info] # Warmup Iteration   2: 117393.145 ops/s
[info] # Warmup Iteration   3: 115641.343 ops/s
[info] # Warmup Iteration   4: 118737.569 ops/s
[info] # Warmup Iteration   5: 118796.405 ops/s
[info] Iteration   1: 119111.027 ops/s
[info]                  ·gc.alloc.rate:                   1382.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              18266.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17814.992 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 119066.737 ops/s
[info]                  ·gc.alloc.rate:                   1373.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              18148.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17839.634 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 118707.028 ops/s
[info]                  ·gc.alloc.rate:                   1366.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              18115.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17901.806 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 118899.003 ops/s
[info]                  ·gc.alloc.rate:                   1377.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              18234.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17882.924 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 118852.854 ops/s
[info]                  ·gc.alloc.rate:                   1365.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              18089.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17907.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   118927.330 ±(99.9%) 632.904 ops/s [Average]
[info]   (min, avg, max) = (118707.028, 118927.330, 119111.027), stdev = 164.363
[info]   CI (99.9%): [118294.426, 119560.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1373.100 ±(99.9%) 28.113 MB/sec [Average]
[info]   (min, avg, max) = (1365.809, 1373.100, 1382.711), stdev = 7.301
[info]   CI (99.9%): [1344.988, 1401.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   18171.033 ±(99.9%) 294.645 B/op [Average]
[info]   (min, avg, max) = (18089.246, 18171.033, 18266.601), stdev = 76.518
[info]   CI (99.9%): [17876.389, 18465.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.441 ±(99.9%) 0.949 B/op [Average]
[info]   (min, avg, max) = (0.275, 0.441, 0.827), stdev = 0.247
[info]   CI (99.9%): [≈ 0, 1.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1350.290 ±(99.9%) 5.126 MB/sec [Average]
[info]   (min, avg, max) = (1348.526, 1350.290, 1352.051), stdev = 1.331
[info]   CI (99.9%): [1345.164, 1355.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17869.278 ±(99.9%) 155.172 B/op [Average]
[info]   (min, avg, max) = (17814.992, 17869.278, 17907.035), stdev = 40.298
[info]   CI (99.9%): [17714.106, 18024.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.06% complete, ETA 00:51:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9299.686 ops/s
[info] # Warmup Iteration   2: 37635.527 ops/s
[info] # Warmup Iteration   3: 39304.040 ops/s
[info] # Warmup Iteration   4: 39585.471 ops/s
[info] # Warmup Iteration   5: 40215.688 ops/s
[info] Iteration   1: 40267.965 ops/s
[info]                  ·gc.alloc.rate:                   1481.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              57924.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52737.335 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 40153.484 ops/s
[info]                  ·gc.alloc.rate:                   1471.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              57671.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52910.517 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 40184.539 ops/s
[info]                  ·gc.alloc.rate:                   1481.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              58047.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52908.841 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 40137.772 ops/s
[info]                  ·gc.alloc.rate:                   1466.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              57521.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.693 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53008.643 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 40215.701 ops/s
[info]                  ·gc.alloc.rate:                   1482.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              58018.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52944.955 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   40191.892 ±(99.9%) 200.198 ops/s [Average]
[info]   (min, avg, max) = (40137.772, 40191.892, 40267.965), stdev = 51.991
[info]   CI (99.9%): [39991.694, 40392.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1476.780 ±(99.9%) 28.056 MB/sec [Average]
[info]   (min, avg, max) = (1466.762, 1476.780, 1482.293), stdev = 7.286
[info]   CI (99.9%): [1448.724, 1504.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   57836.676 ±(99.9%) 886.376 B/op [Average]
[info]   (min, avg, max) = (57521.232, 57836.676, 58047.581), stdev = 230.189
[info]   CI (99.9%): [56950.300, 58723.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.468 ±(99.9%) 5.156 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.468, 3.259), stdev = 1.339
[info]   CI (99.9%): [≈ 0, 6.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1350.775 ±(99.9%) 5.642 MB/sec [Average]
[info]   (min, avg, max) = (1349.011, 1350.775, 1352.673), stdev = 1.465
[info]   CI (99.9%): [1345.133, 1356.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   52902.058 ±(99.9%) 387.233 B/op [Average]
[info]   (min, avg, max) = (52737.335, 52902.058, 53008.643), stdev = 100.563
[info]   CI (99.9%): [52514.825, 53289.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.29% complete, ETA 00:51:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 569596.169 ops/s
[info] # Warmup Iteration   2: 690660.995 ops/s
[info] # Warmup Iteration   3: 725656.683 ops/s
[info] # Warmup Iteration   4: 724041.122 ops/s
[info] # Warmup Iteration   5: 730353.692 ops/s
[info] Iteration   1: 732758.287 ops/s
[info]                  ·gc.alloc.rate:                   1464.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              3145.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.906 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2890.880 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 710225.311 ops/s
[info]                  ·gc.alloc.rate:                   1427.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              3164.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2984.063 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 730048.520 ops/s
[info]                  ·gc.alloc.rate:                   1464.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              3158.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2905.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 727719.366 ops/s
[info]                  ·gc.alloc.rate:                   1474.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              3189.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2917.261 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 730944.757 ops/s
[info]                  ·gc.alloc.rate:                   1479.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              3186.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2907.432 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   726339.248 ±(99.9%) 35382.849 ops/s [Average]
[info]   (min, avg, max) = (710225.311, 726339.248, 732758.287), stdev = 9188.814
[info]   CI (99.9%): [690956.399, 761722.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1462.173 ±(99.9%) 78.439 MB/sec [Average]
[info]   (min, avg, max) = (1427.605, 1462.173, 1479.528), stdev = 20.370
[info]   CI (99.9%): [1383.734, 1540.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3168.616 ±(99.9%) 72.133 B/op [Average]
[info]   (min, avg, max) = (3145.133, 3168.616, 3189.158), stdev = 18.733
[info]   CI (99.9%): [3096.483, 3240.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.081 ±(99.9%) 0.331 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.081, 0.224), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1347.725 ±(99.9%) 6.607 MB/sec [Average]
[info]   (min, avg, max) = (1345.906, 1347.725, 1350.088), stdev = 1.716
[info]   CI (99.9%): [1341.118, 1354.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2920.966 ±(99.9%) 140.588 B/op [Average]
[info]   (min, avg, max) = (2890.880, 2920.966, 2984.063), stdev = 36.510
[info]   CI (99.9%): [2780.378, 3061.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.53% complete, ETA 00:51:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4237.009 ops/s
[info] # Warmup Iteration   2: 28710.594 ops/s
[info] # Warmup Iteration   3: 30243.876 ops/s
[info] # Warmup Iteration   4: 30512.882 ops/s
[info] # Warmup Iteration   5: 30225.591 ops/s
[info] Iteration   1: 30468.604 ops/s
[info]                  ·gc.alloc.rate:                   2165.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              111853.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104606.407 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 30616.767 ops/s
[info]                  ·gc.alloc.rate:                   2174.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              111782.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104251.506 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 30623.299 ops/s
[info]                  ·gc.alloc.rate:                   2175.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              111821.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104326.979 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 30668.804 ops/s
[info]                  ·gc.alloc.rate:                   2179.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              111840.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104331.158 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 30677.536 ops/s
[info]                  ·gc.alloc.rate:                   2193.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              112569.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104403.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   30611.002 ±(99.9%) 323.486 ops/s [Average]
[info]   (min, avg, max) = (30468.604, 30611.002, 30677.536), stdev = 84.008
[info]   CI (99.9%): [30287.516, 30934.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2177.763 ±(99.9%) 40.635 MB/sec [Average]
[info]   (min, avg, max) = (2165.028, 2177.763, 2193.947), stdev = 10.553
[info]   CI (99.9%): [2137.128, 2218.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   111973.562 ±(99.9%) 1286.907 B/op [Average]
[info]   (min, avg, max) = (111782.991, 111973.562, 112569.516), stdev = 334.206
[info]   CI (99.9%): [110686.655, 113260.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.638 ±(99.9%) 2.242 B/op [Average]
[info]   (min, avg, max) = (3.204, 3.638, 4.279), stdev = 0.582
[info]   CI (99.9%): [1.397, 5.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2030.141 ±(99.9%) 15.848 MB/sec [Average]
[info]   (min, avg, max) = (2024.753, 2030.141, 2034.786), stdev = 4.116
[info]   CI (99.9%): [2014.294, 2045.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   104383.826 ±(99.9%) 521.712 B/op [Average]
[info]   (min, avg, max) = (104251.506, 104383.826, 104606.407), stdev = 135.487
[info]   CI (99.9%): [103862.114, 104905.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.76% complete, ETA 00:51:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 147261.536 ops/s
[info] # Warmup Iteration   2: 332835.989 ops/s
[info] # Warmup Iteration   3: 343325.717 ops/s
[info] # Warmup Iteration   4: 344038.355 ops/s
[info] # Warmup Iteration   5: 343921.177 ops/s
[info] Iteration   1: 341439.362 ops/s
[info]                  ·gc.alloc.rate:                   962.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              4437.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3107.501 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 343553.900 ops/s
[info]                  ·gc.alloc.rate:                   1005.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              4608.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6176.783 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 344390.605 ops/s
[info]                  ·gc.alloc.rate:                   977.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              4468.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3080.913 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 343830.914 ops/s
[info]                  ·gc.alloc.rate:                   989.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              4531.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6177.870 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 344427.810 ops/s
[info]                  ·gc.alloc.rate:                   983.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              4494.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3085.077 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   343528.518 ±(99.9%) 4719.426 ops/s [Average]
[info]   (min, avg, max) = (341439.362, 343528.518, 344427.810), stdev = 1225.620
[info]   CI (99.9%): [338809.092, 348247.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   983.871 ±(99.9%) 61.315 MB/sec [Average]
[info]   (min, avg, max) = (962.502, 983.871, 1005.858), stdev = 15.923
[info]   CI (99.9%): [922.556, 1045.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4508.106 ±(99.9%) 253.297 B/op [Average]
[info]   (min, avg, max) = (4437.786, 4508.106, 4608.407), stdev = 65.781
[info]   CI (99.9%): [4254.809, 4761.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.114 ±(99.9%) 0.796 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.114, 0.477), stdev = 0.207
[info]   CI (99.9%): [≈ 0, 0.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   944.164 ±(99.9%) 1422.501 MB/sec [Average]
[info]   (min, avg, max) = (673.979, 944.164, 1349.503), stdev = 369.419
[info]   CI (99.9%): [≈ 0, 2366.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4325.629 ±(99.9%) 6509.094 B/op [Average]
[info]   (min, avg, max) = (3080.913, 4325.629, 6177.870), stdev = 1690.391
[info]   CI (99.9%): [≈ 0, 10834.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.00% complete, ETA 00:50:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1129367.673 ops/s
[info] # Warmup Iteration   2: 1377681.887 ops/s
[info] # Warmup Iteration   3: 1420287.771 ops/s
[info] # Warmup Iteration   4: 1419687.820 ops/s
[info] # Warmup Iteration   5: 1400977.280 ops/s
[info] Iteration   1: 1403905.384 ops/s
[info]                  ·gc.alloc.rate:                   839.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              941.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 755.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1411375.878 ops/s
[info]                  ·gc.alloc.rate:                   851.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              950.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.631 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 750.274 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1410803.201 ops/s
[info]                  ·gc.alloc.rate:                   849.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              947.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 750.569 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1410977.953 ops/s
[info]                  ·gc.alloc.rate:                   859.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              959.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1500.974 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1415023.884 ops/s
[info]                  ·gc.alloc.rate:                   843.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              938.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 748.316 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1410417.260 ±(99.9%) 15523.373 ops/s [Average]
[info]   (min, avg, max) = (1403905.384, 1410417.260, 1415023.884), stdev = 4031.371
[info]   CI (99.9%): [1394893.887, 1425940.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   848.918 ±(99.9%) 29.990 MB/sec [Average]
[info]   (min, avg, max) = (839.963, 848.918, 859.980), stdev = 7.788
[info]   CI (99.9%): [818.927, 878.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   947.442 ±(99.9%) 31.548 B/op [Average]
[info]   (min, avg, max) = (938.063, 947.442, 959.359), stdev = 8.193
[info]   CI (99.9%): [915.894, 978.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.019 ±(99.9%) 0.075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.046), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   807.388 ±(99.9%) 1158.307 MB/sec [Average]
[info]   (min, avg, max) = (672.631, 807.388, 1345.490), stdev = 300.809
[info]   CI (99.9%): [≈ 0, 1965.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   901.031 ±(99.9%) 1291.458 B/op [Average]
[info]   (min, avg, max) = (748.316, 901.031, 1500.974), stdev = 335.388
[info]   CI (99.9%): [≈ 0, 2192.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.24% complete, ETA 00:50:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1275840.965 ops/s
[info] # Warmup Iteration   2: 1585976.071 ops/s
[info] # Warmup Iteration   3: 1558202.528 ops/s
[info] # Warmup Iteration   4: 1603445.058 ops/s
[info] # Warmup Iteration   5: 1607263.108 ops/s
[info] Iteration   1: 1606944.591 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1606995.950 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1607540.621 ops/s
[info]                  ·gc.alloc.rate:      6.839 MB/sec
[info]                  ·gc.alloc.rate.norm: 6.696 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1606822.938 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1606041.355 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   1606869.091 ±(99.9%) 2073.657 ops/s [Average]
[info]   (min, avg, max) = (1606041.355, 1606869.091, 1607540.621), stdev = 538.522
[info]   CI (99.9%): [1604795.434, 1608942.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.368 ±(99.9%) 11.777 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.368, 6.839), stdev = 3.058
[info]   CI (99.9%): [≈ 0, 13.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.339 ±(99.9%) 11.530 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.339, 6.696), stdev = 2.994
[info]   CI (99.9%): [≈ 0, 12.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.47% complete, ETA 00:50:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96831.473 ops/s
[info] # Warmup Iteration   2: 220563.003 ops/s
[info] # Warmup Iteration   3: 224665.856 ops/s
[info] # Warmup Iteration   4: 224502.556 ops/s
[info] # Warmup Iteration   5: 224804.471 ops/s
[info] Iteration   1: 225597.192 ops/s
[info]                  ·gc.alloc.rate:                   1493.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              10415.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.974 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9415.272 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 225214.003 ops/s
[info]                  ·gc.alloc.rate:                   1487.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              10393.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9435.978 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 224299.596 ops/s
[info]                  ·gc.alloc.rate:                   1515.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              10633.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14223.509 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 224657.007 ops/s
[info]                  ·gc.alloc.rate:                   1493.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              10461.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9478.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 224437.621 ops/s
[info]                  ·gc.alloc.rate:                   1490.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              10450.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9492.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   224841.084 ±(99.9%) 2109.650 ops/s [Average]
[info]   (min, avg, max) = (224299.596, 224841.084, 225597.192), stdev = 547.869
[info]   CI (99.9%): [222731.434, 226950.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1495.947 ±(99.9%) 42.561 MB/sec [Average]
[info]   (min, avg, max) = (1487.613, 1495.947, 1515.270), stdev = 11.053
[info]   CI (99.9%): [1453.386, 1538.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10471.126 ±(99.9%) 365.779 B/op [Average]
[info]   (min, avg, max) = (10393.802, 10471.126, 10633.947), stdev = 94.992
[info]   CI (99.9%): [10105.348, 10836.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.204 ±(99.9%) 1.093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.204, 0.582), stdev = 0.284
[info]   CI (99.9%): [≈ 0, 1.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1486.724 ±(99.9%) 1162.482 MB/sec [Average]
[info]   (min, avg, max) = (1349.974, 1486.724, 2026.760), stdev = 301.893
[info]   CI (99.9%): [324.242, 2649.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10408.967 ±(99.9%) 8211.957 B/op [Average]
[info]   (min, avg, max) = (9415.272, 10408.967, 14223.509), stdev = 2132.619
[info]   CI (99.9%): [2197.010, 18620.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.71% complete, ETA 00:50:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25273.811 ops/s
[info] # Warmup Iteration   2: 54049.465 ops/s
[info] # Warmup Iteration   3: 53742.620 ops/s
[info] # Warmup Iteration   4: 54691.556 ops/s
[info] # Warmup Iteration   5: 54691.461 ops/s
[info] Iteration   1: 54903.636 ops/s
[info]                  ·gc.alloc.rate:                   994.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              28516.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19343.461 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 54994.872 ops/s
[info]                  ·gc.alloc.rate:                   1010.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              28918.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38622.918 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 55034.873 ops/s
[info]                  ·gc.alloc.rate:                   1000.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              28615.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19297.425 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 54881.147 ops/s
[info]                  ·gc.alloc.rate:                   1011.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              29016.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.128 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38721.531 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 55019.211 ops/s
[info]                  ·gc.alloc.rate:                   994.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              28460.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19321.741 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   54966.748 ±(99.9%) 268.823 ops/s [Average]
[info]   (min, avg, max) = (54881.147, 54966.748, 55034.873), stdev = 69.812
[info]   CI (99.9%): [54697.925, 55235.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1002.392 ±(99.9%) 31.856 MB/sec [Average]
[info]   (min, avg, max) = (994.574, 1002.392, 1011.736), stdev = 8.273
[info]   CI (99.9%): [970.537, 1034.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   28705.574 ±(99.9%) 954.078 B/op [Average]
[info]   (min, avg, max) = (28460.781, 28705.574, 29016.491), stdev = 247.771
[info]   CI (99.9%): [27751.497, 29659.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.596 ±(99.9%) 1.622 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.596, 1.191), stdev = 0.421
[info]   CI (99.9%): [≈ 0, 2.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   944.850 ±(99.9%) 1423.368 MB/sec [Average]
[info]   (min, avg, max) = (674.641, 944.850, 1350.128), stdev = 369.644
[info]   CI (99.9%): [≈ 0, 2368.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   27061.415 ±(99.9%) 40813.899 B/op [Average]
[info]   (min, avg, max) = (19297.425, 27061.415, 38721.531), stdev = 10599.240
[info]   CI (99.9%): [≈ 0, 67875.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.94% complete, ETA 00:49:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20923.518 ops/s
[info] # Warmup Iteration   2: 56512.693 ops/s
[info] # Warmup Iteration   3: 58168.245 ops/s
[info] # Warmup Iteration   4: 58541.102 ops/s
[info] # Warmup Iteration   5: 59049.834 ops/s
[info] Iteration   1: 59021.426 ops/s
[info]                  ·gc.alloc.rate:                   695.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              18547.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17958.232 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 59029.375 ops/s
[info]                  ·gc.alloc.rate:                   704.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              18777.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17956.407 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 58997.687 ops/s
[info]                  ·gc.alloc.rate:                   697.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              18616.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17965.840 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 59009.434 ops/s
[info]                  ·gc.alloc.rate:                   700.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              18676.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17962.492 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 57585.037 ops/s
[info]                  ·gc.alloc.rate:                   689.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              18850.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18406.291 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   58728.592 ±(99.9%) 2462.022 ops/s [Average]
[info]   (min, avg, max) = (57585.037, 58728.592, 59029.375), stdev = 639.379
[info]   CI (99.9%): [56266.570, 61190.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   697.529 ±(99.9%) 20.854 MB/sec [Average]
[info]   (min, avg, max) = (689.703, 697.529, 704.286), stdev = 5.416
[info]   CI (99.9%): [676.675, 718.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18693.863 ±(99.9%) 468.799 B/op [Average]
[info]   (min, avg, max) = (18547.546, 18693.863, 18850.971), stdev = 121.745
[info]   CI (99.9%): [18225.064, 19162.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.555 ±(99.9%) 2.618 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.555, 1.666), stdev = 0.680
[info]   CI (99.9%): [≈ 0, 3.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   673.461 ±(99.9%) 0.287 MB/sec [Average]
[info]   (min, avg, max) = (673.393, 673.461, 673.577), stdev = 0.075
[info]   CI (99.9%): [673.174, 673.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18049.852 ±(99.9%) 767.392 B/op [Average]
[info]   (min, avg, max) = (17956.407, 18049.852, 18406.291), stdev = 199.289
[info]   CI (99.9%): [17282.460, 18817.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.18% complete, ETA 00:49:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49330.966 ops/s
[info] # Warmup Iteration   2: 66988.083 ops/s
[info] # Warmup Iteration   3: 67161.142 ops/s
[info] # Warmup Iteration   4: 68550.795 ops/s
[info] # Warmup Iteration   5: 68195.994 ops/s
[info] Iteration   1: 68538.652 ops/s
[info]                  ·gc.alloc.rate:                   761.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              17482.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.303 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15418.886 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 68518.669 ops/s
[info]                  ·gc.alloc.rate:                   767.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              17627.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15422.710 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 68399.037 ops/s
[info]                  ·gc.alloc.rate:                   759.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              17468.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15434.435 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 68898.401 ops/s
[info]                  ·gc.alloc.rate:                   772.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              17644.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15323.118 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 68551.646 ops/s
[info]                  ·gc.alloc.rate:                   782.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              17972.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30801.337 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   68581.281 ±(99.9%) 721.401 ops/s [Average]
[info]   (min, avg, max) = (68399.037, 68581.281, 68898.401), stdev = 187.345
[info]   CI (99.9%): [67859.880, 69302.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   768.524 ±(99.9%) 36.469 MB/sec [Average]
[info]   (min, avg, max) = (759.080, 768.524, 782.607), stdev = 9.471
[info]   CI (99.9%): [732.054, 804.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17639.114 ±(99.9%) 782.733 B/op [Average]
[info]   (min, avg, max) = (17468.133, 17639.114, 17972.802), stdev = 203.273
[info]   CI (99.9%): [16856.381, 18421.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.286 ±(99.9%) 1.645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.286, 0.956), stdev = 0.427
[info]   CI (99.9%): [≈ 0, 1.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   805.079 ±(99.9%) 1154.067 MB/sec [Average]
[info]   (min, avg, max) = (670.705, 805.079, 1341.212), stdev = 299.708
[info]   CI (99.9%): [≈ 0, 1959.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18480.097 ±(99.9%) 26522.954 B/op [Average]
[info]   (min, avg, max) = (15323.118, 18480.097, 30801.337), stdev = 6887.927
[info]   CI (99.9%): [≈ 0, 45003.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.41% complete, ETA 00:49:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8552.744 ops/s
[info] # Warmup Iteration   2: 33349.848 ops/s
[info] # Warmup Iteration   3: 36844.730 ops/s
[info] # Warmup Iteration   4: 36655.257 ops/s
[info] # Warmup Iteration   5: 37103.020 ops/s
[info] Iteration   1: 37353.689 ops/s
[info]                  ·gc.alloc.rate:                   1681.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              70875.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56807.222 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 37932.359 ops/s
[info]                  ·gc.alloc.rate:                   1731.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              71834.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83979.498 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 36917.705 ops/s
[info]                  ·gc.alloc.rate:                   1670.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              71214.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57590.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 37050.918 ops/s
[info]                  ·gc.alloc.rate:                   1689.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              71797.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86176.383 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 37841.809 ops/s
[info]                  ·gc.alloc.rate:                   1724.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              71732.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56294.920 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   37419.296 ±(99.9%) 1757.589 ops/s [Average]
[info]   (min, avg, max) = (36917.705, 37419.296, 37932.359), stdev = 456.440
[info]   CI (99.9%): [35661.707, 39176.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1699.627 ±(99.9%) 103.141 MB/sec [Average]
[info]   (min, avg, max) = (1670.711, 1699.627, 1731.381), stdev = 26.786
[info]   CI (99.9%): [1596.486, 1802.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   71490.734 ±(99.9%) 1640.715 B/op [Average]
[info]   (min, avg, max) = (70875.161, 71490.734, 71834.396), stdev = 426.088
[info]   CI (99.9%): [69850.019, 73131.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.881 ±(99.9%) 4.170 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.881, 2.653), stdev = 1.083
[info]   CI (99.9%): [≈ 0, 5.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1620.942 ±(99.9%) 1424.392 MB/sec [Average]
[info]   (min, avg, max) = (1348.036, 1620.942, 2028.191), stdev = 369.910
[info]   CI (99.9%): [196.550, 3045.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   68169.612 ±(99.9%) 59536.854 B/op [Average]
[info]   (min, avg, max) = (56294.920, 68169.612, 86176.383), stdev = 15461.532
[info]   CI (99.9%): [8632.758, 127706.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.65% complete, ETA 00:48:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55459.851 ops/s
[info] # Warmup Iteration   2: 111529.126 ops/s
[info] # Warmup Iteration   3: 108590.322 ops/s
[info] # Warmup Iteration   4: 114616.576 ops/s
[info] # Warmup Iteration   5: 115244.679 ops/s
[info] Iteration   1: 115219.960 ops/s
[info]                  ·gc.alloc.rate:                   528.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              7218.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9190.213 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 115831.338 ops/s
[info]                  ·gc.alloc.rate:      510.404 MB/sec
[info]                  ·gc.alloc.rate.norm: 6936.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 115388.833 ops/s
[info]                  ·gc.alloc.rate:                   530.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              7240.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9185.761 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 115645.520 ops/s
[info]                  ·gc.alloc.rate:                   524.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9165.193 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 115868.980 ops/s
[info]                  ·gc.alloc.rate:                   525.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              7136.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9147.478 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   115590.926 ±(99.9%) 1083.239 ops/s [Average]
[info]   (min, avg, max) = (115219.960, 115590.926, 115868.980), stdev = 281.314
[info]   CI (99.9%): [114507.687, 116674.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   523.957 ±(99.9%) 30.572 MB/sec [Average]
[info]   (min, avg, max) = (510.404, 523.957, 530.790), stdev = 7.939
[info]   CI (99.9%): [493.385, 554.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7135.044 ±(99.9%) 462.612 B/op [Average]
[info]   (min, avg, max) = (6936.019, 7135.044, 7240.542), stdev = 120.139
[info]   CI (99.9%): [6672.432, 7597.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.154 ±(99.9%) 1.194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.154, 0.708), stdev = 0.310
[info]   CI (99.9%): [≈ 0, 1.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.103 ±(99.9%) 16.308 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.103, 9.668), stdev = 4.235
[info]   CI (99.9%): [≈ 0, 18.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   538.574 ±(99.9%) 1159.321 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.574, 673.507), stdev = 301.072
[info]   CI (99.9%): [≈ 0, 1697.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7337.729 ±(99.9%) 15795.152 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7337.729, 9190.213), stdev = 4101.951
[info]   CI (99.9%): [≈ 0, 23132.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.88% complete, ETA 00:48:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97672.109 ops/s
[info] # Warmup Iteration   2: 221289.551 ops/s
[info] # Warmup Iteration   3: 235627.016 ops/s
[info] # Warmup Iteration   4: 231284.673 ops/s
[info] # Warmup Iteration   5: 229601.758 ops/s
[info] Iteration   1: 239045.603 ops/s
[info]                  ·gc.alloc.rate:      354.753 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 226871.330 ops/s
[info]                  ·gc.alloc.rate:                   352.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              2443.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4672.086 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 234370.997 ops/s
[info]                  ·gc.alloc.rate:      347.993 MB/sec
[info]                  ·gc.alloc.rate.norm: 2337.145 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 232258.334 ops/s
[info]                  ·gc.alloc.rate:                   358.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              2427.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4563.815 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 234209.206 ops/s
[info]                  ·gc.alloc.rate:      347.585 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   233351.094 ±(99.9%) 16936.866 ops/s [Average]
[info]   (min, avg, max) = (226871.330, 233351.094, 239045.603), stdev = 4398.450
[info]   CI (99.9%): [216414.228, 250287.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   352.127 ±(99.9%) 17.306 MB/sec [Average]
[info]   (min, avg, max) = (347.585, 352.127, 358.142), stdev = 4.494
[info]   CI (99.9%): [334.821, 369.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2375.906 ±(99.9%) 209.567 B/op [Average]
[info]   (min, avg, max) = (2336.002, 2375.906, 2443.297), stdev = 54.424
[info]   CI (99.9%): [2166.339, 2585.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.192 ±(99.9%) 1.649 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.192, 0.958), stdev = 0.428
[info]   CI (99.9%): [≈ 0, 1.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.298 ±(99.9%) 11.175 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.298, 6.489), stdev = 2.902
[info]   CI (99.9%): [≈ 0, 12.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   269.368 ±(99.9%) 1420.302 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.368, 673.439), stdev = 368.848
[info]   CI (99.9%): [≈ 0, 1689.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1847.180 ±(99.9%) 9740.763 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1847.180, 4672.086), stdev = 2529.645
[info]   CI (99.9%): [≈ 0, 11587.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.12% complete, ETA 00:48:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 518652.763 ops/s
[info] # Warmup Iteration   2: 686432.782 ops/s
[info] # Warmup Iteration   3: 752157.364 ops/s
[info] # Warmup Iteration   4: 738138.266 ops/s
[info] # Warmup Iteration   5: 734571.052 ops/s
[info] Iteration   1: 736919.847 ops/s
[info]                  ·gc.alloc.rate:                   954.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              2038.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2869.560 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 744820.026 ops/s
[info]                  ·gc.alloc.rate:                   947.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              2002.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1418.828 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 744718.319 ops/s
[info]                  ·gc.alloc.rate:                   943.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              1993.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1419.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 737991.538 ops/s
[info]                  ·gc.alloc.rate:                   947.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              2020.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2864.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 733186.732 ops/s
[info]                  ·gc.alloc.rate:                   924.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1441.418 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   739527.292 ±(99.9%) 19664.674 ops/s [Average]
[info]   (min, avg, max) = (733186.732, 739527.292, 744820.026), stdev = 5106.853
[info]   CI (99.9%): [719862.619, 759191.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   943.419 ±(99.9%) 43.585 MB/sec [Average]
[info]   (min, avg, max) = (924.533, 943.419, 954.497), stdev = 11.319
[info]   CI (99.9%): [899.834, 987.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2007.898 ±(99.9%) 82.811 B/op [Average]
[info]   (min, avg, max) = (1984.738, 2007.898, 2038.298), stdev = 21.506
[info]   CI (99.9%): [1925.087, 2090.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.071 ±(99.9%) 0.261 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.179), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.162 ±(99.9%) 1417.063 MB/sec [Average]
[info]   (min, avg, max) = (671.375, 940.162, 1343.762), stdev = 368.007
[info]   CI (99.9%): [≈ 0, 2357.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2002.580 ±(99.9%) 3038.062 B/op [Average]
[info]   (min, avg, max) = (1418.828, 2002.580, 2869.560), stdev = 788.975
[info]   CI (99.9%): [≈ 0, 5040.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.35% complete, ETA 00:48:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 657007.602 ops/s
[info] # Warmup Iteration   2: 733696.062 ops/s
[info] # Warmup Iteration   3: 783371.312 ops/s
[info] # Warmup Iteration   4: 785094.582 ops/s
[info] # Warmup Iteration   5: 781313.912 ops/s
[info] Iteration   1: 778540.690 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 780423.004 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 783057.834 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 784116.751 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 780921.302 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   781411.916 ±(99.9%) 8499.324 ops/s [Average]
[info]   (min, avg, max) = (778540.690, 781411.916, 784116.751), stdev = 2207.248
[info]   CI (99.9%): [772912.592, 789911.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.59% complete, ETA 00:47:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104260.272 ops/s
[info] # Warmup Iteration   2: 184507.610 ops/s
[info] # Warmup Iteration   3: 189501.423 ops/s
[info] # Warmup Iteration   4: 189201.084 ops/s
[info] # Warmup Iteration   5: 189594.791 ops/s
[info] Iteration   1: 189258.227 ops/s
[info]                  ·gc.alloc.rate:                   625.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              5199.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5600.515 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 190037.034 ops/s
[info]                  ·gc.alloc.rate:      626.047 MB/sec
[info]                  ·gc.alloc.rate.norm: 5184.566 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 189473.470 ops/s
[info]                  ·gc.alloc.rate:                   619.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              5149.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5594.279 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 189345.995 ops/s
[info]                  ·gc.alloc.rate:                   624.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              5191.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5597.795 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 188987.931 ops/s
[info]                  ·gc.alloc.rate:                   625.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              5212.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5608.486 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   189420.531 ±(99.9%) 1493.732 ops/s [Average]
[info]   (min, avg, max) = (188987.931, 189420.531, 190037.034), stdev = 387.918
[info]   CI (99.9%): [187926.799, 190914.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   624.312 ±(99.9%) 9.663 MB/sec [Average]
[info]   (min, avg, max) = (619.949, 624.312, 626.047), stdev = 2.509
[info]   CI (99.9%): [614.649, 633.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5187.639 ±(99.9%) 90.951 B/op [Average]
[info]   (min, avg, max) = (5149.716, 5187.639, 5212.687), stdev = 23.620
[info]   CI (99.9%): [5096.688, 5278.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.173 ±(99.9%) 0.818 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.173, 0.520), stdev = 0.212
[info]   CI (99.9%): [≈ 0, 0.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   538.723 ±(99.9%) 1159.642 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.723, 673.468), stdev = 301.155
[info]   CI (99.9%): [≈ 0, 1698.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4480.215 ±(99.9%) 9644.022 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4480.215, 5608.486), stdev = 2504.522
[info]   CI (99.9%): [≈ 0, 14124.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.82% complete, ETA 00:47:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47878.430 ops/s
[info] # Warmup Iteration   2: 113702.738 ops/s
[info] # Warmup Iteration   3: 114693.789 ops/s
[info] # Warmup Iteration   4: 118052.427 ops/s
[info] # Warmup Iteration   5: 116194.357 ops/s
[info] Iteration   1: 118152.549 ops/s
[info]                  ·gc.alloc.rate:                   1344.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              17914.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.303 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17977.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 117782.059 ops/s
[info]                  ·gc.alloc.rate:                   1330.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              17777.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18041.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 117317.289 ops/s
[info]                  ·gc.alloc.rate:                   1330.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              17854.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18132.671 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 118088.276 ops/s
[info]                  ·gc.alloc.rate:                   1327.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              17692.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.483 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18022.414 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 117766.707 ops/s
[info]                  ·gc.alloc.rate:                   1350.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              18053.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18089.794 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   117821.376 ±(99.9%) 1276.461 ops/s [Average]
[info]   (min, avg, max) = (117317.289, 117821.376, 118152.549), stdev = 331.493
[info]   CI (99.9%): [116544.915, 119097.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1336.865 ±(99.9%) 39.162 MB/sec [Average]
[info]   (min, avg, max) = (1327.753, 1336.865, 1350.731), stdev = 10.170
[info]   CI (99.9%): [1297.702, 1376.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   17858.621 ±(99.9%) 527.248 B/op [Average]
[info]   (min, avg, max) = (17692.874, 17858.621, 18053.166), stdev = 136.925
[info]   CI (99.9%): [17331.373, 18385.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.444 ±(99.9%) 1.618 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.444, 1.109), stdev = 0.420
[info]   CI (99.9%): [≈ 0, 2.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1351.381 ±(99.9%) 6.631 MB/sec [Average]
[info]   (min, avg, max) = (1349.303, 1351.381, 1353.472), stdev = 1.722
[info]   CI (99.9%): [1344.751, 1358.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   18052.607 ±(99.9%) 232.249 B/op [Average]
[info]   (min, avg, max) = (17977.008, 18052.607, 18132.671), stdev = 60.314
[info]   CI (99.9%): [17820.358, 18284.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.06% complete, ETA 00:47:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65933.047 ops/s
[info] # Warmup Iteration   2: 164807.510 ops/s
[info] # Warmup Iteration   3: 165076.980 ops/s
[info] # Warmup Iteration   4: 172582.149 ops/s
[info] # Warmup Iteration   5: 169323.295 ops/s
[info] Iteration   1: 172269.084 ops/s
[info]                  ·gc.alloc.rate:                   932.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              8519.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12308.587 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 172549.898 ops/s
[info]                  ·gc.alloc.rate:                   919.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              8391.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6145.507 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 170546.061 ops/s
[info]                  ·gc.alloc.rate:                   916.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              8458.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6220.996 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 172531.801 ops/s
[info]                  ·gc.alloc.rate:                   942.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              8592.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12301.910 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 172595.741 ops/s
[info]                  ·gc.alloc.rate:                   919.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              8390.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6150.371 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   172098.517 ±(99.9%) 3377.788 ops/s [Average]
[info]   (min, avg, max) = (170546.061, 172098.517, 172595.741), stdev = 877.201
[info]   CI (99.9%): [168720.729, 175476.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   926.137 ±(99.9%) 41.460 MB/sec [Average]
[info]   (min, avg, max) = (916.479, 926.137, 942.058), stdev = 10.767
[info]   CI (99.9%): [884.676, 967.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8470.591 ±(99.9%) 334.656 B/op [Average]
[info]   (min, avg, max) = (8390.353, 8470.591, 8592.853), stdev = 86.909
[info]   CI (99.9%): [8135.936, 8805.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.228 ±(99.9%) 1.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.228, 0.761), stdev = 0.340
[info]   CI (99.9%): [≈ 0, 1.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   943.543 ±(99.9%) 1421.153 MB/sec [Average]
[info]   (min, avg, max) = (673.610, 943.543, 1348.692), stdev = 369.069
[info]   CI (99.9%): [≈ 0, 2364.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8625.474 ±(99.9%) 12935.439 B/op [Average]
[info]   (min, avg, max) = (6145.507, 8625.474, 12308.587), stdev = 3359.292
[info]   CI (99.9%): [≈ 0, 21560.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.29% complete, ETA 00:47:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 284615.907 ops/s
[info] # Warmup Iteration   2: 415868.646 ops/s
[info] # Warmup Iteration   3: 441929.189 ops/s
[info] # Warmup Iteration   4: 434894.194 ops/s
[info] # Warmup Iteration   5: 423765.432 ops/s
[info] Iteration   1: 431392.534 ops/s
[info]                  ·gc.alloc.rate:                   853.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              3111.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2461.811 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 436616.188 ops/s
[info]                  ·gc.alloc.rate:                   872.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              3143.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2427.632 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 416112.651 ops/s
[info]                  ·gc.alloc.rate:                   831.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              3146.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2547.234 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 430538.412 ops/s
[info]                  ·gc.alloc.rate:                   872.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              3189.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4923.784 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 436462.352 ops/s
[info]                  ·gc.alloc.rate:                   863.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              3112.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.461 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2428.494 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   430224.427 ±(99.9%) 32238.169 ops/s [Average]
[info]   (min, avg, max) = (416112.651, 430224.427, 436616.188), stdev = 8372.150
[info]   CI (99.9%): [397986.258, 462462.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   858.480 ±(99.9%) 65.206 MB/sec [Average]
[info]   (min, avg, max) = (831.707, 858.480, 872.365), stdev = 16.934
[info]   CI (99.9%): [793.274, 923.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3140.778 ±(99.9%) 122.458 B/op [Average]
[info]   (min, avg, max) = (3111.508, 3140.778, 3189.506), stdev = 31.802
[info]   CI (99.9%): [3018.320, 3263.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.076 ±(99.9%) 0.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.076, 0.380), stdev = 0.170
[info]   CI (99.9%): [≈ 0, 0.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   808.369 ±(99.9%) 1158.821 MB/sec [Average]
[info]   (min, avg, max) = (673.389, 808.369, 1346.709), stdev = 300.942
[info]   CI (99.9%): [≈ 0, 1967.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2957.791 ±(99.9%) 4236.104 B/op [Average]
[info]   (min, avg, max) = (2427.632, 2957.791, 4923.784), stdev = 1100.103
[info]   CI (99.9%): [≈ 0, 7193.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.53% complete, ETA 00:46:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12440.091 ops/s
[info] # Warmup Iteration   2: 59832.710 ops/s
[info] # Warmup Iteration   3: 60376.549 ops/s
[info] # Warmup Iteration   4: 61900.154 ops/s
[info] # Warmup Iteration   5: 61940.908 ops/s
[info] Iteration   1: 62011.191 ops/s
[info]                  ·gc.alloc.rate:                   2449.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              62184.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68607.752 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 62079.914 ops/s
[info]                  ·gc.alloc.rate:                   2426.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              61510.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51483.901 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 61955.880 ops/s
[info]                  ·gc.alloc.rate:                   2463.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              62582.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68863.248 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 61847.928 ops/s
[info]                  ·gc.alloc.rate:                   2446.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              62248.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.565 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51803.296 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 61846.952 ops/s
[info]                  ·gc.alloc.rate:                   2473.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              62951.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.246 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69128.683 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   61948.373 ±(99.9%) 393.072 ops/s [Average]
[info]   (min, avg, max) = (61846.952, 61948.373, 62079.914), stdev = 102.080
[info]   CI (99.9%): [61555.301, 62341.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2451.807 ±(99.9%) 69.330 MB/sec [Average]
[info]   (min, avg, max) = (2426.249, 2451.807, 2473.547), stdev = 18.005
[info]   CI (99.9%): [2382.477, 2521.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   62295.817 ±(99.9%) 2058.592 B/op [Average]
[info]   (min, avg, max) = (61510.955, 62295.817, 62951.958), stdev = 534.610
[info]   CI (99.9%): [60237.225, 64354.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.050, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.006, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.269 ±(99.9%) 1.113 B/op [Average]
[info]   (min, avg, max) = (1.056, 1.269, 1.586), stdev = 0.289
[info]   CI (99.9%): [0.156, 2.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2439.208 ±(99.9%) 1427.472 MB/sec [Average]
[info]   (min, avg, max) = (2030.740, 2439.208, 2716.246), stdev = 370.710
[info]   CI (99.9%): [1011.735, 3866.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   61977.376 ±(99.9%) 36334.210 B/op [Average]
[info]   (min, avg, max) = (51483.901, 61977.376, 69128.683), stdev = 9435.879
[info]   CI (99.9%): [25643.166, 98311.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.76% complete, ETA 00:46:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89413.467 ops/s
[info] # Warmup Iteration   2: 172848.749 ops/s
[info] # Warmup Iteration   3: 181250.214 ops/s
[info] # Warmup Iteration   4: 181822.441 ops/s
[info] # Warmup Iteration   5: 178307.555 ops/s
[info] Iteration   1: 181020.462 ops/s
[info]                  ·gc.alloc.rate:                   633.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              5505.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.920 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5861.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 181441.129 ops/s
[info]                  ·gc.alloc.rate:                   640.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              5553.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5847.572 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 181441.759 ops/s
[info]                  ·gc.alloc.rate:                   634.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              5502.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5847.411 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 181582.918 ops/s
[info]                  ·gc.alloc.rate:                   641.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              5559.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.069 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5843.257 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 181606.068 ops/s
[info]                  ·gc.alloc.rate:                   636.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              5516.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5845.275 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   181418.467 ±(99.9%) 906.544 ops/s [Average]
[info]   (min, avg, max) = (181020.462, 181418.467, 181606.068), stdev = 235.426
[info]   CI (99.9%): [180511.924, 182325.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   637.116 ±(99.9%) 14.170 MB/sec [Average]
[info]   (min, avg, max) = (633.073, 637.116, 641.392), stdev = 3.680
[info]   CI (99.9%): [622.946, 651.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5527.571 ±(99.9%) 104.784 B/op [Average]
[info]   (min, avg, max) = (5502.002, 5527.571, 5559.994), stdev = 27.212
[info]   CI (99.9%): [5422.787, 5632.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.772 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.100, 0.458), stdev = 0.200
[info]   CI (99.9%): [≈ 0, 0.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.869 ±(99.9%) 6.710 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.869, 3.982), stdev = 1.743
[info]   CI (99.9%): [≈ 0, 7.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   674.151 ±(99.9%) 0.747 MB/sec [Average]
[info]   (min, avg, max) = (673.920, 674.151, 674.366), stdev = 0.194
[info]   CI (99.9%): [673.404, 674.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5848.905 ±(99.9%) 26.924 B/op [Average]
[info]   (min, avg, max) = (5843.257, 5848.905, 5861.008), stdev = 6.992
[info]   CI (99.9%): [5821.981, 5875.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.00% complete, ETA 00:46:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 172494.082 ops/s
[info] # Warmup Iteration   2: 384877.744 ops/s
[info] # Warmup Iteration   3: 399842.338 ops/s
[info] # Warmup Iteration   4: 399671.374 ops/s
[info] # Warmup Iteration   5: 400650.622 ops/s
[info] Iteration   1: 401520.406 ops/s
[info]                  ·gc.alloc.rate:                   409.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              1604.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2639.770 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 401345.559 ops/s
[info]                  ·gc.alloc.rate:      398.200 MB/sec
[info]                  ·gc.alloc.rate.norm: 1561.682 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 399214.774 ops/s
[info]                  ·gc.alloc.rate:                   409.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              1615.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2654.922 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 401090.862 ops/s
[info]                  ·gc.alloc.rate:      395.486 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.057 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 399142.937 ops/s
[info]                  ·gc.alloc.rate:                   416.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              1641.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2655.507 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   400462.908 ±(99.9%) 4552.832 ops/s [Average]
[info]   (min, avg, max) = (399142.937, 400462.908, 401520.406), stdev = 1182.356
[info]   CI (99.9%): [395910.076, 405015.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   405.816 ±(99.9%) 33.503 MB/sec [Average]
[info]   (min, avg, max) = (395.486, 405.816, 416.312), stdev = 8.701
[info]   CI (99.9%): [372.314, 439.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1595.185 ±(99.9%) 144.838 B/op [Average]
[info]   (min, avg, max) = (1552.057, 1595.185, 1641.644), stdev = 37.614
[info]   CI (99.9%): [1450.347, 1740.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.169 ±(99.9%) 1.298 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.169, 0.770), stdev = 0.337
[info]   CI (99.9%): [≈ 0, 1.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.665 ±(99.9%) 5.120 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.665, 3.036), stdev = 1.330
[info]   CI (99.9%): [≈ 0, 5.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   404.006 ±(99.9%) 1420.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.006, 673.422), stdev = 368.805
[info]   CI (99.9%): [≈ 0, 1824.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1590.040 ±(99.9%) 5589.267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1590.040, 2655.507), stdev = 1451.515
[info]   CI (99.9%): [≈ 0, 7179.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:45:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 754222.802 ops/s
[info] # Warmup Iteration   2: 1049053.542 ops/s
[info] # Warmup Iteration   3: 1055022.533 ops/s
[info] # Warmup Iteration   4: 1062430.237 ops/s
[info] # Warmup Iteration   5: 1053292.810 ops/s
[info] Iteration   1: 1062932.296 ops/s
[info]                  ·gc.alloc.rate:                   808.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              1196.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 997.186 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1058434.072 ops/s
[info]                  ·gc.alloc.rate:                   826.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              1228.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2001.863 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1055245.781 ops/s
[info]                  ·gc.alloc.rate:                   807.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              1204.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1003.460 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1059608.974 ops/s
[info]                  ·gc.alloc.rate:                   802.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              1191.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 999.319 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1065445.341 ops/s
[info]                  ·gc.alloc.rate:                   809.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              1194.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 993.806 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1060333.293 ±(99.9%) 15269.917 ops/s [Average]
[info]   (min, avg, max) = (1055245.781, 1060333.293, 1065445.341), stdev = 3965.549
[info]   CI (99.9%): [1045063.376, 1075603.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   810.605 ±(99.9%) 34.993 MB/sec [Average]
[info]   (min, avg, max) = (802.107, 810.605, 826.119), stdev = 9.088
[info]   CI (99.9%): [775.612, 845.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1203.274 ±(99.9%) 57.728 B/op [Average]
[info]   (min, avg, max) = (1191.522, 1203.274, 1228.621), stdev = 14.992
[info]   CI (99.9%): [1145.545, 1261.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.031 ±(99.9%) 0.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.093), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   807.562 ±(99.9%) 1159.125 MB/sec [Average]
[info]   (min, avg, max) = (672.653, 807.562, 1346.044), stdev = 301.021
[info]   CI (99.9%): [≈ 0, 1966.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1199.127 ±(99.9%) 1728.003 B/op [Average]
[info]   (min, avg, max) = (993.806, 1199.127, 2001.863), stdev = 448.757
[info]   CI (99.9%): [≈ 0, 2927.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.47% complete, ETA 00:45:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 931762.292 ops/s
[info] # Warmup Iteration   2: 1100030.772 ops/s
[info] # Warmup Iteration   3: 1161853.664 ops/s
[info] # Warmup Iteration   4: 1161710.239 ops/s
[info] # Warmup Iteration   5: 1162308.981 ops/s
[info] Iteration   1: 1162407.884 ops/s
[info]                  ·gc.alloc.rate:      0.001 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1161483.167 ops/s
[info]                  ·gc.alloc.rate:      0.073 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.099 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1157546.727 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1161878.066 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1159480.465 ops/s
[info]                  ·gc.alloc.rate:      0.961 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.304 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1160559.262 ±(99.9%) 7761.082 ops/s [Average]
[info]   (min, avg, max) = (1157546.727, 1160559.262, 1162407.884), stdev = 2015.528
[info]   CI (99.9%): [1152798.180, 1168320.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.207 ±(99.9%) 1.627 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.207, 0.961), stdev = 0.423
[info]   CI (99.9%): [≈ 0, 1.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.281 ±(99.9%) 2.209 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.281, 1.304), stdev = 0.574
[info]   CI (99.9%): [≈ 0, 2.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.71% complete, ETA 00:45:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105887.951 ops/s
[info] # Warmup Iteration   2: 290129.551 ops/s
[info] # Warmup Iteration   3: 297275.443 ops/s
[info] # Warmup Iteration   4: 291493.230 ops/s
[info] # Warmup Iteration   5: 296484.192 ops/s
[info] Iteration   1: 292580.799 ops/s
[info]                  ·gc.alloc.rate:                   810.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              4359.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3626.394 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 288822.709 ops/s
[info]                  ·gc.alloc.rate:                   810.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              4415.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.257 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3673.584 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 296984.436 ops/s
[info]                  ·gc.alloc.rate:                   823.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              4365.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3572.408 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 295958.890 ops/s
[info]                  ·gc.alloc.rate:                   849.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              4515.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7169.872 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 297584.394 ops/s
[info]                  ·gc.alloc.rate:                   826.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              4368.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3567.112 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   294386.245 ±(99.9%) 14104.154 ops/s [Average]
[info]   (min, avg, max) = (288822.709, 294386.245, 297584.394), stdev = 3662.804
[info]   CI (99.9%): [280282.091, 308490.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   823.936 ±(99.9%) 60.875 MB/sec [Average]
[info]   (min, avg, max) = (810.475, 823.936, 849.105), stdev = 15.809
[info]   CI (99.9%): [763.061, 884.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4404.956 ±(99.9%) 254.068 B/op [Average]
[info]   (min, avg, max) = (4359.300, 4404.956, 4515.871), stdev = 65.981
[info]   CI (99.9%): [4150.888, 4659.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.088 ±(99.9%) 0.556 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.088, 0.332), stdev = 0.144
[info]   CI (99.9%): [≈ 0, 0.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   809.018 ±(99.9%) 1160.477 MB/sec [Average]
[info]   (min, avg, max) = (674.010, 809.018, 1348.129), stdev = 301.372
[info]   CI (99.9%): [≈ 0, 1969.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4321.874 ±(99.9%) 6132.816 B/op [Average]
[info]   (min, avg, max) = (3567.112, 4321.874, 7169.872), stdev = 1592.673
[info]   CI (99.9%): [≈ 0, 10454.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.94% complete, ETA 00:45:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1108.285 ops/s
[info] # Warmup Iteration   2: 4377.007 ops/s
[info] # Warmup Iteration   3: 4654.710 ops/s
[info] # Warmup Iteration   4: 4714.760 ops/s
[info] # Warmup Iteration   5: 4671.174 ops/s
[info] Iteration   1: 4710.167 ops/s
[info]                  ·gc.alloc.rate:                   867.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              289870.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224138.406 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 4691.574 ops/s
[info]                  ·gc.alloc.rate:                   857.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              287787.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.342 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 225221.523 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 4710.217 ops/s
[info]                  ·gc.alloc.rate:                   878.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              293735.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 448944.554 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4707.515 ops/s
[info]                  ·gc.alloc.rate:                   866.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              289845.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224678.952 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4694.726 ops/s
[info]                  ·gc.alloc.rate:                   858.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              287911.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 225635.871 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   4702.840 ±(99.9%) 34.586 ops/s [Average]
[info]   (min, avg, max) = (4691.574, 4702.840, 4710.217), stdev = 8.982
[info]   CI (99.9%): [4668.253, 4737.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   865.961 ±(99.9%) 32.892 MB/sec [Average]
[info]   (min, avg, max) = (857.840, 865.961, 878.991), stdev = 8.542
[info]   CI (99.9%): [833.069, 898.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   289830.114 ±(99.9%) 9254.620 B/op [Average]
[info]   (min, avg, max) = (287787.682, 289830.114, 293735.343), stdev = 2403.396
[info]   CI (99.9%): [280575.493, 299084.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.174 ±(99.9%) 14.672 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.174, 6.959), stdev = 3.810
[info]   CI (99.9%): [≈ 0, 18.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   806.086 ±(99.9%) 1156.717 MB/sec [Average]
[info]   (min, avg, max) = (670.665, 806.086, 1343.448), stdev = 300.396
[info]   CI (99.9%): [≈ 0, 1962.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   269723.861 ±(99.9%) 385792.166 B/op [Average]
[info]   (min, avg, max) = (224138.406, 269723.861, 448944.554), stdev = 100189.000
[info]   CI (99.9%): [≈ 0, 655516.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.18% complete, ETA 00:44:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1006.440 ops/s
[info] # Warmup Iteration   2: 4223.652 ops/s
[info] # Warmup Iteration   3: 4311.808 ops/s
[info] # Warmup Iteration   4: 4466.235 ops/s
[info] # Warmup Iteration   5: 4437.694 ops/s
[info] Iteration   1: 4456.942 ops/s
[info]                  ·gc.alloc.rate:                   781.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              276148.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 237093.900 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 4394.896 ops/s
[info]                  ·gc.alloc.rate:                   775.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              277650.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.891 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 240557.074 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 4451.512 ops/s
[info]                  ·gc.alloc.rate:                   788.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              278577.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 237477.857 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4430.543 ops/s
[info]                  ·gc.alloc.rate:                   787.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              279813.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.119 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 238721.386 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4458.370 ops/s
[info]                  ·gc.alloc.rate:                   789.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              278826.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 237222.687 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   4438.453 ±(99.9%) 103.124 ops/s [Average]
[info]   (min, avg, max) = (4394.896, 4438.453, 4458.370), stdev = 26.781
[info]   CI (99.9%): [4335.328, 4541.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   784.595 ±(99.9%) 22.683 MB/sec [Average]
[info]   (min, avg, max) = (775.496, 784.595, 789.753), stdev = 5.891
[info]   CI (99.9%): [761.912, 807.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   278203.490 ±(99.9%) 5324.144 B/op [Average]
[info]   (min, avg, max) = (276148.930, 278203.490, 279813.235), stdev = 1382.663
[info]   CI (99.9%): [272879.346, 283527.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.479 ±(99.9%) 12.732 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.479, 7.394), stdev = 3.306
[info]   CI (99.9%): [≈ 0, 14.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   671.799 ±(99.9%) 1.159 MB/sec [Average]
[info]   (min, avg, max) = (671.312, 671.799, 672.119), stdev = 0.301
[info]   CI (99.9%): [670.641, 672.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   238214.581 ±(99.9%) 5622.028 B/op [Average]
[info]   (min, avg, max) = (237093.900, 238214.581, 240557.074), stdev = 1460.023
[info]   CI (99.9%): [232592.553, 243836.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.41% complete, ETA 00:44:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18962.993 ops/s
[info] # Warmup Iteration   2: 30942.202 ops/s
[info] # Warmup Iteration   3: 31094.536 ops/s
[info] # Warmup Iteration   4: 31506.738 ops/s
[info] # Warmup Iteration   5: 32054.734 ops/s
[info] Iteration   1: 31818.950 ops/s
[info]                  ·gc.alloc.rate:                   537.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              26568.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      667.320 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33015.119 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 31760.153 ops/s
[info]                  ·gc.alloc.rate:                   541.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              26848.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      667.480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33076.441 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 31977.166 ops/s
[info]                  ·gc.alloc.rate:                   540.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              26601.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      667.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32818.203 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 31768.850 ops/s
[info]                  ·gc.alloc.rate:                   547.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              27108.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33034.071 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 31922.928 ops/s
[info]                  ·gc.alloc.rate:      524.053 MB/sec
[info]                  ·gc.alloc.rate.norm: 25840.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   31849.609 ±(99.9%) 370.897 ops/s [Average]
[info]   (min, avg, max) = (31760.153, 31849.609, 31977.166), stdev = 96.321
[info]   CI (99.9%): [31478.713, 32220.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   538.172 ±(99.9%) 33.565 MB/sec [Average]
[info]   (min, avg, max) = (524.053, 538.172, 547.328), stdev = 8.717
[info]   CI (99.9%): [504.607, 571.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26593.491 ±(99.9%) 1825.740 B/op [Average]
[info]   (min, avg, max) = (25840.013, 26593.491, 27108.836), stdev = 474.139
[info]   CI (99.9%): [24767.752, 28419.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.960 ±(99.9%) 8.218 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.960, 4.778), stdev = 2.134
[info]   CI (99.9%): [≈ 0, 9.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   47.554 ±(99.9%) 407.255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.554, 236.747), stdev = 105.763
[info]   CI (99.9%): [≈ 0, 454.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   533.754 ±(99.9%) 1148.946 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.754, 667.480), stdev = 298.378
[info]   CI (99.9%): [≈ 0, 1682.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   26388.767 ±(99.9%) 56805.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26388.767, 33076.441), stdev = 14752.104
[info]   CI (99.9%): [≈ 0, 83193.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:44:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 441.763 ops/s
[info] # Warmup Iteration   2: 3829.570 ops/s
[info] # Warmup Iteration   3: 3990.244 ops/s
[info] # Warmup Iteration   4: 4245.166 ops/s
[info] # Warmup Iteration   5: 4263.406 ops/s
[info] Iteration   1: 4271.773 ops/s
[info]                  ·gc.alloc.rate:                   1022.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              376683.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 247358.907 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 4221.936 ops/s
[info]                  ·gc.alloc.rate:                   1023.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              381360.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 500699.385 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 4256.270 ops/s
[info]                  ·gc.alloc.rate:                   1015.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              375718.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 248411.768 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 4263.182 ops/s
[info]                  ·gc.alloc.rate:                   1032.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              381345.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 496253.839 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4253.141 ops/s
[info]                  ·gc.alloc.rate:                   1008.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              373406.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.883 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 249021.398 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   4253.260 ±(99.9%) 72.842 ops/s [Average]
[info]   (min, avg, max) = (4221.936, 4253.260, 4271.773), stdev = 18.917
[info]   CI (99.9%): [4180.418, 4326.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1020.663 ±(99.9%) 34.321 MB/sec [Average]
[info]   (min, avg, max) = (1008.985, 1020.663, 1032.921), stdev = 8.913
[info]   CI (99.9%): [986.342, 1054.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   377702.648 ±(99.9%) 13624.897 B/op [Average]
[info]   (min, avg, max) = (373406.579, 377702.648, 381360.277), stdev = 3538.342
[info]   CI (99.9%): [364077.751, 391327.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.029, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10.783 ±(99.9%) 26.521 B/op [Average]
[info]   (min, avg, max) = (7.669, 10.783, 23.103), stdev = 6.887
[info]   CI (99.9%): [≈ 0, 37.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   940.693 ±(99.9%) 1416.989 MB/sec [Average]
[info]   (min, avg, max) = (671.261, 940.693, 1344.166), stdev = 367.988
[info]   CI (99.9%): [≈ 0, 2357.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   348349.059 ±(99.9%) 527759.173 B/op [Average]
[info]   (min, avg, max) = (247358.907, 348349.059, 500699.385), stdev = 137057.381
[info]   CI (99.9%): [≈ 0, 876108.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.88% complete, ETA 00:44:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6709.509 ops/s
[info] # Warmup Iteration   2: 13804.346 ops/s
[info] # Warmup Iteration   3: 14193.841 ops/s
[info] # Warmup Iteration   4: 13631.430 ops/s
[info] # Warmup Iteration   5: 14093.587 ops/s
[info] Iteration   1: 14179.263 ops/s
[info]                  ·gc.alloc.rate:                   781.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              86805.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149215.596 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 14196.758 ops/s
[info]                  ·gc.alloc.rate:                   757.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              84019.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74513.218 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 14145.944 ops/s
[info]                  ·gc.alloc.rate:                   745.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              82915.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.128 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74781.820 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 14175.701 ops/s
[info]                  ·gc.alloc.rate:                   762.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              84664.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74660.564 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 14224.433 ops/s
[info]                  ·gc.alloc.rate:                   768.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              84995.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74403.421 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14184.420 ±(99.9%) 111.207 ops/s [Average]
[info]   (min, avg, max) = (14145.944, 14184.420, 14224.433), stdev = 28.880
[info]   CI (99.9%): [14073.212, 14295.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   763.137 ±(99.9%) 51.854 MB/sec [Average]
[info]   (min, avg, max) = (745.233, 763.137, 781.871), stdev = 13.466
[info]   CI (99.9%): [711.283, 814.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   84680.117 ±(99.9%) 5502.864 B/op [Average]
[info]   (min, avg, max) = (82915.552, 84680.117, 86805.837), stdev = 1429.076
[info]   CI (99.9%): [79177.252, 90182.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.316 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.187), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.621 ±(99.9%) 35.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.621, 20.796), stdev = 9.097
[info]   CI (99.9%): [≈ 0, 39.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   806.628 ±(99.9%) 1156.743 MB/sec [Average]
[info]   (min, avg, max) = (672.108, 806.628, 1344.004), stdev = 300.402
[info]   CI (99.9%): [≈ 0, 1963.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   89514.924 ±(99.9%) 128511.388 B/op [Average]
[info]   (min, avg, max) = (74403.421, 89514.924, 149215.596), stdev = 33373.999
[info]   CI (99.9%): [≈ 0, 218026.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.12% complete, ETA 00:43:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7150.171 ops/s
[info] # Warmup Iteration   2: 17038.177 ops/s
[info] # Warmup Iteration   3: 17094.654 ops/s
[info] # Warmup Iteration   4: 17125.136 ops/s
[info] # Warmup Iteration   5: 17182.963 ops/s
[info] Iteration   1: 17241.995 ops/s
[info]                  ·gc.alloc.rate:                   847.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              77374.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61291.076 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 17053.038 ops/s
[info]                  ·gc.alloc.rate:                   864.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              79765.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123933.237 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 17258.550 ops/s
[info]                  ·gc.alloc.rate:                   857.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              78174.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61295.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 17191.842 ops/s
[info]                  ·gc.alloc.rate:                   849.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              77808.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61530.281 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 17313.199 ops/s
[info]                  ·gc.alloc.rate:                   854.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              77638.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61130.600 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   17211.725 ±(99.9%) 380.138 ops/s [Average]
[info]   (min, avg, max) = (17053.038, 17211.725, 17313.199), stdev = 98.721
[info]   CI (99.9%): [16831.587, 17591.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   854.531 ±(99.9%) 25.261 MB/sec [Average]
[info]   (min, avg, max) = (847.489, 854.531, 864.185), stdev = 6.560
[info]   CI (99.9%): [829.270, 879.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   78152.276 ±(99.9%) 3647.568 B/op [Average]
[info]   (min, avg, max) = (77374.194, 78152.276, 79765.168), stdev = 947.262
[info]   CI (99.9%): [74504.708, 81799.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.516 ±(99.9%) 7.995 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.516, 3.797), stdev = 2.076
[info]   CI (99.9%): [≈ 0, 9.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   806.112 ±(99.9%) 1155.061 MB/sec [Average]
[info]   (min, avg, max) = (671.328, 806.112, 1342.707), stdev = 299.966
[info]   CI (99.9%): [≈ 0, 1961.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   73836.041 ±(99.9%) 107839.388 B/op [Average]
[info]   (min, avg, max) = (61130.600, 73836.041, 123933.237), stdev = 28005.546
[info]   CI (99.9%): [≈ 0, 181675.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.35% complete, ETA 00:43:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 173501.096 ops/s
[info] # Warmup Iteration   2: 219527.233 ops/s
[info] # Warmup Iteration   3: 234408.417 ops/s
[info] # Warmup Iteration   4: 235298.019 ops/s
[info] # Warmup Iteration   5: 208723.538 ops/s
[info] Iteration   1: 230862.260 ops/s
[info]                  ·gc.alloc.rate:                   859.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              5861.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4541.276 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 229506.234 ops/s
[info]                  ·gc.alloc.rate:                   860.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              5903.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666.107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4568.242 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 227274.037 ops/s
[info]                  ·gc.alloc.rate:                   847.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              5867.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4612.876 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 225807.165 ops/s
[info]                  ·gc.alloc.rate:                   856.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              5973.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9288.247 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 230320.666 ops/s
[info]                  ·gc.alloc.rate:                   851.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              5816.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666.384 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4553.861 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   228754.072 ±(99.9%) 8245.051 ops/s [Average]
[info]   (min, avg, max) = (225807.165, 228754.072, 230862.260), stdev = 2141.214
[info]   CI (99.9%): [220509.021, 236999.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   855.105 ±(99.9%) 22.472 MB/sec [Average]
[info]   (min, avg, max) = (847.118, 855.105, 860.828), stdev = 5.836
[info]   CI (99.9%): [832.633, 877.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5884.374 ±(99.9%) 225.474 B/op [Average]
[info]   (min, avg, max) = (5816.061, 5884.374, 5973.111), stdev = 58.555
[info]   CI (99.9%): [5658.900, 6109.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.173 ±(99.9%) 0.918 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.173, 0.580), stdev = 0.239
[info]   CI (99.9%): [≈ 0, 1.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   799.382 ±(99.9%) 1147.438 MB/sec [Average]
[info]   (min, avg, max) = (665.954, 799.382, 1332.435), stdev = 297.986
[info]   CI (99.9%): [≈ 0, 1946.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5512.900 ±(99.9%) 8127.385 B/op [Average]
[info]   (min, avg, max) = (4541.276, 5512.900, 9288.247), stdev = 2110.656
[info]   CI (99.9%): [≈ 0, 13640.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.59% complete, ETA 00:43:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 198505.635 ops/s
[info] # Warmup Iteration   2: 259916.228 ops/s
[info] # Warmup Iteration   3: 264786.378 ops/s
[info] # Warmup Iteration   4: 265256.253 ops/s
[info] # Warmup Iteration   5: 264985.558 ops/s
[info] Iteration   1: 264409.377 ops/s
[info]                  ·gc.alloc.rate:      0.653 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.891 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 264514.878 ops/s
[info]                  ·gc.alloc.rate:      0.233 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.384 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 265248.396 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 265239.698 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 263455.388 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   264573.547 ±(99.9%) 2842.608 ops/s [Average]
[info]   (min, avg, max) = (263455.388, 264573.547, 265248.396), stdev = 738.216
[info]   CI (99.9%): [261730.940, 267416.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.177 ±(99.9%) 1.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.177, 0.653), stdev = 0.285
[info]   CI (99.9%): [≈ 0, 1.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.056 ±(99.9%) 6.523 B/op [Average]
[info]   (min, avg, max) = (0.002, 1.056, 3.891), stdev = 1.694
[info]   CI (99.9%): [≈ 0, 7.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.82% complete, ETA 00:43:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6535.887 ops/s
[info] # Warmup Iteration   2: 14611.166 ops/s
[info] # Warmup Iteration   3: 15127.701 ops/s
[info] # Warmup Iteration   4: 15073.799 ops/s
[info] # Warmup Iteration   5: 15204.958 ops/s
[info] Iteration   1: 15157.756 ops/s
[info]                  ·gc.alloc.rate:                   861.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              89441.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69646.859 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 15163.276 ops/s
[info]                  ·gc.alloc.rate:                   882.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              91570.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139386.075 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 15054.879 ops/s
[info]                  ·gc.alloc.rate:                   877.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              91780.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70267.197 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 15213.694 ops/s
[info]                  ·gc.alloc.rate:                   867.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              89740.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.183 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69528.369 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 15249.869 ops/s
[info]                  ·gc.alloc.rate:                   867.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              89557.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69428.462 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   15167.895 ±(99.9%) 283.709 ops/s [Average]
[info]   (min, avg, max) = (15054.879, 15167.895, 15249.869), stdev = 73.678
[info]   CI (99.9%): [14884.185, 15451.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   871.318 ±(99.9%) 33.026 MB/sec [Average]
[info]   (min, avg, max) = (861.226, 871.318, 882.352), stdev = 8.577
[info]   CI (99.9%): [838.292, 904.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   90418.164 ±(99.9%) 4448.924 B/op [Average]
[info]   (min, avg, max) = (89441.534, 90418.164, 91780.782), stdev = 1155.371
[info]   CI (99.9%): [85969.240, 94867.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.590 ±(99.9%) 18.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.590, 10.803), stdev = 4.684
[info]   CI (99.9%): [≈ 0, 20.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   806.111 ±(99.9%) 1155.886 MB/sec [Average]
[info]   (min, avg, max) = (670.624, 806.111, 1343.087), stdev = 300.180
[info]   CI (99.9%): [≈ 0, 1961.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   83651.392 ±(99.9%) 119979.695 B/op [Average]
[info]   (min, avg, max) = (69428.462, 83651.392, 139386.075), stdev = 31158.346
[info]   CI (99.9%): [≈ 0, 203631.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.06% complete, ETA 00:42:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1096441.701 ops/s
[info] # Warmup Iteration   2: 1337805.437 ops/s
[info] # Warmup Iteration   3: 1344639.466 ops/s
[info] # Warmup Iteration   4: 1322516.212 ops/s
[info] # Warmup Iteration   5: 1359558.981 ops/s
[info] Iteration   1: 1359134.183 ops/s
[info]                  ·gc.alloc.rate:      55.308 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.038 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1295615.816 ops/s
[info]                  ·gc.alloc.rate:                   69.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              84.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 621.514 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1198120.945 ops/s
[info]                  ·gc.alloc.rate:      58.100 MB/sec
[info]                  ·gc.alloc.rate.norm: 76.301 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1287240.802 ops/s
[info]                  ·gc.alloc.rate:      52.363 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1284086.435 ops/s
[info]                  ·gc.alloc.rate:      52.212 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   1284839.636 ±(99.9%) 220886.291 ops/s [Average]
[info]   (min, avg, max) = (1198120.945, 1284839.636, 1359134.183), stdev = 57363.468
[info]   CI (99.9%): [1063953.345, 1505725.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   57.548 ±(99.9%) 27.885 MB/sec [Average]
[info]   (min, avg, max) = (52.212, 57.548, 69.758), stdev = 7.242
[info]   CI (99.9%): [29.663, 85.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   70.611 ±(99.9%) 36.625 B/op [Average]
[info]   (min, avg, max) = (64.000, 70.611, 84.714), stdev = 9.511
[info]   CI (99.9%): [33.986, 107.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   102.358 ±(99.9%) 881.333 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.358, 511.790), stdev = 228.879
[info]   CI (99.9%): [≈ 0, 983.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   124.303 ±(99.9%) 1070.284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 124.303, 621.514), stdev = 277.949
[info]   CI (99.9%): [≈ 0, 1194.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.29% complete, ETA 00:42:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4282.548 ops/s
[info] # Warmup Iteration   2: 63511.024 ops/s
[info] # Warmup Iteration   3: 80424.959 ops/s
[info] # Warmup Iteration   4: 81747.775 ops/s
[info] # Warmup Iteration   5: 82892.248 ops/s
[info] Iteration   1: 82770.572 ops/s
[info]                  ·gc.alloc.rate:                   3485.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              66296.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3386.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64395.245 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 82621.432 ops/s
[info]                  ·gc.alloc.rate:                   3533.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              67307.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3392.387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64625.557 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 82010.463 ops/s
[info]                  ·gc.alloc.rate:                   3508.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              67342.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3396.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65186.036 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 82618.054 ops/s
[info]                  ·gc.alloc.rate:                   3535.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              67356.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64781.746 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 81858.206 ops/s
[info]                  ·gc.alloc.rate:                   3504.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              67384.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65434.339 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   82375.746 ±(99.9%) 1583.268 ops/s [Average]
[info]   (min, avg, max) = (81858.206, 82375.746, 82770.572), stdev = 411.170
[info]   CI (99.9%): [80792.478, 83959.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3513.395 ±(99.9%) 80.210 MB/sec [Average]
[info]   (min, avg, max) = (3485.990, 3513.395, 3535.357), stdev = 20.830
[info]   CI (99.9%): [3433.185, 3593.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67137.201 ±(99.9%) 1812.513 B/op [Average]
[info]   (min, avg, max) = (66296.630, 67137.201, 67384.007), stdev = 470.704
[info]   CI (99.9%): [65324.688, 68949.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.590 ±(99.9%) 2.425 B/op [Average]
[info]   (min, avg, max) = (0.800, 1.590, 2.397), stdev = 0.630
[info]   CI (99.9%): [≈ 0, 4.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3395.479 ±(99.9%) 25.446 MB/sec [Average]
[info]   (min, avg, max) = (3386.012, 3395.479, 3402.726), stdev = 6.608
[info]   CI (99.9%): [3370.033, 3420.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   64884.585 ±(99.9%) 1622.564 B/op [Average]
[info]   (min, avg, max) = (64395.245, 64884.585, 65434.339), stdev = 421.375
[info]   CI (99.9%): [63262.021, 66507.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.53% complete, ETA 00:42:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 715428.466 ops/s
[info] # Warmup Iteration   2: 1670516.297 ops/s
[info] # Warmup Iteration   3: 1700918.763 ops/s
[info] # Warmup Iteration   4: 1709455.678 ops/s
[info] # Warmup Iteration   5: 1679854.363 ops/s
[info] Iteration   1: 1709575.521 ops/s
[info]                  ·gc.alloc.rate:                   923.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              850.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1241.294 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1693333.001 ops/s
[info]                  ·gc.alloc.rate:                   922.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              857.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.225 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 626.576 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1713749.977 ops/s
[info]                  ·gc.alloc.rate:                   921.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              845.943 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.205 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 619.120 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1712720.679 ops/s
[info]                  ·gc.alloc.rate:                   934.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              859.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.399 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1239.232 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1703120.371 ops/s
[info]                  ·gc.alloc.rate:                   908.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              839.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 623.262 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1706499.910 ±(99.9%) 32532.222 ops/s [Average]
[info]   (min, avg, max) = (1693333.001, 1706499.910, 1713749.977), stdev = 8448.515
[info]   CI (99.9%): [1673967.688, 1739032.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   922.111 ±(99.9%) 36.612 MB/sec [Average]
[info]   (min, avg, max) = (908.037, 922.111, 934.720), stdev = 9.508
[info]   CI (99.9%): [885.499, 958.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   850.422 ±(99.9%) 31.624 B/op [Average]
[info]   (min, avg, max) = (839.175, 850.422, 859.045), stdev = 8.213
[info]   CI (99.9%): [818.799, 882.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.038 ±(99.9%) 0.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.096), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   943.941 ±(99.9%) 1421.850 MB/sec [Average]
[info]   (min, avg, max) = (674.205, 943.941, 1348.469), stdev = 369.250
[info]   CI (99.9%): [≈ 0, 2365.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   869.897 ±(99.9%) 1301.932 B/op [Average]
[info]   (min, avg, max) = (619.120, 869.897, 1241.294), stdev = 338.108
[info]   CI (99.9%): [≈ 0, 2171.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.76% complete, ETA 00:41:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 662032.640 ops/s
[info] # Warmup Iteration   2: 913455.293 ops/s
[info] # Warmup Iteration   3: 967335.434 ops/s
[info] # Warmup Iteration   4: 957140.822 ops/s
[info] # Warmup Iteration   5: 966797.045 ops/s
[info] Iteration   1: 955769.833 ops/s
[info]                  ·gc.alloc.rate:                   280.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              461.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 842.439 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 962507.068 ops/s
[info]                  ·gc.alloc.rate:      269.057 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 932300.809 ops/s
[info]                  ·gc.alloc.rate:                   272.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              460.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 863.633 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 964542.172 ops/s
[info]                  ·gc.alloc.rate:      269.641 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 959755.222 ops/s
[info]                  ·gc.alloc.rate:                   286.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              469.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.090 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1105.513 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   954975.021 ±(99.9%) 50422.269 ops/s [Average]
[info]   (min, avg, max) = (932300.809, 954975.021, 964542.172), stdev = 13094.503
[info]   CI (99.9%): [904552.752, 1005397.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   275.615 ±(99.9%) 28.941 MB/sec [Average]
[info]   (min, avg, max) = (269.057, 275.615, 286.398), stdev = 7.516
[info]   CI (99.9%): [246.674, 304.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   454.326 ±(99.9%) 52.213 B/op [Average]
[info]   (min, avg, max) = (440.000, 454.326, 469.695), stdev = 13.560
[info]   CI (99.9%): [402.112, 506.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   339.446 ±(99.9%) 1220.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.446, 674.090), stdev = 316.894
[info]   CI (99.9%): [≈ 0, 1559.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   562.317 ±(99.9%) 2016.284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 562.317, 1105.513), stdev = 523.623
[info]   CI (99.9%): [≈ 0, 2578.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.00% complete, ETA 00:41:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1503441.780 ops/s
[info] # Warmup Iteration   2: 2140120.262 ops/s
[info] # Warmup Iteration   3: 2164009.221 ops/s
[info] # Warmup Iteration   4: 2162271.443 ops/s
[info] # Warmup Iteration   5: 2163583.532 ops/s
[info] Iteration   1: 2163196.968 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2163956.893 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2163155.609 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2157226.218 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2162841.400 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   2162075.418 ±(99.9%) 10557.034 ops/s [Average]
[info]   (min, avg, max) = (2157226.218, 2162075.418, 2163956.893), stdev = 2741.628
[info]   CI (99.9%): [2151518.384, 2172632.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.24% complete, ETA 00:41:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9168.078 ops/s
[info] # Warmup Iteration   2: 48258.236 ops/s
[info] # Warmup Iteration   3: 48691.230 ops/s
[info] # Warmup Iteration   4: 48809.407 ops/s
[info] # Warmup Iteration   5: 49160.188 ops/s
[info] Iteration   1: 49235.758 ops/s
[info]                  ·gc.alloc.rate:                   2052.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              65615.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.097 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64730.857 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 49225.551 ops/s
[info]                  ·gc.alloc.rate:                   2040.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              65258.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64827.877 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 49196.007 ops/s
[info]                  ·gc.alloc.rate:                   2038.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              65228.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64960.656 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 49304.016 ops/s
[info]                  ·gc.alloc.rate:                   2057.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              65664.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64863.550 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 49283.433 ops/s
[info]                  ·gc.alloc.rate:                   2069.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              66108.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64976.272 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   49248.953 ±(99.9%) 169.449 ops/s [Average]
[info]   (min, avg, max) = (49196.007, 49248.953, 49304.016), stdev = 44.005
[info]   CI (99.9%): [49079.504, 49418.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2051.923 ±(99.9%) 48.981 MB/sec [Average]
[info]   (min, avg, max) = (2038.763, 2051.923, 2069.894), stdev = 12.720
[info]   CI (99.9%): [2002.942, 2100.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   65574.888 ±(99.9%) 1380.969 B/op [Average]
[info]   (min, avg, max) = (65228.416, 65574.888, 66108.424), stdev = 358.633
[info]   CI (99.9%): [64193.919, 66955.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.464 ±(99.9%) 2.146 B/op [Average]
[info]   (min, avg, max) = (0.665, 1.464, 1.998), stdev = 0.557
[info]   CI (99.9%): [≈ 0, 3.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2029.918 ±(99.9%) 14.329 MB/sec [Average]
[info]   (min, avg, max) = (2025.097, 2029.918, 2034.446), stdev = 3.721
[info]   CI (99.9%): [2015.589, 2044.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   64871.842 ±(99.9%) 388.286 B/op [Average]
[info]   (min, avg, max) = (64730.857, 64871.842, 64976.272), stdev = 100.837
[info]   CI (99.9%): [64483.556, 65260.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.47% complete, ETA 00:41:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104286.144 ops/s
[info] # Warmup Iteration   2: 807701.687 ops/s
[info] # Warmup Iteration   3: 868957.340 ops/s
[info] # Warmup Iteration   4: 882147.903 ops/s
[info] # Warmup Iteration   5: 874337.684 ops/s
[info] Iteration   1: 883983.136 ops/s
[info]                  ·gc.alloc.rate:                   2746.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              4891.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2703.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4815.406 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 886319.347 ops/s
[info]                  ·gc.alloc.rate:                   2770.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              4919.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4811.973 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 884905.951 ops/s
[info]                  ·gc.alloc.rate:                   2793.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              4967.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4826.699 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 881440.198 ops/s
[info]                  ·gc.alloc.rate:                   2780.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              4965.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4850.526 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 871073.565 ops/s
[info]                  ·gc.alloc.rate:                   2724.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              4922.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2039.387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3685.236 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   881544.439 ±(99.9%) 23556.440 ops/s [Average]
[info]   (min, avg, max) = (871073.565, 881544.439, 886319.347), stdev = 6117.533
[info]   CI (99.9%): [857987.999, 905100.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2763.032 ±(99.9%) 106.572 MB/sec [Average]
[info]   (min, avg, max) = (2724.119, 2763.032, 2793.220), stdev = 27.677
[info]   CI (99.9%): [2656.460, 2869.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4933.344 ±(99.9%) 126.027 B/op [Average]
[info]   (min, avg, max) = (4891.636, 4933.344, 4967.742), stdev = 32.729
[info]   CI (99.9%): [4807.317, 5059.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.104 ±(99.9%) 0.185 B/op [Average]
[info]   (min, avg, max) = (0.074, 0.104, 0.185), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2576.701 ±(99.9%) 1156.752 MB/sec [Average]
[info]   (min, avg, max) = (2039.387, 2576.701, 2716.291), stdev = 300.405
[info]   CI (99.9%): [1419.950, 3733.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4597.968 ±(99.9%) 1965.584 B/op [Average]
[info]   (min, avg, max) = (3685.236, 4597.968, 4850.526), stdev = 510.456
[info]   CI (99.9%): [2632.384, 6563.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.71% complete, ETA 00:40:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.691 ops/s
[info] # Warmup Iteration   2: 4254090.434 ops/s
[info] # Warmup Iteration   3: 4766292.336 ops/s
[info] # Warmup Iteration   4: 4789042.294 ops/s
[info] # Warmup Iteration   5: 4841690.026 ops/s
[info] Iteration   1: 4817464.079 ops/s
[info]                  ·gc.alloc.rate:                   301.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              98.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 167.133 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4839951.751 ops/s
[info]                  ·gc.alloc.rate:      295.197 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4811889.775 ops/s
[info]                  ·gc.alloc.rate:                   309.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              101.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.822 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 219.406 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4837769.424 ops/s
[info]                  ·gc.alloc.rate:      295.062 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4819089.669 ops/s
[info]                  ·gc.alloc.rate:                   314.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              102.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 219.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   4825232.940 ±(99.9%) 49084.075 ops/s [Average]
[info]   (min, avg, max) = (4811889.775, 4825232.940, 4839951.751), stdev = 12746.978
[info]   CI (99.9%): [4776148.864, 4874317.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   303.035 ±(99.9%) 33.265 MB/sec [Average]
[info]   (min, avg, max) = (295.062, 303.035, 314.334), stdev = 8.639
[info]   CI (99.9%): [269.770, 336.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   98.856 ±(99.9%) 11.668 B/op [Average]
[info]   (min, avg, max) = (96.000, 98.856, 102.669), stdev = 3.030
[info]   CI (99.9%): [87.188, 110.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.798 ±(99.9%) 6.874 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.798, 3.992), stdev = 1.785
[info]   CI (99.9%): [≈ 0, 7.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.261 ±(99.9%) 2.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.261, 1.304), stdev = 0.583
[info]   CI (99.9%): [≈ 0, 2.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   370.603 ±(99.9%) 1326.572 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.603, 670.822), stdev = 344.506
[info]   CI (99.9%): [≈ 0, 1697.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   121.122 ±(99.9%) 433.570 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 121.122, 219.406), stdev = 112.597
[info]   CI (99.9%): [≈ 0, 554.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.94% complete, ETA 00:40:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18301.675 ops/s
[info] # Warmup Iteration   2: 897213.473 ops/s
[info] # Warmup Iteration   3: 982716.750 ops/s
[info] # Warmup Iteration   4: 1001545.271 ops/s
[info] # Warmup Iteration   5: 1004570.800 ops/s
[info] Iteration   1: 1002216.840 ops/s
[info]                  ·gc.alloc.rate:                   1170.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              1838.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2117.274 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1002981.838 ops/s
[info]                  ·gc.alloc.rate:                   1182.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              1855.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2115.565 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1004756.325 ops/s
[info]                  ·gc.alloc.rate:                   1156.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              1811.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1056.482 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1001487.472 ops/s
[info]                  ·gc.alloc.rate:                   1176.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              1849.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2120.388 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1001837.914 ops/s
[info]                  ·gc.alloc.rate:                   1163.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              1828.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2121.202 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   1002656.078 ±(99.9%) 5000.325 ops/s [Average]
[info]   (min, avg, max) = (1001487.472, 1002656.078, 1004756.325), stdev = 1298.568
[info]   CI (99.9%): [997655.753, 1007656.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1169.841 ±(99.9%) 39.713 MB/sec [Average]
[info]   (min, avg, max) = (1156.282, 1169.841, 1182.295), stdev = 10.313
[info]   CI (99.9%): [1130.128, 1209.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1836.599 ±(99.9%) 67.313 B/op [Average]
[info]   (min, avg, max) = (1811.425, 1836.599, 1855.418), stdev = 17.481
[info]   CI (99.9%): [1769.286, 1903.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.046 ±(99.9%) 0.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.098), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1213.880 ±(99.9%) 1161.315 MB/sec [Average]
[info]   (min, avg, max) = (674.381, 1213.880, 1349.894), stdev = 301.590
[info]   CI (99.9%): [52.565, 2375.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1906.182 ±(99.9%) 1829.065 B/op [Average]
[info]   (min, avg, max) = (1056.482, 1906.182, 2121.202), stdev = 475.002
[info]   CI (99.9%): [77.117, 3735.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.18% complete, ETA 00:40:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4429958.026 ops/s
[info] # Warmup Iteration   2: 8090865.217 ops/s
[info] # Warmup Iteration   3: 8831413.434 ops/s
[info] # Warmup Iteration   4: 8765662.274 ops/s
[info] # Warmup Iteration   5: 8859101.256 ops/s
[info] Iteration   1: 8863751.377 ops/s
[info]                  ·gc.alloc.rate:                   419.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              74.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.554 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90.839 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8843099.247 ops/s
[info]                  ·gc.alloc.rate:                   418.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              74.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.838 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120.098 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 8904690.499 ops/s
[info]                  ·gc.alloc.rate:      407.409 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8855909.627 ops/s
[info]                  ·gc.alloc.rate:                   430.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              76.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.829 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119.919 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8888466.259 ops/s
[info]                  ·gc.alloc.rate:      406.699 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   8871183.402 ±(99.9%) 96240.405 ops/s [Average]
[info]   (min, avg, max) = (8843099.247, 8871183.402, 8904690.499), stdev = 24993.327
[info]   CI (99.9%): [8774942.997, 8967423.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   416.636 ±(99.9%) 38.042 MB/sec [Average]
[info]   (min, avg, max) = (406.699, 416.636, 430.487), stdev = 9.879
[info]   CI (99.9%): [378.594, 454.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   73.915 ±(99.9%) 7.403 B/op [Average]
[info]   (min, avg, max) = (72.000, 73.915, 76.498), stdev = 1.923
[info]   CI (99.9%): [66.512, 81.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.527 ±(99.9%) 4.490 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.527, 2.613), stdev = 1.166
[info]   CI (99.9%): [≈ 0, 5.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.094 ±(99.9%) 0.798 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.094, 0.464), stdev = 0.207
[info]   CI (99.9%): [≈ 0, 0.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   372.244 ±(99.9%) 1333.429 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 372.244, 674.838), stdev = 346.287
[info]   CI (99.9%): [≈ 0, 1705.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   66.171 ±(99.9%) 237.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 66.171, 120.098), stdev = 61.568
[info]   CI (99.9%): [≈ 0, 303.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.41% complete, ETA 00:40:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1603.027 ops/s
[info] # Warmup Iteration   2: 330448.379 ops/s
[info] # Warmup Iteration   3: 492616.773 ops/s
[info] # Warmup Iteration   4: 505265.355 ops/s
[info] # Warmup Iteration   5: 503132.589 ops/s
[info] Iteration   1: 499142.563 ops/s
[info]                  ·gc.alloc.rate:                   2400.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              7566.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6387.557 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 505865.966 ops/s
[info]                  ·gc.alloc.rate:                   2458.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              7649.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2706.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8418.502 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 506978.016 ops/s
[info]                  ·gc.alloc.rate:                   2436.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              7563.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.926 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6308.326 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 504478.905 ops/s
[info]                  ·gc.alloc.rate:                   2477.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              7730.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712.384 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8463.683 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 500825.797 ops/s
[info]                  ·gc.alloc.rate:                   2436.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              7653.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.918 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6399.577 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   503458.250 ±(99.9%) 12884.209 ops/s [Average]
[info]   (min, avg, max) = (499142.563, 503458.250, 506978.016), stdev = 3345.988
[info]   CI (99.9%): [490574.041, 516342.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2441.769 ±(99.9%) 111.621 MB/sec [Average]
[info]   (min, avg, max) = (2400.083, 2441.769, 2477.354), stdev = 28.988
[info]   CI (99.9%): [2330.149, 2553.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7632.804 ±(99.9%) 268.248 B/op [Average]
[info]   (min, avg, max) = (7563.962, 7632.804, 7730.299), stdev = 69.663
[info]   CI (99.9%): [7364.556, 7901.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.208 ±(99.9%) 0.323 B/op [Average]
[info]   (min, avg, max) = (0.130, 0.208, 0.324), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2302.690 ±(99.9%) 1429.031 MB/sec [Average]
[info]   (min, avg, max) = (2026.211, 2302.690, 2712.384), stdev = 371.115
[info]   CI (99.9%): [873.659, 3731.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7195.529 ±(99.9%) 4380.843 B/op [Average]
[info]   (min, avg, max) = (6308.326, 7195.529, 8463.683), stdev = 1137.691
[info]   CI (99.9%): [2814.686, 11576.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.65% complete, ETA 00:39:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1063.344 ops/s
[info] # Warmup Iteration   2: 4235.968 ops/s
[info] # Warmup Iteration   3: 4384.711 ops/s
[info] # Warmup Iteration   4: 4584.649 ops/s
[info] # Warmup Iteration   5: 4569.179 ops/s
[info] Iteration   1: 4582.209 ops/s
[info]                  ·gc.alloc.rate:                   2153.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              739750.995 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 696457.636 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4591.142 ops/s
[info]                  ·gc.alloc.rate:                   2155.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              739036.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 695891.847 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 4582.901 ops/s
[info]                  ·gc.alloc.rate:                   2152.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              739144.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 697792.558 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4576.645 ops/s
[info]                  ·gc.alloc.rate:                   2162.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              743702.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.621 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 699394.237 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4512.784 ops/s
[info]                  ·gc.alloc.rate:                   2155.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              751738.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 710007.210 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   4569.136 ±(99.9%) 122.928 ops/s [Average]
[info]   (min, avg, max) = (4512.784, 4569.136, 4591.142), stdev = 31.924
[info]   CI (99.9%): [4446.208, 4692.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2155.738 ±(99.9%) 15.468 MB/sec [Average]
[info]   (min, avg, max) = (2152.128, 2155.738, 2162.455), stdev = 4.017
[info]   CI (99.9%): [2140.270, 2171.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   742674.393 ±(99.9%) 20865.761 B/op [Average]
[info]   (min, avg, max) = (739036.016, 742674.393, 751738.102), stdev = 5418.772
[info]   CI (99.9%): [721808.632, 763540.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.129 ±(99.9%) 0.262 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.129, 0.208), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   44.461 ±(99.9%) 90.197 B/op [Average]
[info]   (min, avg, max) = (7.158, 44.461, 71.483), stdev = 23.424
[info]   CI (99.9%): [≈ 0, 134.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2031.590 ±(99.9%) 12.494 MB/sec [Average]
[info]   (min, avg, max) = (2027.249, 2031.590, 2035.573), stdev = 3.245
[info]   CI (99.9%): [2019.097, 2044.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   699908.697 ±(99.9%) 22350.955 B/op [Average]
[info]   (min, avg, max) = (695891.847, 699908.697, 710007.210), stdev = 5804.472
[info]   CI (99.9%): [677557.743, 722259.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.88% complete, ETA 00:39:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 518.736 ops/s
[info] # Warmup Iteration   2: 5505.583 ops/s
[info] # Warmup Iteration   3: 6049.994 ops/s
[info] # Warmup Iteration   4: 6161.444 ops/s
[info] # Warmup Iteration   5: 6136.604 ops/s
[info] Iteration   1: 6142.953 ops/s
[info]                  ·gc.alloc.rate:                   2321.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              594926.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2698.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 691541.333 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 6163.204 ops/s
[info]                  ·gc.alloc.rate:                   2325.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              594004.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.533 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 517569.630 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6140.872 ops/s
[info]                  ·gc.alloc.rate:                   2318.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              594257.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 520191.333 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6133.295 ops/s
[info]                  ·gc.alloc.rate:                   2369.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              608167.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2709.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 695375.950 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6163.799 ops/s
[info]                  ·gc.alloc.rate:                   2354.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              601345.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 519780.739 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   6148.825 ±(99.9%) 53.421 ops/s [Average]
[info]   (min, avg, max) = (6133.295, 6148.825, 6163.799), stdev = 13.873
[info]   CI (99.9%): [6095.404, 6202.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2338.163 ±(99.9%) 88.148 MB/sec [Average]
[info]   (min, avg, max) = (2318.625, 2338.163, 2369.983), stdev = 22.892
[info]   CI (99.9%): [2250.015, 2426.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   598540.250 ±(99.9%) 23777.279 B/op [Average]
[info]   (min, avg, max) = (594004.059, 598540.250, 608167.068), stdev = 6174.884
[info]   CI (99.9%): [574762.971, 622317.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11.729 ±(99.9%) 22.572 B/op [Average]
[info]   (min, avg, max) = (5.315, 11.729, 21.365), stdev = 5.862
[info]   CI (99.9%): [≈ 0, 34.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2300.006 ±(99.9%) 1421.076 MB/sec [Average]
[info]   (min, avg, max) = (2026.533, 2300.006, 2709.830), stdev = 369.049
[info]   CI (99.9%): [878.930, 3721.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   588891.797 ±(99.9%) 367624.315 B/op [Average]
[info]   (min, avg, max) = (517569.630, 588891.797, 695375.950), stdev = 95470.867
[info]   CI (99.9%): [221267.483, 956516.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.12% complete, ETA 00:39:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35271.801 ops/s
[info] # Warmup Iteration   2: 46445.946 ops/s
[info] # Warmup Iteration   3: 46020.572 ops/s
[info] # Warmup Iteration   4: 47346.622 ops/s
[info] # Warmup Iteration   5: 47446.774 ops/s
[info] Iteration   1: 47608.199 ops/s
[info]                  ·gc.alloc.rate:                   786.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              25989.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.829 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22240.786 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 47445.520 ops/s
[info]                  ·gc.alloc.rate:                   804.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              26699.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.931 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44612.263 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 47554.916 ops/s
[info]                  ·gc.alloc.rate:                   789.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              26145.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22243.523 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 47535.397 ops/s
[info]                  ·gc.alloc.rate:                   788.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              26095.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22253.348 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 47148.077 ops/s
[info]                  ·gc.alloc.rate:                   778.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              25980.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22435.973 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   47458.422 ±(99.9%) 705.178 ops/s [Average]
[info]   (min, avg, max) = (47148.077, 47458.422, 47608.199), stdev = 183.132
[info]   CI (99.9%): [46753.244, 48163.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   789.490 ±(99.9%) 37.338 MB/sec [Average]
[info]   (min, avg, max) = (778.301, 789.490, 804.919), stdev = 9.697
[info]   CI (99.9%): [752.152, 826.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26181.908 ±(99.9%) 1146.827 B/op [Average]
[info]   (min, avg, max) = (25980.279, 26181.908, 26699.701), stdev = 297.827
[info]   CI (99.9%): [25035.081, 27328.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.828 ±(99.9%) 2.222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.828, 1.381), stdev = 0.577
[info]   CI (99.9%): [≈ 0, 3.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806.797 ±(99.9%) 1158.375 MB/sec [Average]
[info]   (min, avg, max) = (672.046, 806.797, 1344.931), stdev = 300.826
[info]   CI (99.9%): [≈ 0, 1965.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   26757.179 ±(99.9%) 38435.726 B/op [Average]
[info]   (min, avg, max) = (22240.786, 26757.179, 44612.263), stdev = 9981.636
[info]   CI (99.9%): [≈ 0, 65192.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.35% complete, ETA 00:38:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1541.041 ops/s
[info] # Warmup Iteration   2: 4177.031 ops/s
[info] # Warmup Iteration   3: 4554.838 ops/s
[info] # Warmup Iteration   4: 4654.221 ops/s
[info] # Warmup Iteration   5: 4664.625 ops/s
[info] Iteration   1: 4661.418 ops/s
[info]                  ·gc.alloc.rate:                   893.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              301717.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 454915.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4643.197 ops/s
[info]                  ·gc.alloc.rate:                   878.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              297906.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 228275.266 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 4685.518 ops/s
[info]                  ·gc.alloc.rate:                   878.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              295101.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 226292.858 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 4677.177 ops/s
[info]                  ·gc.alloc.rate:                   884.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              297623.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 226728.222 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4492.477 ops/s
[info]                  ·gc.alloc.rate:                   861.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              301682.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 472255.858 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4631.957 ±(99.9%) 306.620 ops/s [Average]
[info]   (min, avg, max) = (4492.477, 4631.957, 4685.518), stdev = 79.628
[info]   CI (99.9%): [4325.338, 4938.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   879.323 ±(99.9%) 46.071 MB/sec [Average]
[info]   (min, avg, max) = (861.029, 879.323, 893.859), stdev = 11.965
[info]   CI (99.9%): [833.252, 925.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   298806.261 ±(99.9%) 11007.199 B/op [Average]
[info]   (min, avg, max) = (295101.259, 298806.261, 301717.694), stdev = 2858.535
[info]   CI (99.9%): [287799.062, 309813.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5.607 ±(99.9%) 29.566 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.607, 14.054), stdev = 7.678
[info]   CI (99.9%): [≈ 0, 35.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   943.277 ±(99.9%) 1421.915 MB/sec [Average]
[info]   (min, avg, max) = (673.408, 943.277, 1347.860), stdev = 369.267
[info]   CI (99.9%): [≈ 0, 2365.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   321693.467 ±(99.9%) 499336.915 B/op [Average]
[info]   (min, avg, max) = (226292.858, 321693.467, 472255.858), stdev = 129676.211
[info]   CI (99.9%): [≈ 0, 821030.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.59% complete, ETA 00:38:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_aee5aee3/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 787.414 ops/s
[info] # Warmup Iteration   2: 4591.916 ops/s
[info] # Warmup Iteration   3: 4800.867 ops/s
[info] # Warmup Iteration   4: 4930.888 ops/s
[info] # Warmup Iteration   5: 4925.679 ops/s
[info] Iteration   1: 4921.377 ops/s
[info]                  ·gc.alloc.rate:                   589.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              188587.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     635.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 215701.585 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4924.883 ops/s
[info]                  ·gc.alloc.rate:                   594.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              189844.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 215419.998 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 4926.035 ops/s
[info]                  ·gc.alloc.rate:                   592.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              189167.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 215376.276 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 4926.396 ops/s
[info]                  ·gc.alloc.rate:                   596.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              190700.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 215119.792 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 4903.416 ops/s
[info]                  ·gc.alloc.rate:                   596.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              191397.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 216128.509 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   4920.421 ±(99.9%) 37.394 ops/s [Average]
[info]   (min, avg, max) = (4903.416, 4920.421, 4926.396), stdev = 9.711
[info]   CI (99.9%): [4883.027, 4957.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   593.808 ±(99.9%) 11.350 MB/sec [Average]
[info]   (min, avg, max) = (589.830, 593.808, 596.894), stdev = 2.948
[info]   CI (99.9%): [582.458, 605.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   189939.679 ±(99.9%) 4364.552 B/op [Average]
[info]   (min, avg, max) = (188587.558, 189939.679, 191397.942), stdev = 1133.460
[info]   CI (99.9%): [185575.128, 194304.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.419 ±(99.9%) 3.380 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.419, 1.989), stdev = 0.878
[info]   CI (99.9%): [≈ 0, 3.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   133.815 ±(99.9%) 1080.597 B/op [Average]
[info]   (min, avg, max) = (6.649, 133.815, 635.790), stdev = 280.627
[info]   CI (99.9%): [≈ 0, 1214.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   673.873 ±(99.9%) 2.130 MB/sec [Average]
[info]   (min, avg, max) = (673.326, 673.873, 674.632), stdev = 0.553
[info]   CI (99.9%): [671.744, 676.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   215549.232 ±(99.9%) 1478.626 B/op [Average]
[info]   (min, avg, max) = (215119.792, 215549.232, 216128.509), stdev = 383.994
[info]   CI (99.9%): [214070.606, 217027.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.82% complete, ETA 00:38:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5043.322 ops/s
[info] # Warmup Iteration   2: 6303.641 ops/s
[info] # Warmup Iteration   3: 6340.770 ops/s
[info] # Warmup Iteration   4: 6526.213 ops/s
[info] # Warmup Iteration   5: 6540.532 ops/s
[info] Iteration   1: 6561.545 ops/s
[info]                  ·gc.alloc.rate:      175.310 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056.393 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6560.208 ops/s
[info]                  ·gc.alloc.rate:      175.445 MB/sec
[info]                  ·gc.alloc.rate.norm: 42094.151 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6475.314 ops/s
[info]                  ·gc.alloc.rate:                   191.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              46480.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124333.236 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6572.286 ops/s
[info]                  ·gc.alloc.rate:      175.741 MB/sec
[info]                  ·gc.alloc.rate.norm: 42073.402 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6560.903 ops/s
[info]                  ·gc.alloc.rate:      176.008 MB/sec
[info]                  ·gc.alloc.rate.norm: 42218.813 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6546.051 ±(99.9%) 153.460 ops/s [Average]
[info]   (min, avg, max) = (6475.314, 6546.051, 6572.286), stdev = 39.853
[info]   CI (99.9%): [6392.592, 6699.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   178.744 ±(99.9%) 26.871 MB/sec [Average]
[info]   (min, avg, max) = (175.310, 178.744, 191.218), stdev = 6.978
[info]   CI (99.9%): [151.874, 205.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   42984.719 ±(99.9%) 7529.670 B/op [Average]
[info]   (min, avg, max) = (42056.393, 42984.719, 46480.836), stdev = 1955.431
[info]   CI (99.9%): [35455.048, 50514.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   102.299 ±(99.9%) 880.827 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.299, 511.496), stdev = 228.748
[info]   CI (99.9%): [≈ 0, 983.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   24866.647 ±(99.9%) 214109.331 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24866.647, 124333.236), stdev = 55603.513
[info]   CI (99.9%): [≈ 0, 238975.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.06% complete, ETA 00:38:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5070.990 ops/s
[info] # Warmup Iteration   2: 6293.348 ops/s
[info] # Warmup Iteration   3: 6302.095 ops/s
[info] # Warmup Iteration   4: 6580.527 ops/s
[info] # Warmup Iteration   5: 6580.595 ops/s
[info] Iteration   1: 6565.934 ops/s
[info]                  ·gc.alloc.rate:      128.650 MB/sec
[info]                  ·gc.alloc.rate.norm: 30842.767 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6559.872 ops/s
[info]                  ·gc.alloc.rate:                   134.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              32319.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 122741.406 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6581.868 ops/s
[info]                  ·gc.alloc.rate:      127.832 MB/sec
[info]                  ·gc.alloc.rate.norm: 30568.067 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6579.360 ops/s
[info]                  ·gc.alloc.rate:      127.781 MB/sec
[info]                  ·gc.alloc.rate.norm: 30568.077 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6571.837 ops/s
[info]                  ·gc.alloc.rate:      128.598 MB/sec
[info]                  ·gc.alloc.rate.norm: 30800.688 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6571.774 ±(99.9%) 35.250 ops/s [Average]
[info]   (min, avg, max) = (6559.872, 6571.774, 6581.868), stdev = 9.154
[info]   CI (99.9%): [6536.524, 6607.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   129.516 ±(99.9%) 11.307 MB/sec [Average]
[info]   (min, avg, max) = (127.781, 129.516, 134.717), stdev = 2.936
[info]   CI (99.9%): [118.209, 140.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   31019.734 ±(99.9%) 2839.816 B/op [Average]
[info]   (min, avg, max) = (30568.067, 31019.734, 32319.071), stdev = 737.491
[info]   CI (99.9%): [28179.918, 33859.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   102.326 ±(99.9%) 881.055 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.326, 511.628), stdev = 228.807
[info]   CI (99.9%): [≈ 0, 983.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   24548.281 ±(99.9%) 211368.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24548.281, 122741.406), stdev = 54891.626
[info]   CI (99.9%): [≈ 0, 235916.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.29% complete, ETA 00:37:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2832.161 ops/s
[info] # Warmup Iteration   2: 6794.972 ops/s
[info] # Warmup Iteration   3: 7476.157 ops/s
[info] # Warmup Iteration   4: 7480.655 ops/s
[info] # Warmup Iteration   5: 7470.508 ops/s
[info] Iteration   1: 7468.648 ops/s
[info]                  ·gc.alloc.rate:                   1423.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              300019.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 284214.483 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7402.460 ops/s
[info]                  ·gc.alloc.rate:                   1416.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              301147.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 430417.370 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7480.782 ops/s
[info]                  ·gc.alloc.rate:                   1417.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              298270.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 284319.217 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7408.615 ops/s
[info]                  ·gc.alloc.rate:                   1408.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              299297.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.308 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 287293.694 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7428.524 ops/s
[info]                  ·gc.alloc.rate:                   1407.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              298223.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 286770.718 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7437.806 ±(99.9%) 135.947 ops/s [Average]
[info]   (min, avg, max) = (7402.460, 7437.806, 7480.782), stdev = 35.305
[info]   CI (99.9%): [7301.859, 7573.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1414.795 ±(99.9%) 25.177 MB/sec [Average]
[info]   (min, avg, max) = (1407.740, 1414.795, 1423.457), stdev = 6.538
[info]   CI (99.9%): [1389.618, 1439.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   299391.824 ±(99.9%) 4757.395 B/op [Average]
[info]   (min, avg, max) = (298223.608, 299391.824, 301147.243), stdev = 1235.480
[info]   CI (99.9%): [294634.429, 304149.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.027 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.027, 0.058), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5.654 ±(99.9%) 16.065 B/op [Average]
[info]   (min, avg, max) = (0.888, 5.654, 12.368), stdev = 4.172
[info]   CI (99.9%): [≈ 0, 21.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1486.018 ±(99.9%) 1158.757 MB/sec [Average]
[info]   (min, avg, max) = (1348.469, 1486.018, 2024.319), stdev = 300.925
[info]   CI (99.9%): [327.261, 2644.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   314603.096 ±(99.9%) 249356.860 B/op [Average]
[info]   (min, avg, max) = (284214.483, 314603.096, 430417.370), stdev = 64757.185
[info]   CI (99.9%): [65246.237, 563959.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.53% complete, ETA 00:37:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.682 ops/s
[info] # Warmup Iteration   2: 15296.811 ops/s
[info] # Warmup Iteration   3: 16796.183 ops/s
[info] # Warmup Iteration   4: 16836.367 ops/s
[info] # Warmup Iteration   5: 16954.187 ops/s
[info] Iteration   1: 16854.361 ops/s
[info]                  ·gc.alloc.rate:                   406.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              37969.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.099 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62577.413 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16868.300 ops/s
[info]                  ·gc.alloc.rate:      388.828 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 16553.580 ops/s
[info]                  ·gc.alloc.rate:                   401.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              38144.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     398.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63711.268 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 16906.832 ops/s
[info]                  ·gc.alloc.rate:      389.700 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 16889.103 ops/s
[info]                  ·gc.alloc.rate:                   406.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              37855.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.461 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62381.985 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   16814.435 ±(99.9%) 566.756 ops/s [Average]
[info]   (min, avg, max) = (16553.580, 16814.435, 16906.832), stdev = 147.185
[info]   CI (99.9%): [16247.679, 17381.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   398.504 ±(99.9%) 33.539 MB/sec [Average]
[info]   (min, avg, max) = (388.828, 398.504, 406.587), stdev = 8.710
[info]   CI (99.9%): [364.965, 432.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   37305.681 ±(99.9%) 3627.046 B/op [Average]
[info]   (min, avg, max) = (36280.024, 37305.681, 38144.070), stdev = 941.932
[info]   CI (99.9%): [33678.635, 40932.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.839 ±(99.9%) 7.206 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.839, 4.187), stdev = 1.871
[info]   CI (99.9%): [≈ 0, 8.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   79.785 ±(99.9%) 685.143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 79.785, 398.074), stdev = 177.929
[info]   CI (99.9%): [≈ 0, 764.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   401.921 ±(99.9%) 1412.811 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.921, 670.099), stdev = 366.902
[info]   CI (99.9%): [≈ 0, 1814.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   37734.133 ±(99.9%) 132655.191 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37734.133, 63711.268), stdev = 34450.132
[info]   CI (99.9%): [≈ 0, 170389.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.817
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.76% complete, ETA 00:37:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4182.457 ops/s
[info] # Warmup Iteration   2: 13698.874 ops/s
[info] # Warmup Iteration   3: 14017.816 ops/s
[info] # Warmup Iteration   4: 14431.776 ops/s
[info] # Warmup Iteration   5: 14319.589 ops/s
[info] Iteration   1: 14250.877 ops/s
[info]                  ·gc.alloc.rate:      361.186 MB/sec
[info]                  ·gc.alloc.rate.norm: 39893.646 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 14295.979 ops/s
[info]                  ·gc.alloc.rate:                   374.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              41203.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74170.253 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14248.448 ops/s
[info]                  ·gc.alloc.rate:                   369.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              40771.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74420.055 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 14358.542 ops/s
[info]                  ·gc.alloc.rate:      359.491 MB/sec
[info]                  ·gc.alloc.rate.norm: 39406.874 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 14348.199 ops/s
[info]                  ·gc.alloc.rate:                   372.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              40822.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73948.356 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   14300.409 ±(99.9%) 200.422 ops/s [Average]
[info]   (min, avg, max) = (14248.448, 14300.409, 14358.542), stdev = 52.049
[info]   CI (99.9%): [14099.987, 14500.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   367.254 ±(99.9%) 25.351 MB/sec [Average]
[info]   (min, avg, max) = (359.491, 367.254, 374.239), stdev = 6.584
[info]   CI (99.9%): [341.903, 392.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   40419.464 ±(99.9%) 2857.297 B/op [Average]
[info]   (min, avg, max) = (39406.874, 40419.464, 41203.580), stdev = 742.031
[info]   CI (99.9%): [37562.167, 43276.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.321 ±(99.9%) 2.717 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.321, 1.583), stdev = 0.705
[info]   CI (99.9%): [≈ 0, 3.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   35.406 ±(99.9%) 299.947 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.406, 174.738), stdev = 77.895
[info]   CI (99.9%): [≈ 0, 335.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   404.344 ±(99.9%) 1421.327 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.344, 674.055), stdev = 369.114
[info]   CI (99.9%): [≈ 0, 1825.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   44507.733 ±(99.9%) 156452.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44507.733, 74420.055), stdev = 40630.158
[info]   CI (99.9%): [≈ 0, 200960.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 68.00% complete, ETA 00:37:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16038.339 ops/s
[info] # Warmup Iteration   2: 20889.898 ops/s
[info] # Warmup Iteration   3: 21369.384 ops/s
[info] # Warmup Iteration   4: 21343.577 ops/s
[info] # Warmup Iteration   5: 21323.584 ops/s
[info] Iteration   1: 21237.311 ops/s
[info]                  ·gc.alloc.rate:                   370.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              27477.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37914.612 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 21470.509 ops/s
[info]                  ·gc.alloc.rate:      359.793 MB/sec
[info]                  ·gc.alloc.rate.norm: 26376.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 21401.559 ops/s
[info]                  ·gc.alloc.rate:                   379.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              27881.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49523.981 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 21405.101 ops/s
[info]                  ·gc.alloc.rate:                   380.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              27999.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49519.354 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 21504.437 ops/s
[info]                  ·gc.alloc.rate:      360.350 MB/sec
[info]                  ·gc.alloc.rate.norm: 26376.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   21403.783 ±(99.9%) 395.996 ops/s [Average]
[info]   (min, avg, max) = (21237.311, 21403.783, 21504.437), stdev = 102.839
[info]   CI (99.9%): [21007.787, 21799.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   370.164 ±(99.9%) 38.347 MB/sec [Average]
[info]   (min, avg, max) = (359.793, 370.164, 380.761), stdev = 9.959
[info]   CI (99.9%): [331.817, 408.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   27222.168 ±(99.9%) 3066.039 B/op [Average]
[info]   (min, avg, max) = (26376.019, 27222.168, 27999.079), stdev = 796.241
[info]   CI (99.9%): [24156.129, 30288.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.592 ±(99.9%) 5.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.592, 2.960), stdev = 1.324
[info]   CI (99.9%): [≈ 0, 5.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   43.538 ±(99.9%) 374.876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.538, 217.690), stdev = 97.354
[info]   CI (99.9%): [≈ 0, 418.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   371.689 ±(99.9%) 1331.055 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.689, 673.416), stdev = 345.671
[info]   CI (99.9%): [≈ 0, 1702.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   27391.590 ±(99.9%) 97998.946 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27391.590, 49523.981), stdev = 25450.015
[info]   CI (99.9%): [≈ 0, 125390.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 68.24% complete, ETA 00:36:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 251.684 ops/s
[info] # Warmup Iteration   2: 2972.713 ops/s
[info] # Warmup Iteration   3: 3247.080 ops/s
[info] # Warmup Iteration   4: 3343.611 ops/s
[info] # Warmup Iteration   5: 3315.324 ops/s
[info] Iteration   1: 3380.676 ops/s
[info]                  ·gc.alloc.rate:                   2032.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              946314.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 940679.948 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3378.355 ops/s
[info]                  ·gc.alloc.rate:                   2025.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              943885.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 942756.404 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3376.386 ops/s
[info]                  ·gc.alloc.rate:                   2036.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              949487.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.920 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 944867.269 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3381.526 ops/s
[info]                  ·gc.alloc.rate:                   2051.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              954917.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.148 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 944431.295 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3382.037 ops/s
[info]                  ·gc.alloc.rate:                   2066.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              961840.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 945826.090 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   3379.796 ±(99.9%) 9.131 ops/s [Average]
[info]   (min, avg, max) = (3376.386, 3379.796, 3382.037), stdev = 2.371
[info]   CI (99.9%): [3370.665, 3388.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2042.716 ±(99.9%) 63.281 MB/sec [Average]
[info]   (min, avg, max) = (2025.859, 2042.716, 2066.727), stdev = 16.434
[info]   CI (99.9%): [1979.435, 2105.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   951288.976 ±(99.9%) 27721.342 B/op [Average]
[info]   (min, avg, max) = (943885.145, 951288.976, 961840.733), stdev = 7199.145
[info]   CI (99.9%): [923567.634, 979010.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.029, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13.567 ±(99.9%) 33.346 B/op [Average]
[info]   (min, avg, max) = (9.686, 13.567, 29.058), stdev = 8.660
[info]   CI (99.9%): [≈ 0, 46.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2026.441 ±(99.9%) 18.039 MB/sec [Average]
[info]   (min, avg, max) = (2020.385, 2026.441, 2032.316), stdev = 4.685
[info]   CI (99.9%): [2008.402, 2044.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   943712.201 ±(99.9%) 7803.593 B/op [Average]
[info]   (min, avg, max) = (940679.948, 943712.201, 945826.090), stdev = 2026.568
[info]   CI (99.9%): [935908.609, 951515.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.47% complete, ETA 00:36:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3472.026 ops/s
[info] # Warmup Iteration   2: 9051.702 ops/s
[info] # Warmup Iteration   3: 9426.738 ops/s
[info] # Warmup Iteration   4: 9263.673 ops/s
[info] # Warmup Iteration   5: 9330.567 ops/s
[info] Iteration   1: 9267.383 ops/s
[info]                  ·gc.alloc.rate:                   1689.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              286945.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 344019.810 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 9483.343 ops/s
[info]                  ·gc.alloc.rate:                   1717.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              285136.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224284.283 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 9424.257 ops/s
[info]                  ·gc.alloc.rate:                   1735.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              289789.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 338957.254 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 9483.110 ops/s
[info]                  ·gc.alloc.rate:                   1718.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              285161.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.986 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224726.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9471.103 ops/s
[info]                  ·gc.alloc.rate:                   1729.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              287409.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 337939.674 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   9425.839 ±(99.9%) 353.685 ops/s [Average]
[info]   (min, avg, max) = (9267.383, 9425.839, 9483.343), stdev = 91.851
[info]   CI (99.9%): [9072.154, 9779.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1717.954 ±(99.9%) 67.709 MB/sec [Average]
[info]   (min, avg, max) = (1689.385, 1717.954, 1735.013), stdev = 17.584
[info]   CI (99.9%): [1650.245, 1785.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   286888.564 ±(99.9%) 7391.780 B/op [Average]
[info]   (min, avg, max) = (285136.986, 286888.564, 289789.373), stdev = 1919.622
[info]   CI (99.9%): [279496.784, 294280.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9.763 ±(99.9%) 33.489 B/op [Average]
[info]   (min, avg, max) = (3.454, 9.763, 20.755), stdev = 8.697
[info]   CI (99.9%): [≈ 0, 43.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1758.691 ±(99.9%) 1427.370 MB/sec [Average]
[info]   (min, avg, max) = (1351.295, 1758.691, 2033.372), stdev = 370.683
[info]   CI (99.9%): [331.321, 3186.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   293985.492 ±(99.9%) 244394.104 B/op [Average]
[info]   (min, avg, max) = (224284.283, 293985.492, 344019.810), stdev = 63468.373
[info]   CI (99.9%): [49591.388, 538379.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.71% complete, ETA 00:36:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.859 ops/s
[info] # Warmup Iteration   2: 49153.218 ops/s
[info] # Warmup Iteration   3: 52798.947 ops/s
[info] # Warmup Iteration   4: 53065.191 ops/s
[info] # Warmup Iteration   5: 53218.405 ops/s
[info] Iteration   1: 52973.544 ops/s
[info]                  ·gc.alloc.rate:      495.084 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 53409.919 ops/s
[info]                  ·gc.alloc.rate:                   521.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              15369.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19767.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 53139.481 ops/s
[info]                  ·gc.alloc.rate:                   516.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              15295.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19846.989 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 53477.543 ops/s
[info]                  ·gc.alloc.rate:                   516.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              15194.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19721.204 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 53631.695 ops/s
[info]                  ·gc.alloc.rate:      501.282 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   53326.437 ±(99.9%) 1023.269 ops/s [Average]
[info]   (min, avg, max) = (52973.544, 53326.437, 53631.695), stdev = 265.740
[info]   CI (99.9%): [52303.167, 54349.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   510.135 ±(99.9%) 43.613 MB/sec [Average]
[info]   (min, avg, max) = (495.084, 510.135, 521.538), stdev = 11.326
[info]   CI (99.9%): [466.523, 553.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   15056.665 ±(99.9%) 1234.663 B/op [Average]
[info]   (min, avg, max) = (14712.008, 15056.665, 15369.103), stdev = 320.638
[info]   CI (99.9%): [13822.002, 16291.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.779 ±(99.9%) 6.666 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.876), stdev = 1.731
[info]   CI (99.9%): [≈ 0, 7.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   22.967 ±(99.9%) 196.429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.967, 114.219), stdev = 51.012
[info]   CI (99.9%): [≈ 0, 219.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   402.209 ±(99.9%) 1413.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.209, 670.779), stdev = 367.165
[info]   CI (99.9%): [≈ 0, 1816.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   11867.048 ±(99.9%) 41714.704 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11867.048, 19846.989), stdev = 10833.176
[info]   CI (99.9%): [≈ 0, 53581.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.94% complete, ETA 00:35:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_aee5aee3/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 11156.423 ops/s
[info] # Warmup Iteration   2: 39973.365 ops/s
[info] # Warmup Iteration   3: 39699.656 ops/s
[info] # Warmup Iteration   4: 39967.594 ops/s
[info] # Warmup Iteration   5: 40552.732 ops/s
[info] Iteration   1: 40675.548 ops/s
[info]                  ·gc.alloc.rate:                   603.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26045.574 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 40646.366 ops/s
[info]                  ·gc.alloc.rate:                   595.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              23066.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26077.051 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 40639.951 ops/s
[info]                  ·gc.alloc.rate:                   605.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              23441.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.514 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26080.900 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 40650.353 ops/s
[info]                  ·gc.alloc.rate:                   601.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              23278.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26074.485 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 40363.027 ops/s
[info]                  ·gc.alloc.rate:                   599.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              23397.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26259.204 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   40595.049 ±(99.9%) 502.145 ops/s [Average]
[info]   (min, avg, max) = (40363.027, 40595.049, 40675.548), stdev = 130.405
[info]   CI (99.9%): [40092.904, 41097.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   601.105 ±(99.9%) 14.133 MB/sec [Average]
[info]   (min, avg, max) = (595.691, 601.105, 605.359), stdev = 3.670
[info]   CI (99.9%): [586.972, 615.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23307.371 ±(99.9%) 568.136 B/op [Average]
[info]   (min, avg, max) = (23066.427, 23307.371, 23441.667), stdev = 147.543
[info]   CI (99.9%): [22739.235, 23875.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.279 ±(99.9%) 2.226 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.279, 1.311), stdev = 0.578
[info]   CI (99.9%): [≈ 0, 2.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10.794 ±(99.9%) 86.165 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.794, 50.744), stdev = 22.377
[info]   CI (99.9%): [≈ 0, 96.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   673.318 ±(99.9%) 0.832 MB/sec [Average]
[info]   (min, avg, max) = (672.956, 673.318, 673.514), stdev = 0.216
[info]   CI (99.9%): [672.486, 674.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   26107.443 ±(99.9%) 331.098 B/op [Average]
[info]   (min, avg, max) = (26045.574, 26107.443, 26259.204), stdev = 85.985
[info]   CI (99.9%): [25776.345, 26438.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 69.18% complete, ETA 00:35:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50803.456 ops/s
[info] # Warmup Iteration   2: 77916.187 ops/s
[info] # Warmup Iteration   3: 75337.415 ops/s
[info] # Warmup Iteration   4: 78685.464 ops/s
[info] # Warmup Iteration   5: 77413.345 ops/s
[info] Iteration   1: 78703.373 ops/s
[info]                  ·gc.alloc.rate:                   607.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              12136.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.278 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13481.197 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 79652.453 ops/s
[info]                  ·gc.alloc.rate:                   618.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              12217.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13293.607 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 77641.433 ops/s
[info]                  ·gc.alloc.rate:                   600.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              12164.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13638.388 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 80255.104 ops/s
[info]                  ·gc.alloc.rate:      603.301 MB/sec
[info]                  ·gc.alloc.rate.norm: 11832.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 80059.627 ops/s
[info]                  ·gc.alloc.rate:                   620.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              12201.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13213.273 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   79262.398 ±(99.9%) 4179.864 ops/s [Average]
[info]   (min, avg, max) = (77641.433, 79262.398, 80255.104), stdev = 1085.497
[info]   CI (99.9%): [75082.534, 83442.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   609.881 ±(99.9%) 35.170 MB/sec [Average]
[info]   (min, avg, max) = (600.119, 609.881, 620.553), stdev = 9.134
[info]   CI (99.9%): [574.711, 645.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   12110.308 ±(99.9%) 611.376 B/op [Average]
[info]   (min, avg, max) = (11832.005, 12110.308, 12217.707), stdev = 158.772
[info]   CI (99.9%): [11498.932, 12721.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.596 ±(99.9%) 5.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.596, 2.938), stdev = 1.309
[info]   CI (99.9%): [≈ 0, 5.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11.916 ±(99.9%) 100.794 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.916, 58.737), stdev = 26.176
[info]   CI (99.9%): [≈ 0, 112.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538.405 ±(99.9%) 1158.962 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.405, 674.278), stdev = 300.979
[info]   CI (99.9%): [≈ 0, 1697.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10725.293 ±(99.9%) 23095.785 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10725.293, 13638.388), stdev = 5997.902
[info]   CI (99.9%): [≈ 0, 33821.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.41% complete, ETA 00:35:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63199.589 ops/s
[info] # Warmup Iteration   2: 92066.301 ops/s
[info] # Warmup Iteration   3: 93618.892 ops/s
[info] # Warmup Iteration   4: 93126.932 ops/s
[info] # Warmup Iteration   5: 91898.600 ops/s
[info] Iteration   1: 89152.079 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 93560.993 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 93665.671 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 93694.052 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 93654.625 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   92745.484 ±(99.9%) 7737.466 ops/s [Average]
[info]   (min, avg, max) = (89152.079, 92745.484, 93694.052), stdev = 2009.395
[info]   CI (99.9%): [85008.018, 100482.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.005 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.65% complete, ETA 00:35:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 328.810 ops/s
[info] # Warmup Iteration   2: 6934.408 ops/s
[info] # Warmup Iteration   3: 7768.517 ops/s
[info] # Warmup Iteration   4: 7798.507 ops/s
[info] # Warmup Iteration   5: 7698.987 ops/s
[info] Iteration   1: 7789.228 ops/s
[info]                  ·gc.alloc.rate:                   2240.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              452800.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 409147.868 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7814.381 ops/s
[info]                  ·gc.alloc.rate:                   2241.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              451406.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 408442.890 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7816.122 ops/s
[info]                  ·gc.alloc.rate:                   2268.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              456714.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.532 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 408688.497 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7806.914 ops/s
[info]                  ·gc.alloc.rate:                   2278.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              459429.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 546510.990 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7692.843 ops/s
[info]                  ·gc.alloc.rate:                   2235.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              457486.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 416486.646 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   7783.897 ±(99.9%) 200.239 ops/s [Average]
[info]   (min, avg, max) = (7692.843, 7783.897, 7816.122), stdev = 52.001
[info]   CI (99.9%): [7583.658, 7984.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2252.853 ±(99.9%) 74.054 MB/sec [Average]
[info]   (min, avg, max) = (2235.564, 2252.853, 2278.698), stdev = 19.232
[info]   CI (99.9%): [2178.799, 2326.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   455567.579 ±(99.9%) 12899.094 B/op [Average]
[info]   (min, avg, max) = (451406.320, 455567.579, 459429.985), stdev = 3349.854
[info]   CI (99.9%): [442668.485, 468466.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.034 ±(99.9%) 13.508 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.034, 8.392), stdev = 3.508
[info]   CI (99.9%): [≈ 0, 18.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2165.598 ±(99.9%) 1173.265 MB/sec [Average]
[info]   (min, avg, max) = (2024.410, 2165.598, 2710.606), stdev = 304.693
[info]   CI (99.9%): [992.334, 3338.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   437855.378 ±(99.9%) 234245.998 B/op [Average]
[info]   (min, avg, max) = (408442.890, 437855.378, 546510.990), stdev = 60832.942
[info]   CI (99.9%): [203609.381, 672101.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.88% complete, ETA 00:34:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2993761.517 ops/s
[info] # Warmup Iteration   2: 7826540.375 ops/s
[info] # Warmup Iteration   3: 8453864.623 ops/s
[info] # Warmup Iteration   4: 8504609.557 ops/s
[info] # Warmup Iteration   5: 8472205.772 ops/s
[info] Iteration   1: 8503187.526 ops/s
[info]                  ·gc.alloc.rate:                   4611.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              853.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4072.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 753.946 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8494457.996 ops/s
[info]                  ·gc.alloc.rate:                   4635.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              859.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4758.858 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 881.856 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 8493399.112 ops/s
[info]                  ·gc.alloc.rate:                   4641.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              860.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4764.907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 882.905 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 8492379.455 ops/s
[info]                  ·gc.alloc.rate:                   4604.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              853.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4084.964 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 757.129 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 8549084.764 ops/s
[info]                  ·gc.alloc.rate:                   4665.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              859.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4769.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 878.204 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   8506501.771 ±(99.9%) 93143.955 ops/s [Average]
[info]   (min, avg, max) = (8492379.455, 8506501.771, 8549084.764), stdev = 24189.189
[info]   CI (99.9%): [8413357.816, 8599645.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   4631.801 ±(99.9%) 94.738 MB/sec [Average]
[info]   (min, avg, max) = (4604.069, 4631.801, 4665.456), stdev = 24.603
[info]   CI (99.9%): [4537.063, 4726.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   857.083 ±(99.9%) 12.355 B/op [Average]
[info]   (min, avg, max) = (853.343, 857.083, 860.121), stdev = 3.209
[info]   CI (99.9%): [844.727, 869.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.133 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.133, 0.167), stdev = 0.019
[info]   CI (99.9%): [0.062, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.025 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (0.023, 0.025, 0.031), stdev = 0.003
[info]   CI (99.9%): [0.011, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   4490.077 ±(99.9%) 1446.861 MB/sec [Average]
[info]   (min, avg, max) = (4072.077, 4490.077, 4769.580), stdev = 375.745
[info]   CI (99.9%): [3043.217, 5936.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   830.808 ±(99.9%) 264.708 B/op [Average]
[info]   (min, avg, max) = (753.946, 830.808, 882.905), stdev = 68.744
[info]   CI (99.9%): [566.101, 1095.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 70.12% complete, ETA 00:34:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.638 ops/s
[info] # Warmup Iteration   2: 35695943.364 ops/s
[info] # Warmup Iteration   3: 35160391.336 ops/s
[info] # Warmup Iteration   4: 36417209.544 ops/s
[info] # Warmup Iteration   5: 33498240.859 ops/s
[info] Iteration   1: 36406187.315 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 36383552.864 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 36413087.629 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 36445114.549 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 36477364.271 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   36425061.326 ±(99.9%) 140960.394 ops/s [Average]
[info]   (min, avg, max) = (36383552.864, 36425061.326, 36477364.271), stdev = 36606.967
[info]   CI (99.9%): [36284100.932, 36566021.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.35% complete, ETA 00:34:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2040194.387 ops/s
[info] # Warmup Iteration   2: 9990655.234 ops/s
[info] # Warmup Iteration   3: 10077653.439 ops/s
[info] # Warmup Iteration   4: 10090957.739 ops/s
[info] # Warmup Iteration   5: 10227055.721 ops/s
[info] Iteration   1: 10097538.100 ops/s
[info]                  ·gc.alloc.rate:                   3350.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              522.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3388.952 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 528.336 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 10249931.775 ops/s
[info]                  ·gc.alloc.rate:                   3389.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              520.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 416.959 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 10216566.492 ops/s
[info]                  ·gc.alloc.rate:                   3404.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              524.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3397.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 523.522 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 10264470.738 ops/s
[info]                  ·gc.alloc.rate:                   3422.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              524.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.950 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 521.514 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 10185557.332 ops/s
[info]                  ·gc.alloc.rate:                   3397.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              525.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 525.972 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   10202812.887 ±(99.9%) 255361.693 ops/s [Average]
[info]   (min, avg, max) = (10097538.100, 10202812.887, 10264470.738), stdev = 66316.621
[info]   CI (99.9%): [9947451.194, 10458174.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3392.888 ±(99.9%) 101.510 MB/sec [Average]
[info]   (min, avg, max) = (3350.962, 3392.888, 3422.098), stdev = 26.362
[info]   CI (99.9%): [3291.379, 3494.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   523.467 ±(99.9%) 7.502 B/op [Average]
[info]   (min, avg, max) = (520.531, 523.467, 525.090), stdev = 1.948
[info]   CI (99.9%): [515.964, 530.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.166), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.017 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.017, 0.026), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   3261.198 ±(99.9%) 1176.127 MB/sec [Average]
[info]   (min, avg, max) = (2714.904, 3261.198, 3403.394), stdev = 305.436
[info]   CI (99.9%): [2085.071, 4437.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   503.260 ±(99.9%) 186.033 B/op [Average]
[info]   (min, avg, max) = (416.959, 503.260, 528.336), stdev = 48.312
[info]   CI (99.9%): [317.227, 689.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.59% complete, ETA 00:34:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29419703.600 ops/s
[info] # Warmup Iteration   2: 44120652.971 ops/s
[info] # Warmup Iteration   3: 45907788.414 ops/s
[info] # Warmup Iteration   4: 45940398.188 ops/s
[info] # Warmup Iteration   5: 45924439.848 ops/s
[info] Iteration   1: 45900998.517 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 45940098.084 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 45915783.810 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 45894943.938 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 45938710.645 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   45918106.999 ±(99.9%) 80374.820 ops/s [Average]
[info]   (min, avg, max) = (45894943.938, 45918106.999, 45940098.084), stdev = 20873.086
[info]   CI (99.9%): [45837732.178, 45998481.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   0.034 ±(99.9%) 0.293 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.034, 0.170), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.82% complete, ETA 00:33:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13048182.210 ops/s
[info] # Warmup Iteration   2: 28791837.020 ops/s
[info] # Warmup Iteration   3: 29994654.244 ops/s
[info] # Warmup Iteration   4: 29705505.204 ops/s
[info] # Warmup Iteration   5: 29980371.631 ops/s
[info] Iteration   1: 29984347.458 ops/s
[info]                  ·gc.alloc.rate:                   628.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.419 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 30130267.663 ops/s
[info]                  ·gc.alloc.rate:                   625.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.213 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 29489614.078 ops/s
[info]                  ·gc.alloc.rate:                   624.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.262 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.976 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 30131442.398 ops/s
[info]                  ·gc.alloc.rate:                   629.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.177 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 30133295.366 ops/s
[info]                  ·gc.alloc.rate:                   637.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.175 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   29973793.393 ±(99.9%) 1070796.302 ops/s [Average]
[info]   (min, avg, max) = (29489614.078, 29973793.393, 30133295.366), stdev = 278082.399
[info]   CI (99.9%): [28902997.091, 31044589.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   629.035 ±(99.9%) 19.069 MB/sec [Average]
[info]   (min, avg, max) = (624.414, 629.035, 637.046), stdev = 4.952
[info]   CI (99.9%): [609.966, 648.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   33.032 ±(99.9%) 1.016 B/op [Average]
[info]   (min, avg, max) = (32.688, 33.032, 33.316), stdev = 0.264
[info]   CI (99.9%): [32.015, 34.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   0.549 ±(99.9%) 4.597 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.549, 2.685), stdev = 1.194
[info]   CI (99.9%): [≈ 0, 5.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.029 ±(99.9%) 0.241 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.141), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   673.966 ±(99.9%) 2.015 MB/sec [Average]
[info]   (min, avg, max) = (673.433, 673.966, 674.647), stdev = 0.523
[info]   CI (99.9%): [671.951, 675.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   35.392 ±(99.9%) 1.315 B/op [Average]
[info]   (min, avg, max) = (35.175, 35.392, 35.976), stdev = 0.341
[info]   CI (99.9%): [34.077, 36.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 71.06% complete, ETA 00:33:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2050410.603 ops/s
[info] # Warmup Iteration   2: 8514330.443 ops/s
[info] # Warmup Iteration   3: 8583730.680 ops/s
[info] # Warmup Iteration   4: 8621788.121 ops/s
[info] # Warmup Iteration   5: 8385697.991 ops/s
[info] Iteration   1: 8540721.861 ops/s
[info]                  ·gc.alloc.rate:                   3823.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3392.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 625.185 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 8583902.061 ops/s
[info]                  ·gc.alloc.rate:                   3870.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              709.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4078.168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 747.737 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 8608072.729 ops/s
[info]                  ·gc.alloc.rate:                   3853.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 621.876 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 8596455.490 ops/s
[info]                  ·gc.alloc.rate:                   3876.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              709.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4083.928 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 747.783 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8573864.382 ops/s
[info]                  ·gc.alloc.rate:                   3839.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 624.843 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   8580603.305 ±(99.9%) 99162.221 ops/s [Average]
[info]   (min, avg, max) = (8540721.861, 8580603.305, 8608072.729), stdev = 25752.114
[info]   CI (99.9%): [8481441.084, 8679765.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3852.607 ±(99.9%) 83.947 MB/sec [Average]
[info]   (min, avg, max) = (3823.388, 3852.607, 3876.139), stdev = 21.801
[info]   CI (99.9%): [3768.660, 3936.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   706.711 ±(99.9%) 10.471 B/op [Average]
[info]   (min, avg, max) = (704.595, 706.711, 709.736), stdev = 2.719
[info]   CI (99.9%): [696.240, 717.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.187), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.019 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.019, 0.034), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3671.762 ±(99.9%) 1438.804 MB/sec [Average]
[info]   (min, avg, max) = (3392.485, 3671.762, 4083.928), stdev = 373.653
[info]   CI (99.9%): [2232.958, 5110.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   673.485 ±(99.9%) 261.135 B/op [Average]
[info]   (min, avg, max) = (621.876, 673.485, 747.783), stdev = 67.816
[info]   CI (99.9%): [412.350, 934.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.29% complete, ETA 00:33:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6009743.005 ops/s
[info] # Warmup Iteration   2: 14614425.482 ops/s
[info] # Warmup Iteration   3: 15050006.783 ops/s
[info] # Warmup Iteration   4: 15140255.147 ops/s
[info] # Warmup Iteration   5: 14999307.886 ops/s
[info] Iteration   1: 15147177.371 ops/s
[info]                  ·gc.alloc.rate:                   1252.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              130.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.611 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 15127212.976 ops/s
[info]                  ·gc.alloc.rate:                   1267.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              131.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 140.245 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 15130198.813 ops/s
[info]                  ·gc.alloc.rate:                   1261.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              131.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.565 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 140.318 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 15061250.564 ops/s
[info]                  ·gc.alloc.rate:                   1263.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              132.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.132 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 14862608.169 ops/s
[info]                  ·gc.alloc.rate:                   1247.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              132.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143.123 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   15065689.579 ±(99.9%) 454997.998 ops/s [Average]
[info]   (min, avg, max) = (14862608.169, 15065689.579, 15147177.371), stdev = 118161.535
[info]   CI (99.9%): [14610691.580, 15520687.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1258.474 ±(99.9%) 30.701 MB/sec [Average]
[info]   (min, avg, max) = (1247.957, 1258.474, 1267.207), stdev = 7.973
[info]   CI (99.9%): [1227.773, 1289.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   131.493 ±(99.9%) 3.128 B/op [Average]
[info]   (min, avg, max) = (130.171, 131.493, 132.161), stdev = 0.812
[info]   CI (99.9%): [128.365, 134.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.007 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.007, 0.011), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1214.315 ±(99.9%) 1163.919 MB/sec [Average]
[info]   (min, avg, max) = (673.611, 1214.315, 1351.467), stdev = 302.266
[info]   CI (99.9%): [50.396, 2378.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   126.958 ±(99.9%) 122.670 B/op [Average]
[info]   (min, avg, max) = (70.009, 126.958, 143.123), stdev = 31.857
[info]   CI (99.9%): [4.289, 249.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.53% complete, ETA 00:32:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.618 ops/s
[info] # Warmup Iteration   2: 41301057.060 ops/s
[info] # Warmup Iteration   3: 43858167.978 ops/s
[info] # Warmup Iteration   4: 43802297.692 ops/s
[info] # Warmup Iteration   5: 43932745.482 ops/s
[info] Iteration   1: 44069642.292 ops/s
[info]                  ·gc.alloc.rate:                   909.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.303 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.980 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 43939835.798 ops/s
[info]                  ·gc.alloc.rate:                   931.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.492 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 44180155.196 ops/s
[info]                  ·gc.alloc.rate:                   912.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.993 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.897 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 44096211.346 ops/s
[info]                  ·gc.alloc.rate:                   918.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.942 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 43973723.879 ops/s
[info]                  ·gc.alloc.rate:                   939.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.304 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   44051913.702 ±(99.9%) 372327.451 ops/s [Average]
[info]   (min, avg, max) = (43939835.798, 44051913.702, 44180155.196), stdev = 96692.257
[info]   CI (99.9%): [43679586.252, 44424241.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   922.118 ±(99.9%) 48.846 MB/sec [Average]
[info]   (min, avg, max) = (909.472, 922.118, 939.059), stdev = 12.685
[info]   CI (99.9%): [873.272, 970.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   32.948 ±(99.9%) 1.989 B/op [Average]
[info]   (min, avg, max) = (32.486, 32.948, 33.615), stdev = 0.517
[info]   CI (99.9%): [30.959, 34.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   939.166 ±(99.9%) 1413.903 MB/sec [Average]
[info]   (min, avg, max) = (670.736, 939.166, 1341.492), stdev = 367.186
[info]   CI (99.9%): [≈ 0, 2353.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   33.578 ±(99.9%) 50.819 B/op [Average]
[info]   (min, avg, max) = (23.897, 33.578, 48.055), stdev = 13.197
[info]   CI (99.9%): [≈ 0, 84.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.76% complete, ETA 00:32:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2608866.042 ops/s
[info] # Warmup Iteration   2: 11841744.421 ops/s
[info] # Warmup Iteration   3: 12238825.492 ops/s
[info] # Warmup Iteration   4: 12362433.649 ops/s
[info] # Warmup Iteration   5: 12793998.709 ops/s
[info] Iteration   1: 12840131.764 ops/s
[info]                  ·gc.alloc.rate:                   2613.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2706.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 331.706 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 12812344.848 ops/s
[info]                  ·gc.alloc.rate:                   2589.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              318.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 249.616 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 12834628.118 ops/s
[info]                  ·gc.alloc.rate:                   2651.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              325.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.918 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 332.767 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 12819347.334 ops/s
[info]                  ·gc.alloc.rate:                   2648.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              325.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 333.507 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12874311.958 ops/s
[info]                  ·gc.alloc.rate:                   2659.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              325.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 332.425 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   12836152.804 ±(99.9%) 92806.118 ops/s [Average]
[info]   (min, avg, max) = (12812344.848, 12836152.804, 12874311.958), stdev = 24101.454
[info]   CI (99.9%): [12743346.686, 12928958.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2632.625 ±(99.9%) 115.220 MB/sec [Average]
[info]   (min, avg, max) = (2589.642, 2632.625, 2659.920), stdev = 29.922
[info]   CI (99.9%): [2517.405, 2747.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   322.799 ±(99.9%) 12.869 B/op [Average]
[info]   (min, avg, max) = (318.141, 322.799, 325.237), stdev = 3.342
[info]   CI (99.9%): [309.930, 335.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.010 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.010, 0.015), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2577.446 ±(99.9%) 1174.569 MB/sec [Average]
[info]   (min, avg, max) = (2031.856, 2577.446, 2718.711), stdev = 305.032
[info]   CI (99.9%): [1402.877, 3752.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   316.004 ±(99.9%) 142.927 B/op [Average]
[info]   (min, avg, max) = (249.616, 316.004, 333.507), stdev = 37.118
[info]   CI (99.9%): [173.077, 458.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 72.00% complete, ETA 00:32:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24164432.810 ops/s
[info] # Warmup Iteration   2: 46403448.449 ops/s
[info] # Warmup Iteration   3: 47565130.999 ops/s
[info] # Warmup Iteration   4: 47572600.934 ops/s
[info] # Warmup Iteration   5: 48265443.665 ops/s
[info] Iteration   1: 48227161.051 ops/s
[info]                  ·gc.alloc.rate:                   1022.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.133 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.937 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 48213087.854 ops/s
[info]                  ·gc.alloc.rate:                   1001.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.963 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 48064324.319 ops/s
[info]                  ·gc.alloc.rate:                   1014.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 46557567.628 ops/s
[info]                  ·gc.alloc.rate:                   962.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.744 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 47929559.784 ops/s
[info]                  ·gc.alloc.rate:                   1004.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.206 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   47798340.127 ±(99.9%) 2711483.388 ops/s [Average]
[info]   (min, avg, max) = (46557567.628, 47798340.127, 48227161.051), stdev = 704163.625
[info]   CI (99.9%): [45086856.739, 50509823.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1001.193 ±(99.9%) 89.143 MB/sec [Average]
[info]   (min, avg, max) = (962.601, 1001.193, 1022.878), stdev = 23.150
[info]   CI (99.9%): [912.051, 1090.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.968 ±(99.9%) 1.345 B/op [Average]
[info]   (min, avg, max) = (32.546, 32.968, 33.386), stdev = 0.349
[info]   CI (99.9%): [31.623, 34.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.002 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1076.602 ±(99.9%) 1419.760 MB/sec [Average]
[info]   (min, avg, max) = (672.672, 1076.602, 1346.133), stdev = 368.707
[info]   CI (99.9%): [≈ 0, 2496.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   35.382 ±(99.9%) 45.811 B/op [Average]
[info]   (min, avg, max) = (21.963, 35.382, 44.206), stdev = 11.897
[info]   CI (99.9%): [≈ 0, 81.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 72.24% complete, ETA 00:32:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29023540.358 ops/s
[info] # Warmup Iteration   2: 55090130.541 ops/s
[info] # Warmup Iteration   3: 55977154.202 ops/s
[info] # Warmup Iteration   4: 55891145.501 ops/s
[info] # Warmup Iteration   5: 55508941.335 ops/s
[info] Iteration   1: 56146340.117 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 55701030.914 ops/s
[info]                  ·gc.alloc.rate:      2.314 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.065 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 56129066.639 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 56181949.936 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 55667160.521 ops/s
[info]                  ·gc.alloc.rate:      1.505 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.043 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   55965109.626 ±(99.9%) 991601.276 ops/s [Average]
[info]   (min, avg, max) = (55667160.521, 55965109.626, 56181949.936), stdev = 257515.702
[info]   CI (99.9%): [54973508.349, 56956710.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.764 ±(99.9%) 4.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.764, 2.314), stdev = 1.084
[info]   CI (99.9%): [≈ 0, 4.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.022 ±(99.9%) 0.118 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.022, 0.065), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.47% complete, ETA 00:31:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13283390.626 ops/s
[info] # Warmup Iteration   2: 22196670.514 ops/s
[info] # Warmup Iteration   3: 22958230.419 ops/s
[info] # Warmup Iteration   4: 22934401.496 ops/s
[info] # Warmup Iteration   5: 23130289.378 ops/s
[info] Iteration   1: 23031517.863 ops/s
[info]                  ·gc.alloc.rate:                   967.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              66.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92.091 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 23102226.195 ops/s
[info]                  ·gc.alloc.rate:                   961.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              65.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.880 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 23096867.160 ops/s
[info]                  ·gc.alloc.rate:                   957.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              65.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.892 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 23054048.898 ops/s
[info]                  ·gc.alloc.rate:                   982.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              67.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91.955 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 23058427.339 ops/s
[info]                  ·gc.alloc.rate:                   952.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              65.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.967 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   23068617.491 ±(99.9%) 115840.629 ops/s [Average]
[info]   (min, avg, max) = (23031517.863, 23068617.491, 23102226.195), stdev = 30083.444
[info]   CI (99.9%): [22952776.862, 23184458.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   964.175 ±(99.9%) 44.990 MB/sec [Average]
[info]   (min, avg, max) = (952.454, 964.175, 982.591), stdev = 11.684
[info]   CI (99.9%): [919.185, 1009.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   65.787 ±(99.9%) 3.217 B/op [Average]
[info]   (min, avg, max) = (65.011, 65.787, 67.080), stdev = 0.835
[info]   CI (99.9%): [62.570, 69.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.002 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   942.919 ±(99.9%) 1420.990 MB/sec [Average]
[info]   (min, avg, max) = (673.395, 942.919, 1347.380), stdev = 369.027
[info]   CI (99.9%): [≈ 0, 2363.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   64.357 ±(99.9%) 97.250 B/op [Average]
[info]   (min, avg, max) = (45.880, 64.357, 92.091), stdev = 25.255
[info]   CI (99.9%): [≈ 0, 161.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.71% complete, ETA 00:31:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 658264.696 ops/s
[info] # Warmup Iteration   2: 2400391.862 ops/s
[info] # Warmup Iteration   3: 2491902.875 ops/s
[info] # Warmup Iteration   4: 2509622.858 ops/s
[info] # Warmup Iteration   5: 2512988.156 ops/s
[info] Iteration   1: 2498381.107 ops/s
[info]                  ·gc.alloc.rate:                   1836.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              1157.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1267.119 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2480734.420 ops/s
[info]                  ·gc.alloc.rate:                   1843.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              1169.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1278.239 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2515924.313 ops/s
[info]                  ·gc.alloc.rate:                   1843.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              1153.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.152 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 841.315 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2497668.752 ops/s
[info]                  ·gc.alloc.rate:                   1856.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              1169.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.183 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1273.716 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2501144.359 ops/s
[info]                  ·gc.alloc.rate:                   1872.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              1178.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1274.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2498770.590 ±(99.9%) 48192.857 ops/s [Average]
[info]   (min, avg, max) = (2480734.420, 2498770.590, 2515924.313), stdev = 12515.532
[info]   CI (99.9%): [2450577.733, 2546963.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1850.543 ±(99.9%) 54.353 MB/sec [Average]
[info]   (min, avg, max) = (1836.418, 1850.543, 1872.237), stdev = 14.115
[info]   CI (99.9%): [1796.191, 1904.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1165.637 ±(99.9%) 39.608 B/op [Average]
[info]   (min, avg, max) = (1153.183, 1165.637, 1178.323), stdev = 10.286
[info]   CI (99.9%): [1126.029, 1205.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.042 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.042, 0.079), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1883.329 ±(99.9%) 1158.640 MB/sec [Average]
[info]   (min, avg, max) = (1345.152, 1883.329, 2024.323), stdev = 300.895
[info]   CI (99.9%): [724.689, 3041.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1186.886 ±(99.9%) 744.025 B/op [Average]
[info]   (min, avg, max) = (841.315, 1186.886, 1278.239), stdev = 193.221
[info]   CI (99.9%): [442.861, 1930.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.94% complete, ETA 00:31:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122921.880 ops/s
[info] # Warmup Iteration   2: 163074.746 ops/s
[info] # Warmup Iteration   3: 164039.800 ops/s
[info] # Warmup Iteration   4: 169292.454 ops/s
[info] # Warmup Iteration   5: 168655.751 ops/s
[info] Iteration   1: 168291.389 ops/s
[info]                  ·gc.alloc.rate:                   3221.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              30123.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3382.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31631.275 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 168905.374 ops/s
[info]                  ·gc.alloc.rate:                   3206.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              29872.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25259.301 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 168659.132 ops/s
[info]                  ·gc.alloc.rate:                   3228.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              30130.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3393.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31671.052 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 168320.507 ops/s
[info]                  ·gc.alloc.rate:                   3222.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              30138.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31779.183 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 168659.362 ops/s
[info]                  ·gc.alloc.rate:                   3202.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              29884.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720.505 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25390.130 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   168567.153 ±(99.9%) 997.153 ops/s [Average]
[info]   (min, avg, max) = (168291.389, 168567.153, 168905.374), stdev = 258.958
[info]   CI (99.9%): [167569.999, 169564.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3216.153 ±(99.9%) 43.597 MB/sec [Average]
[info]   (min, avg, max) = (3202.118, 3216.153, 3228.407), stdev = 11.322
[info]   CI (99.9%): [3172.555, 3259.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   30030.153 ±(99.9%) 532.558 B/op [Average]
[info]   (min, avg, max) = (29872.704, 30030.153, 30138.747), stdev = 138.304
[info]   CI (99.9%): [29497.596, 30562.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.700 ±(99.9%) 0.667 B/op [Average]
[info]   (min, avg, max) = (0.583, 0.700, 0.970), stdev = 0.173
[info]   CI (99.9%): [0.033, 1.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   3121.130 ±(99.9%) 1424.934 MB/sec [Average]
[info]   (min, avg, max) = (2711.145, 3121.130, 3398.188), stdev = 370.051
[info]   CI (99.9%): [1696.196, 4546.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   29146.188 ±(99.9%) 13435.812 B/op [Average]
[info]   (min, avg, max) = (25259.301, 29146.188, 31779.183), stdev = 3489.238
[info]   CI (99.9%): [15710.376, 42582.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.18% complete, ETA 00:31:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3095.382 ops/s
[info] # Warmup Iteration   2: 27098.077 ops/s
[info] # Warmup Iteration   3: 32785.050 ops/s
[info] # Warmup Iteration   4: 32952.770 ops/s
[info] # Warmup Iteration   5: 32848.792 ops/s
[info] Iteration   1: 33238.031 ops/s
[info]                  ·gc.alloc.rate:                   2474.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              117166.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95931.536 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 33176.962 ops/s
[info]                  ·gc.alloc.rate:                   2471.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              117224.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128310.968 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 33110.563 ops/s
[info]                  ·gc.alloc.rate:                   2491.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              118468.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128784.434 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 33071.000 ops/s
[info]                  ·gc.alloc.rate:                   2489.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              118443.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96799.190 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 32423.451 ops/s
[info]                  ·gc.alloc.rate:                   2468.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              119815.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131823.754 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   33004.002 ±(99.9%) 1273.579 ops/s [Average]
[info]   (min, avg, max) = (32423.451, 33004.002, 33238.031), stdev = 330.745
[info]   CI (99.9%): [31730.422, 34277.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2478.979 ±(99.9%) 41.532 MB/sec [Average]
[info]   (min, avg, max) = (2468.280, 2478.979, 2491.831), stdev = 10.786
[info]   CI (99.9%): [2437.447, 2520.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   118223.438 ±(99.9%) 4199.503 B/op [Average]
[info]   (min, avg, max) = (117166.418, 118223.438, 119815.144), stdev = 1090.598
[info]   CI (99.9%): [114023.935, 122422.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.779 ±(99.9%) 3.180 B/op [Average]
[info]   (min, avg, max) = (1.979, 2.779, 3.943), stdev = 0.826
[info]   CI (99.9%): [≈ 0, 5.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2437.943 ±(99.9%) 1433.872 MB/sec [Average]
[info]   (min, avg, max) = (2025.782, 2437.943, 2715.666), stdev = 372.372
[info]   CI (99.9%): [1004.071, 3871.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   116329.976 ±(99.9%) 70380.007 B/op [Average]
[info]   (min, avg, max) = (95931.536, 116329.976, 131823.754), stdev = 18277.464
[info]   CI (99.9%): [45949.969, 186709.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.41% complete, ETA 00:30:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24805.500 ops/s
[info] # Warmup Iteration   2: 118998.766 ops/s
[info] # Warmup Iteration   3: 121051.238 ops/s
[info] # Warmup Iteration   4: 123959.307 ops/s
[info] # Warmup Iteration   5: 123565.470 ops/s
[info] Iteration   1: 123579.379 ops/s
[info]                  ·gc.alloc.rate:                   1008.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              12842.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.950 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8585.428 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 122645.544 ops/s
[info]                  ·gc.alloc.rate:                   1024.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              13147.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17301.598 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 123539.051 ops/s
[info]                  ·gc.alloc.rate:                   1011.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              12886.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8588.277 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 118876.748 ops/s
[info]                  ·gc.alloc.rate:                   990.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              13111.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17858.723 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 123394.921 ops/s
[info]                  ·gc.alloc.rate:                   1018.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              12990.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8606.794 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   122407.128 ±(99.9%) 7737.682 ops/s [Average]
[info]   (min, avg, max) = (118876.748, 122407.128, 123579.379), stdev = 2009.451
[info]   CI (99.9%): [114669.447, 130144.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1010.568 ±(99.9%) 49.543 MB/sec [Average]
[info]   (min, avg, max) = (990.458, 1010.568, 1024.408), stdev = 12.866
[info]   CI (99.9%): [961.025, 1060.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12995.700 ±(99.9%) 515.925 B/op [Average]
[info]   (min, avg, max) = (12842.319, 12995.700, 13147.017), stdev = 133.984
[info]   CI (99.9%): [12479.775, 13511.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.162 ±(99.9%) 0.924 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.162, 0.534), stdev = 0.240
[info]   CI (99.9%): [≈ 0, 1.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   943.985 ±(99.9%) 1422.202 MB/sec [Average]
[info]   (min, avg, max) = (673.950, 943.985, 1349.026), stdev = 369.341
[info]   CI (99.9%): [≈ 0, 2366.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12188.164 ±(99.9%) 18968.823 B/op [Average]
[info]   (min, avg, max) = (8585.428, 12188.164, 17858.723), stdev = 4926.143
[info]   CI (99.9%): [≈ 0, 31156.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.65% complete, ETA 00:30:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 299726.474 ops/s
[info] # Warmup Iteration   2: 398062.318 ops/s
[info] # Warmup Iteration   3: 407735.325 ops/s
[info] # Warmup Iteration   4: 411871.419 ops/s
[info] # Warmup Iteration   5: 406593.482 ops/s
[info] Iteration   1: 411186.268 ops/s
[info]                  ·gc.alloc.rate:                   1625.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              6223.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5147.777 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 406977.796 ops/s
[info]                  ·gc.alloc.rate:                   1635.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              6322.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7808.123 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 413509.815 ops/s
[info]                  ·gc.alloc.rate:                   1645.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              6264.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5130.335 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 411262.918 ops/s
[info]                  ·gc.alloc.rate:                   1650.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              6318.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5164.708 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 410800.082 ops/s
[info]                  ·gc.alloc.rate:                   1661.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              6366.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7764.744 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   410747.376 ±(99.9%) 9092.330 ops/s [Average]
[info]   (min, avg, max) = (406977.796, 410747.376, 413509.815), stdev = 2361.249
[info]   CI (99.9%): [401655.046, 419839.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1643.827 ±(99.9%) 53.256 MB/sec [Average]
[info]   (min, avg, max) = (1625.870, 1643.827, 1661.595), stdev = 13.830
[info]   CI (99.9%): [1590.571, 1697.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6299.226 ±(99.9%) 214.077 B/op [Average]
[info]   (min, avg, max) = (6223.848, 6299.226, 6366.902), stdev = 55.595
[info]   CI (99.9%): [6085.149, 6513.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.334 ±(99.9%) 0.660 B/op [Average]
[info]   (min, avg, max) = (0.159, 0.334, 0.555), stdev = 0.171
[info]   CI (99.9%): [≈ 0, 0.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1617.533 ±(99.9%) 1424.852 MB/sec [Average]
[info]   (min, avg, max) = (1344.766, 1617.533, 2026.396), stdev = 370.030
[info]   CI (99.9%): [192.681, 3042.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6203.137 ±(99.9%) 5566.018 B/op [Average]
[info]   (min, avg, max) = (5130.335, 6203.137, 7808.123), stdev = 1445.477
[info]   CI (99.9%): [637.119, 11769.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.88% complete, ETA 00:30:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 327171.218 ops/s
[info] # Warmup Iteration   2: 445359.002 ops/s
[info] # Warmup Iteration   3: 453857.061 ops/s
[info] # Warmup Iteration   4: 446197.819 ops/s
[info] # Warmup Iteration   5: 444650.160 ops/s
[info] Iteration   1: 456734.897 ops/s
[info]                  ·gc.alloc.rate:                   1289.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              4443.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2318.274 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 457297.113 ops/s
[info]                  ·gc.alloc.rate:                   1309.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              4508.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4631.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 455802.627 ops/s
[info]                  ·gc.alloc.rate:                   1301.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              4493.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4647.248 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 457448.320 ops/s
[info]                  ·gc.alloc.rate:                   1317.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              4531.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4634.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 451719.487 ops/s
[info]                  ·gc.alloc.rate:                   1287.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              4487.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4697.618 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   455800.489 ±(99.9%) 9129.140 ops/s [Average]
[info]   (min, avg, max) = (451719.487, 455800.489, 457448.320), stdev = 2370.809
[info]   CI (99.9%): [446671.349, 464929.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1301.028 ±(99.9%) 49.378 MB/sec [Average]
[info]   (min, avg, max) = (1287.573, 1301.028, 1317.114), stdev = 12.823
[info]   CI (99.9%): [1251.650, 1350.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4492.869 ±(99.9%) 124.409 B/op [Average]
[info]   (min, avg, max) = (4443.784, 4492.869, 4531.412), stdev = 32.309
[info]   CI (99.9%): [4368.460, 4617.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.125), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.158 ±(99.9%) 0.837 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.430), stdev = 0.217
[info]   CI (99.9%): [≈ 0, 0.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1211.782 ±(99.9%) 1160.694 MB/sec [Average]
[info]   (min, avg, max) = (672.573, 1211.782, 1347.919), stdev = 301.428
[info]   CI (99.9%): [51.088, 2372.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   4185.689 ±(99.9%) 4021.068 B/op [Average]
[info]   (min, avg, max) = (2318.274, 4185.689, 4697.618), stdev = 1044.259
[info]   CI (99.9%): [164.621, 8206.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.12% complete, ETA 00:29:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8673.232 ops/s
[info] # Warmup Iteration   2: 56622.300 ops/s
[info] # Warmup Iteration   3: 60450.664 ops/s
[info] # Warmup Iteration   4: 60831.013 ops/s
[info] # Warmup Iteration   5: 61189.859 ops/s
[info] Iteration   1: 61043.298 ops/s
[info]                  ·gc.alloc.rate:                   1430.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              36883.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.162 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34761.323 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 61065.542 ops/s
[info]                  ·gc.alloc.rate:                   1421.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              36647.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34767.109 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 60983.396 ops/s
[info]                  ·gc.alloc.rate:                   1434.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              37027.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34828.188 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 61124.909 ops/s
[info]                  ·gc.alloc.rate:                   1438.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              37025.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34783.305 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 61301.311 ops/s
[info]                  ·gc.alloc.rate:                   1431.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              36753.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34717.662 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   61103.691 ±(99.9%) 467.966 ops/s [Average]
[info]   (min, avg, max) = (60983.396, 61103.691, 61301.311), stdev = 121.529
[info]   CI (99.9%): [60635.726, 61571.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1431.271 ±(99.9%) 23.341 MB/sec [Average]
[info]   (min, avg, max) = (1421.787, 1431.271, 1438.009), stdev = 6.062
[info]   CI (99.9%): [1407.930, 1454.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36867.418 ±(99.9%) 644.620 B/op [Average]
[info]   (min, avg, max) = (36647.346, 36867.418, 37027.310), stdev = 167.406
[info]   CI (99.9%): [36222.798, 37512.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.751 ±(99.9%) 1.848 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.751, 1.073), stdev = 0.480
[info]   CI (99.9%): [≈ 0, 2.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1349.905 ±(99.9%) 6.341 MB/sec [Average]
[info]   (min, avg, max) = (1348.162, 1349.905, 1352.213), stdev = 1.647
[info]   CI (99.9%): [1343.564, 1356.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   34771.517 ±(99.9%) 153.716 B/op [Average]
[info]   (min, avg, max) = (34717.662, 34771.517, 34828.188), stdev = 39.920
[info]   CI (99.9%): [34617.801, 34925.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.35% complete, ETA 00:29:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 155482.142 ops/s
[info] # Warmup Iteration   2: 300808.861 ops/s
[info] # Warmup Iteration   3: 308810.115 ops/s
[info] # Warmup Iteration   4: 311930.710 ops/s
[info] # Warmup Iteration   5: 311531.006 ops/s
[info] Iteration   1: 312399.505 ops/s
[info]                  ·gc.alloc.rate:                   2165.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              10911.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10170.786 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 309580.232 ops/s
[info]                  ·gc.alloc.rate:                   2160.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              10982.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10279.194 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 313008.082 ops/s
[info]                  ·gc.alloc.rate:                   2171.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              10917.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10183.975 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 312882.788 ops/s
[info]                  ·gc.alloc.rate:                   2197.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              11054.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10206.407 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 310632.423 ops/s
[info]                  ·gc.alloc.rate:                   2208.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              11190.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13727.732 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   311700.606 ±(99.9%) 5850.099 ops/s [Average]
[info]   (min, avg, max) = (309580.232, 311700.606, 313008.082), stdev = 1519.252
[info]   CI (99.9%): [305850.508, 317550.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2180.684 ±(99.9%) 81.054 MB/sec [Average]
[info]   (min, avg, max) = (2160.192, 2180.684, 2208.173), stdev = 21.050
[info]   CI (99.9%): [2099.630, 2261.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   11011.398 ±(99.9%) 446.171 B/op [Average]
[info]   (min, avg, max) = (10911.227, 11011.398, 11190.696), stdev = 115.869
[info]   CI (99.9%): [10565.226, 11457.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.358 ±(99.9%) 0.617 B/op [Average]
[info]   (min, avg, max) = (0.209, 0.358, 0.529), stdev = 0.160
[info]   CI (99.9%): [≈ 0, 0.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2160.823 ±(99.9%) 1179.634 MB/sec [Average]
[info]   (min, avg, max) = (2018.517, 2160.823, 2708.787), stdev = 306.347
[info]   CI (99.9%): [981.188, 3340.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10913.619 ±(99.9%) 6059.737 B/op [Average]
[info]   (min, avg, max) = (10170.786, 10913.619, 13727.732), stdev = 1573.695
[info]   CI (99.9%): [4853.882, 16973.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.59% complete, ETA 00:29:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154487.124 ops/s
[info] # Warmup Iteration   2: 460375.685 ops/s
[info] # Warmup Iteration   3: 485841.018 ops/s
[info] # Warmup Iteration   4: 486806.366 ops/s
[info] # Warmup Iteration   5: 484853.916 ops/s
[info] Iteration   1: 484900.295 ops/s
[info]                  ·gc.alloc.rate:                   1276.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              4142.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4376.121 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 480607.815 ops/s
[info]                  ·gc.alloc.rate:                   1255.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              4110.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4416.157 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 476300.531 ops/s
[info]                  ·gc.alloc.rate:                   1254.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4459.543 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 485934.067 ops/s
[info]                  ·gc.alloc.rate:                   1256.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              4068.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.862 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4374.317 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 486670.982 ops/s
[info]                  ·gc.alloc.rate:                   1242.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              4019.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.279 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2184.394 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   482882.738 ±(99.9%) 16810.239 ops/s [Average]
[info]   (min, avg, max) = (476300.531, 482882.738, 486670.982), stdev = 4365.566
[info]   CI (99.9%): [466072.499, 499692.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1256.932 ±(99.9%) 46.335 MB/sec [Average]
[info]   (min, avg, max) = (1242.667, 1256.932, 1276.065), stdev = 12.033
[info]   CI (99.9%): [1210.597, 1303.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4097.082 ±(99.9%) 204.780 B/op [Average]
[info]   (min, avg, max) = (4019.784, 4097.082, 4144.503), stdev = 53.181
[info]   CI (99.9%): [3892.302, 4301.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.096 ±(99.9%) 0.443 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.275), stdev = 0.115
[info]   CI (99.9%): [≈ 0, 0.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1214.497 ±(99.9%) 1160.716 MB/sec [Average]
[info]   (min, avg, max) = (675.279, 1214.497, 1350.862), stdev = 301.434
[info]   CI (99.9%): [53.781, 2375.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3962.106 ±(99.9%) 3829.015 B/op [Average]
[info]   (min, avg, max) = (2184.394, 3962.106, 4459.543), stdev = 994.383
[info]   CI (99.9%): [133.091, 7791.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.82% complete, ETA 00:29:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 917910.325 ops/s
[info] # Warmup Iteration   2: 1305096.478 ops/s
[info] # Warmup Iteration   3: 1324409.291 ops/s
[info] # Warmup Iteration   4: 1331036.838 ops/s
[info] # Warmup Iteration   5: 1310705.901 ops/s
[info] Iteration   1: 1310931.700 ops/s
[info]                  ·gc.alloc.rate:                   2638.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              3168.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.579 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3245.370 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1333727.859 ops/s
[info]                  ·gc.alloc.rate:                   2682.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              3166.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2395.583 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1324438.810 ops/s
[info]                  ·gc.alloc.rate:                   2692.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              3199.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3221.896 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1326789.968 ops/s
[info]                  ·gc.alloc.rate:                   2696.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              3199.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.155 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3220.061 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1292920.101 ops/s
[info]                  ·gc.alloc.rate:                   2631.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              3203.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3308.258 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1317761.688 ±(99.9%) 62231.862 ops/s [Average]
[info]   (min, avg, max) = (1292920.101, 1317761.688, 1333727.859), stdev = 16161.417
[info]   CI (99.9%): [1255529.826, 1379993.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2668.366 ±(99.9%) 119.219 MB/sec [Average]
[info]   (min, avg, max) = (2631.623, 2668.366, 2696.407), stdev = 30.961
[info]   CI (99.9%): [2549.147, 2787.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3187.492 ±(99.9%) 71.474 B/op [Average]
[info]   (min, avg, max) = (3166.287, 3187.492, 3203.957), stdev = 18.562
[info]   CI (99.9%): [3116.018, 3258.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.125), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.099 ±(99.9%) 0.191 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.099, 0.150), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2574.984 ±(99.9%) 1173.854 MB/sec [Average]
[info]   (min, avg, max) = (2029.747, 2574.984, 2717.292), stdev = 304.846
[info]   CI (99.9%): [1401.131, 3748.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3078.234 ±(99.9%) 1475.872 B/op [Average]
[info]   (min, avg, max) = (2395.583, 3078.234, 3308.258), stdev = 383.279
[info]   CI (99.9%): [1602.362, 4554.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.06% complete, ETA 00:28:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34283.931 ops/s
[info] # Warmup Iteration   2: 103187.967 ops/s
[info] # Warmup Iteration   3: 104703.280 ops/s
[info] # Warmup Iteration   4: 106380.627 ops/s
[info] # Warmup Iteration   5: 106972.096 ops/s
[info] Iteration   1: 106934.229 ops/s
[info]                  ·gc.alloc.rate:                   3585.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              52765.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3391.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49903.245 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 105223.706 ops/s
[info]                  ·gc.alloc.rate:                   3530.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              52798.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3396.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50793.311 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 107587.674 ops/s
[info]                  ·gc.alloc.rate:                   3607.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              52775.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49736.371 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 107138.007 ops/s
[info]                  ·gc.alloc.rate:                   3592.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              52791.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3401.778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49982.981 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 105948.023 ops/s
[info]                  ·gc.alloc.rate:                   3554.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              52809.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50566.928 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   106566.328 ±(99.9%) 3698.548 ops/s [Average]
[info]   (min, avg, max) = (105223.706, 106566.328, 107587.674), stdev = 960.501
[info]   CI (99.9%): [102867.779, 110264.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3574.291 ±(99.9%) 120.154 MB/sec [Average]
[info]   (min, avg, max) = (3530.639, 3574.291, 3607.852), stdev = 31.204
[info]   CI (99.9%): [3454.137, 3694.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52788.091 ±(99.9%) 67.990 B/op [Average]
[info]   (min, avg, max) = (52765.489, 52788.091, 52809.726), stdev = 17.657
[info]   CI (99.9%): [52720.101, 52856.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.292 ±(99.9%) 1.566 B/op [Average]
[info]   (min, avg, max) = (0.919, 1.292, 1.868), stdev = 0.407
[info]   CI (99.9%): [≈ 0, 2.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3398.605 ±(99.9%) 19.107 MB/sec [Average]
[info]   (min, avg, max) = (3391.031, 3398.605, 3403.576), stdev = 4.962
[info]   CI (99.9%): [3379.498, 3417.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   50196.567 ±(99.9%) 1761.126 B/op [Average]
[info]   (min, avg, max) = (49736.371, 50196.567, 50793.311), stdev = 457.359
[info]   CI (99.9%): [48435.441, 51957.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.29% complete, ETA 00:28:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 164901.384 ops/s
[info] # Warmup Iteration   2: 338946.029 ops/s
[info] # Warmup Iteration   3: 344171.530 ops/s
[info] # Warmup Iteration   4: 343970.948 ops/s
[info] # Warmup Iteration   5: 344568.879 ops/s
[info] Iteration   1: 343915.968 ops/s
[info]                  ·gc.alloc.rate:                   549.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              2513.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3083.635 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 345345.450 ops/s
[info]                  ·gc.alloc.rate:                   550.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              2508.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3072.403 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 345589.947 ops/s
[info]                  ·gc.alloc.rate:      535.756 MB/sec
[info]                  ·gc.alloc.rate.norm: 2440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 345176.766 ops/s
[info]                  ·gc.alloc.rate:                   559.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              2552.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3073.827 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 332397.877 ops/s
[info]                  ·gc.alloc.rate:                   529.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              2506.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3191.907 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   342485.202 ±(99.9%) 21856.110 ops/s [Average]
[info]   (min, avg, max) = (332397.877, 342485.202, 345589.947), stdev = 5675.962
[info]   CI (99.9%): [320629.091, 364341.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   544.921 ±(99.9%) 46.894 MB/sec [Average]
[info]   (min, avg, max) = (529.456, 544.921, 559.818), stdev = 12.178
[info]   CI (99.9%): [498.027, 591.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2504.291 ±(99.9%) 156.325 B/op [Average]
[info]   (min, avg, max) = (2440.001, 2504.291, 2552.755), stdev = 40.597
[info]   CI (99.9%): [2347.966, 2660.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.133 ±(99.9%) 0.932 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.562), stdev = 0.242
[info]   CI (99.9%): [≈ 0, 1.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.612 ±(99.9%) 4.265 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.612, 2.572), stdev = 1.108
[info]   CI (99.9%): [≈ 0, 4.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   539.229 ±(99.9%) 1160.732 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.229, 674.288), stdev = 301.438
[info]   CI (99.9%): [≈ 0, 1699.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2484.354 ±(99.9%) 5351.239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2484.354, 3191.907), stdev = 1389.700
[info]   CI (99.9%): [≈ 0, 7835.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.53% complete, ETA 00:28:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261121.718 ops/s
[info] # Warmup Iteration   2: 748609.657 ops/s
[info] # Warmup Iteration   3: 814391.054 ops/s
[info] # Warmup Iteration   4: 793313.067 ops/s
[info] # Warmup Iteration   5: 793103.766 ops/s
[info] Iteration   1: 803188.679 ops/s
[info]                  ·gc.alloc.rate:                   592.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              1161.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1319.663 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 803844.813 ops/s
[info]                  ·gc.alloc.rate:                   600.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              1175.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1318.588 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 804768.027 ops/s
[info]                  ·gc.alloc.rate:                   598.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              1171.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.336 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1317.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 803865.765 ops/s
[info]                  ·gc.alloc.rate:                   595.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              1165.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1318.568 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 804761.431 ops/s
[info]                  ·gc.alloc.rate:                   595.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              1165.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.307 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1317.051 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   804085.743 ±(99.9%) 2606.823 ops/s [Average]
[info]   (min, avg, max) = (803188.679, 804085.743, 804768.027), stdev = 676.984
[info]   CI (99.9%): [801478.920, 806692.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   596.495 ±(99.9%) 11.550 MB/sec [Average]
[info]   (min, avg, max) = (592.425, 596.495, 600.039), stdev = 2.999
[info]   CI (99.9%): [584.946, 608.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1167.768 ±(99.9%) 21.051 B/op [Average]
[info]   (min, avg, max) = (1161.066, 1167.768, 1175.123), stdev = 5.467
[info]   CI (99.9%): [1146.717, 1188.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.187 ±(99.9%) 1.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.187, 0.833), stdev = 0.361
[info]   CI (99.9%): [≈ 0, 1.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.367 ±(99.9%) 2.725 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.367, 1.632), stdev = 0.708
[info]   CI (99.9%): [≈ 0, 3.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   673.329 ±(99.9%) 0.106 MB/sec [Average]
[info]   (min, avg, max) = (673.295, 673.329, 673.361), stdev = 0.028
[info]   CI (99.9%): [673.223, 673.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1318.189 ±(99.9%) 4.312 B/op [Average]
[info]   (min, avg, max) = (1317.051, 1318.189, 1319.663), stdev = 1.120
[info]   CI (99.9%): [1313.876, 1322.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.76% complete, ETA 00:28:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1495633.745 ops/s
[info] # Warmup Iteration   2: 1870287.964 ops/s
[info] # Warmup Iteration   3: 1982387.778 ops/s
[info] # Warmup Iteration   4: 1978606.791 ops/s
[info] # Warmup Iteration   5: 1989225.543 ops/s
[info] Iteration   1: 1927896.431 ops/s
[info]                  ·gc.alloc.rate:                   938.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              766.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1099.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1960244.111 ops/s
[info]                  ·gc.alloc.rate:                   931.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              748.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 540.187 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1984874.805 ops/s
[info]                  ·gc.alloc.rate:                   933.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              740.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 533.483 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1980806.554 ops/s
[info]                  ·gc.alloc.rate:                   949.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              754.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1069.174 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1981333.819 ops/s
[info]                  ·gc.alloc.rate:                   930.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              739.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 534.437 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   1967031.144 ±(99.9%) 92140.571 ops/s [Average]
[info]   (min, avg, max) = (1927896.431, 1967031.144, 1984874.805), stdev = 23928.614
[info]   CI (99.9%): [1874890.573, 2059171.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   936.954 ±(99.9%) 30.068 MB/sec [Average]
[info]   (min, avg, max) = (930.798, 936.954, 949.807), stdev = 7.808
[info]   CI (99.9%): [906.887, 967.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   749.875 ±(99.9%) 42.889 B/op [Average]
[info]   (min, avg, max) = (739.449, 749.875, 766.434), stdev = 11.138
[info]   CI (99.9%): [706.986, 792.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.023 ±(99.9%) 0.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.099), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   941.915 ±(99.9%) 1419.378 MB/sec [Average]
[info]   (min, avg, max) = (672.690, 941.915, 1346.026), stdev = 368.608
[info]   CI (99.9%): [≈ 0, 2361.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   755.266 ±(99.9%) 1156.696 B/op [Average]
[info]   (min, avg, max) = (533.483, 755.266, 1099.049), stdev = 300.390
[info]   CI (99.9%): [≈ 0, 1911.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.00% complete, ETA 00:27:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1689225.166 ops/s
[info] # Warmup Iteration   2: 2133336.665 ops/s
[info] # Warmup Iteration   3: 2167396.800 ops/s
[info] # Warmup Iteration   4: 2167266.718 ops/s
[info] # Warmup Iteration   5: 2166332.061 ops/s
[info] Iteration   1: 2167602.701 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.124 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2161701.602 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2162266.133 ops/s
[info]                  ·gc.alloc.rate:      1.013 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.737 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2167565.327 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2166519.899 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2165131.132 ±(99.9%) 11215.315 ops/s [Average]
[info]   (min, avg, max) = (2161701.602, 2165131.132, 2167602.701), stdev = 2912.582
[info]   CI (99.9%): [2153915.817, 2176346.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.237 ±(99.9%) 1.694 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.237, 1.013), stdev = 0.440
[info]   CI (99.9%): [≈ 0, 1.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.172 ±(99.9%) 1.233 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.172, 0.737), stdev = 0.320
[info]   CI (99.9%): [≈ 0, 1.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.24% complete, ETA 00:27:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 214871.930 ops/s
[info] # Warmup Iteration   2: 434132.026 ops/s
[info] # Warmup Iteration   3: 430434.283 ops/s
[info] # Warmup Iteration   4: 441010.819 ops/s
[info] # Warmup Iteration   5: 446155.354 ops/s
[info] Iteration   1: 444378.838 ops/s
[info]                  ·gc.alloc.rate:                   654.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              2317.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2387.583 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 446064.969 ops/s
[info]                  ·gc.alloc.rate:                   659.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              2326.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2378.523 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 446612.773 ops/s
[info]                  ·gc.alloc.rate:                   660.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              2327.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2375.690 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 446522.846 ops/s
[info]                  ·gc.alloc.rate:                   661.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              2331.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.190 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2376.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 445841.087 ops/s
[info]                  ·gc.alloc.rate:                   666.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              2353.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2381.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   445884.103 ±(99.9%) 3465.226 ops/s [Average]
[info]   (min, avg, max) = (444378.838, 445884.103, 446612.773), stdev = 899.908
[info]   CI (99.9%): [442418.877, 449349.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   660.377 ±(99.9%) 17.241 MB/sec [Average]
[info]   (min, avg, max) = (654.189, 660.377, 666.627), stdev = 4.477
[info]   CI (99.9%): [643.136, 677.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2331.185 ±(99.9%) 52.123 B/op [Average]
[info]   (min, avg, max) = (2317.320, 2331.185, 2353.544), stdev = 13.536
[info]   CI (99.9%): [2279.063, 2383.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.103 ±(99.9%) 0.475 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.103, 0.295), stdev = 0.123
[info]   CI (99.9%): [≈ 0, 0.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   674.145 ±(99.9%) 0.634 MB/sec [Average]
[info]   (min, avg, max) = (674.025, 674.145, 674.414), stdev = 0.165
[info]   CI (99.9%): [673.511, 674.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2379.804 ±(99.9%) 18.637 B/op [Average]
[info]   (min, avg, max) = (2375.690, 2379.804, 2387.583), stdev = 4.840
[info]   CI (99.9%): [2361.166, 2398.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.47% complete, ETA 00:27:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24825.230 ops/s
[info] # Warmup Iteration   2: 56836.772 ops/s
[info] # Warmup Iteration   3: 55118.211 ops/s
[info] # Warmup Iteration   4: 58107.929 ops/s
[info] # Warmup Iteration   5: 58265.408 ops/s
[info] Iteration   1: 57374.194 ops/s
[info]                  ·gc.alloc.rate:                   1835.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              50340.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55385.366 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 57819.915 ops/s
[info]                  ·gc.alloc.rate:                   1858.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              50596.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55039.814 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 58055.890 ops/s
[info]                  ·gc.alloc.rate:                   1879.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              50954.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54887.402 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 58195.670 ops/s
[info]                  ·gc.alloc.rate:                   1855.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              50192.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36552.258 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 58108.115 ops/s
[info]                  ·gc.alloc.rate:                   1892.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              51255.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54985.466 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   57910.757 ±(99.9%) 1273.251 ops/s [Average]
[info]   (min, avg, max) = (57374.194, 57910.757, 58195.670), stdev = 330.659
[info]   CI (99.9%): [56637.506, 59184.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1864.306 ±(99.9%) 84.737 MB/sec [Average]
[info]   (min, avg, max) = (1835.429, 1864.306, 1892.087), stdev = 22.006
[info]   CI (99.9%): [1779.569, 1949.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   50667.616 ±(99.9%) 1684.935 B/op [Average]
[info]   (min, avg, max) = (50192.071, 50667.616, 51255.199), stdev = 437.572
[info]   CI (99.9%): [48982.680, 52352.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.469 ±(99.9%) 4.221 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.469, 2.815), stdev = 1.096
[info]   CI (99.9%): [≈ 0, 5.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1889.447 ±(99.9%) 1158.363 MB/sec [Average]
[info]   (min, avg, max) = (1351.362, 1889.447, 2029.790), stdev = 300.823
[info]   CI (99.9%): [731.084, 3047.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   51370.061 ±(99.9%) 31904.618 B/op [Average]
[info]   (min, avg, max) = (36552.258, 51370.061, 55385.366), stdev = 8285.528
[info]   CI (99.9%): [19465.443, 83274.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:26:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16192.843 ops/s
[info] # Warmup Iteration   2: 88197.177 ops/s
[info] # Warmup Iteration   3: 91195.580 ops/s
[info] # Warmup Iteration   4: 91767.788 ops/s
[info] # Warmup Iteration   5: 91742.158 ops/s
[info] Iteration   1: 92206.061 ops/s
[info]                  ·gc.alloc.rate:                   1680.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              28694.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23024.510 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 92094.028 ops/s
[info]                  ·gc.alloc.rate:                   1692.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              28920.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.858 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34607.596 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 92170.001 ops/s
[info]                  ·gc.alloc.rate:                   1689.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              28858.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23073.563 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 91784.814 ops/s
[info]                  ·gc.alloc.rate:                   1721.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              29521.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34787.288 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 91929.727 ops/s
[info]                  ·gc.alloc.rate:                   1684.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              28838.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23185.615 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   92036.926 ±(99.9%) 679.691 ops/s [Average]
[info]   (min, avg, max) = (91784.814, 92036.926, 92206.061), stdev = 176.514
[info]   CI (99.9%): [91357.235, 92716.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1693.636 ±(99.9%) 62.056 MB/sec [Average]
[info]   (min, avg, max) = (1680.791, 1693.636, 1721.319), stdev = 16.116
[info]   CI (99.9%): [1631.580, 1755.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28966.820 ±(99.9%) 1236.346 B/op [Average]
[info]   (min, avg, max) = (28694.962, 28966.820, 29521.804), stdev = 321.075
[info]   CI (99.9%): [27730.475, 30203.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.498 ±(99.9%) 2.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.498, 1.423), stdev = 0.539
[info]   CI (99.9%): [≈ 0, 2.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1621.388 ±(99.9%) 1424.385 MB/sec [Average]
[info]   (min, avg, max) = (1348.647, 1621.388, 2028.331), stdev = 369.908
[info]   CI (99.9%): [197.004, 3045.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   27735.714 ±(99.9%) 24473.708 B/op [Average]
[info]   (min, avg, max) = (23024.510, 27735.714, 34787.288), stdev = 6355.744
[info]   CI (99.9%): [3262.006, 52209.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.94% complete, ETA 00:26:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103560.092 ops/s
[info] # Warmup Iteration   2: 159925.840 ops/s
[info] # Warmup Iteration   3: 163350.518 ops/s
[info] # Warmup Iteration   4: 165876.488 ops/s
[info] # Warmup Iteration   5: 164848.510 ops/s
[info] Iteration   1: 164368.588 ops/s
[info]                  ·gc.alloc.rate:                   2610.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              24997.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2698.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25844.622 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 165581.256 ops/s
[info]                  ·gc.alloc.rate:                   2631.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              25012.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2704.053 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25706.600 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 166134.060 ops/s
[info]                  ·gc.alloc.rate:                   2626.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              24884.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19247.337 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 165732.865 ops/s
[info]                  ·gc.alloc.rate:                   2647.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              25144.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.826 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25755.775 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 165632.839 ops/s
[info]                  ·gc.alloc.rate:                   2646.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              25147.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25803.749 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   165489.922 ±(99.9%) 2554.295 ops/s [Average]
[info]   (min, avg, max) = (164368.588, 165489.922, 166134.060), stdev = 663.342
[info]   CI (99.9%): [162935.627, 168044.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2632.260 ±(99.9%) 59.237 MB/sec [Average]
[info]   (min, avg, max) = (2610.188, 2632.260, 2647.482), stdev = 15.384
[info]   CI (99.9%): [2573.022, 2691.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25037.339 ±(99.9%) 426.752 B/op [Average]
[info]   (min, avg, max) = (24884.575, 25037.339, 25147.271), stdev = 110.826
[info]   CI (99.9%): [24610.587, 25464.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.713 ±(99.9%) 1.154 B/op [Average]
[info]   (min, avg, max) = (0.198, 0.713, 0.986), stdev = 0.300
[info]   CI (99.9%): [≈ 0, 1.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2572.237 ±(99.9%) 1164.316 MB/sec [Average]
[info]   (min, avg, max) = (2031.467, 2572.237, 2715.214), stdev = 302.369
[info]   CI (99.9%): [1407.921, 3736.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   24471.616 ±(99.9%) 11247.417 B/op [Average]
[info]   (min, avg, max) = (19247.337, 24471.616, 25844.622), stdev = 2920.919
[info]   CI (99.9%): [13224.199, 35719.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.18% complete, ETA 00:26:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6202.798 ops/s
[info] # Warmup Iteration   2: 29918.480 ops/s
[info] # Warmup Iteration   3: 31969.825 ops/s
[info] # Warmup Iteration   4: 31905.166 ops/s
[info] # Warmup Iteration   5: 31898.017 ops/s
[info] Iteration   1: 31572.000 ops/s
[info]                  ·gc.alloc.rate:                   2111.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              105266.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100932.538 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 32059.026 ops/s
[info]                  ·gc.alloc.rate:                   2131.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              104651.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.629 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99549.803 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 32071.250 ops/s
[info]                  ·gc.alloc.rate:                   2133.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              104667.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99607.528 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 32038.638 ops/s
[info]                  ·gc.alloc.rate:                   2143.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              105328.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.822 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99873.731 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 32068.032 ops/s
[info]                  ·gc.alloc.rate:                   2159.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              106005.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99875.278 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   31961.789 ±(99.9%) 840.477 ops/s [Average]
[info]   (min, avg, max) = (31572.000, 31961.789, 32071.250), stdev = 218.269
[info]   CI (99.9%): [31121.312, 32802.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2135.908 ±(99.9%) 68.199 MB/sec [Average]
[info]   (min, avg, max) = (2111.286, 2135.908, 2159.565), stdev = 17.711
[info]   CI (99.9%): [2067.709, 2204.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105183.721 ±(99.9%) 2155.888 B/op [Average]
[info]   (min, avg, max) = (104651.025, 105183.721, 106005.757), stdev = 559.877
[info]   CI (99.9%): [103027.833, 107339.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.638 ±(99.9%) 3.513 B/op [Average]
[info]   (min, avg, max) = (1.022, 1.638, 3.068), stdev = 0.912
[info]   CI (99.9%): [≈ 0, 5.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2029.935 ±(99.9%) 15.780 MB/sec [Average]
[info]   (min, avg, max) = (2024.367, 2029.935, 2034.674), stdev = 4.098
[info]   CI (99.9%): [2014.155, 2045.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   99967.776 ±(99.9%) 2154.852 B/op [Average]
[info]   (min, avg, max) = (99549.803, 99967.776, 100932.538), stdev = 559.608
[info]   CI (99.9%): [97812.923, 102122.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.41% complete, ETA 00:26:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38466.835 ops/s
[info] # Warmup Iteration   2: 128520.236 ops/s
[info] # Warmup Iteration   3: 134548.637 ops/s
[info] # Warmup Iteration   4: 134849.705 ops/s
[info] # Warmup Iteration   5: 134856.438 ops/s
[info] Iteration   1: 135437.800 ops/s
[info]                  ·gc.alloc.rate:                   850.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              9882.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7833.801 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 135017.282 ops/s
[info]                  ·gc.alloc.rate:                   853.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              9949.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.967 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7858.341 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 135043.179 ops/s
[info]                  ·gc.alloc.rate:                   861.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              10038.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15712.842 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 135324.492 ops/s
[info]                  ·gc.alloc.rate:                   850.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              9890.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.996 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7840.110 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 135236.639 ops/s
[info]                  ·gc.alloc.rate:                   848.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              9872.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7845.443 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   135211.878 ±(99.9%) 695.951 ops/s [Average]
[info]   (min, avg, max) = (135017.282, 135211.878, 135437.800), stdev = 180.736
[info]   CI (99.9%): [134515.927, 135907.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   852.658 ±(99.9%) 19.798 MB/sec [Average]
[info]   (min, avg, max) = (848.138, 852.658, 861.239), stdev = 5.141
[info]   CI (99.9%): [832.860, 872.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   9926.973 ±(99.9%) 266.529 B/op [Average]
[info]   (min, avg, max) = (9872.841, 9926.973, 10038.594), stdev = 69.217
[info]   CI (99.9%): [9660.444, 10193.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.146 ±(99.9%) 1.253 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.146, 0.728), stdev = 0.325
[info]   CI (99.9%): [≈ 0, 1.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   808.795 ±(99.9%) 1160.782 MB/sec [Average]
[info]   (min, avg, max) = (673.967, 808.795, 1348.048), stdev = 301.451
[info]   CI (99.9%): [≈ 0, 1969.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9418.107 ±(99.9%) 13549.935 B/op [Average]
[info]   (min, avg, max) = (7833.801, 9418.107, 15712.842), stdev = 3518.875
[info]   CI (99.9%): [≈ 0, 22968.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.65% complete, ETA 00:25:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 331585.410 ops/s
[info] # Warmup Iteration   2: 410101.272 ops/s
[info] # Warmup Iteration   3: 422116.233 ops/s
[info] # Warmup Iteration   4: 416026.707 ops/s
[info] # Warmup Iteration   5: 433647.295 ops/s
[info] Iteration   1: 433946.550 ops/s
[info]                  ·gc.alloc.rate:                   492.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              1785.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2442.566 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 431690.881 ops/s
[info]                  ·gc.alloc.rate:                   495.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              1804.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2455.272 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 423785.847 ops/s
[info]                  ·gc.alloc.rate:      467.354 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 410940.867 ops/s
[info]                  ·gc.alloc.rate:                   469.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              1795.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.931 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2576.836 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 422683.821 ops/s
[info]                  ·gc.alloc.rate:                   481.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              1793.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2505.119 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   424609.593 ±(99.9%) 34898.001 ops/s [Average]
[info]   (min, avg, max) = (410940.867, 424609.593, 433946.550), stdev = 9062.900
[info]   CI (99.9%): [389711.592, 459507.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   481.096 ±(99.9%) 49.474 MB/sec [Average]
[info]   (min, avg, max) = (467.354, 481.096, 495.092), stdev = 12.848
[info]   CI (99.9%): [431.622, 530.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1783.182 ±(99.9%) 104.964 B/op [Average]
[info]   (min, avg, max) = (1736.001, 1783.182, 1804.946), stdev = 27.259
[info]   CI (99.9%): [1678.218, 1888.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.587 ±(99.9%) 4.988 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.587, 2.904), stdev = 1.295
[info]   CI (99.9%): [≈ 0, 5.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.141 ±(99.9%) 18.181 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.141, 10.587), stdev = 4.722
[info]   CI (99.9%): [≈ 0, 20.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538.546 ±(99.9%) 1159.262 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.546, 673.626), stdev = 301.057
[info]   CI (99.9%): [≈ 0, 1697.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1995.959 ±(99.9%) 4301.249 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1995.959, 2576.836), stdev = 1117.021
[info]   CI (99.9%): [≈ 0, 6297.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.88% complete, ETA 00:25:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 300051.840 ops/s
[info] # Warmup Iteration   2: 442576.798 ops/s
[info] # Warmup Iteration   3: 452512.199 ops/s
[info] # Warmup Iteration   4: 449973.384 ops/s
[info] # Warmup Iteration   5: 451833.140 ops/s
[info] Iteration   1: 453386.779 ops/s
[info]                  ·gc.alloc.rate:      4.608 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 451889.423 ops/s
[info]                  ·gc.alloc.rate:      5.257 MB/sec
[info]                  ·gc.alloc.rate.norm: 18.311 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 452776.697 ops/s
[info]                  ·gc.alloc.rate:      4.603 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 452396.551 ops/s
[info]                  ·gc.alloc.rate:      4.599 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 451807.786 ops/s
[info]                  ·gc.alloc.rate:      4.762 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.593 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   452451.447 ±(99.9%) 2520.495 ops/s [Average]
[info]   (min, avg, max) = (451807.786, 452451.447, 453386.779), stdev = 654.564
[info]   CI (99.9%): [449930.952, 454971.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   4.766 ±(99.9%) 1.089 MB/sec [Average]
[info]   (min, avg, max) = (4.599, 4.766, 5.257), stdev = 0.283
[info]   CI (99.9%): [3.676, 5.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.582 ±(99.9%) 3.852 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.582, 18.311), stdev = 1.000
[info]   CI (99.9%): [12.729, 20.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 78.12% complete, ETA 00:25:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8705.095 ops/s
[info] # Warmup Iteration   2: 55703.329 ops/s
[info] # Warmup Iteration   3: 60228.038 ops/s
[info] # Warmup Iteration   4: 61418.390 ops/s
[info] # Warmup Iteration   5: 59124.751 ops/s
[info] Iteration   1: 61299.364 ops/s
[info]                  ·gc.alloc.rate:                   1249.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              32073.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34649.818 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 61200.117 ops/s
[info]                  ·gc.alloc.rate:                   1256.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              32326.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34705.858 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 61600.927 ops/s
[info]                  ·gc.alloc.rate:                   1242.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              31740.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17239.150 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 61586.270 ops/s
[info]                  ·gc.alloc.rate:                   1254.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              32054.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34505.959 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 61291.110 ops/s
[info]                  ·gc.alloc.rate:                   1258.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              32328.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34690.247 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   61395.557 ±(99.9%) 712.388 ops/s [Average]
[info]   (min, avg, max) = (61200.117, 61395.557, 61600.927), stdev = 185.005
[info]   CI (99.9%): [60683.170, 62107.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1252.368 ±(99.9%) 25.566 MB/sec [Average]
[info]   (min, avg, max) = (1242.473, 1252.368, 1258.783), stdev = 6.639
[info]   CI (99.9%): [1226.803, 1277.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32104.768 ±(99.9%) 934.733 B/op [Average]
[info]   (min, avg, max) = (31740.457, 32104.768, 32328.978), stdev = 242.747
[info]   CI (99.9%): [31170.035, 33039.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.748 ±(99.9%) 1.839 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.748, 1.071), stdev = 0.478
[info]   CI (99.9%): [≈ 0, 2.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1214.986 ±(99.9%) 1162.745 MB/sec [Average]
[info]   (min, avg, max) = (674.823, 1214.986, 1350.723), stdev = 301.961
[info]   CI (99.9%): [52.241, 2377.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   31158.206 ±(99.9%) 29963.358 B/op [Average]
[info]   (min, avg, max) = (17239.150, 31158.206, 34705.858), stdev = 7781.389
[info]   CI (99.9%): [1194.848, 61121.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 78.35% complete, ETA 00:25:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 583288.579 ops/s
[info] # Warmup Iteration   2: 2697224.830 ops/s
[info] # Warmup Iteration   3: 2745113.247 ops/s
[info] # Warmup Iteration   4: 2938384.883 ops/s
[info] # Warmup Iteration   5: 2908801.272 ops/s
[info] Iteration   1: 2939372.140 ops/s
[info]                  ·gc.alloc.rate:                   3687.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              1975.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4055.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2172.165 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2945449.533 ops/s
[info]                  ·gc.alloc.rate:                   3681.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              1967.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3388.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1810.883 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2958138.714 ops/s
[info]                  ·gc.alloc.rate:                   3698.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              1967.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3395.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1806.409 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2936663.231 ops/s
[info]                  ·gc.alloc.rate:                   3672.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              1968.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1821.857 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2934022.766 ops/s
[info]                  ·gc.alloc.rate:                   3670.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              1968.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.320 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1825.237 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2942729.277 ±(99.9%) 36970.251 ops/s [Average]
[info]   (min, avg, max) = (2934022.766, 2942729.277, 2958138.714), stdev = 9601.057
[info]   CI (99.9%): [2905759.026, 2979699.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3682.417 ±(99.9%) 44.474 MB/sec [Average]
[info]   (min, avg, max) = (3670.909, 3682.417, 3698.978), stdev = 11.550
[info]   CI (99.9%): [3637.943, 3726.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1969.565 ±(99.9%) 12.175 B/op [Average]
[info]   (min, avg, max) = (1967.531, 1969.565, 1975.156), stdev = 3.162
[info]   CI (99.9%): [1957.390, 1981.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.047 ±(99.9%) 0.093 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.047, 0.078), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3528.420 ±(99.9%) 1135.342 MB/sec [Average]
[info]   (min, avg, max) = (3388.542, 3528.420, 4055.765), stdev = 294.845
[info]   CI (99.9%): [2393.078, 4663.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1887.310 ±(99.9%) 613.890 B/op [Average]
[info]   (min, avg, max) = (1806.409, 1887.310, 2172.165), stdev = 159.425
[info]   CI (99.9%): [1273.421, 2501.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 78.59% complete, ETA 00:24:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.704 ops/s
[info] # Warmup Iteration   2: 755790.675 ops/s
[info] # Warmup Iteration   3: 789549.771 ops/s
[info] # Warmup Iteration   4: 812677.939 ops/s
[info] # Warmup Iteration   5: 816200.626 ops/s
[info] Iteration   1: 817670.545 ops/s
[info]                  ·gc.alloc.rate:      502.818 MB/sec
[info]                  ·gc.alloc.rate.norm: 968.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 800597.638 ops/s
[info]                  ·gc.alloc.rate:                   499.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              981.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1319.998 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 806144.792 ops/s
[info]                  ·gc.alloc.rate:                   505.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              987.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.202 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1308.335 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 806729.035 ops/s
[info]                  ·gc.alloc.rate:                   502.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              980.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1307.380 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 808731.537 ops/s
[info]                  ·gc.alloc.rate:      497.404 MB/sec
[info]                  ·gc.alloc.rate.norm: 968.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   807974.709 ±(99.9%) 23885.130 ops/s [Average]
[info]   (min, avg, max) = (800597.638, 807974.709, 817670.545), stdev = 6202.892
[info]   CI (99.9%): [784089.580, 831859.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   501.530 ±(99.9%) 12.679 MB/sec [Average]
[info]   (min, avg, max) = (497.404, 501.530, 505.610), stdev = 3.293
[info]   CI (99.9%): [488.851, 514.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   977.000 ±(99.9%) 33.031 B/op [Average]
[info]   (min, avg, max) = (968.001, 977.000, 987.027), stdev = 8.578
[info]   CI (99.9%): [943.969, 1010.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.783 ±(99.9%) 6.650 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.872), stdev = 1.727
[info]   CI (99.9%): [≈ 0, 7.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1.539 ±(99.9%) 13.075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.539, 7.613), stdev = 3.396
[info]   CI (99.9%): [≈ 0, 14.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   402.353 ±(99.9%) 1414.328 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.353, 671.395), stdev = 367.296
[info]   CI (99.9%): [≈ 0, 1816.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   787.143 ±(99.9%) 2766.983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 787.143, 1319.998), stdev = 718.577
[info]   CI (99.9%): [≈ 0, 3554.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.82% complete, ETA 00:24:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8311.538 ops/s
[info] # Warmup Iteration   2: 234274.858 ops/s
[info] # Warmup Iteration   3: 333246.511 ops/s
[info] # Warmup Iteration   4: 339141.883 ops/s
[info] # Warmup Iteration   5: 337481.905 ops/s
[info] Iteration   1: 338664.978 ops/s
[info]                  ·gc.alloc.rate:                   635.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              2955.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3134.296 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 340164.037 ops/s
[info]                  ·gc.alloc.rate:                   641.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              2969.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3119.047 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 339589.318 ops/s
[info]                  ·gc.alloc.rate:                   626.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              2904.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.069 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3124.336 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 339484.819 ops/s
[info]                  ·gc.alloc.rate:                   648.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              3006.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.162 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3125.266 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 339146.474 ops/s
[info]                  ·gc.alloc.rate:                   643.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              2989.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3128.380 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   339409.925 ±(99.9%) 2136.005 ops/s [Average]
[info]   (min, avg, max) = (338664.978, 339409.925, 340164.037), stdev = 554.714
[info]   CI (99.9%): [337273.920, 341545.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   639.369 ±(99.9%) 32.430 MB/sec [Average]
[info]   (min, avg, max) = (626.694, 639.369, 648.512), stdev = 8.422
[info]   CI (99.9%): [606.938, 671.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2965.161 ±(99.9%) 149.552 B/op [Average]
[info]   (min, avg, max) = (2904.749, 2965.161, 3006.359), stdev = 38.838
[info]   CI (99.9%): [2815.609, 3114.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.291 ±(99.9%) 2.419 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.291, 1.415), stdev = 0.628
[info]   CI (99.9%): [≈ 0, 2.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.354 ±(99.9%) 11.246 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.354, 6.578), stdev = 2.921
[info]   CI (99.9%): [≈ 0, 12.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.105 ±(99.9%) 0.432 MB/sec [Average]
[info]   (min, avg, max) = (673.979, 674.105, 674.269), stdev = 0.112
[info]   CI (99.9%): [673.674, 674.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3126.265 ±(99.9%) 21.594 B/op [Average]
[info]   (min, avg, max) = (3119.047, 3126.265, 3134.296), stdev = 5.608
[info]   CI (99.9%): [3104.671, 3147.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 79.06% complete, ETA 00:24:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 330013.047 ops/s
[info] # Warmup Iteration   2: 540630.670 ops/s
[info] # Warmup Iteration   3: 576217.159 ops/s
[info] # Warmup Iteration   4: 554838.155 ops/s
[info] # Warmup Iteration   5: 576840.911 ops/s
[info] Iteration   1: 546350.248 ops/s
[info]                  ·gc.alloc.rate:      415.958 MB/sec
[info]                  ·gc.alloc.rate.norm: 1198.390 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 569818.180 ops/s
[info]                  ·gc.alloc.rate:                   446.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1862.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 572190.646 ops/s
[info]                  ·gc.alloc.rate:                   440.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              1212.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1854.298 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 575599.357 ops/s
[info]                  ·gc.alloc.rate:      432.942 MB/sec
[info]                  ·gc.alloc.rate.norm: 1184.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 566022.508 ops/s
[info]                  ·gc.alloc.rate:                   434.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              1207.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1872.546 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   565996.188 ±(99.9%) 44372.864 ops/s [Average]
[info]   (min, avg, max) = (546350.248, 565996.188, 575599.357), stdev = 11523.492
[info]   CI (99.9%): [521623.324, 610369.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   434.072 ±(99.9%) 44.211 MB/sec [Average]
[info]   (min, avg, max) = (415.958, 434.072, 446.367), stdev = 11.482
[info]   CI (99.9%): [389.860, 478.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1207.149 ±(99.9%) 69.641 B/op [Average]
[info]   (min, avg, max) = (1184.001, 1207.149, 1232.871), stdev = 18.086
[info]   CI (99.9%): [1137.507, 1276.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.562 ±(99.9%) 4.750 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.562, 2.768), stdev = 1.233
[info]   CI (99.9%): [≈ 0, 5.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.546 ±(99.9%) 13.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.546, 7.616), stdev = 3.393
[info]   CI (99.9%): [≈ 0, 14.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   404.298 ±(99.9%) 1421.165 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.298, 674.153), stdev = 369.072
[info]   CI (99.9%): [≈ 0, 1825.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1117.773 ±(99.9%) 3929.207 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1117.773, 1872.546), stdev = 1020.403
[info]   CI (99.9%): [≈ 0, 5046.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 79.29% complete, ETA 00:23:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 930036.862 ops/s
[info] # Warmup Iteration   2: 1430233.726 ops/s
[info] # Warmup Iteration   3: 1503269.784 ops/s
[info] # Warmup Iteration   4: 1504158.269 ops/s
[info] # Warmup Iteration   5: 1500546.450 ops/s
[info] Iteration   1: 1476148.028 ops/s
[info]                  ·gc.alloc.rate:                   493.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              525.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.225 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 718.756 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1508647.284 ops/s
[info]                  ·gc.alloc.rate:      495.185 MB/sec
[info]                  ·gc.alloc.rate.norm: 516.651 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1499270.593 ops/s
[info]                  ·gc.alloc.rate:                   492.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              517.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 707.659 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1503637.735 ops/s
[info]                  ·gc.alloc.rate:                   503.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              527.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 704.868 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1486252.529 ops/s
[info]                  ·gc.alloc.rate:                   501.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              530.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.599 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 713.113 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   1494791.234 ±(99.9%) 51330.469 ops/s [Average]
[info]   (min, avg, max) = (1476148.028, 1494791.234, 1508647.284), stdev = 13330.360
[info]   CI (99.9%): [1443460.765, 1546121.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   497.221 ±(99.9%) 19.195 MB/sec [Average]
[info]   (min, avg, max) = (492.586, 497.221, 503.489), stdev = 4.985
[info]   CI (99.9%): [478.026, 516.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   523.540 ±(99.9%) 24.441 B/op [Average]
[info]   (min, avg, max) = (516.651, 523.540, 530.992), stdev = 6.347
[info]   CI (99.9%): [499.099, 547.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   0.562 ±(99.9%) 4.794 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.562, 2.789), stdev = 1.245
[info]   CI (99.9%): [≈ 0, 5.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   0.590 ±(99.9%) 5.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.590, 2.928), stdev = 1.307
[info]   CI (99.9%): [≈ 0, 5.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   539.045 ±(99.9%) 1160.337 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.045, 674.225), stdev = 301.336
[info]   CI (99.9%): [≈ 0, 1699.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   568.879 ±(99.9%) 1224.727 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 568.879, 718.756), stdev = 318.058
[info]   CI (99.9%): [≈ 0, 1793.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 79.53% complete, ETA 00:23:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2206072.723 ops/s
[info] # Warmup Iteration   2: 4252383.681 ops/s
[info] # Warmup Iteration   3: 6694580.967 ops/s
[info] # Warmup Iteration   4: 6595271.480 ops/s
[info] # Warmup Iteration   5: 6658370.369 ops/s
[info] Iteration   1: 6644346.755 ops/s
[info]                  ·gc.alloc.rate:                   557.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              132.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159.683 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6647244.870 ops/s
[info]                  ·gc.alloc.rate:                   564.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              133.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159.617 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6731226.853 ops/s
[info]                  ·gc.alloc.rate:      547.544 MB/sec
[info]                  ·gc.alloc.rate.norm: 128.040 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6718918.168 ops/s
[info]                  ·gc.alloc.rate:                   559.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              131.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.275 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157.742 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6720044.447 ops/s
[info]                  ·gc.alloc.rate:                   570.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              133.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157.722 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   6692356.219 ±(99.9%) 164759.012 ops/s [Average]
[info]   (min, avg, max) = (6644346.755, 6692356.219, 6731226.853), stdev = 42787.392
[info]   CI (99.9%): [6527597.206, 6857115.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   559.930 ±(99.9%) 32.463 MB/sec [Average]
[info]   (min, avg, max) = (547.544, 559.930, 570.395), stdev = 8.431
[info]   CI (99.9%): [527.467, 592.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   131.697 ±(99.9%) 8.783 B/op [Average]
[info]   (min, avg, max) = (128.040, 131.697, 133.603), stdev = 2.281
[info]   CI (99.9%): [122.913, 140.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   0.566 ±(99.9%) 4.744 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.566, 2.770), stdev = 1.232
[info]   CI (99.9%): [≈ 0, 5.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   0.134 ±(99.9%) 1.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.134, 0.656), stdev = 0.292
[info]   CI (99.9%): [≈ 0, 1.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   538.992 ±(99.9%) 1160.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.992, 674.359), stdev = 301.306
[info]   CI (99.9%): [≈ 0, 1699.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   126.953 ±(99.9%) 273.301 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 126.953, 159.683), stdev = 70.975
[info]   CI (99.9%): [≈ 0, 400.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 79.76% complete, ETA 00:23:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 695.556 ops/s
[info] # Warmup Iteration   2: 75365.306 ops/s
[info] # Warmup Iteration   3: 212349.475 ops/s
[info] # Warmup Iteration   4: 235372.979 ops/s
[info] # Warmup Iteration   5: 235996.522 ops/s
[info] Iteration   1: 234759.874 ops/s
[info]                  ·gc.alloc.rate:                   1605.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              10763.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9038.871 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 233559.987 ops/s
[info]                  ·gc.alloc.rate:                   1629.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              10982.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13637.108 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 234805.444 ops/s
[info]                  ·gc.alloc.rate:                   1617.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              10839.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9048.725 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 233402.427 ops/s
[info]                  ·gc.alloc.rate:                   1609.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              10853.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9109.771 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 233038.506 ops/s
[info]                  ·gc.alloc.rate:                   1631.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              11020.700 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13701.333 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   233913.248 ±(99.9%) 3142.285 ops/s [Average]
[info]   (min, avg, max) = (233038.506, 233913.248, 234805.444), stdev = 816.042
[info]   CI (99.9%): [230770.962, 237055.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1618.697 ±(99.9%) 45.354 MB/sec [Average]
[info]   (min, avg, max) = (1605.190, 1618.697, 1631.952), stdev = 11.778
[info]   CI (99.9%): [1573.343, 1664.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10891.984 ±(99.9%) 410.341 B/op [Average]
[info]   (min, avg, max) = (10763.360, 10891.984, 11020.700), stdev = 106.564
[info]   CI (99.9%): [10481.643, 11302.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.308 ±(99.9%) 0.706 B/op [Average]
[info]   (min, avg, max) = (0.140, 0.308, 0.561), stdev = 0.183
[info]   CI (99.9%): [≈ 0, 1.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1620.260 ±(99.9%) 1426.741 MB/sec [Average]
[info]   (min, avg, max) = (1348.009, 1620.260, 2028.902), stdev = 370.520
[info]   CI (99.9%): [193.518, 3047.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10907.162 ±(99.9%) 9709.983 B/op [Average]
[info]   (min, avg, max) = (9038.871, 10907.162, 13701.333), stdev = 2521.652
[info]   CI (99.9%): [1197.179, 20617.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.00% complete, ETA 00:23:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1076367.769 ops/s
[info] # Warmup Iteration   2: 1363524.920 ops/s
[info] # Warmup Iteration   3: 1376142.543 ops/s
[info] # Warmup Iteration   4: 1376712.158 ops/s
[info] # Warmup Iteration   5: 1375737.070 ops/s
[info] Iteration   1: 1355130.450 ops/s
[info]                  ·gc.alloc.rate:      41.327 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1375495.551 ops/s
[info]                  ·gc.alloc.rate:      41.946 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1376971.770 ops/s
[info]                  ·gc.alloc.rate:      42.009 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1375991.400 ops/s
[info]                  ·gc.alloc.rate:      44.517 MB/sec
[info]                  ·gc.alloc.rate.norm: 50.926 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1360855.195 ops/s
[info]                  ·gc.alloc.rate:                   46.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              53.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 591.673 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1368888.873 ±(99.9%) 39139.550 ops/s [Average]
[info]   (min, avg, max) = (1355130.450, 1368888.873, 1376971.770), stdev = 10164.417
[info]   CI (99.9%): [1329749.323, 1408028.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   43.236 ±(99.9%) 8.245 MB/sec [Average]
[info]   (min, avg, max) = (41.327, 43.236, 46.380), stdev = 2.141
[info]   CI (99.9%): [34.991, 51.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   49.715 ±(99.9%) 9.772 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.715, 53.649), stdev = 2.538
[info]   CI (99.9%): [39.943, 59.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   102.300 ±(99.9%) 880.838 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.300, 511.502), stdev = 228.751
[info]   CI (99.9%): [≈ 0, 983.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   118.335 ±(99.9%) 1018.896 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 118.335, 591.673), stdev = 264.604
[info]   CI (99.9%): [≈ 0, 1137.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.24% complete, ETA 00:22:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9090.882 ops/s
[info] # Warmup Iteration   2: 65925.781 ops/s
[info] # Warmup Iteration   3: 71114.508 ops/s
[info] # Warmup Iteration   4: 71990.793 ops/s
[info] # Warmup Iteration   5: 72291.616 ops/s
[info] Iteration   1: 71802.162 ops/s
[info]                  ·gc.alloc.rate:                   3157.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              69213.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3385.945 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74209.949 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 72520.703 ops/s
[info]                  ·gc.alloc.rate:                   3188.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              69214.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58877.494 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 72201.923 ops/s
[info]                  ·gc.alloc.rate:                   3202.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              69824.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3394.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74009.442 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 72553.852 ops/s
[info]                  ·gc.alloc.rate:                   3191.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              69234.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58986.374 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 71820.608 ops/s
[info]                  ·gc.alloc.rate:                   3198.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              70094.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.857 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74533.355 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   72179.850 ±(99.9%) 1399.337 ops/s [Average]
[info]   (min, avg, max) = (71802.162, 72179.850, 72553.852), stdev = 363.403
[info]   CI (99.9%): [70780.512, 73579.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3187.822 ±(99.9%) 67.688 MB/sec [Average]
[info]   (min, avg, max) = (3157.964, 3187.822, 3202.714), stdev = 17.578
[info]   CI (99.9%): [3120.133, 3255.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69516.123 ±(99.9%) 1600.878 B/op [Average]
[info]   (min, avg, max) = (69213.283, 69516.123, 70094.446), stdev = 415.743
[info]   CI (99.9%): [67915.245, 71117.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.635 ±(99.9%) 1.578 B/op [Average]
[info]   (min, avg, max) = (1.355, 1.635, 2.281), stdev = 0.410
[info]   CI (99.9%): [0.057, 3.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3122.599 ±(99.9%) 1430.299 MB/sec [Average]
[info]   (min, avg, max) = (2712.639, 3122.599, 3400.857), stdev = 371.444
[info]   CI (99.9%): [1692.300, 4552.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   68123.323 ±(99.9%) 32317.384 B/op [Average]
[info]   (min, avg, max) = (58877.494, 68123.323, 74533.355), stdev = 8392.722
[info]   CI (99.9%): [35805.939, 100440.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.47% complete, ETA 00:22:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 574205.828 ops/s
[info] # Warmup Iteration   2: 1421618.107 ops/s
[info] # Warmup Iteration   3: 1460829.041 ops/s
[info] # Warmup Iteration   4: 1473455.482 ops/s
[info] # Warmup Iteration   5: 1466541.068 ops/s
[info] Iteration   1: 1471977.007 ops/s
[info]                  ·gc.alloc.rate:                   786.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              840.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 720.105 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1455841.289 ops/s
[info]                  ·gc.alloc.rate:                   788.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              852.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 728.059 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1471864.532 ops/s
[info]                  ·gc.alloc.rate:                   795.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              850.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 720.136 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1471574.459 ops/s
[info]                  ·gc.alloc.rate:                   793.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 720.964 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1452331.062 ops/s
[info]                  ·gc.alloc.rate:                   778.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              843.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 730.559 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1464717.670 ±(99.9%) 37679.754 ops/s [Average]
[info]   (min, avg, max) = (1452331.062, 1464717.670, 1471977.007), stdev = 9785.313
[info]   CI (99.9%): [1427037.915, 1502397.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   788.278 ±(99.9%) 26.200 MB/sec [Average]
[info]   (min, avg, max) = (778.069, 788.278, 795.396), stdev = 6.804
[info]   CI (99.9%): [762.077, 814.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   847.141 ±(99.9%) 18.824 B/op [Average]
[info]   (min, avg, max) = (840.822, 847.141, 852.273), stdev = 4.889
[info]   CI (99.9%): [828.317, 865.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.013 ±(99.9%) 0.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   673.636 ±(99.9%) 1.413 MB/sec [Average]
[info]   (min, avg, max) = (673.330, 673.636, 674.035), stdev = 0.367
[info]   CI (99.9%): [672.223, 675.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   723.964 ±(99.9%) 19.138 B/op [Average]
[info]   (min, avg, max) = (720.105, 723.964, 730.559), stdev = 4.970
[info]   CI (99.9%): [704.827, 743.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.71% complete, ETA 00:22:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1120207.666 ops/s
[info] # Warmup Iteration   2: 1594042.196 ops/s
[info] # Warmup Iteration   3: 1573934.765 ops/s
[info] # Warmup Iteration   4: 1602440.600 ops/s
[info] # Warmup Iteration   5: 1598451.857 ops/s
[info] Iteration   1: 1595468.863 ops/s
[info]                  ·gc.alloc.rate:                   463.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              457.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 665.695 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1549277.276 ops/s
[info]                  ·gc.alloc.rate:      439.360 MB/sec
[info]                  ·gc.alloc.rate.norm: 446.350 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1601268.211 ops/s
[info]                  ·gc.alloc.rate:                   471.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              463.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 663.224 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1609366.156 ops/s
[info]                  ·gc.alloc.rate:                   464.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              454.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 659.245 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1612744.054 ops/s
[info]                  ·gc.alloc.rate:      450.851 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   1593624.912 ±(99.9%) 98959.701 ops/s [Average]
[info]   (min, avg, max) = (1549277.276, 1593624.912, 1612744.054), stdev = 25699.520
[info]   CI (99.9%): [1494665.211, 1692584.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   458.009 ±(99.9%) 49.355 MB/sec [Average]
[info]   (min, avg, max) = (439.360, 458.009, 471.502), stdev = 12.817
[info]   CI (99.9%): [408.654, 507.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   452.353 ±(99.9%) 35.725 B/op [Average]
[info]   (min, avg, max) = (440.000, 452.353, 463.476), stdev = 9.278
[info]   CI (99.9%): [416.628, 488.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.514 ±(99.9%) 4.338 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.514, 2.529), stdev = 1.126
[info]   CI (99.9%): [≈ 0, 4.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.505 ±(99.9%) 4.264 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.505, 2.486), stdev = 1.107
[info]   CI (99.9%): [≈ 0, 4.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   404.692 ±(99.9%) 1422.549 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.692, 674.709), stdev = 369.432
[info]   CI (99.9%): [≈ 0, 1827.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   397.633 ±(99.9%) 1397.764 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 397.633, 665.695), stdev = 362.995
[info]   CI (99.9%): [≈ 0, 1795.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.94% complete, ETA 00:22:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 721467.357 ops/s
[info] # Warmup Iteration   2: 950805.456 ops/s
[info] # Warmup Iteration   3: 968290.183 ops/s
[info] # Warmup Iteration   4: 985163.293 ops/s
[info] # Warmup Iteration   5: 985258.672 ops/s
[info] Iteration   1: 985053.342 ops/s
[info]                  ·gc.alloc.rate:      10.013 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 985524.314 ops/s
[info]                  ·gc.alloc.rate:      10.018 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 985172.026 ops/s
[info]                  ·gc.alloc.rate:      10.418 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.646 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 984214.154 ops/s
[info]                  ·gc.alloc.rate:      10.006 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 984732.927 ops/s
[info]                  ·gc.alloc.rate:      10.010 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   984939.353 ±(99.9%) 1903.865 ops/s [Average]
[info]   (min, avg, max) = (984214.154, 984939.353, 985524.314), stdev = 494.428
[info]   CI (99.9%): [983035.488, 986843.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   10.093 ±(99.9%) 0.700 MB/sec [Average]
[info]   (min, avg, max) = (10.006, 10.093, 10.418), stdev = 0.182
[info]   CI (99.9%): [9.393, 10.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.129 ±(99.9%) 1.111 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.129, 16.646), stdev = 0.289
[info]   CI (99.9%): [15.018, 17.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.18% complete, ETA 00:21:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7936.415 ops/s
[info] # Warmup Iteration   2: 46071.045 ops/s
[info] # Warmup Iteration   3: 48958.627 ops/s
[info] # Warmup Iteration   4: 48550.155 ops/s
[info] # Warmup Iteration   5: 48416.776 ops/s
[info] Iteration   1: 49285.781 ops/s
[info]                  ·gc.alloc.rate:                   2056.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              65682.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64697.107 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 49071.064 ops/s
[info]                  ·gc.alloc.rate:                   2034.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              65228.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.579 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65045.939 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 49294.505 ops/s
[info]                  ·gc.alloc.rate:                   2028.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              64808.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43216.568 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 49310.345 ops/s
[info]                  ·gc.alloc.rate:                   2022.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              64556.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43255.700 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 49329.123 ops/s
[info]                  ·gc.alloc.rate:                   2035.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              64938.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64895.756 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   49258.163 ±(99.9%) 407.732 ops/s [Average]
[info]   (min, avg, max) = (49071.064, 49258.163, 49329.123), stdev = 105.887
[info]   CI (99.9%): [48850.432, 49665.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2035.292 ±(99.9%) 49.693 MB/sec [Average]
[info]   (min, avg, max) = (2022.409, 2035.292, 2056.465), stdev = 12.905
[info]   CI (99.9%): [1985.600, 2084.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   65042.795 ±(99.9%) 1663.345 B/op [Average]
[info]   (min, avg, max) = (64556.171, 65042.795, 65682.710), stdev = 431.965
[info]   CI (99.9%): [63379.450, 66706.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.331 ±(99.9%) 4.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.331, 2.671), stdev = 1.054
[info]   CI (99.9%): [≈ 0, 5.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1759.114 ±(99.9%) 1424.853 MB/sec [Average]
[info]   (min, avg, max) = (1352.452, 1759.114, 2033.823), stdev = 370.030
[info]   CI (99.9%): [334.261, 3183.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   56222.214 ±(99.9%) 45650.419 B/op [Average]
[info]   (min, avg, max) = (43216.568, 56222.214, 65045.939), stdev = 11855.269
[info]   CI (99.9%): [10571.795, 101872.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.41% complete, ETA 00:21:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 157822.949 ops/s
[info] # Warmup Iteration   2: 244743.731 ops/s
[info] # Warmup Iteration   3: 252213.523 ops/s
[info] # Warmup Iteration   4: 253363.027 ops/s
[info] # Warmup Iteration   5: 252659.576 ops/s
[info] Iteration   1: 253799.761 ops/s
[info]                  ·gc.alloc.rate:                   1008.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              6255.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4176.261 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 253469.909 ops/s
[info]                  ·gc.alloc.rate:                   1036.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              6437.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8363.394 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 253842.959 ops/s
[info]                  ·gc.alloc.rate:                   1010.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              6267.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4175.652 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 253874.657 ops/s
[info]                  ·gc.alloc.rate:                   1009.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              6261.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4174.994 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 252370.712 ops/s
[info]                  ·gc.alloc.rate:                   1026.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              6401.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8401.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   253471.599 ±(99.9%) 2450.542 ops/s [Average]
[info]   (min, avg, max) = (252370.712, 253471.599, 253874.657), stdev = 636.398
[info]   CI (99.9%): [251021.057, 255922.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1018.371 ±(99.9%) 47.951 MB/sec [Average]
[info]   (min, avg, max) = (1008.558, 1018.371, 1036.545), stdev = 12.453
[info]   CI (99.9%): [970.419, 1066.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6324.644 ±(99.9%) 336.562 B/op [Average]
[info]   (min, avg, max) = (6255.596, 6324.644, 6437.093), stdev = 87.404
[info]   CI (99.9%): [5988.082, 6661.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.155 ±(99.9%) 0.891 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.155, 0.517), stdev = 0.231
[info]   CI (99.9%): [≈ 0, 1.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   942.708 ±(99.9%) 1420.343 MB/sec [Average]
[info]   (min, avg, max) = (673.312, 942.708, 1346.813), stdev = 368.858
[info]   CI (99.9%): [≈ 0, 2363.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5858.297 ±(99.9%) 8872.339 B/op [Average]
[info]   (min, avg, max) = (4174.994, 5858.297, 8401.186), stdev = 2304.118
[info]   CI (99.9%): [≈ 0, 14730.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.65% complete, ETA 00:21:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1903.097 ops/s
[info] # Warmup Iteration   2: 32511.126 ops/s
[info] # Warmup Iteration   3: 36547.546 ops/s
[info] # Warmup Iteration   4: 37015.238 ops/s
[info] # Warmup Iteration   5: 37838.254 ops/s
[info] Iteration   1: 38137.625 ops/s
[info]                  ·gc.alloc.rate:                   1928.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              79574.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55667.114 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 38124.163 ops/s
[info]                  ·gc.alloc.rate:                   1951.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              80563.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.932 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83586.927 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 36936.839 ops/s
[info]                  ·gc.alloc.rate:                   1892.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              80622.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86406.908 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 38014.487 ops/s
[info]                  ·gc.alloc.rate:                   1943.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              80458.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84074.168 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 38088.666 ops/s
[info]                  ·gc.alloc.rate:                   1961.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              81050.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.648 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84007.191 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   37860.356 ±(99.9%) 1996.437 ops/s [Average]
[info]   (min, avg, max) = (36936.839, 37860.356, 38137.625), stdev = 518.468
[info]   CI (99.9%): [35863.919, 39856.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1935.427 ±(99.9%) 103.033 MB/sec [Average]
[info]   (min, avg, max) = (1892.605, 1935.427, 1961.110), stdev = 26.757
[info]   CI (99.9%): [1832.394, 2038.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80453.779 ±(99.9%) 2082.129 B/op [Average]
[info]   (min, avg, max) = (79574.575, 80453.779, 81050.599), stdev = 540.722
[info]   CI (99.9%): [78371.650, 82535.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.010, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.252 ±(99.9%) 1.879 B/op [Average]
[info]   (min, avg, max) = (1.718, 2.252, 2.661), stdev = 0.488
[info]   CI (99.9%): [0.374, 4.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1893.124 ±(99.9%) 1170.967 MB/sec [Average]
[info]   (min, avg, max) = (1349.163, 1893.124, 2032.648), stdev = 304.096
[info]   CI (99.9%): [722.157, 3064.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   78748.462 ±(99.9%) 49866.528 B/op [Average]
[info]   (min, avg, max) = (55667.114, 78748.462, 86406.908), stdev = 12950.179
[info]   CI (99.9%): [28881.934, 128614.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.88% complete, ETA 00:20:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25837.498 ops/s
[info] # Warmup Iteration   2: 97941.934 ops/s
[info] # Warmup Iteration   3: 98572.284 ops/s
[info] # Warmup Iteration   4: 100157.472 ops/s
[info] # Warmup Iteration   5: 100526.276 ops/s
[info] Iteration   1: 101210.645 ops/s
[info]                  ·gc.alloc.rate:                   955.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              14861.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20966.962 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 101068.253 ops/s
[info]                  ·gc.alloc.rate:                   939.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              14627.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10498.208 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 100372.321 ops/s
[info]                  ·gc.alloc.rate:                   963.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              15110.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21141.572 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 101064.793 ops/s
[info]                  ·gc.alloc.rate:                   936.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              14590.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10508.270 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 101164.322 ops/s
[info]                  ·gc.alloc.rate:                   939.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              14618.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10498.092 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   100976.067 ±(99.9%) 1321.824 ops/s [Average]
[info]   (min, avg, max) = (100372.321, 100976.067, 101210.645), stdev = 343.273
[info]   CI (99.9%): [99654.243, 102297.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   946.945 ±(99.9%) 46.057 MB/sec [Average]
[info]   (min, avg, max) = (936.793, 946.945, 963.699), stdev = 11.961
[info]   CI (99.9%): [900.888, 993.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14761.579 ±(99.9%) 859.975 B/op [Average]
[info]   (min, avg, max) = (14590.428, 14761.579, 15110.223), stdev = 223.333
[info]   CI (99.9%): [13901.604, 15621.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.125), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.715 ±(99.9%) 3.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.715, 1.959), stdev = 0.987
[info]   CI (99.9%): [≈ 0, 4.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   943.978 ±(99.9%) 1420.889 MB/sec [Average]
[info]   (min, avg, max) = (674.065, 943.978, 1348.365), stdev = 369.000
[info]   CI (99.9%): [≈ 0, 2364.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14722.621 ±(99.9%) 22257.903 B/op [Average]
[info]   (min, avg, max) = (10498.092, 14722.621, 21141.572), stdev = 5780.307
[info]   CI (99.9%): [≈ 0, 36980.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.12% complete, ETA 00:20:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 221689.142 ops/s
[info] # Warmup Iteration   2: 308864.401 ops/s
[info] # Warmup Iteration   3: 318623.153 ops/s
[info] # Warmup Iteration   4: 318251.516 ops/s
[info] # Warmup Iteration   5: 310326.772 ops/s
[info] Iteration   1: 318251.319 ops/s
[info]                  ·gc.alloc.rate:      428.615 MB/sec
[info]                  ·gc.alloc.rate.norm: 2120.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 320160.140 ops/s
[info]                  ·gc.alloc.rate:                   454.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              2232.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3318.931 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 317492.807 ops/s
[info]                  ·gc.alloc.rate:                   445.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              2207.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3346.723 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 319704.481 ops/s
[info]                  ·gc.alloc.rate:      430.795 MB/sec
[info]                  ·gc.alloc.rate.norm: 2120.919 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 319623.525 ops/s
[info]                  ·gc.alloc.rate:                   450.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              2219.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3322.783 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   319046.454 ±(99.9%) 4327.637 ops/s [Average]
[info]   (min, avg, max) = (317492.807, 319046.454, 320160.140), stdev = 1123.874
[info]   CI (99.9%): [314718.817, 323374.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   441.886 ±(99.9%) 44.553 MB/sec [Average]
[info]   (min, avg, max) = (428.615, 441.886, 454.006), stdev = 11.570
[info]   CI (99.9%): [397.333, 486.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2180.144 ±(99.9%) 212.393 B/op [Average]
[info]   (min, avg, max) = (2120.002, 2180.144, 2232.210), stdev = 55.158
[info]   CI (99.9%): [1967.751, 2392.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.512 ±(99.9%) 4.408 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.512, 2.560), stdev = 1.145
[info]   CI (99.9%): [≈ 0, 4.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.539 ±(99.9%) 21.857 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.539, 12.693), stdev = 5.676
[info]   CI (99.9%): [≈ 0, 24.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   404.943 ±(99.9%) 1423.432 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.943, 675.032), stdev = 369.661
[info]   CI (99.9%): [≈ 0, 1828.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1997.688 ±(99.9%) 7022.273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1997.688, 3346.723), stdev = 1823.662
[info]   CI (99.9%): [≈ 0, 9019.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.35% complete, ETA 00:20:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 234168.454 ops/s
[info] # Warmup Iteration   2: 332523.250 ops/s
[info] # Warmup Iteration   3: 342019.114 ops/s
[info] # Warmup Iteration   4: 342750.373 ops/s
[info] # Warmup Iteration   5: 342339.697 ops/s
[info] Iteration   1: 341663.794 ops/s
[info]                  ·gc.alloc.rate:      3.473 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 342340.084 ops/s
[info]                  ·gc.alloc.rate:      3.480 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 342948.580 ops/s
[info]                  ·gc.alloc.rate:      3.486 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 342181.505 ops/s
[info]                  ·gc.alloc.rate:      3.500 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.097 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 342536.423 ops/s
[info]                  ·gc.alloc.rate:      3.483 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   342334.077 ±(99.9%) 1817.520 ops/s [Average]
[info]   (min, avg, max) = (341663.794, 342334.077, 342948.580), stdev = 472.004
[info]   CI (99.9%): [340516.557, 344151.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   3.484 ±(99.9%) 0.038 MB/sec [Average]
[info]   (min, avg, max) = (3.473, 3.484, 3.500), stdev = 0.010
[info]   CI (99.9%): [3.446, 3.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.020 ±(99.9%) 0.164 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.020, 16.097), stdev = 0.043
[info]   CI (99.9%): [15.856, 16.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.59% complete, ETA 00:20:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8441.325 ops/s
[info] # Warmup Iteration   2: 47698.122 ops/s
[info] # Warmup Iteration   3: 50080.642 ops/s
[info] # Warmup Iteration   4: 50206.251 ops/s
[info] # Warmup Iteration   5: 50253.011 ops/s
[info] Iteration   1: 49224.198 ops/s
[info]                  ·gc.alloc.rate:                   1268.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              40540.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21564.901 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 49460.070 ops/s
[info]                  ·gc.alloc.rate:                   1299.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              41349.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42935.506 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 50056.679 ops/s
[info]                  ·gc.alloc.rate:                   1299.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              40857.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42431.441 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 49617.270 ops/s
[info]                  ·gc.alloc.rate:                   1297.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              41147.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42826.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 50297.859 ops/s
[info]                  ·gc.alloc.rate:                   1305.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              40846.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.341 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42290.703 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   49731.215 ±(99.9%) 1690.101 ops/s [Average]
[info]   (min, avg, max) = (49224.198, 49731.215, 50297.859), stdev = 438.914
[info]   CI (99.9%): [48041.114, 51421.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1293.855 ±(99.9%) 56.340 MB/sec [Average]
[info]   (min, avg, max) = (1268.237, 1293.855, 1305.205), stdev = 14.631
[info]   CI (99.9%): [1237.515, 1350.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   40948.419 ±(99.9%) 1194.786 B/op [Average]
[info]   (min, avg, max) = (40540.682, 40948.419, 41349.348), stdev = 310.282
[info]   CI (99.9%): [39753.634, 42143.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.059 ±(99.9%) 2.922 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.059, 1.997), stdev = 0.759
[info]   CI (99.9%): [≈ 0, 3.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1214.920 ±(99.9%) 1163.049 MB/sec [Average]
[info]   (min, avg, max) = (674.616, 1214.920, 1351.341), stdev = 302.040
[info]   CI (99.9%): [51.871, 2377.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   38409.747 ±(99.9%) 36274.420 B/op [Average]
[info]   (min, avg, max) = (21564.901, 38409.747, 42935.506), stdev = 9420.352
[info]   CI (99.9%): [2135.327, 74684.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 82.82% complete, ETA 00:19:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30308.094 ops/s
[info] # Warmup Iteration   2: 70146.383 ops/s
[info] # Warmup Iteration   3: 69739.348 ops/s
[info] # Warmup Iteration   4: 71614.605 ops/s
[info] # Warmup Iteration   5: 72877.931 ops/s
[info] Iteration   1: 72833.341 ops/s
[info]                  ·gc.alloc.rate:                   1453.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              31416.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29018.356 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 73035.300 ops/s
[info]                  ·gc.alloc.rate:                   1448.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              31209.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28939.302 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 72533.900 ops/s
[info]                  ·gc.alloc.rate:                   1451.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              31509.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29167.260 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 73231.046 ops/s
[info]                  ·gc.alloc.rate:                   1470.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              31606.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43399.571 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 73453.459 ops/s
[info]                  ·gc.alloc.rate:                   1465.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              31406.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28889.616 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   73017.409 ±(99.9%) 1366.521 ops/s [Average]
[info]   (min, avg, max) = (72533.900, 73017.409, 73453.459), stdev = 354.881
[info]   CI (99.9%): [71650.889, 74383.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1458.014 ±(99.9%) 37.174 MB/sec [Average]
[info]   (min, avg, max) = (1448.059, 1458.014, 1470.554), stdev = 9.654
[info]   CI (99.9%): [1420.840, 1495.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31429.910 ±(99.9%) 568.033 B/op [Average]
[info]   (min, avg, max) = (31209.434, 31429.910, 31606.905), stdev = 147.516
[info]   CI (99.9%): [30861.877, 31997.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.985 ±(99.9%) 3.316 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.985, 2.237), stdev = 0.861
[info]   CI (99.9%): [≈ 0, 4.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1479.403 ±(99.9%) 1162.039 MB/sec [Average]
[info]   (min, avg, max) = (1342.686, 1479.403, 2019.223), stdev = 301.778
[info]   CI (99.9%): [317.364, 2641.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   31882.821 ±(99.9%) 24793.971 B/op [Average]
[info]   (min, avg, max) = (28889.616, 31882.821, 43399.571), stdev = 6438.916
[info]   CI (99.9%): [7088.850, 56676.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.06% complete, ETA 00:19:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17663.813 ops/s
[info] # Warmup Iteration   2: 113112.047 ops/s
[info] # Warmup Iteration   3: 118963.593 ops/s
[info] # Warmup Iteration   4: 116386.691 ops/s
[info] # Warmup Iteration   5: 116484.630 ops/s
[info] Iteration   1: 119694.629 ops/s
[info]                  ·gc.alloc.rate:                   598.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              7869.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8860.182 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 121362.714 ops/s
[info]                  ·gc.alloc.rate:                   599.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              7777.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8742.525 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 121484.546 ops/s
[info]                  ·gc.alloc.rate:                   601.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              7788.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8733.746 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 121074.991 ops/s
[info]                  ·gc.alloc.rate:                   604.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              7853.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8763.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 121214.020 ops/s
[info]                  ·gc.alloc.rate:                   602.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              7824.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.133 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8752.981 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   120966.180 ±(99.9%) 2800.697 ops/s [Average]
[info]   (min, avg, max) = (119694.629, 120966.180, 121484.546), stdev = 727.332
[info]   CI (99.9%): [118165.483, 123766.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   601.225 ±(99.9%) 8.591 MB/sec [Average]
[info]   (min, avg, max) = (598.405, 601.225, 604.035), stdev = 2.231
[info]   CI (99.9%): [592.634, 609.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7822.723 ±(99.9%) 152.847 B/op [Average]
[info]   (min, avg, max) = (7777.734, 7822.723, 7869.187), stdev = 39.694
[info]   CI (99.9%): [7669.877, 7975.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.250 ±(99.9%) 2.062 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.250, 1.207), stdev = 0.536
[info]   CI (99.9%): [≈ 0, 2.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.284 ±(99.9%) 27.122 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.284, 15.876), stdev = 7.044
[info]   CI (99.9%): [≈ 0, 30.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.061 ±(99.9%) 0.710 MB/sec [Average]
[info]   (min, avg, max) = (673.765, 674.061, 674.212), stdev = 0.184
[info]   CI (99.9%): [673.351, 674.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8770.492 ±(99.9%) 197.653 B/op [Average]
[info]   (min, avg, max) = (8733.746, 8770.492, 8860.182), stdev = 51.330
[info]   CI (99.9%): [8572.840, 8968.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.29% complete, ETA 00:19:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 158382.828 ops/s
[info] # Warmup Iteration   2: 246495.097 ops/s
[info] # Warmup Iteration   3: 251306.941 ops/s
[info] # Warmup Iteration   4: 248015.518 ops/s
[info] # Warmup Iteration   5: 246083.192 ops/s
[info] Iteration   1: 241420.528 ops/s
[info]                  ·gc.alloc.rate:                   1023.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              6671.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4381.696 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 249366.100 ops/s
[info]                  ·gc.alloc.rate:                   1071.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              6761.377 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8484.400 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 252297.297 ops/s
[info]                  ·gc.alloc.rate:                   1056.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              6589.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.995 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4192.808 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 251358.449 ops/s
[info]                  ·gc.alloc.rate:                   1066.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              6675.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.798 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8420.773 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 248393.290 ops/s
[info]                  ·gc.alloc.rate:                   1061.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              6725.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8525.557 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   248567.133 ±(99.9%) 16500.369 ops/s [Average]
[info]   (min, avg, max) = (241420.528, 248567.133, 252297.297), stdev = 4285.093
[info]   CI (99.9%): [232066.764, 265067.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1055.599 ±(99.9%) 72.906 MB/sec [Average]
[info]   (min, avg, max) = (1023.225, 1055.599, 1071.092), stdev = 18.933
[info]   CI (99.9%): [982.693, 1128.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6684.758 ±(99.9%) 250.485 B/op [Average]
[info]   (min, avg, max) = (6589.247, 6684.758, 6761.377), stdev = 65.050
[info]   CI (99.9%): [6434.273, 6935.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.157 ±(99.9%) 0.660 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.157, 0.396), stdev = 0.171
[info]   CI (99.9%): [≈ 0, 0.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1075.672 ±(99.9%) 1418.906 MB/sec [Average]
[info]   (min, avg, max) = (671.995, 1075.672, 1345.485), stdev = 368.485
[info]   CI (99.9%): [≈ 0, 2494.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6801.047 ±(99.9%) 8841.252 B/op [Average]
[info]   (min, avg, max) = (4192.808, 6801.047, 8525.557), stdev = 2296.045
[info]   CI (99.9%): [≈ 0, 15642.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:19:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1234.308 ops/s
[info] # Warmup Iteration   2: 22254.572 ops/s
[info] # Warmup Iteration   3: 26970.400 ops/s
[info] # Warmup Iteration   4: 27680.723 ops/s
[info] # Warmup Iteration   5: 27526.009 ops/s
[info] Iteration   1: 27641.816 ops/s
[info]                  ·gc.alloc.rate:                   1500.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              85454.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76767.627 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 27712.776 ops/s
[info]                  ·gc.alloc.rate:                   1484.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              84319.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76568.216 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 27738.791 ops/s
[info]                  ·gc.alloc.rate:                   1509.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              85664.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114881.114 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 27786.231 ops/s
[info]                  ·gc.alloc.rate:                   1495.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              84719.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76518.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 27754.412 ops/s
[info]                  ·gc.alloc.rate:                   1507.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              85476.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76681.771 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   27726.805 ±(99.9%) 209.649 ops/s [Average]
[info]   (min, avg, max) = (27641.816, 27726.805, 27786.231), stdev = 54.445
[info]   CI (99.9%): [27517.156, 27936.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1499.450 ±(99.9%) 38.823 MB/sec [Average]
[info]   (min, avg, max) = (1484.381, 1499.450, 1509.618), stdev = 10.082
[info]   CI (99.9%): [1460.627, 1538.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   85126.830 ±(99.9%) 2224.639 B/op [Average]
[info]   (min, avg, max) = (84319.676, 85126.830, 85664.042), stdev = 577.732
[info]   CI (99.9%): [82902.191, 87351.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.181 ±(99.9%) 5.570 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.181, 3.543), stdev = 1.447
[info]   CI (99.9%): [≈ 0, 6.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1484.656 ±(99.9%) 1162.069 MB/sec [Average]
[info]   (min, avg, max) = (1347.923, 1484.656, 2024.497), stdev = 301.786
[info]   CI (99.9%): [322.588, 2646.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   84283.349 ±(99.9%) 65865.064 B/op [Average]
[info]   (min, avg, max) = (76518.014, 84283.349, 114881.114), stdev = 17104.948
[info]   CI (99.9%): [18418.284, 150148.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.76% complete, ETA 00:18:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51022.531 ops/s
[info] # Warmup Iteration   2: 138124.122 ops/s
[info] # Warmup Iteration   3: 143946.980 ops/s
[info] # Warmup Iteration   4: 145804.529 ops/s
[info] # Warmup Iteration   5: 146638.783 ops/s
[info] Iteration   1: 146927.383 ops/s
[info]                  ·gc.alloc.rate:                   790.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              8472.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14442.350 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 146804.503 ops/s
[info]                  ·gc.alloc.rate:                   778.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              8346.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7227.323 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 146806.275 ops/s
[info]                  ·gc.alloc.rate:                   770.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              8260.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7227.274 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 146772.747 ops/s
[info]                  ·gc.alloc.rate:                   779.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              8360.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7229.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 147339.662 ops/s
[info]                  ·gc.alloc.rate:                   773.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              8266.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7201.279 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   146930.114 ±(99.9%) 910.445 ops/s [Average]
[info]   (min, avg, max) = (146772.747, 146930.114, 147339.662), stdev = 236.440
[info]   CI (99.9%): [146019.669, 147840.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   778.599 ±(99.9%) 29.626 MB/sec [Average]
[info]   (min, avg, max) = (770.545, 778.599, 790.743), stdev = 7.694
[info]   CI (99.9%): [748.973, 808.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   8341.222 ±(99.9%) 332.041 B/op [Average]
[info]   (min, avg, max) = (8260.793, 8341.222, 8472.473), stdev = 86.230
[info]   CI (99.9%): [8009.180, 8673.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.223 ±(99.9%) 1.215 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.223, 0.670), stdev = 0.316
[info]   CI (99.9%): [≈ 0, 1.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   808.847 ±(99.9%) 1160.386 MB/sec [Average]
[info]   (min, avg, max) = (674.028, 808.847, 1347.916), stdev = 301.349
[info]   CI (99.9%): [≈ 0, 1969.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8665.454 ±(99.9%) 12435.283 B/op [Average]
[info]   (min, avg, max) = (7201.279, 8665.454, 14442.350), stdev = 3229.404
[info]   CI (99.9%): [≈ 0, 21100.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.00% complete, ETA 00:18:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 304429.186 ops/s
[info] # Warmup Iteration   2: 410000.039 ops/s
[info] # Warmup Iteration   3: 442247.367 ops/s
[info] # Warmup Iteration   4: 445109.819 ops/s
[info] # Warmup Iteration   5: 446444.672 ops/s
[info] Iteration   1: 444951.653 ops/s
[info]                  ·gc.alloc.rate:                   1340.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              4740.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.133 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4754.560 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 445317.916 ops/s
[info]                  ·gc.alloc.rate:                   1334.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              4717.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.617 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4755.692 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 442356.661 ops/s
[info]                  ·gc.alloc.rate:                   1351.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              4806.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4789.901 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 441754.442 ops/s
[info]                  ·gc.alloc.rate:                   1330.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              4740.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4798.768 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 446176.659 ops/s
[info]                  ·gc.alloc.rate:                   1319.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              4655.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.341 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2379.085 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   444111.466 ±(99.9%) 7471.977 ops/s [Average]
[info]   (min, avg, max) = (441754.442, 444111.466, 446176.659), stdev = 1940.449
[info]   CI (99.9%): [436639.490, 451583.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1335.288 ±(99.9%) 44.903 MB/sec [Average]
[info]   (min, avg, max) = (1319.672, 1335.288, 1351.171), stdev = 11.661
[info]   CI (99.9%): [1290.385, 1380.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4732.383 ±(99.9%) 208.624 B/op [Average]
[info]   (min, avg, max) = (4655.821, 4732.383, 4806.760), stdev = 54.179
[info]   CI (99.9%): [4523.759, 4941.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.177 ±(99.9%) 0.589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.177, 0.368), stdev = 0.153
[info]   CI (99.9%): [≈ 0, 0.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1211.454 ±(99.9%) 1156.182 MB/sec [Average]
[info]   (min, avg, max) = (674.341, 1211.454, 1346.745), stdev = 300.257
[info]   CI (99.9%): [55.272, 2367.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4295.601 ±(99.9%) 4126.155 B/op [Average]
[info]   (min, avg, max) = (2379.085, 4295.601, 4798.768), stdev = 1071.549
[info]   CI (99.9%): [169.446, 8421.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.24% complete, ETA 00:18:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 333091.831 ops/s
[info] # Warmup Iteration   2: 466625.898 ops/s
[info] # Warmup Iteration   3: 474494.086 ops/s
[info] # Warmup Iteration   4: 474601.042 ops/s
[info] # Warmup Iteration   5: 480786.700 ops/s
[info] Iteration   1: 463209.752 ops/s
[info]                  ·gc.alloc.rate:                   878.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              2983.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2292.709 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 475025.060 ops/s
[info]                  ·gc.alloc.rate:                   894.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              2963.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2233.581 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 482763.270 ops/s
[info]                  ·gc.alloc.rate:                   928.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              3026.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.174 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4395.361 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 481682.760 ops/s
[info]                  ·gc.alloc.rate:                   898.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              2937.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2202.630 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 481873.305 ops/s
[info]                  ·gc.alloc.rate:                   900.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              2941.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2201.702 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   476910.830 ±(99.9%) 31807.124 ops/s [Average]
[info]   (min, avg, max) = (463209.752, 476910.830, 482763.270), stdev = 8260.209
[info]   CI (99.9%): [445103.706, 508717.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   900.017 ±(99.9%) 69.624 MB/sec [Average]
[info]   (min, avg, max) = (878.050, 900.017, 928.172), stdev = 18.081
[info]   CI (99.9%): [830.393, 969.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2970.273 ±(99.9%) 139.747 B/op [Average]
[info]   (min, avg, max) = (2937.210, 2970.273, 3026.059), stdev = 36.292
[info]   CI (99.9%): [2830.526, 3110.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.109 ±(99.9%) 0.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.109, 0.407), stdev = 0.170
[info]   CI (99.9%): [≈ 0, 0.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   809.056 ±(99.9%) 1160.492 MB/sec [Average]
[info]   (min, avg, max) = (674.050, 809.056, 1348.174), stdev = 301.376
[info]   CI (99.9%): [≈ 0, 1969.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   2665.197 ±(99.9%) 3727.029 B/op [Average]
[info]   (min, avg, max) = (2201.702, 2665.197, 4395.361), stdev = 967.898
[info]   CI (99.9%): [≈ 0, 6392.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.47% complete, ETA 00:17:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17554.957 ops/s
[info] # Warmup Iteration   2: 61873.107 ops/s
[info] # Warmup Iteration   3: 63093.800 ops/s
[info] # Warmup Iteration   4: 63561.361 ops/s
[info] # Warmup Iteration   5: 64151.373 ops/s
[info] Iteration   1: 63631.816 ops/s
[info]                  ·gc.alloc.rate:                   1400.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              34658.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33361.086 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 63994.937 ops/s
[info]                  ·gc.alloc.rate:                   1396.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              34359.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.531 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33191.910 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 61754.333 ops/s
[info]                  ·gc.alloc.rate:                   1356.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              34571.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34412.660 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 63838.134 ops/s
[info]                  ·gc.alloc.rate:                   1412.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              34829.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33305.332 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 63831.236 ops/s
[info]                  ·gc.alloc.rate:                   1400.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              34526.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33342.355 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   63410.091 ±(99.9%) 3598.512 ops/s [Average]
[info]   (min, avg, max) = (61754.333, 63410.091, 63994.937), stdev = 934.522
[info]   CI (99.9%): [59811.579, 67008.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1393.382 ±(99.9%) 82.817 MB/sec [Average]
[info]   (min, avg, max) = (1356.379, 1393.382, 1412.508), stdev = 21.507
[info]   CI (99.9%): [1310.565, 1476.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   34589.155 ±(99.9%) 666.506 B/op [Average]
[info]   (min, avg, max) = (34359.041, 34589.155, 34829.822), stdev = 173.089
[info]   CI (99.9%): [33922.649, 35255.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.411 ±(99.9%) 0.884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.411, 0.515), stdev = 0.230
[info]   CI (99.9%): [≈ 0, 1.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1350.184 ±(99.9%) 5.080 MB/sec [Average]
[info]   (min, avg, max) = (1348.512, 1350.184, 1352.052), stdev = 1.319
[info]   CI (99.9%): [1345.104, 1355.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   33522.668 ±(99.9%) 1932.379 B/op [Average]
[info]   (min, avg, max) = (33191.910, 33522.668, 34412.660), stdev = 501.833
[info]   CI (99.9%): [31590.290, 35455.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.71% complete, ETA 00:17:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43039.862 ops/s
[info] # Warmup Iteration   2: 91801.991 ops/s
[info] # Warmup Iteration   3: 96432.220 ops/s
[info] # Warmup Iteration   4: 99378.427 ops/s
[info] # Warmup Iteration   5: 99029.061 ops/s
[info] Iteration   1: 99025.219 ops/s
[info]                  ·gc.alloc.rate:                   1546.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              24584.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32114.281 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 99383.449 ops/s
[info]                  ·gc.alloc.rate:                   1524.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              24147.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21362.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 98351.453 ops/s
[info]                  ·gc.alloc.rate:                   1520.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              24332.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21607.486 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 99235.675 ops/s
[info]                  ·gc.alloc.rate:                   1534.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              24335.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21435.732 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 98827.902 ops/s
[info]                  ·gc.alloc.rate:                   1527.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              24325.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21545.646 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   98964.740 ±(99.9%) 1548.928 ops/s [Average]
[info]   (min, avg, max) = (98351.453, 98964.740, 99383.449), stdev = 402.252
[info]   CI (99.9%): [97415.812, 100513.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1530.715 ±(99.9%) 39.307 MB/sec [Average]
[info]   (min, avg, max) = (1520.285, 1530.715, 1546.554), stdev = 10.208
[info]   CI (99.9%): [1491.407, 1570.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   24345.196 ±(99.9%) 600.511 B/op [Average]
[info]   (min, avg, max) = (24147.330, 24345.196, 24584.971), stdev = 155.951
[info]   CI (99.9%): [23744.684, 24945.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.463 ±(99.9%) 1.447 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.463, 0.989), stdev = 0.376
[info]   CI (99.9%): [≈ 0, 1.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1484.734 ±(99.9%) 1152.637 MB/sec [Average]
[info]   (min, avg, max) = (1349.027, 1484.734, 2020.196), stdev = 299.336
[info]   CI (99.9%): [332.098, 2637.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23613.039 ±(99.9%) 18303.230 B/op [Average]
[info]   (min, avg, max) = (21362.050, 23613.039, 32114.281), stdev = 4753.291
[info]   CI (99.9%): [5309.809, 41916.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:17:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50071.780 ops/s
[info] # Warmup Iteration   2: 157439.866 ops/s
[info] # Warmup Iteration   3: 166677.465 ops/s
[info] # Warmup Iteration   4: 172302.905 ops/s
[info] # Warmup Iteration   5: 171495.207 ops/s
[info] Iteration   1: 172254.997 ops/s
[info]                  ·gc.alloc.rate:                   734.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              6711.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.988 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6159.287 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 172696.568 ops/s
[info]                  ·gc.alloc.rate:                   736.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              6715.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6143.775 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 172275.715 ops/s
[info]                  ·gc.alloc.rate:                   731.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              6682.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6158.751 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 172313.251 ops/s
[info]                  ·gc.alloc.rate:                   733.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              6700.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6157.393 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 169175.847 ops/s
[info]                  ·gc.alloc.rate:                   713.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              6639.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6271.477 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   171743.276 ±(99.9%) 5570.367 ops/s [Average]
[info]   (min, avg, max) = (169175.847, 171743.276, 172696.568), stdev = 1446.606
[info]   CI (99.9%): [166172.909, 177313.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   730.001 ±(99.9%) 35.819 MB/sec [Average]
[info]   (min, avg, max) = (713.722, 730.001, 736.780), stdev = 9.302
[info]   CI (99.9%): [694.182, 765.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6689.967 ±(99.9%) 118.845 B/op [Average]
[info]   (min, avg, max) = (6639.686, 6689.967, 6715.788), stdev = 30.864
[info]   CI (99.9%): [6571.122, 6808.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.152 ±(99.9%) 0.955 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.152, 0.570), stdev = 0.248
[info]   CI (99.9%): [≈ 0, 1.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.093 ±(99.9%) 0.451 MB/sec [Average]
[info]   (min, avg, max) = (673.988, 674.093, 674.276), stdev = 0.117
[info]   CI (99.9%): [673.642, 674.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6178.136 ±(99.9%) 202.429 B/op [Average]
[info]   (min, avg, max) = (6143.775, 6178.136, 6271.477), stdev = 52.570
[info]   CI (99.9%): [5975.707, 6380.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.18% complete, ETA 00:17:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186517.395 ops/s
[info] # Warmup Iteration   2: 262925.709 ops/s
[info] # Warmup Iteration   3: 266547.436 ops/s
[info] # Warmup Iteration   4: 259001.516 ops/s
[info] # Warmup Iteration   5: 263750.782 ops/s
[info] Iteration   1: 262481.116 ops/s
[info]                  ·gc.alloc.rate:                   971.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              5825.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8072.391 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 268660.620 ops/s
[info]                  ·gc.alloc.rate:                   980.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              5744.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.965 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3941.252 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 267999.647 ops/s
[info]                  ·gc.alloc.rate:                   994.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              5842.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7901.441 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 268329.457 ops/s
[info]                  ·gc.alloc.rate:                   972.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3946.098 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 266857.791 ops/s
[info]                  ·gc.alloc.rate:                   992.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              5852.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7937.686 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   266865.726 ±(99.9%) 9793.589 ops/s [Average]
[info]   (min, avg, max) = (262481.116, 266865.726, 268660.620), stdev = 2543.364
[info]   CI (99.9%): [257072.138, 276659.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   982.378 ±(99.9%) 42.122 MB/sec [Average]
[info]   (min, avg, max) = (971.375, 982.378, 994.910), stdev = 10.939
[info]   CI (99.9%): [940.256, 1024.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5794.054 ±(99.9%) 253.307 B/op [Average]
[info]   (min, avg, max) = (5704.738, 5794.054, 5852.943), stdev = 65.783
[info]   CI (99.9%): [5540.747, 6047.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.098 ±(99.9%) 0.614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.098, 0.367), stdev = 0.159
[info]   CI (99.9%): [≈ 0, 0.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1076.579 ±(99.9%) 1419.291 MB/sec [Average]
[info]   (min, avg, max) = (672.664, 1076.579, 1346.001), stdev = 368.585
[info]   CI (99.9%): [≈ 0, 2495.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6359.774 ±(99.9%) 8496.470 B/op [Average]
[info]   (min, avg, max) = (3941.252, 6359.774, 8072.391), stdev = 2206.506
[info]   CI (99.9%): [≈ 0, 14856.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.41% complete, ETA 00:16:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13357.280 ops/s
[info] # Warmup Iteration   2: 65752.458 ops/s
[info] # Warmup Iteration   3: 68675.652 ops/s
[info] # Warmup Iteration   4: 69450.618 ops/s
[info] # Warmup Iteration   5: 69615.376 ops/s
[info] Iteration   1: 69649.869 ops/s
[info]                  ·gc.alloc.rate:                   2615.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              59095.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2704.513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61108.108 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 69319.335 ops/s
[info]                  ·gc.alloc.rate:                   2616.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              59390.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2709.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61501.677 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 69492.012 ops/s
[info]                  ·gc.alloc.rate:                   2649.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              60011.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61440.000 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 69610.850 ops/s
[info]                  ·gc.alloc.rate:                   2632.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              59530.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46055.835 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 69424.948 ops/s
[info]                  ·gc.alloc.rate:                   2641.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              59880.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61612.542 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   69499.403 ±(99.9%) 520.489 ops/s [Average]
[info]   (min, avg, max) = (69319.335, 69499.403, 69649.869), stdev = 135.169
[info]   CI (99.9%): [68978.914, 70019.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2631.069 ±(99.9%) 57.354 MB/sec [Average]
[info]   (min, avg, max) = (2615.419, 2631.069, 2649.323), stdev = 14.895
[info]   CI (99.9%): [2573.715, 2688.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   59581.717 ±(99.9%) 1427.693 B/op [Average]
[info]   (min, avg, max) = (59095.050, 59581.717, 60011.777), stdev = 370.767
[info]   CI (99.9%): [58154.024, 61009.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.415 ±(99.9%) 1.292 B/op [Average]
[info]   (min, avg, max) = (0.941, 1.415, 1.890), stdev = 0.336
[info]   CI (99.9%): [0.122, 2.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2576.187 ±(99.9%) 1160.909 MB/sec [Average]
[info]   (min, avg, max) = (2036.940, 2576.187, 2717.424), stdev = 301.484
[info]   CI (99.9%): [1415.278, 3737.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   58343.633 ±(99.9%) 26460.313 B/op [Average]
[info]   (min, avg, max) = (46055.835, 58343.633, 61612.542), stdev = 6871.659
[info]   CI (99.9%): [31883.320, 84803.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.65% complete, ETA 00:16:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83907.857 ops/s
[info] # Warmup Iteration   2: 173891.446 ops/s
[info] # Warmup Iteration   3: 184197.154 ops/s
[info] # Warmup Iteration   4: 185399.456 ops/s
[info] # Warmup Iteration   5: 185237.354 ops/s
[info] Iteration   1: 177414.365 ops/s
[info]                  ·gc.alloc.rate:                   857.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              7606.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5986.291 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 184366.697 ops/s
[info]                  ·gc.alloc.rate:                   902.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              7708.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11521.126 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 186637.440 ops/s
[info]                  ·gc.alloc.rate:                   902.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              7609.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5695.791 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 185930.057 ops/s
[info]                  ·gc.alloc.rate:                   895.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              7576.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5717.752 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 182648.164 ops/s
[info]                  ·gc.alloc.rate:                   903.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              7786.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11640.895 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   183399.345 ±(99.9%) 14175.625 ops/s [Average]
[info]   (min, avg, max) = (177414.365, 183399.345, 186637.440), stdev = 3681.365
[info]   CI (99.9%): [169223.720, 197574.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   892.204 ±(99.9%) 76.363 MB/sec [Average]
[info]   (min, avg, max) = (857.245, 892.204, 903.464), stdev = 19.831
[info]   CI (99.9%): [815.841, 968.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7657.504 ±(99.9%) 337.304 B/op [Average]
[info]   (min, avg, max) = (7576.619, 7657.504, 7786.712), stdev = 87.597
[info]   CI (99.9%): [7320.201, 7994.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.357 ±(99.9%) 1.450 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.357, 0.889), stdev = 0.377
[info]   CI (99.9%): [≈ 0, 1.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   945.127 ±(99.9%) 1423.230 MB/sec [Average]
[info]   (min, avg, max) = (674.672, 945.127, 1350.650), stdev = 369.608
[info]   CI (99.9%): [≈ 0, 2368.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8112.371 ±(99.9%) 12201.798 B/op [Average]
[info]   (min, avg, max) = (5695.791, 8112.371, 11640.895), stdev = 3168.768
[info]   CI (99.9%): [≈ 0, 20314.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.88% complete, ETA 00:16:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139295.464 ops/s
[info] # Warmup Iteration   2: 497014.896 ops/s
[info] # Warmup Iteration   3: 514308.707 ops/s
[info] # Warmup Iteration   4: 516885.908 ops/s
[info] # Warmup Iteration   5: 510404.280 ops/s
[info] Iteration   1: 516078.784 ops/s
[info]                  ·gc.alloc.rate:                   427.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              1303.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2054.900 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 518468.360 ops/s
[info]                  ·gc.alloc.rate:      408.888 MB/sec
[info]                  ·gc.alloc.rate.norm: 1241.534 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 510020.200 ops/s
[info]                  ·gc.alloc.rate:                   417.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              1289.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2079.142 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 515445.968 ops/s
[info]                  ·gc.alloc.rate:                   424.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              1296.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.996 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2058.432 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 518777.495 ops/s
[info]                  ·gc.alloc.rate:      408.792 MB/sec
[info]                  ·gc.alloc.rate.norm: 1240.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   515758.162 ±(99.9%) 13557.605 ops/s [Average]
[info]   (min, avg, max) = (510020.200, 515758.162, 518777.495), stdev = 3520.867
[info]   CI (99.9%): [502200.557, 529315.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   417.476 ±(99.9%) 33.138 MB/sec [Average]
[info]   (min, avg, max) = (408.792, 417.476, 427.364), stdev = 8.606
[info]   CI (99.9%): [384.338, 450.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1274.221 ±(99.9%) 119.149 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1274.221, 1303.580), stdev = 30.943
[info]   CI (99.9%): [1155.073, 1393.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.229 ±(99.9%) 1.971 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.229, 1.145), stdev = 0.512
[info]   CI (99.9%): [≈ 0, 2.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.707 ±(99.9%) 6.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.707, 3.533), stdev = 1.580
[info]   CI (99.9%): [≈ 0, 6.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   404.271 ±(99.9%) 1421.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.271, 673.996), stdev = 369.047
[info]   CI (99.9%): [≈ 0, 1825.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1238.495 ±(99.9%) 4353.630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1238.495, 2079.142), stdev = 1130.624
[info]   CI (99.9%): [≈ 0, 5592.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.12% complete, ETA 00:16:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 465425.834 ops/s
[info] # Warmup Iteration   2: 526767.435 ops/s
[info] # Warmup Iteration   3: 565211.505 ops/s
[info] # Warmup Iteration   4: 565141.170 ops/s
[info] # Warmup Iteration   5: 562194.113 ops/s
[info] Iteration   1: 566277.063 ops/s
[info]                  ·gc.alloc.rate:      305.105 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 555422.964 ops/s
[info]                  ·gc.alloc.rate:                   309.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              876.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1449.660 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 565378.784 ops/s
[info]                  ·gc.alloc.rate:      304.574 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 562844.419 ops/s
[info]                  ·gc.alloc.rate:                   320.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              895.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1885.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 566318.654 ops/s
[info]                  ·gc.alloc.rate:      305.112 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   563248.377 ±(99.9%) 17702.333 ops/s [Average]
[info]   (min, avg, max) = (555422.964, 563248.377, 566318.654), stdev = 4597.240
[info]   CI (99.9%): [545546.044, 580950.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   308.909 ±(99.9%) 25.574 MB/sec [Average]
[info]   (min, avg, max) = (304.574, 308.909, 320.240), stdev = 6.641
[info]   CI (99.9%): [283.335, 334.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   863.286 ±(99.9%) 84.514 B/op [Average]
[info]   (min, avg, max) = (848.001, 863.286, 895.555), stdev = 21.948
[info]   CI (99.9%): [778.773, 947.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   237.151 ±(99.9%) 1269.813 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 237.151, 674.057), stdev = 329.767
[info]   CI (99.9%): [≈ 0, 1506.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   666.935 ±(99.9%) 3566.152 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 666.935, 1885.013), stdev = 926.118
[info]   CI (99.9%): [≈ 0, 4233.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:15:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 441399.227 ops/s
[info] # Warmup Iteration   2: 578080.872 ops/s
[info] # Warmup Iteration   3: 597396.478 ops/s
[info] # Warmup Iteration   4: 596577.827 ops/s
[info] # Warmup Iteration   5: 595951.672 ops/s
[info] Iteration   1: 595128.549 ops/s
[info]                  ·gc.alloc.rate:      6.051 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 595280.648 ops/s
[info]                  ·gc.alloc.rate:      6.051 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 599298.942 ops/s
[info]                  ·gc.alloc.rate:      6.093 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 596818.772 ops/s
[info]                  ·gc.alloc.rate:      6.068 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 594033.634 ops/s
[info]                  ·gc.alloc.rate:      6.039 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   596112.109 ±(99.9%) 7852.400 ops/s [Average]
[info]   (min, avg, max) = (594033.634, 596112.109, 599298.942), stdev = 2039.243
[info]   CI (99.9%): [588259.709, 603964.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.060 ±(99.9%) 0.081 MB/sec [Average]
[info]   (min, avg, max) = (6.039, 6.060, 6.093), stdev = 0.021
[info]   CI (99.9%): [5.980, 6.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.59% complete, ETA 00:15:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12007.032 ops/s
[info] # Warmup Iteration   2: 32808.646 ops/s
[info] # Warmup Iteration   3: 33253.189 ops/s
[info] # Warmup Iteration   4: 33615.786 ops/s
[info] # Warmup Iteration   5: 33910.174 ops/s
[info] Iteration   1: 33960.059 ops/s
[info]                  ·gc.alloc.rate:                   1670.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              77407.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62547.180 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 33961.176 ops/s
[info]                  ·gc.alloc.rate:                   1704.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              78989.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93892.422 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 33753.983 ops/s
[info]                  ·gc.alloc.rate:                   1680.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              78360.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63053.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 33920.370 ops/s
[info]                  ·gc.alloc.rate:                   1688.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              78345.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94188.563 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 33921.018 ops/s
[info]                  ·gc.alloc.rate:                   1674.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              77727.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.662 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62866.344 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   33903.321 ±(99.9%) 330.528 ops/s [Average]
[info]   (min, avg, max) = (33753.983, 33903.321, 33961.176), stdev = 85.837
[info]   CI (99.9%): [33572.793, 34233.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1683.581 ±(99.9%) 51.453 MB/sec [Average]
[info]   (min, avg, max) = (1670.163, 1683.581, 1704.251), stdev = 13.362
[info]   CI (99.9%): [1632.128, 1735.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78166.265 ±(99.9%) 2369.413 B/op [Average]
[info]   (min, avg, max) = (77407.889, 78166.265, 78989.286), stdev = 615.329
[info]   CI (99.9%): [75796.851, 80535.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.773 ±(99.9%) 1.664 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.773, 0.971), stdev = 0.432
[info]   CI (99.9%): [≈ 0, 2.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1622.340 ±(99.9%) 1424.908 MB/sec [Average]
[info]   (min, avg, max) = (1349.526, 1622.340, 2029.594), stdev = 370.044
[info]   CI (99.9%): [197.432, 3047.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   75309.520 ±(99.9%) 65846.926 B/op [Average]
[info]   (min, avg, max) = (62547.180, 75309.520, 94188.563), stdev = 17100.238
[info]   CI (99.9%): [9462.594, 141156.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 86.82% complete, ETA 00:15:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106104.602 ops/s
[info] # Warmup Iteration   2: 833601.232 ops/s
[info] # Warmup Iteration   3: 790795.964 ops/s
[info] # Warmup Iteration   4: 868052.277 ops/s
[info] # Warmup Iteration   5: 878535.404 ops/s
[info] Iteration   1: 881151.755 ops/s
[info]                  ·gc.alloc.rate:                   2224.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              3973.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3600.230 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 876307.097 ops/s
[info]                  ·gc.alloc.rate:                   2211.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              3971.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3628.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 880025.311 ops/s
[info]                  ·gc.alloc.rate:                   2222.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              3974.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3617.492 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 871572.432 ops/s
[info]                  ·gc.alloc.rate:                   2253.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              4070.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4881.372 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 877366.691 ops/s
[info]                  ·gc.alloc.rate:                   2243.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              4025.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3643.416 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   877284.657 ±(99.9%) 14415.185 ops/s [Average]
[info]   (min, avg, max) = (871572.432, 877284.657, 881151.755), stdev = 3743.578
[info]   CI (99.9%): [862869.473, 891699.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2230.918 ±(99.9%) 66.562 MB/sec [Average]
[info]   (min, avg, max) = (2211.062, 2230.918, 2253.623), stdev = 17.286
[info]   CI (99.9%): [2164.355, 2297.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4003.144 ±(99.9%) 169.064 B/op [Average]
[info]   (min, avg, max) = (3971.646, 4003.144, 4070.376), stdev = 43.905
[info]   CI (99.9%): [3834.081, 4172.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.104), stdev = 0.009
[info]   CI (99.9%): [0.064, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.179 ±(99.9%) 0.064 B/op [Average]
[info]   (min, avg, max) = (0.149, 0.179, 0.188), stdev = 0.017
[info]   CI (99.9%): [0.115, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2158.146 ±(99.9%) 1172.267 MB/sec [Average]
[info]   (min, avg, max) = (2015.261, 2158.146, 2702.642), stdev = 304.434
[info]   CI (99.9%): [985.880, 3330.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3874.113 ±(99.9%) 2169.047 B/op [Average]
[info]   (min, avg, max) = (3600.230, 3874.113, 4881.372), stdev = 563.295
[info]   CI (99.9%): [1705.065, 6043.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.06% complete, ETA 00:14:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88909.117 ops/s
[info] # Warmup Iteration   2: 1630833.642 ops/s
[info] # Warmup Iteration   3: 1719779.853 ops/s
[info] # Warmup Iteration   4: 1731503.869 ops/s
[info] # Warmup Iteration   5: 1730510.294 ops/s
[info] Iteration   1: 1700305.857 ops/s
[info]                  ·gc.alloc.rate:                   1057.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              979.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.995 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 624.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1732928.939 ops/s
[info]                  ·gc.alloc.rate:                   1099.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              998.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1224.495 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1712144.679 ops/s
[info]                  ·gc.alloc.rate:                   1088.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1239.377 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1732408.503 ops/s
[info]                  ·gc.alloc.rate:                   1076.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              978.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.053 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 612.421 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1729543.159 ops/s
[info]                  ·gc.alloc.rate:                   1085.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              987.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1228.086 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1721466.227 ±(99.9%) 56165.853 ops/s [Average]
[info]   (min, avg, max) = (1700305.857, 1721466.227, 1732928.939), stdev = 14586.094
[info]   CI (99.9%): [1665300.374, 1777632.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1081.484 ±(99.9%) 59.852 MB/sec [Average]
[info]   (min, avg, max) = (1057.808, 1081.484, 1099.533), stdev = 15.543
[info]   CI (99.9%): [1021.632, 1141.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   988.931 ±(99.9%) 40.318 B/op [Average]
[info]   (min, avg, max) = (978.340, 988.931, 1000.472), stdev = 10.470
[info]   CI (99.9%): [948.613, 1029.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.030 ±(99.9%) 0.160 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.076), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1078.655 ±(99.9%) 1422.337 MB/sec [Average]
[info]   (min, avg, max) = (673.995, 1078.655, 1349.322), stdev = 369.376
[info]   CI (99.9%): [≈ 0, 2500.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   985.677 ±(99.9%) 1291.953 B/op [Average]
[info]   (min, avg, max) = (612.421, 985.677, 1239.377), stdev = 335.516
[info]   CI (99.9%): [≈ 0, 2277.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.29% complete, ETA 00:14:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3710818.594 ops/s
[info] # Warmup Iteration   2: 7395192.127 ops/s
[info] # Warmup Iteration   3: 7412117.921 ops/s
[info] # Warmup Iteration   4: 7825893.089 ops/s
[info] # Warmup Iteration   5: 7812386.382 ops/s
[info] Iteration   1: 7837897.403 ops/s
[info]                  ·gc.alloc.rate:      239.039 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7757652.318 ops/s
[info]                  ·gc.alloc.rate:                   246.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.527 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103.790 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7820663.108 ops/s
[info]                  ·gc.alloc.rate:      238.488 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7789880.640 ops/s
[info]                  ·gc.alloc.rate:                   253.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              51.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     ≈ 10⁻⁵ B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103.356 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7821649.976 ops/s
[info]                  ·gc.alloc.rate:      238.505 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   7805548.689 ±(99.9%) 122884.517 ops/s [Average]
[info]   (min, avg, max) = (7757652.318, 7805548.689, 7837897.403), stdev = 31912.719
[info]   CI (99.9%): [7682664.172, 7928433.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   243.025 ±(99.9%) 24.829 MB/sec [Average]
[info]   (min, avg, max) = (238.488, 243.025, 253.036), stdev = 6.448
[info]   CI (99.9%): [218.196, 267.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   49.008 ±(99.9%) 5.553 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.008, 51.113), stdev = 1.442
[info]   CI (99.9%): [43.455, 54.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   ≈ 10⁻⁵ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   ≈ 10⁻⁶ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.640 ±(99.9%) 1079.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.640, 511.673), stdev = 280.215
[info]   CI (99.9%): [≈ 0, 1283.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   41.429 ±(99.9%) 218.445 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.429, 103.790), stdev = 56.730
[info]   CI (99.9%): [≈ 0, 259.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.53% complete, ETA 00:14:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 842.631 ops/s
[info] # Warmup Iteration   2: 112105.532 ops/s
[info] # Warmup Iteration   3: 239619.957 ops/s
[info] # Warmup Iteration   4: 294346.918 ops/s
[info] # Warmup Iteration   5: 306439.516 ops/s
[info] Iteration   1: 303337.920 ops/s
[info]                  ·gc.alloc.rate:                   2027.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              10517.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10495.161 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 307678.042 ops/s
[info]                  ·gc.alloc.rate:                   2055.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              10513.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10353.450 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 307216.698 ops/s
[info]                  ·gc.alloc.rate:                   2041.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              10458.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.839 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10384.711 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 306529.788 ops/s
[info]                  ·gc.alloc.rate:                   2048.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              10518.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10417.700 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 308288.984 ops/s
[info]                  ·gc.alloc.rate:                   2056.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              10500.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10371.974 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   306610.286 ±(99.9%) 7466.856 ops/s [Average]
[info]   (min, avg, max) = (303337.920, 306610.286, 308288.984), stdev = 1939.119
[info]   CI (99.9%): [299143.430, 314077.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2045.886 ±(99.9%) 46.210 MB/sec [Average]
[info]   (min, avg, max) = (2027.448, 2045.886, 2056.907), stdev = 12.000
[info]   CI (99.9%): [1999.676, 2092.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10501.536 ±(99.9%) 97.607 B/op [Average]
[info]   (min, avg, max) = (10458.122, 10501.536, 10518.371), stdev = 25.348
[info]   CI (99.9%): [10403.930, 10599.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.235 ±(99.9%) 0.609 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.235, 0.427), stdev = 0.158
[info]   CI (99.9%): [≈ 0, 0.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2026.957 ±(99.9%) 14.120 MB/sec [Average]
[info]   (min, avg, max) = (2023.091, 2026.957, 2031.789), stdev = 3.667
[info]   CI (99.9%): [2012.836, 2041.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10404.599 ±(99.9%) 214.820 B/op [Average]
[info]   (min, avg, max) = (10353.450, 10404.599, 10495.161), stdev = 55.788
[info]   CI (99.9%): [10189.779, 10619.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.76% complete, ETA 00:14:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131223.063 ops/s
[info] # Warmup Iteration   2: 1102449.791 ops/s
[info] # Warmup Iteration   3: 1158851.463 ops/s
[info] # Warmup Iteration   4: 1140411.284 ops/s
[info] # Warmup Iteration   5: 1159142.754 ops/s
[info] Iteration   1: 1154626.028 ops/s
[info]                  ·gc.alloc.rate:                   1634.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              2228.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1838.752 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1153809.798 ops/s
[info]                  ·gc.alloc.rate:                   1645.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              2245.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.347 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2763.165 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1157236.588 ops/s
[info]                  ·gc.alloc.rate:                   1644.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              2237.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1839.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1155262.409 ops/s
[info]                  ·gc.alloc.rate:                   1643.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              2239.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1844.063 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1155506.606 ops/s
[info]                  ·gc.alloc.rate:                   1657.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              2257.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2769.191 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1155288.286 ±(99.9%) 4896.805 ops/s [Average]
[info]   (min, avg, max) = (1153809.798, 1155288.286, 1157236.588), stdev = 1271.685
[info]   CI (99.9%): [1150391.481, 1160185.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1645.185 ±(99.9%) 31.817 MB/sec [Average]
[info]   (min, avg, max) = (1634.339, 1645.185, 1657.536), stdev = 8.263
[info]   CI (99.9%): [1613.368, 1677.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2241.533 ±(99.9%) 42.192 B/op [Average]
[info]   (min, avg, max) = (2228.148, 2241.533, 2257.782), stdev = 10.957
[info]   CI (99.9%): [2199.341, 2283.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.068 ±(99.9%) 0.182 B/op [Average]
[info]   (min, avg, max) = (0.028, 0.068, 0.142), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1622.517 ±(99.9%) 1429.479 MB/sec [Average]
[info]   (min, avg, max) = (1348.719, 1622.517, 2032.983), stdev = 371.231
[info]   CI (99.9%): [193.038, 3051.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2210.846 ±(99.9%) 1952.103 B/op [Average]
[info]   (min, avg, max) = (1838.752, 2210.846, 2769.191), stdev = 506.955
[info]   CI (99.9%): [258.743, 4162.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.00% complete, ETA 00:13:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_aee5aee3/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 355485.134 ops/s
[info] # Warmup Iteration   2: 2559316.014 ops/s
[info] # Warmup Iteration   3: 2473776.530 ops/s
[info] # Warmup Iteration   4: 2614093.773 ops/s
[info] # Warmup Iteration   5: 2611751.877 ops/s
[info] Iteration   1: 2632093.195 ops/s
[info]                  ·gc.alloc.rate:                   1057.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 403.115 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2610448.272 ops/s
[info]                  ·gc.alloc.rate:                   1092.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              658.995 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 812.915 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2630581.314 ops/s
[info]                  ·gc.alloc.rate:                   1076.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              644.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.106 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 807.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2630288.108 ops/s
[info]                  ·gc.alloc.rate:                   1059.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              633.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 403.778 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2614173.142 ops/s
[info]                  ·gc.alloc.rate:                   1081.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              651.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 812.916 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2623516.806 ±(99.9%) 39803.577 ops/s [Average]
[info]   (min, avg, max) = (2610448.272, 2623516.806, 2632093.195), stdev = 10336.863
[info]   CI (99.9%): [2583713.229, 2663320.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1073.640 ±(99.9%) 58.230 MB/sec [Average]
[info]   (min, avg, max) = (1057.638, 1073.640, 1092.951), stdev = 15.122
[info]   CI (99.9%): [1015.410, 1131.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   644.167 ±(99.9%) 43.736 B/op [Average]
[info]   (min, avg, max) = (632.484, 644.167, 658.995), stdev = 11.358
[info]   CI (99.9%): [600.430, 687.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.017 ±(99.9%) 0.125 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.075), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1079.227 ±(99.9%) 1422.987 MB/sec [Average]
[info]   (min, avg, max) = (674.087, 1079.227, 1349.978), stdev = 369.545
[info]   CI (99.9%): [≈ 0, 2502.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   647.963 ±(99.9%) 859.560 B/op [Average]
[info]   (min, avg, max) = (403.115, 647.963, 812.916), stdev = 223.225
[info]   CI (99.9%): [≈ 0, 1507.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.24% complete, ETA 00:13:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2432647.827 ops/s
[info] # Warmup Iteration   2: 5620735.446 ops/s
[info] # Warmup Iteration   3: 5779765.767 ops/s
[info] # Warmup Iteration   4: 5637816.856 ops/s
[info] # Warmup Iteration   5: 5817322.334 ops/s
[info] Iteration   1: 5781083.077 ops/s
[info]                  ·gc.alloc.rate:                   669.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              182.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183.346 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5840556.740 ops/s
[info]                  ·gc.alloc.rate:                   675.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              182.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181.300 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 5833037.656 ops/s
[info]                  ·gc.alloc.rate:                   674.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              182.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181.528 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 5826274.329 ops/s
[info]                  ·gc.alloc.rate:                   667.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              180.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181.563 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 5823776.442 ops/s
[info]                  ·gc.alloc.rate:                   675.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              182.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181.641 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   5820945.649 ±(99.9%) 89403.055 ops/s [Average]
[info]   (min, avg, max) = (5781083.077, 5820945.649, 5840556.740), stdev = 23217.690
[info]   CI (99.9%): [5731542.594, 5910348.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   672.567 ±(99.9%) 14.692 MB/sec [Average]
[info]   (min, avg, max) = (667.406, 672.567, 675.548), stdev = 3.815
[info]   CI (99.9%): [657.875, 687.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   181.867 ±(99.9%) 3.448 B/op [Average]
[info]   (min, avg, max) = (180.310, 181.867, 182.582), stdev = 0.895
[info]   CI (99.9%): [178.419, 185.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.593 ±(99.9%) 4.930 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.593, 2.883), stdev = 1.280
[info]   CI (99.9%): [≈ 0, 5.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.161 ±(99.9%) 1.342 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.161, 0.785), stdev = 0.349
[info]   CI (99.9%): [≈ 0, 1.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   672.591 ±(99.9%) 2.212 MB/sec [Average]
[info]   (min, avg, max) = (672.031, 672.591, 673.405), stdev = 0.575
[info]   CI (99.9%): [670.379, 674.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   181.876 ±(99.9%) 3.202 B/op [Average]
[info]   (min, avg, max) = (181.300, 181.876, 183.346), stdev = 0.832
[info]   CI (99.9%): [178.673, 185.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.47% complete, ETA 00:13:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2531209.762 ops/s
[info] # Warmup Iteration   2: 5688431.740 ops/s
[info] # Warmup Iteration   3: 6119000.722 ops/s
[info] # Warmup Iteration   4: 6145970.335 ops/s
[info] # Warmup Iteration   5: 5865457.119 ops/s
[info] Iteration   1: 6121039.278 ops/s
[info]                  ·gc.alloc.rate:                   384.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              98.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.537 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131.544 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6145646.431 ops/s
[info]                  ·gc.alloc.rate:      374.909 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6107887.046 ops/s
[info]                  ·gc.alloc.rate:                   395.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              101.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173.709 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6147730.328 ops/s
[info]                  ·gc.alloc.rate:      374.934 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6108828.533 ops/s
[info]                  ·gc.alloc.rate:                   389.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              100.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.053 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173.683 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6126226.323 ±(99.9%) 74703.495 ops/s [Average]
[info]   (min, avg, max) = (6107887.046, 6126226.323, 6147730.328), stdev = 19400.260
[info]   CI (99.9%): [6051522.828, 6200929.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   383.767 ±(99.9%) 34.717 MB/sec [Average]
[info]   (min, avg, max) = (374.909, 383.767, 395.578), stdev = 9.016
[info]   CI (99.9%): [349.050, 418.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   98.601 ±(99.9%) 10.073 B/op [Average]
[info]   (min, avg, max) = (96.000, 98.601, 101.919), stdev = 2.616
[info]   CI (99.9%): [88.528, 108.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.562 ±(99.9%) 4.794 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.562, 2.789), stdev = 1.245
[info]   CI (99.9%): [≈ 0, 5.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.145 ±(99.9%) 1.235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.145, 0.719), stdev = 0.321
[info]   CI (99.9%): [≈ 0, 1.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   371.961 ±(99.9%) 1332.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.961, 674.215), stdev = 345.980
[info]   CI (99.9%): [≈ 0, 1704.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   95.787 ±(99.9%) 343.164 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 95.787, 173.709), stdev = 89.119
[info]   CI (99.9%): [≈ 0, 438.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.71% complete, ETA 00:13:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11748.718 ops/s
[info] # Warmup Iteration   2: 364958.888 ops/s
[info] # Warmup Iteration   3: 424336.780 ops/s
[info] # Warmup Iteration   4: 427693.245 ops/s
[info] # Warmup Iteration   5: 425814.763 ops/s
[info] Iteration   1: 427577.061 ops/s
[info]                  ·gc.alloc.rate:                   2340.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              8616.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7450.334 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 426054.652 ops/s
[info]                  ·gc.alloc.rate:                   2319.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              8570.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9985.688 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 426030.715 ops/s
[info]                  ·gc.alloc.rate:                   2307.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              8525.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7503.223 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 424762.146 ops/s
[info]                  ·gc.alloc.rate:                   2327.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              8624.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7532.721 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 425106.331 ops/s
[info]                  ·gc.alloc.rate:                   2356.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              8725.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10047.105 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   425906.181 ±(99.9%) 4208.477 ops/s [Average]
[info]   (min, avg, max) = (424762.146, 425906.181, 427577.061), stdev = 1092.928
[info]   CI (99.9%): [421697.704, 430114.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2330.198 ±(99.9%) 72.460 MB/sec [Average]
[info]   (min, avg, max) = (2307.483, 2330.198, 2356.207), stdev = 18.818
[info]   CI (99.9%): [2257.738, 2402.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8612.357 ±(99.9%) 286.511 B/op [Average]
[info]   (min, avg, max) = (8525.602, 8612.357, 8725.087), stdev = 74.406
[info]   CI (99.9%): [8325.846, 8898.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.169 ±(99.9%) 0.439 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.169, 0.308), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2300.615 ±(99.9%) 1432.097 MB/sec [Average]
[info]   (min, avg, max) = (2023.663, 2300.615, 2713.218), stdev = 371.911
[info]   CI (99.9%): [868.518, 3732.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8503.814 ±(99.9%) 5318.812 B/op [Average]
[info]   (min, avg, max) = (7450.334, 8503.814, 10047.105), stdev = 1381.279
[info]   CI (99.9%): [3185.002, 13822.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 88.94% complete, ETA 00:12:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45934.093 ops/s
[info] # Warmup Iteration   2: 78270.597 ops/s
[info] # Warmup Iteration   3: 83870.529 ops/s
[info] # Warmup Iteration   4: 84969.300 ops/s
[info] # Warmup Iteration   5: 83229.886 ops/s
[info] Iteration   1: 84119.925 ops/s
[info]                  ·gc.alloc.rate:                   2279.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              42659.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37851.535 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 84281.029 ops/s
[info]                  ·gc.alloc.rate:                   2270.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              42400.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37841.436 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 83333.771 ops/s
[info]                  ·gc.alloc.rate:                   2259.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              42676.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38341.977 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 84632.912 ops/s
[info]                  ·gc.alloc.rate:                   2321.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              43168.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50397.895 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 84479.333 ops/s
[info]                  ·gc.alloc.rate:                   2289.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              42669.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37911.401 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   84169.394 ±(99.9%) 1948.370 ops/s [Average]
[info]   (min, avg, max) = (83333.771, 84169.394, 84632.912), stdev = 505.986
[info]   CI (99.9%): [82221.024, 86117.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2284.012 ±(99.9%) 91.331 MB/sec [Average]
[info]   (min, avg, max) = (2259.315, 2284.012, 2321.348), stdev = 23.718
[info]   CI (99.9%): [2192.681, 2375.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   42715.024 ±(99.9%) 1073.835 B/op [Average]
[info]   (min, avg, max) = (42400.918, 42715.024, 43168.652), stdev = 278.871
[info]   CI (99.9%): [41641.190, 43788.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.700 ±(99.9%) 2.671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.700, 1.548), stdev = 0.694
[info]   CI (99.9%): [≈ 0, 3.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2164.594 ±(99.9%) 1174.349 MB/sec [Average]
[info]   (min, avg, max) = (2022.576, 2164.594, 2710.093), stdev = 304.975
[info]   CI (99.9%): [990.245, 3338.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   40468.849 ±(99.9%) 21387.868 B/op [Average]
[info]   (min, avg, max) = (37841.436, 40468.849, 50397.895), stdev = 5554.361
[info]   CI (99.9%): [19080.981, 61856.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.18% complete, ETA 00:12:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18456.116 ops/s
[info] # Warmup Iteration   2: 118691.768 ops/s
[info] # Warmup Iteration   3: 119757.054 ops/s
[info] # Warmup Iteration   4: 124573.960 ops/s
[info] # Warmup Iteration   5: 122795.338 ops/s
[info] Iteration   1: 124029.419 ops/s
[info]                  ·gc.alloc.rate:                   1953.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              24791.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25683.156 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 124464.248 ops/s
[info]                  ·gc.alloc.rate:                   1945.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              24600.850 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25632.344 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 124445.814 ops/s
[info]                  ·gc.alloc.rate:                   1970.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              24917.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25669.750 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 124770.917 ops/s
[info]                  ·gc.alloc.rate:                   1961.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              24742.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17082.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 124578.404 ops/s
[info]                  ·gc.alloc.rate:                   1972.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              24923.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25693.667 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   124457.761 ±(99.9%) 1047.989 ops/s [Average]
[info]   (min, avg, max) = (124029.419, 124457.761, 124770.917), stdev = 272.159
[info]   CI (99.9%): [123409.772, 125505.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1960.441 ±(99.9%) 43.839 MB/sec [Average]
[info]   (min, avg, max) = (1945.261, 1960.441, 1972.446), stdev = 11.385
[info]   CI (99.9%): [1916.602, 2004.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24795.221 ±(99.9%) 516.199 B/op [Average]
[info]   (min, avg, max) = (24600.850, 24795.221, 24923.027), stdev = 134.055
[info]   CI (99.9%): [24279.022, 25311.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.421 ±(99.9%) 1.537 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.421, 0.790), stdev = 0.399
[info]   CI (99.9%): [≈ 0, 1.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1893.442 ±(99.9%) 1161.231 MB/sec [Average]
[info]   (min, avg, max) = (1354.021, 1893.442, 2033.436), stdev = 301.568
[info]   CI (99.9%): [732.212, 3054.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23952.194 ±(99.9%) 14788.763 B/op [Average]
[info]   (min, avg, max) = (17082.055, 23952.194, 25693.667), stdev = 3840.595
[info]   CI (99.9%): [9163.431, 38740.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.41% complete, ETA 00:12:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114229.151 ops/s
[info] # Warmup Iteration   2: 167606.802 ops/s
[info] # Warmup Iteration   3: 174762.372 ops/s
[info] # Warmup Iteration   4: 170712.248 ops/s
[info] # Warmup Iteration   5: 173938.959 ops/s
[info] Iteration   1: 173692.547 ops/s
[info]                  ·gc.alloc.rate:                   2630.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              23840.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2698.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24451.603 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 174152.455 ops/s
[info]                  ·gc.alloc.rate:                   2651.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              23963.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2704.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24442.050 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 174867.364 ops/s
[info]                  ·gc.alloc.rate:                   2676.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              24089.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24377.541 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 172871.832 ops/s
[info]                  ·gc.alloc.rate:                   2635.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              23981.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24674.728 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 174833.329 ops/s
[info]                  ·gc.alloc.rate:                   2648.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              23842.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18337.577 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   174083.505 ±(99.9%) 3223.074 ops/s [Average]
[info]   (min, avg, max) = (172871.832, 174083.505, 174867.364), stdev = 837.022
[info]   CI (99.9%): [170860.431, 177306.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2648.427 ±(99.9%) 68.636 MB/sec [Average]
[info]   (min, avg, max) = (2630.598, 2648.427, 2676.055), stdev = 17.825
[info]   CI (99.9%): [2579.791, 2717.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23943.347 ±(99.9%) 403.417 B/op [Average]
[info]   (min, avg, max) = (23840.673, 23943.347, 24089.135), stdev = 104.766
[info]   CI (99.9%): [23539.930, 24346.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.125), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.753 ±(99.9%) 1.535 B/op [Average]
[info]   (min, avg, max) = (0.187, 0.753, 1.132), stdev = 0.399
[info]   CI (99.9%): [≈ 0, 2.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2571.850 ±(99.9%) 1151.297 MB/sec [Average]
[info]   (min, avg, max) = (2037.076, 2571.850, 2711.292), stdev = 298.988
[info]   CI (99.9%): [1420.553, 3723.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23256.700 ±(99.9%) 10597.618 B/op [Average]
[info]   (min, avg, max) = (18337.577, 23256.700, 24674.728), stdev = 2752.168
[info]   CI (99.9%): [12659.082, 33854.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.65% complete, ETA 00:11:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12739.113 ops/s
[info] # Warmup Iteration   2: 58067.139 ops/s
[info] # Warmup Iteration   3: 58124.954 ops/s
[info] # Warmup Iteration   4: 60226.972 ops/s
[info] # Warmup Iteration   5: 60703.068 ops/s
[info] Iteration   1: 60697.356 ops/s
[info]                  ·gc.alloc.rate:                   3036.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              78723.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70227.475 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 60301.727 ops/s
[info]                  ·gc.alloc.rate:                   3084.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              80493.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3392.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88528.800 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 60572.726 ops/s
[info]                  ·gc.alloc.rate:                   3070.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              79803.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.134 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70583.555 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 60602.350 ops/s
[info]                  ·gc.alloc.rate:                   3072.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              79800.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70618.984 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 60325.478 ops/s
[info]                  ·gc.alloc.rate:                   3087.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              80540.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3401.527 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88735.420 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   60499.927 ±(99.9%) 679.298 ops/s [Average]
[info]   (min, avg, max) = (60301.727, 60499.927, 60697.356), stdev = 176.412
[info]   CI (99.9%): [59820.629, 61179.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3070.269 ±(99.9%) 78.848 MB/sec [Average]
[info]   (min, avg, max) = (3036.006, 3070.269, 3087.384), stdev = 20.477
[info]   CI (99.9%): [2991.420, 3149.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79872.424 ±(99.9%) 2831.282 B/op [Average]
[info]   (min, avg, max) = (78723.268, 79872.424, 80540.396), stdev = 735.275
[info]   CI (99.9%): [77041.142, 82703.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.010, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.409 ±(99.9%) 1.154 B/op [Average]
[info]   (min, avg, max) = (1.079, 1.409, 1.630), stdev = 0.300
[info]   CI (99.9%): [0.255, 2.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2987.487 ±(99.9%) 1439.686 MB/sec [Average]
[info]   (min, avg, max) = (2708.361, 2987.487, 3401.527), stdev = 373.882
[info]   CI (99.9%): [1547.800, 4427.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   77738.847 ±(99.9%) 38296.927 B/op [Average]
[info]   (min, avg, max) = (70227.475, 77738.847, 88735.420), stdev = 9945.590
[info]   CI (99.9%): [39441.920, 116035.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.88% complete, ETA 00:11:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78703.230 ops/s
[info] # Warmup Iteration   2: 168178.156 ops/s
[info] # Warmup Iteration   3: 176116.459 ops/s
[info] # Warmup Iteration   4: 177179.519 ops/s
[info] # Warmup Iteration   5: 177406.104 ops/s
[info] Iteration   1: 173828.581 ops/s
[info]                  ·gc.alloc.rate:                   844.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              7648.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6109.170 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 176737.852 ops/s
[info]                  ·gc.alloc.rate:                   886.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              7899.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.454 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12018.301 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 177113.053 ops/s
[info]                  ·gc.alloc.rate:                   870.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              7740.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5999.355 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 176753.446 ops/s
[info]                  ·gc.alloc.rate:                   865.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              7709.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6011.504 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 177048.991 ops/s
[info]                  ·gc.alloc.rate:                   863.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              7680.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.260 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6004.247 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   176296.384 ±(99.9%) 5351.986 ops/s [Average]
[info]   (min, avg, max) = (173828.581, 176296.384, 177113.053), stdev = 1389.894
[info]   CI (99.9%): [170944.399, 181648.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   866.401 ±(99.9%) 58.672 MB/sec [Average]
[info]   (min, avg, max) = (844.532, 866.401, 886.948), stdev = 15.237
[info]   CI (99.9%): [807.729, 925.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7735.694 ±(99.9%) 375.831 B/op [Average]
[info]   (min, avg, max) = (7648.403, 7735.694, 7899.198), stdev = 97.602
[info]   CI (99.9%): [7359.863, 8111.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.149 ±(99.9%) 0.606 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.149, 0.377), stdev = 0.157
[info]   CI (99.9%): [≈ 0, 0.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   809.880 ±(99.9%) 1161.474 MB/sec [Average]
[info]   (min, avg, max) = (674.571, 809.880, 1349.454), stdev = 301.631
[info]   CI (99.9%): [≈ 0, 1971.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7228.515 ±(99.9%) 10311.850 B/op [Average]
[info]   (min, avg, max) = (5999.355, 7228.515, 12018.301), stdev = 2677.955
[info]   CI (99.9%): [≈ 0, 17540.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.12% complete, ETA 00:11:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104057.743 ops/s
[info] # Warmup Iteration   2: 455920.322 ops/s
[info] # Warmup Iteration   3: 435150.019 ops/s
[info] # Warmup Iteration   4: 461353.953 ops/s
[info] # Warmup Iteration   5: 460406.317 ops/s
[info] Iteration   1: 461076.707 ops/s
[info]                  ·gc.alloc.rate:                   410.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              1402.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2301.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 461364.700 ops/s
[info]                  ·gc.alloc.rate:      398.642 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 458518.571 ops/s
[info]                  ·gc.alloc.rate:                   408.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              1402.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2313.960 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 459187.582 ops/s
[info]                  ·gc.alloc.rate:      396.820 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 457453.194 ops/s
[info]                  ·gc.alloc.rate:                   415.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              1430.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2319.341 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   459520.151 ±(99.9%) 6446.611 ops/s [Average]
[info]   (min, avg, max) = (457453.194, 459520.151, 461364.700), stdev = 1674.164
[info]   CI (99.9%): [453073.540, 465966.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   406.178 ±(99.9%) 31.334 MB/sec [Average]
[info]   (min, avg, max) = (396.820, 406.178, 415.723), stdev = 8.137
[info]   CI (99.9%): [374.844, 437.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1391.234 ±(99.9%) 118.013 B/op [Average]
[info]   (min, avg, max) = (1360.001, 1391.234, 1430.411), stdev = 30.647
[info]   CI (99.9%): [1273.222, 1509.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.179 ±(99.9%) 1.542 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.179, 0.895), stdev = 0.400
[info]   CI (99.9%): [≈ 0, 1.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.615 ±(99.9%) 5.291 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.615, 3.073), stdev = 1.374
[info]   CI (99.9%): [≈ 0, 5.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   404.469 ±(99.9%) 1421.766 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.469, 674.192), stdev = 369.228
[info]   CI (99.9%): [≈ 0, 1826.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1386.870 ±(99.9%) 4875.111 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1386.870, 2319.341), stdev = 1266.051
[info]   CI (99.9%): [≈ 0, 6261.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.35% complete, ETA 00:11:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 456830.801 ops/s
[info] # Warmup Iteration   2: 583978.438 ops/s
[info] # Warmup Iteration   3: 633707.253 ops/s
[info] # Warmup Iteration   4: 636896.277 ops/s
[info] # Warmup Iteration   5: 616328.782 ops/s
[info] Iteration   1: 613949.951 ops/s
[info]                  ·gc.alloc.rate:                   343.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              881.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1311.538 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 628604.338 ops/s
[info]                  ·gc.alloc.rate:      338.641 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 625773.603 ops/s
[info]                  ·gc.alloc.rate:                   351.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              883.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1695.532 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 619692.928 ops/s
[info]                  ·gc.alloc.rate:      333.845 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 616966.251 ops/s
[info]                  ·gc.alloc.rate:                   352.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              899.132 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1719.629 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   620997.414 ±(99.9%) 23445.961 ops/s [Average]
[info]   (min, avg, max) = (613949.951, 620997.414, 628604.338), stdev = 6088.842
[info]   CI (99.9%): [597551.453, 644443.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   343.984 ±(99.9%) 30.774 MB/sec [Average]
[info]   (min, avg, max) = (333.845, 343.984, 352.416), stdev = 7.992
[info]   CI (99.9%): [313.210, 374.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   871.998 ±(99.9%) 88.403 B/op [Average]
[info]   (min, avg, max) = (848.001, 871.998, 899.132), stdev = 22.958
[info]   CI (99.9%): [783.595, 960.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.562 ±(99.9%) 4.794 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.562, 2.789), stdev = 1.245
[info]   CI (99.9%): [≈ 0, 5.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.434 ±(99.9%) 12.231 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.434, 7.116), stdev = 3.176
[info]   CI (99.9%): [≈ 0, 13.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   371.929 ±(99.9%) 1332.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.929, 674.045), stdev = 345.939
[info]   CI (99.9%): [≈ 0, 1704.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   945.340 ±(99.9%) 3380.981 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 945.340, 1719.629), stdev = 878.030
[info]   CI (99.9%): [≈ 0, 4326.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.59% complete, ETA 00:10:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 539831.095 ops/s
[info] # Warmup Iteration   2: 674134.358 ops/s
[info] # Warmup Iteration   3: 662625.079 ops/s
[info] # Warmup Iteration   4: 672467.949 ops/s
[info] # Warmup Iteration   5: 673791.851 ops/s
[info] Iteration   1: 670033.790 ops/s
[info]                  ·gc.alloc.rate:      6.811 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 665497.252 ops/s
[info]                  ·gc.alloc.rate:      6.768 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 672982.365 ops/s
[info]                  ·gc.alloc.rate:      7.743 MB/sec
[info]                  ·gc.alloc.rate.norm: 18.110 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 673020.115 ops/s
[info]                  ·gc.alloc.rate:      6.841 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 666379.759 ops/s
[info]                  ·gc.alloc.rate:      6.828 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.128 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   669582.656 ±(99.9%) 13685.605 ops/s [Average]
[info]   (min, avg, max) = (665497.252, 669582.656, 673020.115), stdev = 3554.108
[info]   CI (99.9%): [655897.051, 683268.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.998 ±(99.9%) 1.607 MB/sec [Average]
[info]   (min, avg, max) = (6.768, 6.998, 7.743), stdev = 0.417
[info]   CI (99.9%): [5.391, 8.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.450 ±(99.9%) 3.579 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.450, 18.110), stdev = 0.929
[info]   CI (99.9%): [12.871, 20.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.82% complete, ETA 00:10:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12153.522 ops/s
[info] # Warmup Iteration   2: 32943.375 ops/s
[info] # Warmup Iteration   3: 32751.291 ops/s
[info] # Warmup Iteration   4: 33268.597 ops/s
[info] # Warmup Iteration   5: 33692.487 ops/s
[info] Iteration   1: 33673.684 ops/s
[info]                  ·gc.alloc.rate:                   1654.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              77362.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.251 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63076.454 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 33647.826 ops/s
[info]                  ·gc.alloc.rate:                   1676.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              78411.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94812.408 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 33725.967 ops/s
[info]                  ·gc.alloc.rate:                   1666.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              77754.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.795 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63132.774 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 33665.907 ops/s
[info]                  ·gc.alloc.rate:                   1676.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              78377.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94948.569 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 33631.489 ops/s
[info]                  ·gc.alloc.rate:                   1660.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              77725.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63435.762 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   33668.975 ±(99.9%) 137.929 ops/s [Average]
[info]   (min, avg, max) = (33631.489, 33668.975, 33725.967), stdev = 35.820
[info]   CI (99.9%): [33531.045, 33806.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1666.868 ±(99.9%) 36.734 MB/sec [Average]
[info]   (min, avg, max) = (1654.833, 1666.868, 1676.627), stdev = 9.540
[info]   CI (99.9%): [1630.133, 1703.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   77926.325 ±(99.9%) 1751.607 B/op [Average]
[info]   (min, avg, max) = (77362.221, 77926.325, 78411.842), stdev = 454.887
[info]   CI (99.9%): [76174.718, 79677.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.167 ±(99.9%) 4.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.167, 2.919), stdev = 1.066
[info]   CI (99.9%): [≈ 0, 5.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1623.036 ±(99.9%) 1426.644 MB/sec [Average]
[info]   (min, avg, max) = (1349.251, 1623.036, 2031.104), stdev = 370.495
[info]   CI (99.9%): [196.392, 3049.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   75881.193 ±(99.9%) 66787.529 B/op [Average]
[info]   (min, avg, max) = (63076.454, 75881.193, 94948.569), stdev = 17344.509
[info]   CI (99.9%): [9093.664, 142668.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.06% complete, ETA 00:10:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2220411.535 ops/s
[info] # Warmup Iteration   2: 3393382.725 ops/s
[info] # Warmup Iteration   3: 3577833.294 ops/s
[info] # Warmup Iteration   4: 3564364.980 ops/s
[info] # Warmup Iteration   5: 3611326.485 ops/s
[info] Iteration   1: 3619976.349 ops/s
[info]                  ·gc.alloc.rate:                   2511.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              1092.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 880.046 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3542945.879 ops/s
[info]                  ·gc.alloc.rate:                   2464.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              1094.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2703.962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1201.300 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3617390.090 ops/s
[info]                  ·gc.alloc.rate:                   2550.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              1109.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1178.846 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3626727.688 ops/s
[info]                  ·gc.alloc.rate:                   2531.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              1098.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 882.694 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3615216.838 ops/s
[info]                  ·gc.alloc.rate:                   2551.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              1111.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.341 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1182.263 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   3604451.369 ±(99.9%) 133438.709 ops/s [Average]
[info]   (min, avg, max) = (3542945.879, 3604451.369, 3626727.688), stdev = 34653.609
[info]   CI (99.9%): [3471012.660, 3737890.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2522.078 ±(99.9%) 138.684 MB/sec [Average]
[info]   (min, avg, max) = (2464.603, 2522.078, 2551.769), stdev = 36.016
[info]   CI (99.9%): [2383.393, 2660.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1101.402 ±(99.9%) 33.169 B/op [Average]
[info]   (min, avg, max) = (1092.292, 1101.402, 1111.044), stdev = 8.614
[info]   CI (99.9%): [1068.233, 1134.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.220 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.167), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.037 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.037, 0.074), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2437.140 ±(99.9%) 1435.561 MB/sec [Average]
[info]   (min, avg, max) = (2023.728, 2437.140, 2715.341), stdev = 372.811
[info]   CI (99.9%): [1001.579, 3872.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1065.030 ±(99.9%) 646.441 B/op [Average]
[info]   (min, avg, max) = (880.046, 1065.030, 1201.300), stdev = 167.879
[info]   CI (99.9%): [418.589, 1711.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.29% complete, ETA 00:10:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.868 ops/s
[info] # Warmup Iteration   2: 3512103.010 ops/s
[info] # Warmup Iteration   3: 3688258.564 ops/s
[info] # Warmup Iteration   4: 3815660.865 ops/s
[info] # Warmup Iteration   5: 3799386.550 ops/s
[info] Iteration   1: 3813261.899 ops/s
[info]                  ·gc.alloc.rate:                   423.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              175.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 276.869 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3826753.717 ops/s
[info]                  ·gc.alloc.rate:      408.904 MB/sec
[info]                  ·gc.alloc.rate.norm: 168.118 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3807051.316 ops/s
[info]                  ·gc.alloc.rate:                   426.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 277.320 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3813519.527 ops/s
[info]                  ·gc.alloc.rate:                   423.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              174.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 276.577 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3814390.350 ops/s
[info]                  ·gc.alloc.rate:      407.076 MB/sec
[info]                  ·gc.alloc.rate.norm: 168.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   3814995.362 ±(99.9%) 27694.926 ops/s [Average]
[info]   (min, avg, max) = (3807051.316, 3814995.362, 3826753.717), stdev = 7192.284
[info]   CI (99.9%): [3787300.436, 3842690.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   417.867 ±(99.9%) 35.061 MB/sec [Average]
[info]   (min, avg, max) = (407.076, 417.867, 426.175), stdev = 9.105
[info]   CI (99.9%): [382.806, 452.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   172.406 ±(99.9%) 15.437 B/op [Average]
[info]   (min, avg, max) = (168.000, 172.406, 176.213), stdev = 4.009
[info]   CI (99.9%): [156.969, 187.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.793 ±(99.9%) 6.824 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.793, 3.963), stdev = 1.772
[info]   CI (99.9%): [≈ 0, 7.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.328 ±(99.9%) 2.821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.328, 1.638), stdev = 0.733
[info]   CI (99.9%): [≈ 0, 3.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   402.296 ±(99.9%) 1414.128 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.296, 670.704), stdev = 367.245
[info]   CI (99.9%): [≈ 0, 1816.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   166.153 ±(99.9%) 584.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 166.153, 277.320), stdev = 151.677
[info]   CI (99.9%): [≈ 0, 750.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.517
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.53% complete, ETA 00:09:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1159964.518 ops/s
[info] # Warmup Iteration   2: 2804198.768 ops/s
[info] # Warmup Iteration   3: 2853247.179 ops/s
[info] # Warmup Iteration   4: 2853462.219 ops/s
[info] # Warmup Iteration   5: 2847607.470 ops/s
[info] Iteration   1: 2849906.564 ops/s
[info]                  ·gc.alloc.rate:                   1305.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 744.943 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2852465.226 ops/s
[info]                  ·gc.alloc.rate:                   1294.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              714.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 744.647 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2857072.224 ops/s
[info]                  ·gc.alloc.rate:                   1277.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              703.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 372.096 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2845647.654 ops/s
[info]                  ·gc.alloc.rate:                   1287.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              711.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 747.537 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2858959.126 ops/s
[info]                  ·gc.alloc.rate:                   1306.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              719.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 744.604 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   2852810.159 ±(99.9%) 20720.821 ops/s [Average]
[info]   (min, avg, max) = (2845647.654, 2852810.159, 2858959.126), stdev = 5381.131
[info]   CI (99.9%): [2832089.338, 2873530.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1294.050 ±(99.9%) 47.268 MB/sec [Average]
[info]   (min, avg, max) = (1277.232, 1294.050, 1306.472), stdev = 12.275
[info]   CI (99.9%): [1246.782, 1341.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   713.955 ±(99.9%) 26.087 B/op [Average]
[info]   (min, avg, max) = (703.712, 713.955, 720.751), stdev = 6.775
[info]   CI (99.9%): [687.867, 740.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.023 ±(99.9%) 0.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.058), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1215.583 ±(99.9%) 1162.905 MB/sec [Average]
[info]   (min, avg, max) = (675.351, 1215.583, 1352.477), stdev = 302.003
[info]   CI (99.9%): [52.678, 2378.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   670.765 ±(99.9%) 642.926 B/op [Average]
[info]   (min, avg, max) = (372.096, 670.765, 747.537), stdev = 166.966
[info]   CI (99.9%): [27.840, 1313.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.76% complete, ETA 00:09:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3156710.942 ops/s
[info] # Warmup Iteration   2: 3804678.689 ops/s
[info] # Warmup Iteration   3: 3928960.847 ops/s
[info] # Warmup Iteration   4: 3955016.267 ops/s
[info] # Warmup Iteration   5: 3941257.616 ops/s
[info] Iteration   1: 3978219.532 ops/s
[info]                  ·gc.alloc.rate:      424.596 MB/sec
[info]                  ·gc.alloc.rate.norm: 168.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3962648.065 ops/s
[info]                  ·gc.alloc.rate:                   442.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              175.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.128 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 267.747 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3934590.436 ops/s
[info]                  ·gc.alloc.rate:                   437.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              174.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 269.642 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3975793.214 ops/s
[info]                  ·gc.alloc.rate:      424.329 MB/sec
[info]                  ·gc.alloc.rate.norm: 168.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3956851.986 ops/s
[info]                  ·gc.alloc.rate:                   435.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              173.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 267.868 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   3961620.647 ±(99.9%) 67545.954 ops/s [Average]
[info]   (min, avg, max) = (3934590.436, 3961620.647, 3978219.532), stdev = 17541.470
[info]   CI (99.9%): [3894074.693, 4029166.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   432.818 ±(99.9%) 30.934 MB/sec [Average]
[info]   (min, avg, max) = (424.329, 432.818, 442.361), stdev = 8.033
[info]   CI (99.9%): [401.884, 463.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   171.976 ±(99.9%) 14.393 B/op [Average]
[info]   (min, avg, max) = (168.000, 171.976, 175.695), stdev = 3.738
[info]   CI (99.9%): [157.583, 186.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.577 ±(99.9%) 4.964 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.577, 2.883), stdev = 1.289
[info]   CI (99.9%): [≈ 0, 5.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.231 ±(99.9%) 1.986 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.231, 1.153), stdev = 0.516
[info]   CI (99.9%): [≈ 0, 2.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   404.304 ±(99.9%) 1421.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.304, 674.128), stdev = 369.078
[info]   CI (99.9%): [≈ 0, 1825.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   161.051 ±(99.9%) 566.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 161.051, 269.642), stdev = 147.021
[info]   CI (99.9%): [≈ 0, 727.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.00% complete, ETA 00:09:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1373655.169 ops/s
[info] # Warmup Iteration   2: 2856484.623 ops/s
[info] # Warmup Iteration   3: 2891913.063 ops/s
[info] # Warmup Iteration   4: 2909911.688 ops/s
[info] # Warmup Iteration   5: 2925814.360 ops/s
[info] Iteration   1: 2927994.328 ops/s
[info]                  ·gc.alloc.rate:                   1420.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              763.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 725.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2907212.230 ops/s
[info]                  ·gc.alloc.rate:                   1423.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              770.952 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 730.983 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2933440.376 ops/s
[info]                  ·gc.alloc.rate:                   1416.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 725.145 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2938444.369 ops/s
[info]                  ·gc.alloc.rate:                   1416.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              758.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 724.443 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2931132.339 ops/s
[info]                  ·gc.alloc.rate:                   1426.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              765.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 726.799 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   2927644.728 ±(99.9%) 46367.670 ops/s [Average]
[info]   (min, avg, max) = (2907212.230, 2927644.728, 2938444.369), stdev = 12041.537
[info]   CI (99.9%): [2881277.058, 2974012.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1420.786 ±(99.9%) 16.748 MB/sec [Average]
[info]   (min, avg, max) = (1416.571, 1420.786, 1426.317), stdev = 4.349
[info]   CI (99.9%): [1404.038, 1437.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   763.863 ±(99.9%) 18.727 B/op [Average]
[info]   (min, avg, max) = (758.689, 763.863, 770.952), stdev = 4.863
[info]   CI (99.9%): [745.136, 782.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.029 ±(99.9%) 0.072 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.029, 0.056), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1351.283 ±(99.9%) 7.702 MB/sec [Average]
[info]   (min, avg, max) = (1348.604, 1351.283, 1353.661), stdev = 2.000
[info]   CI (99.9%): [1343.581, 1358.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   726.490 ±(99.9%) 10.237 B/op [Average]
[info]   (min, avg, max) = (724.443, 726.490, 730.983), stdev = 2.658
[info]   CI (99.9%): [716.253, 736.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.24% complete, ETA 00:08:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1194465.407 ops/s
[info] # Warmup Iteration   2: 2189742.780 ops/s
[info] # Warmup Iteration   3: 2126159.473 ops/s
[info] # Warmup Iteration   4: 2166221.350 ops/s
[info] # Warmup Iteration   5: 2218948.145 ops/s
[info] Iteration   1: 2239725.449 ops/s
[info]                  ·gc.alloc.rate:                   550.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              386.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 473.481 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2241163.081 ops/s
[info]                  ·gc.alloc.rate:                   553.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              388.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 473.410 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2248493.650 ops/s
[info]                  ·gc.alloc.rate:      537.117 MB/sec
[info]                  ·gc.alloc.rate.norm: 376.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2237020.534 ops/s
[info]                  ·gc.alloc.rate:                   557.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 474.274 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 2242325.703 ops/s
[info]                  ·gc.alloc.rate:                   556.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              390.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 473.152 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2241745.683 ±(99.9%) 16407.007 ops/s [Average]
[info]   (min, avg, max) = (2237020.534, 2241745.683, 2248493.650), stdev = 4260.848
[info]   CI (99.9%): [2225338.677, 2258152.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   550.885 ±(99.9%) 31.375 MB/sec [Average]
[info]   (min, avg, max) = (537.117, 550.885, 557.243), stdev = 8.148
[info]   CI (99.9%): [519.510, 582.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   386.808 ±(99.9%) 24.441 B/op [Average]
[info]   (min, avg, max) = (376.000, 386.808, 392.030), stdev = 6.347
[info]   CI (99.9%): [362.367, 411.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.135 ±(99.9%) 1.165 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.135, 0.677), stdev = 0.303
[info]   CI (99.9%): [≈ 0, 1.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.095 ±(99.9%) 0.819 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.095, 0.476), stdev = 0.213
[info]   CI (99.9%): [≈ 0, 0.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   539.175 ±(99.9%) 1160.615 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.175, 674.147), stdev = 301.408
[info]   CI (99.9%): [≈ 0, 1699.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   378.863 ±(99.9%) 815.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 378.863, 474.274), stdev = 211.791
[info]   CI (99.9%): [≈ 0, 1194.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.47% complete, ETA 00:08:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.813 ops/s
[info] # Warmup Iteration   2: 5550165.691 ops/s
[info] # Warmup Iteration   3: 5785655.455 ops/s
[info] # Warmup Iteration   4: 5960115.448 ops/s
[info] # Warmup Iteration   5: 5952687.705 ops/s
[info] Iteration   1: 5773298.606 ops/s
[info]                  ·gc.alloc.rate:                   574.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183.060 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5959042.170 ops/s
[info]                  ·gc.alloc.rate:                   595.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177.172 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 5966023.491 ops/s
[info]                  ·gc.alloc.rate:                   600.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              158.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 176.961 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 5953568.186 ops/s
[info]                  ·gc.alloc.rate:                   594.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177.156 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5983027.615 ops/s
[info]                  ·gc.alloc.rate:      577.755 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   5926992.014 ±(99.9%) 333578.984 ops/s [Average]
[info]   (min, avg, max) = (5773298.606, 5926992.014, 5983027.615), stdev = 86629.403
[info]   CI (99.9%): [5593413.030, 6260570.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   588.520 ±(99.9%) 45.417 MB/sec [Average]
[info]   (min, avg, max) = (574.153, 588.520, 600.789), stdev = 11.795
[info]   CI (99.9%): [543.103, 633.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   156.292 ±(99.9%) 9.659 B/op [Average]
[info]   (min, avg, max) = (152.000, 156.292, 158.514), stdev = 2.508
[info]   CI (99.9%): [146.633, 165.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.745 ±(99.9%) 6.281 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.663), stdev = 1.631
[info]   CI (99.9%): [≈ 0, 7.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.203 ±(99.9%) 1.712 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.203, 0.998), stdev = 0.445
[info]   CI (99.9%): [≈ 0, 1.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   536.625 ±(99.9%) 1155.129 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.625, 671.632), stdev = 299.983
[info]   CI (99.9%): [≈ 0, 1691.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   142.870 ±(99.9%) 307.699 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 142.870, 183.060), stdev = 79.908
[info]   CI (99.9%): [≈ 0, 450.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.71% complete, ETA 00:08:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1505800.888 ops/s
[info] # Warmup Iteration   2: 3406659.954 ops/s
[info] # Warmup Iteration   3: 3570508.874 ops/s
[info] # Warmup Iteration   4: 3634835.872 ops/s
[info] # Warmup Iteration   5: 3635397.723 ops/s
[info] Iteration   1: 3670083.404 ops/s
[info]                  ·gc.alloc.rate:                   1178.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              505.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.826 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 578.336 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3534479.280 ops/s
[info]                  ·gc.alloc.rate:                   1109.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              494.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 300.479 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3569255.747 ops/s
[info]                  ·gc.alloc.rate:                   1137.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              501.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 595.353 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3641840.156 ops/s
[info]                  ·gc.alloc.rate:                   1143.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              494.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 291.898 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 3592731.949 ops/s
[info]                  ·gc.alloc.rate:                   1157.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              507.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 592.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   3601678.107 ±(99.9%) 210373.478 ops/s [Average]
[info]   (min, avg, max) = (3534479.280, 3601678.107, 3670083.404), stdev = 54633.324
[info]   CI (99.9%): [3391304.630, 3812051.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1145.274 ±(99.9%) 97.795 MB/sec [Average]
[info]   (min, avg, max) = (1109.435, 1145.274, 1178.095), stdev = 25.397
[info]   CI (99.9%): [1047.479, 1243.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   500.499 ±(99.9%) 23.688 B/op [Average]
[info]   (min, avg, max) = (494.082, 500.499, 507.281), stdev = 6.152
[info]   CI (99.9%): [476.811, 524.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.247 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.146), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.018 ±(99.9%) 0.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.064), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1079.950 ±(99.9%) 1423.040 MB/sec [Average]
[info]   (min, avg, max) = (674.709, 1079.950, 1351.273), stdev = 369.559
[info]   CI (99.9%): [≈ 0, 2502.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   471.627 ±(99.9%) 617.291 B/op [Average]
[info]   (min, avg, max) = (291.898, 471.627, 595.353), stdev = 160.308
[info]   CI (99.9%): [≈ 0, 1088.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.94% complete, ETA 00:08:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4812257.835 ops/s
[info] # Warmup Iteration   2: 5206055.422 ops/s
[info] # Warmup Iteration   3: 5244561.978 ops/s
[info] # Warmup Iteration   4: 5437863.451 ops/s
[info] # Warmup Iteration   5: 5459596.064 ops/s
[info] Iteration   1: 5478528.618 ops/s
[info]                  ·gc.alloc.rate:      529.000 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5454042.265 ops/s
[info]                  ·gc.alloc.rate:                   539.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              155.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194.734 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5467435.592 ops/s
[info]                  ·gc.alloc.rate:                   552.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              159.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194.067 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 5462751.528 ops/s
[info]                  ·gc.alloc.rate:                   540.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              155.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194.224 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5381147.918 ops/s
[info]                  ·gc.alloc.rate:      525.428 MB/sec
[info]                  ·gc.alloc.rate.norm: 153.691 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   5448781.184 ±(99.9%) 149507.231 ops/s [Average]
[info]   (min, avg, max) = (5381147.918, 5448781.184, 5478528.618), stdev = 38826.553
[info]   CI (99.9%): [5299273.953, 5598288.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   537.516 ±(99.9%) 41.846 MB/sec [Average]
[info]   (min, avg, max) = (525.428, 537.516, 552.991), stdev = 10.867
[info]   CI (99.9%): [495.670, 579.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   155.264 ±(99.9%) 10.379 B/op [Average]
[info]   (min, avg, max) = (152.000, 155.264, 159.201), stdev = 2.695
[info]   CI (99.9%): [144.885, 165.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.523 ±(99.9%) 4.500 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.523, 2.613), stdev = 1.169
[info]   CI (99.9%): [≈ 0, 5.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.151 ±(99.9%) 1.298 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.151, 0.754), stdev = 0.337
[info]   CI (99.9%): [≈ 0, 1.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   404.633 ±(99.9%) 1422.341 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.633, 675.014), stdev = 369.378
[info]   CI (99.9%): [≈ 0, 1826.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   116.605 ±(99.9%) 409.885 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 116.605, 194.734), stdev = 106.446
[info]   CI (99.9%): [≈ 0, 526.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.18% complete, ETA 00:07:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5175441.034 ops/s
[info] # Warmup Iteration   2: 6333099.575 ops/s
[info] # Warmup Iteration   3: 6196306.589 ops/s
[info] # Warmup Iteration   4: 6514930.631 ops/s
[info] # Warmup Iteration   5: 6523980.033 ops/s
[info] Iteration   1: 6521092.362 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6434201.736 ops/s
[info]                  ·gc.alloc.rate:      2.031 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.497 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6494394.877 ops/s
[info]                  ·gc.alloc.rate:      0.004 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6501939.619 ops/s
[info]                  ·gc.alloc.rate:      0.986 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.239 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6513058.976 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   6492937.514 ±(99.9%) 132422.717 ops/s [Average]
[info]   (min, avg, max) = (6434201.736, 6492937.514, 6521092.362), stdev = 34389.759
[info]   CI (99.9%): [6360514.797, 6625360.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.604 ±(99.9%) 3.483 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.604, 2.031), stdev = 0.904
[info]   CI (99.9%): [≈ 0, 4.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.147 ±(99.9%) 0.851 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.147, 0.497), stdev = 0.221
[info]   CI (99.9%): [≈ 0, 0.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.41% complete, ETA 00:07:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1587810.736 ops/s
[info] # Warmup Iteration   2: 3551171.418 ops/s
[info] # Warmup Iteration   3: 3559483.810 ops/s
[info] # Warmup Iteration   4: 3577851.675 ops/s
[info] # Warmup Iteration   5: 3599824.208 ops/s
[info] Iteration   1: 3585325.620 ops/s
[info]                  ·gc.alloc.rate:                   1005.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              441.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 296.226 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 3582548.925 ops/s
[info]                  ·gc.alloc.rate:                   1033.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              453.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 592.905 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3614075.570 ops/s
[info]                  ·gc.alloc.rate:                   1011.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.600 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 293.857 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3551631.886 ops/s
[info]                  ·gc.alloc.rate:                   1020.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              452.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.614 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 598.630 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3576199.505 ops/s
[info]                  ·gc.alloc.rate:                   996.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              438.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 297.415 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3581956.301 ±(99.9%) 86018.201 ops/s [Average]
[info]   (min, avg, max) = (3551631.886, 3581956.301, 3614075.570), stdev = 22338.654
[info]   CI (99.9%): [3495938.100, 3667974.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1013.607 ±(99.9%) 53.524 MB/sec [Average]
[info]   (min, avg, max) = (996.729, 1013.607, 1033.057), stdev = 13.900
[info]   CI (99.9%): [960.083, 1067.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   445.400 ±(99.9%) 27.156 B/op [Average]
[info]   (min, avg, max) = (438.670, 445.400, 453.701), stdev = 7.052
[info]   CI (99.9%): [418.244, 472.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.006 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   945.168 ±(99.9%) 1424.151 MB/sec [Average]
[info]   (min, avg, max) = (674.661, 945.168, 1350.614), stdev = 369.848
[info]   CI (99.9%): [≈ 0, 2369.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   415.807 ±(99.9%) 632.655 B/op [Average]
[info]   (min, avg, max) = (293.857, 415.807, 598.630), stdev = 164.299
[info]   CI (99.9%): [≈ 0, 1048.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.65% complete, ETA 00:07:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 273876.981 ops/s
[info] # Warmup Iteration   2: 826039.585 ops/s
[info] # Warmup Iteration   3: 856080.770 ops/s
[info] # Warmup Iteration   4: 864847.871 ops/s
[info] # Warmup Iteration   5: 872271.712 ops/s
[info] Iteration   1: 871386.729 ops/s
[info]                  ·gc.alloc.rate:                   1417.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              2560.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2432.763 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 874061.975 ops/s
[info]                  ·gc.alloc.rate:                   1410.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              2539.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2427.770 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 867866.140 ops/s
[info]                  ·gc.alloc.rate:                   1405.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              2550.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2447.452 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 875135.397 ops/s
[info]                  ·gc.alloc.rate:                   1407.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              2530.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2429.525 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 875832.944 ops/s
[info]                  ·gc.alloc.rate:                   1407.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              2529.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2430.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   872856.637 ±(99.9%) 12561.849 ops/s [Average]
[info]   (min, avg, max) = (867866.140, 872856.637, 875832.944), stdev = 3262.272
[info]   CI (99.9%): [860294.788, 885418.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1409.583 ±(99.9%) 17.512 MB/sec [Average]
[info]   (min, avg, max) = (1405.922, 1409.583, 1417.256), stdev = 4.548
[info]   CI (99.9%): [1392.071, 1427.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2541.840 ±(99.9%) 51.437 B/op [Average]
[info]   (min, avg, max) = (2529.018, 2541.840, 2560.450), stdev = 13.358
[info]   CI (99.9%): [2490.402, 2593.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.075 ±(99.9%) 0.228 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.150), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1349.510 ±(99.9%) 8.590 MB/sec [Average]
[info]   (min, avg, max) = (1346.578, 1349.510, 1352.130), stdev = 2.231
[info]   CI (99.9%): [1340.920, 1358.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2433.503 ±(99.9%) 30.806 B/op [Average]
[info]   (min, avg, max) = (2427.770, 2433.503, 2447.452), stdev = 8.000
[info]   CI (99.9%): [2402.697, 2464.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 93.88% complete, ETA 00:07:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.622 ops/s
[info] # Warmup Iteration   2: 1714851.072 ops/s
[info] # Warmup Iteration   3: 1783998.293 ops/s
[info] # Warmup Iteration   4: 1802078.549 ops/s
[info] # Warmup Iteration   5: 1808371.157 ops/s
[info] Iteration   1: 1812823.100 ops/s
[info]                  ·gc.alloc.rate:                   521.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              452.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 581.574 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1815593.032 ops/s
[info]                  ·gc.alloc.rate:      507.542 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1811344.850 ops/s
[info]                  ·gc.alloc.rate:                   529.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              459.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 582.853 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1811260.446 ops/s
[info]                  ·gc.alloc.rate:                   520.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              452.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 582.880 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1812298.898 ops/s
[info]                  ·gc.alloc.rate:                   523.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              454.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 581.949 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   1812664.065 ±(99.9%) 6792.857 ops/s [Average]
[info]   (min, avg, max) = (1811260.446, 1812664.065, 1815593.032), stdev = 1764.083
[info]   CI (99.9%): [1805871.208, 1819456.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   520.423 ±(99.9%) 30.562 MB/sec [Average]
[info]   (min, avg, max) = (507.542, 520.423, 529.186), stdev = 7.937
[info]   CI (99.9%): [489.862, 550.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   451.844 ±(99.9%) 28.069 B/op [Average]
[info]   (min, avg, max) = (440.000, 451.844, 459.885), stdev = 7.289
[info]   CI (99.9%): [423.775, 479.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.744 ±(99.9%) 6.313 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.744, 3.676), stdev = 1.639
[info]   CI (99.9%): [≈ 0, 7.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.645 ±(99.9%) 5.476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.645, 3.189), stdev = 1.422
[info]   CI (99.9%): [≈ 0, 6.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   536.363 ±(99.9%) 1154.563 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.363, 670.740), stdev = 299.836
[info]   CI (99.9%): [≈ 0, 1690.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   465.851 ±(99.9%) 1002.782 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 465.851, 582.880), stdev = 260.419
[info]   CI (99.9%): [≈ 0, 1468.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.12% complete, ETA 00:06:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 170830.467 ops/s
[info] # Warmup Iteration   2: 1185983.629 ops/s
[info] # Warmup Iteration   3: 1208919.844 ops/s
[info] # Warmup Iteration   4: 1242247.722 ops/s
[info] # Warmup Iteration   5: 1245642.337 ops/s
[info] Iteration   1: 1226639.056 ops/s
[info]                  ·gc.alloc.rate:                   837.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              1074.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1728.190 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1251157.124 ops/s
[info]                  ·gc.alloc.rate:                   823.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              1035.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 847.172 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1250939.000 ops/s
[info]                  ·gc.alloc.rate:                   818.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              1029.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 847.305 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1250483.907 ops/s
[info]                  ·gc.alloc.rate:                   824.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              1038.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.132 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 848.458 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1252849.873 ops/s
[info]                  ·gc.alloc.rate:                   821.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              1031.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 846.837 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1246413.792 ±(99.9%) 42705.961 ops/s [Average]
[info]   (min, avg, max) = (1226639.056, 1246413.792, 1252849.873), stdev = 11090.603
[info]   CI (99.9%): [1203707.830, 1289119.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   824.894 ±(99.9%) 28.541 MB/sec [Average]
[info]   (min, avg, max) = (818.029, 824.894, 837.350), stdev = 7.412
[info]   CI (99.9%): [796.353, 853.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1041.799 ±(99.9%) 71.565 B/op [Average]
[info]   (min, avg, max) = (1029.354, 1041.799, 1074.491), stdev = 18.585
[info]   CI (99.9%): [970.234, 1113.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.026 ±(99.9%) 0.143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.079), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   808.360 ±(99.9%) 1158.983 MB/sec [Average]
[info]   (min, avg, max) = (673.354, 808.360, 1346.777), stdev = 300.984
[info]   CI (99.9%): [≈ 0, 1967.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1023.592 ±(99.9%) 1516.701 B/op [Average]
[info]   (min, avg, max) = (846.837, 1023.592, 1728.190), stdev = 393.882
[info]   CI (99.9%): [≈ 0, 2540.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.35% complete, ETA 00:06:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1170553.291 ops/s
[info] # Warmup Iteration   2: 1574543.274 ops/s
[info] # Warmup Iteration   3: 1645877.445 ops/s
[info] # Warmup Iteration   4: 1631674.728 ops/s
[info] # Warmup Iteration   5: 1706453.761 ops/s
[info] Iteration   1: 1682448.236 ops/s
[info]                  ·gc.alloc.rate:                   492.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              461.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 631.240 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1708764.191 ops/s
[info]                  ·gc.alloc.rate:      478.685 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.927 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1688879.053 ops/s
[info]                  ·gc.alloc.rate:                   496.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              462.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 628.838 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1708993.338 ops/s
[info]                  ·gc.alloc.rate:                   499.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              459.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 620.774 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1707592.903 ops/s
[info]                  ·gc.alloc.rate:                   502.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              463.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 621.336 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1699335.544 ±(99.9%) 48892.403 ops/s [Average]
[info]   (min, avg, max) = (1682448.236, 1699335.544, 1708993.338), stdev = 12697.202
[info]   CI (99.9%): [1650443.141, 1748227.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   493.813 ±(99.9%) 35.258 MB/sec [Average]
[info]   (min, avg, max) = (478.685, 493.813, 502.332), stdev = 9.156
[info]   CI (99.9%): [458.555, 529.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   457.402 ±(99.9%) 35.857 B/op [Average]
[info]   (min, avg, max) = (440.927, 457.402, 463.046), stdev = 9.312
[info]   CI (99.9%): [421.544, 493.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.541 ±(99.9%) 4.570 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.541, 2.664), stdev = 1.187
[info]   CI (99.9%): [≈ 0, 5.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.504 ±(99.9%) 4.260 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.504, 2.483), stdev = 1.106
[info]   CI (99.9%): [≈ 0, 4.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   539.529 ±(99.9%) 1161.378 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.529, 674.718), stdev = 301.606
[info]   CI (99.9%): [≈ 0, 1700.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   500.438 ±(99.9%) 1077.374 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 500.438, 631.240), stdev = 279.791
[info]   CI (99.9%): [≈ 0, 1577.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.59% complete, ETA 00:06:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 445827.771 ops/s
[info] # Warmup Iteration   2: 1174837.361 ops/s
[info] # Warmup Iteration   3: 1268389.727 ops/s
[info] # Warmup Iteration   4: 1254941.157 ops/s
[info] # Warmup Iteration   5: 1267889.770 ops/s
[info] Iteration   1: 1268238.777 ops/s
[info]                  ·gc.alloc.rate:                   835.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              1036.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.990 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 836.584 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1269276.564 ops/s
[info]                  ·gc.alloc.rate:                   834.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              1034.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 835.897 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1273556.015 ops/s
[info]                  ·gc.alloc.rate:                   839.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              1037.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.225 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 833.062 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1268993.211 ops/s
[info]                  ·gc.alloc.rate:                   865.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              1073.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1673.864 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1262670.546 ops/s
[info]                  ·gc.alloc.rate:                   832.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              1037.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 841.127 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1268547.023 ±(99.9%) 14969.216 ops/s [Average]
[info]   (min, avg, max) = (1262670.546, 1268547.023, 1273556.015), stdev = 3887.458
[info]   CI (99.9%): [1253577.807, 1283516.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   841.300 ±(99.9%) 53.486 MB/sec [Average]
[info]   (min, avg, max) = (832.033, 841.300, 865.626), stdev = 13.890
[info]   CI (99.9%): [787.813, 894.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1043.823 ±(99.9%) 63.998 B/op [Average]
[info]   (min, avg, max) = (1034.268, 1043.823, 1073.464), stdev = 16.620
[info]   CI (99.9%): [979.826, 1107.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.026 ±(99.9%) 0.122 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.077), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   809.349 ±(99.9%) 1163.321 MB/sec [Average]
[info]   (min, avg, max) = (673.990, 809.349, 1349.781), stdev = 302.111
[info]   CI (99.9%): [≈ 0, 1972.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1004.107 ±(99.9%) 1441.746 B/op [Average]
[info]   (min, avg, max) = (833.062, 1004.107, 1673.864), stdev = 374.417
[info]   CI (99.9%): [≈ 0, 2445.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 94.82% complete, ETA 00:05:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 307369.773 ops/s
[info] # Warmup Iteration   2: 1049154.852 ops/s
[info] # Warmup Iteration   3: 1063725.703 ops/s
[info] # Warmup Iteration   4: 1062804.375 ops/s
[info] # Warmup Iteration   5: 1049233.133 ops/s
[info] Iteration   1: 1042589.551 ops/s
[info]                  ·gc.alloc.rate:                   893.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              1348.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1017.648 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1057871.984 ops/s
[info]                  ·gc.alloc.rate:                   926.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              1379.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.731 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2006.900 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1058690.836 ops/s
[info]                  ·gc.alloc.rate:                   910.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              1353.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1003.210 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1065034.307 ops/s
[info]                  ·gc.alloc.rate:                   914.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              1350.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 997.235 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1062572.986 ops/s
[info]                  ·gc.alloc.rate:                   922.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              1366.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2001.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1057351.933 ±(99.9%) 33694.197 ops/s [Average]
[info]   (min, avg, max) = (1042589.551, 1057351.933, 1065034.307), stdev = 8750.276
[info]   CI (99.9%): [1023657.736, 1091046.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   913.496 ±(99.9%) 50.137 MB/sec [Average]
[info]   (min, avg, max) = (893.405, 913.496, 926.782), stdev = 13.021
[info]   CI (99.9%): [863.359, 963.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1359.641 ±(99.9%) 49.907 B/op [Average]
[info]   (min, avg, max) = (1348.286, 1359.641, 1379.044), stdev = 12.961
[info]   CI (99.9%): [1309.734, 1409.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.074 ±(99.9%) 0.246 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.155), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   944.780 ±(99.9%) 1424.309 MB/sec [Average]
[info]   (min, avg, max) = (674.317, 944.780, 1351.212), stdev = 369.889
[info]   CI (99.9%): [≈ 0, 2369.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1405.213 ±(99.9%) 2104.981 B/op [Average]
[info]   (min, avg, max) = (997.235, 1405.213, 2006.900), stdev = 546.657
[info]   CI (99.9%): [≈ 0, 3510.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.06% complete, ETA 00:05:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.651 ops/s
[info] # Warmup Iteration   2: 793023.005 ops/s
[info] # Warmup Iteration   3: 799047.909 ops/s
[info] # Warmup Iteration   4: 817306.912 ops/s
[info] # Warmup Iteration   5: 814628.880 ops/s
[info] Iteration   1: 818934.259 ops/s
[info]                  ·gc.alloc.rate:      212.260 MB/sec
[info]                  ·gc.alloc.rate.norm: 408.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 816018.158 ops/s
[info]                  ·gc.alloc.rate:                   222.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              429.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.555 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 986.727 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 818599.886 ops/s
[info]                  ·gc.alloc.rate:      212.187 MB/sec
[info]                  ·gc.alloc.rate.norm: 408.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 819227.977 ops/s
[info]                  ·gc.alloc.rate:      212.353 MB/sec
[info]                  ·gc.alloc.rate.norm: 408.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 815506.291 ops/s
[info]                  ·gc.alloc.rate:                   228.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.133 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1297.120 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   817657.314 ±(99.9%) 6752.295 ops/s [Average]
[info]   (min, avg, max) = (815506.291, 817657.314, 819227.977), stdev = 1753.550
[info]   CI (99.9%): [810905.019, 824409.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   217.471 ±(99.9%) 28.449 MB/sec [Average]
[info]   (min, avg, max) = (212.187, 217.471, 228.032), stdev = 7.388
[info]   CI (99.9%): [189.022, 245.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   418.659 ±(99.9%) 58.105 B/op [Average]
[info]   (min, avg, max) = (408.000, 418.659, 440.069), stdev = 15.090
[info]   CI (99.9%): [360.554, 476.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   236.738 ±(99.9%) 1267.248 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 236.738, 672.133), stdev = 329.100
[info]   CI (99.9%): [≈ 0, 1503.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   456.769 ±(99.9%) 2445.204 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 456.769, 1297.120), stdev = 635.012
[info]   CI (99.9%): [≈ 0, 2901.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.29% complete, ETA 00:05:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 509528.744 ops/s
[info] # Warmup Iteration   2: 1926935.359 ops/s
[info] # Warmup Iteration   3: 1978633.832 ops/s
[info] # Warmup Iteration   4: 1980099.535 ops/s
[info] # Warmup Iteration   5: 1975987.581 ops/s
[info] Iteration   1: 1953383.603 ops/s
[info]                  ·gc.alloc.rate:                   856.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              689.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 543.153 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1999805.183 ops/s
[info]                  ·gc.alloc.rate:                   876.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              689.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.096 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 530.558 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1999004.297 ops/s
[info]                  ·gc.alloc.rate:                   893.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              703.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1061.771 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2003736.420 ops/s
[info]                  ·gc.alloc.rate:                   875.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              687.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 529.760 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1998382.127 ops/s
[info]                  ·gc.alloc.rate:                   871.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              686.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 531.437 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   1990862.326 ±(99.9%) 81074.364 ops/s [Average]
[info]   (min, avg, max) = (1953383.603, 1990862.326, 2003736.420), stdev = 21054.755
[info]   CI (99.9%): [1909787.962, 2071936.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   874.619 ±(99.9%) 51.831 MB/sec [Average]
[info]   (min, avg, max) = (856.163, 874.619, 893.782), stdev = 13.460
[info]   CI (99.9%): [822.788, 926.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   691.498 ±(99.9%) 27.139 B/op [Average]
[info]   (min, avg, max) = (686.201, 691.498, 703.786), stdev = 7.048
[info]   CI (99.9%): [664.359, 718.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.020 ±(99.9%) 0.104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.049), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   809.124 ±(99.9%) 1160.853 MB/sec [Average]
[info]   (min, avg, max) = (674.092, 809.124, 1348.410), stdev = 301.470
[info]   CI (99.9%): [≈ 0, 1969.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   639.336 ±(99.9%) 909.569 B/op [Average]
[info]   (min, avg, max) = (529.760, 639.336, 1061.771), stdev = 236.212
[info]   CI (99.9%): [≈ 0, 1548.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.53% complete, ETA 00:05:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1082450.043 ops/s
[info] # Warmup Iteration   2: 2013694.785 ops/s
[info] # Warmup Iteration   3: 2110550.066 ops/s
[info] # Warmup Iteration   4: 2147193.332 ops/s
[info] # Warmup Iteration   5: 2164973.977 ops/s
[info] Iteration   1: 2158423.842 ops/s
[info]                  ·gc.alloc.rate:                   576.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              420.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 491.570 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2153172.447 ops/s
[info]                  ·gc.alloc.rate:                   583.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              426.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 492.769 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2162037.680 ops/s
[info]                  ·gc.alloc.rate:                   583.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 490.223 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2157081.251 ops/s
[info]                  ·gc.alloc.rate:                   583.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              425.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 491.362 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2161673.018 ops/s
[info]                  ·gc.alloc.rate:                   574.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              418.458 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 489.836 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2158477.647 ±(99.9%) 14014.201 ops/s [Average]
[info]   (min, avg, max) = (2153172.447, 2158477.647, 2162037.680), stdev = 3639.443
[info]   CI (99.9%): [2144463.447, 2172491.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   580.243 ±(99.9%) 16.148 MB/sec [Average]
[info]   (min, avg, max) = (574.735, 580.243, 583.458), stdev = 4.194
[info]   CI (99.9%): [564.095, 596.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   423.080 ±(99.9%) 13.267 B/op [Average]
[info]   (min, avg, max) = (418.458, 423.080, 426.553), stdev = 3.445
[info]   CI (99.9%): [409.813, 436.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.574 ±(99.9%) 4.857 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.574, 2.831), stdev = 1.261
[info]   CI (99.9%): [≈ 0, 5.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.420 ±(99.9%) 3.551 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.420, 2.069), stdev = 0.922
[info]   CI (99.9%): [≈ 0, 3.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   673.605 ±(99.9%) 2.080 MB/sec [Average]
[info]   (min, avg, max) = (672.770, 673.605, 674.101), stdev = 0.540
[info]   CI (99.9%): [671.525, 675.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   491.152 ±(99.9%) 4.486 B/op [Average]
[info]   (min, avg, max) = (489.836, 491.152, 492.769), stdev = 1.165
[info]   CI (99.9%): [486.666, 495.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.76% complete, ETA 00:04:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1407406.341 ops/s
[info] # Warmup Iteration   2: 2209288.207 ops/s
[info] # Warmup Iteration   3: 2325266.762 ops/s
[info] # Warmup Iteration   4: 2325545.541 ops/s
[info] # Warmup Iteration   5: 2325578.779 ops/s
[info] Iteration   1: 2324763.550 ops/s
[info]                  ·gc.alloc.rate:      0.033 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2198172.647 ops/s
[info]                  ·gc.alloc.rate:      4.441 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.179 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2325829.321 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2319812.775 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2323643.492 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2298444.357 ±(99.9%) 216019.560 ops/s [Average]
[info]   (min, avg, max) = (2198172.647, 2298444.357, 2325829.321), stdev = 56099.594
[info]   CI (99.9%): [2082424.797, 2514463.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.895 ±(99.9%) 7.633 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.895, 4.441), stdev = 1.982
[info]   CI (99.9%): [≈ 0, 8.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.640 ±(99.9%) 5.464 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.640, 3.179), stdev = 1.419
[info]   CI (99.9%): [≈ 0, 6.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.00% complete, ETA 00:04:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 867347.573 ops/s
[info] # Warmup Iteration   2: 1962309.895 ops/s
[info] # Warmup Iteration   3: 2013909.312 ops/s
[info] # Warmup Iteration   4: 2068203.393 ops/s
[info] # Warmup Iteration   5: 2027227.511 ops/s
[info] Iteration   1: 2047023.483 ops/s
[info]                  ·gc.alloc.rate:                   916.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              705.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.239 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 516.273 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2045841.025 ops/s
[info]                  ·gc.alloc.rate:                   919.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              707.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 516.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2032930.428 ops/s
[info]                  ·gc.alloc.rate:                   931.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              721.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1038.660 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2039041.732 ops/s
[info]                  ·gc.alloc.rate:                   907.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              700.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 517.749 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2049575.319 ops/s
[info]                  ·gc.alloc.rate:                   910.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              699.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 515.346 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2042882.397 ±(99.9%) 26151.066 ops/s [Average]
[info]   (min, avg, max) = (2032930.428, 2042882.397, 2049575.319), stdev = 6791.349
[info]   CI (99.9%): [2016731.331, 2069033.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   917.488 ±(99.9%) 35.727 MB/sec [Average]
[info]   (min, avg, max) = (907.979, 917.488, 931.808), stdev = 9.278
[info]   CI (99.9%): [881.761, 953.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   706.984 ±(99.9%) 33.661 B/op [Average]
[info]   (min, avg, max) = (699.636, 706.984, 721.480), stdev = 8.742
[info]   CI (99.9%): [673.323, 740.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.013 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.032), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   805.029 ±(99.9%) 1154.694 MB/sec [Average]
[info]   (min, avg, max) = (670.696, 805.029, 1341.453), stdev = 299.870
[info]   CI (99.9%): [≈ 0, 1959.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   620.817 ±(99.9%) 899.445 B/op [Average]
[info]   (min, avg, max) = (515.346, 620.817, 1038.660), stdev = 233.583
[info]   CI (99.9%): [≈ 0, 1520.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.24% complete, ETA 00:04:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1701.803 ops/s
[info] # Warmup Iteration   2: 5353.113 ops/s
[info] # Warmup Iteration   3: 5960.832 ops/s
[info] # Warmup Iteration   4: 6031.986 ops/s
[info] # Warmup Iteration   5: 6030.573 ops/s
[info] Iteration   1: 6055.392 ops/s
[info]                  ·gc.alloc.rate:                   765.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              198851.600 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 350390.924 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6058.095 ops/s
[info]                  ·gc.alloc.rate:                   739.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              192136.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 175108.731 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 6042.463 ops/s
[info]                  ·gc.alloc.rate:                   749.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              195122.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.993 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 175572.289 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 6028.957 ops/s
[info]                  ·gc.alloc.rate:                   739.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              193063.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 176066.866 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6038.216 ops/s
[info]                  ·gc.alloc.rate:                   743.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              193710.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 175775.364 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   6044.625 ±(99.9%) 46.711 ops/s [Average]
[info]   (min, avg, max) = (6028.957, 6044.625, 6058.095), stdev = 12.131
[info]   CI (99.9%): [5997.914, 6091.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   747.278 ±(99.9%) 41.208 MB/sec [Average]
[info]   (min, avg, max) = (739.532, 747.278, 765.119), stdev = 10.702
[info]   CI (99.9%): [706.070, 788.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   194576.815 ±(99.9%) 10109.595 B/op [Average]
[info]   (min, avg, max) = (192136.012, 194576.815, 198851.600), stdev = 2625.430
[info]   CI (99.9%): [184467.220, 204686.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.348 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.208), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12.989 ±(99.9%) 90.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.989, 54.099), stdev = 23.456
[info]   CI (99.9%): [≈ 0, 103.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   808.993 ±(99.9%) 1160.672 MB/sec [Average]
[info]   (min, avg, max) = (673.993, 808.993, 1348.195), stdev = 301.423
[info]   CI (99.9%): [≈ 0, 1969.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   210582.835 ±(99.9%) 300950.452 B/op [Average]
[info]   (min, avg, max) = (175108.731, 210582.835, 350390.924), stdev = 78155.877
[info]   CI (99.9%): [≈ 0, 511533.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.47% complete, ETA 00:04:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1451.134 ops/s
[info] # Warmup Iteration   2: 15536.742 ops/s
[info] # Warmup Iteration   3: 20053.577 ops/s
[info] # Warmup Iteration   4: 20045.607 ops/s
[info] # Warmup Iteration   5: 20032.110 ops/s
[info] Iteration   1: 20074.322 ops/s
[info]                  ·gc.alloc.rate:                   267.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              21015.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.486 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40108.894 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 19706.288 ops/s
[info]                  ·gc.alloc.rate:      263.521 MB/sec
[info]                  ·gc.alloc.rate.norm: 21048.485 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20179.780 ops/s
[info]                  ·gc.alloc.rate:      257.843 MB/sec
[info]                  ·gc.alloc.rate.norm: 20111.842 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20010.730 ops/s
[info]                  ·gc.alloc.rate:                   274.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              21563.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.775 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53073.223 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 20130.236 ops/s
[info]                  ·gc.alloc.rate:      257.083 MB/sec
[info]                  ·gc.alloc.rate.norm: 20104.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   20020.271 ±(99.9%) 718.156 ops/s [Average]
[info]   (min, avg, max) = (19706.288, 20020.271, 20179.780), stdev = 186.503
[info]   CI (99.9%): [19302.115, 20738.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   264.119 ±(99.9%) 27.565 MB/sec [Average]
[info]   (min, avg, max) = (257.083, 264.119, 274.155), stdev = 7.159
[info]   CI (99.9%): [236.554, 291.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20768.539 ±(99.9%) 2468.211 B/op [Average]
[info]   (min, avg, max) = (20104.020, 20768.539, 21563.153), stdev = 640.986
[info]   CI (99.9%): [18300.328, 23236.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.006 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.485 ±(99.9%) 2.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.485, 1.632), stdev = 0.727
[info]   CI (99.9%): [≈ 0, 3.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   237.252 ±(99.9%) 1270.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 237.252, 674.775), stdev = 329.961
[info]   CI (99.9%): [≈ 0, 1507.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18636.423 ±(99.9%) 99836.976 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18636.423, 53073.223), stdev = 25927.346
[info]   CI (99.9%): [≈ 0, 118473.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.71% complete, ETA 00:03:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12671.969 ops/s
[info] # Warmup Iteration   2: 19134.214 ops/s
[info] # Warmup Iteration   3: 18030.886 ops/s
[info] # Warmup Iteration   4: 19864.573 ops/s
[info] # Warmup Iteration   5: 19923.371 ops/s
[info] Iteration   1: 19743.312 ops/s
[info]                  ·gc.alloc.rate:      183.696 MB/sec
[info]                  ·gc.alloc.rate.norm: 14642.447 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19906.959 ops/s
[info]                  ·gc.alloc.rate:      184.694 MB/sec
[info]                  ·gc.alloc.rate.norm: 14600.481 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 19465.700 ops/s
[info]                  ·gc.alloc.rate:                   196.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              15904.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41363.520 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 19997.014 ops/s
[info]                  ·gc.alloc.rate:      183.565 MB/sec
[info]                  ·gc.alloc.rate.norm: 14448.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 19997.229 ops/s
[info]                  ·gc.alloc.rate:      183.577 MB/sec
[info]                  ·gc.alloc.rate.norm: 14448.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   19822.043 ±(99.9%) 864.670 ops/s [Average]
[info]   (min, avg, max) = (19465.700, 19822.043, 19997.229), stdev = 224.552
[info]   CI (99.9%): [18957.372, 20686.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   186.442 ±(99.9%) 22.104 MB/sec [Average]
[info]   (min, avg, max) = (183.565, 186.442, 196.676), stdev = 5.740
[info]   CI (99.9%): [164.338, 208.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14808.676 ±(99.9%) 2382.845 B/op [Average]
[info]   (min, avg, max) = (14448.022, 14808.676, 15904.406), stdev = 618.817
[info]   CI (99.9%): [12425.831, 17191.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   102.301 ±(99.9%) 880.843 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.301, 511.506), stdev = 228.752
[info]   CI (99.9%): [≈ 0, 983.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8272.704 ±(99.9%) 71230.476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8272.704, 41363.520), stdev = 18498.328
[info]   CI (99.9%): [≈ 0, 79503.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.94% complete, ETA 00:03:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 220.760 ops/s
[info] # Warmup Iteration   2: 3063.277 ops/s
[info] # Warmup Iteration   3: 5890.195 ops/s
[info] # Warmup Iteration   4: 5898.847 ops/s
[info] # Warmup Iteration   5: 6026.595 ops/s
[info] Iteration   1: 6074.635 ops/s
[info]                  ·gc.alloc.rate:                   1786.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              462830.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 343082.470 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6062.326 ops/s
[info]                  ·gc.alloc.rate:                   1789.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              464623.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1990.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 516766.058 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6052.710 ops/s
[info]                  ·gc.alloc.rate:                   1777.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              462198.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 345888.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6040.128 ops/s
[info]                  ·gc.alloc.rate:                   1801.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              469589.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1999.537 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 521077.365 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6049.097 ops/s
[info]                  ·gc.alloc.rate:                   1791.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              466200.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2006.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 522035.234 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   6055.779 ±(99.9%) 50.846 ops/s [Average]
[info]   (min, avg, max) = (6040.128, 6055.779, 6074.635), stdev = 13.205
[info]   CI (99.9%): [6004.933, 6106.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1789.280 ±(99.9%) 34.465 MB/sec [Average]
[info]   (min, avg, max) = (1777.251, 1789.280, 1801.962), stdev = 8.951
[info]   CI (99.9%): [1754.814, 1823.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   465088.341 ±(99.9%) 11416.587 B/op [Average]
[info]   (min, avg, max) = (462198.639, 465088.341, 469589.386), stdev = 2964.851
[info]   CI (99.9%): [453671.754, 476504.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10.815 ±(99.9%) 25.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.815, 16.246), stdev = 6.631
[info]   CI (99.9%): [≈ 0, 36.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1729.996 ±(99.9%) 1416.657 MB/sec [Average]
[info]   (min, avg, max) = (1324.059, 1729.996, 2006.185), stdev = 367.901
[info]   CI (99.9%): [313.340, 3146.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   449769.836 ±(99.9%) 370188.720 B/op [Average]
[info]   (min, avg, max) = (343082.470, 449769.836, 522035.234), stdev = 96136.835
[info]   CI (99.9%): [79581.116, 819958.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.18% complete, ETA 00:03:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_aee5aee3/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 5900.959 ops/s
[info] # Warmup Iteration   2: 52112.912 ops/s
[info] # Warmup Iteration   3: 56081.559 ops/s
[info] # Warmup Iteration   4: 55673.114 ops/s
[info] # Warmup Iteration   5: 56168.936 ops/s
[info] Iteration   1: 56223.249 ops/s
[info]                  ·gc.alloc.rate:                   725.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              20303.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.973 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18870.750 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 56004.409 ops/s
[info]                  ·gc.alloc.rate:                   725.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              20391.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18925.472 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 56227.536 ops/s
[info]                  ·gc.alloc.rate:                   723.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              20253.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18850.763 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 56270.046 ops/s
[info]                  ·gc.alloc.rate:                   729.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              20410.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18817.394 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 56254.566 ops/s
[info]                  ·gc.alloc.rate:                   720.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              20169.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18823.080 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   56195.961 ±(99.9%) 418.982 ops/s [Average]
[info]   (min, avg, max) = (56004.409, 56195.961, 56270.046), stdev = 108.808
[info]   CI (99.9%): [55776.979, 56614.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   724.946 ±(99.9%) 12.235 MB/sec [Average]
[info]   (min, avg, max) = (720.945, 724.946, 729.627), stdev = 3.177
[info]   CI (99.9%): [712.711, 737.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20305.485 ±(99.9%) 382.202 B/op [Average]
[info]   (min, avg, max) = (20169.895, 20305.485, 20410.051), stdev = 99.257
[info]   CI (99.9%): [19923.282, 20687.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.582 ±(99.9%) 3.883 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.582, 2.329), stdev = 1.008
[info]   CI (99.9%): [≈ 0, 4.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   673.250 ±(99.9%) 1.993 MB/sec [Average]
[info]   (min, avg, max) = (672.692, 673.250, 673.973), stdev = 0.518
[info]   CI (99.9%): [671.256, 675.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18857.492 ±(99.9%) 168.226 B/op [Average]
[info]   (min, avg, max) = (18817.394, 18857.492, 18925.472), stdev = 43.688
[info]   CI (99.9%): [18689.266, 19025.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.41% complete, ETA 00:02:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36817.666 ops/s
[info] # Warmup Iteration   2: 77358.397 ops/s
[info] # Warmup Iteration   3: 77263.258 ops/s
[info] # Warmup Iteration   4: 80593.981 ops/s
[info] # Warmup Iteration   5: 80688.805 ops/s
[info] Iteration   1: 80501.688 ops/s
[info]                  ·gc.alloc.rate:                   544.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              10648.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.920 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13179.970 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 80714.545 ops/s
[info]                  ·gc.alloc.rate:                   548.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              10687.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13145.031 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 80921.560 ops/s
[info]                  ·gc.alloc.rate:                   548.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              10665.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13097.322 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 80813.502 ops/s
[info]                  ·gc.alloc.rate:                   550.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              10727.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13115.470 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 81057.718 ops/s
[info]                  ·gc.alloc.rate:      528.099 MB/sec
[info]                  ·gc.alloc.rate.norm: 10256.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   80801.803 ±(99.9%) 811.504 ops/s [Average]
[info]   (min, avg, max) = (80501.688, 80801.803, 81057.718), stdev = 210.745
[info]   CI (99.9%): [79990.298, 81613.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   543.975 ±(99.9%) 35.254 MB/sec [Average]
[info]   (min, avg, max) = (528.099, 543.975, 550.779), stdev = 9.155
[info]   CI (99.9%): [508.721, 579.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10597.092 ±(99.9%) 742.950 B/op [Average]
[info]   (min, avg, max) = (10256.005, 10597.092, 10727.383), stdev = 192.942
[info]   CI (99.9%): [9854.142, 11340.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.589 ±(99.9%) 4.985 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.589, 2.905), stdev = 1.295
[info]   CI (99.9%): [≈ 0, 5.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11.491 ±(99.9%) 97.197 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.491, 56.643), stdev = 25.242
[info]   CI (99.9%): [≈ 0, 108.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538.974 ±(99.9%) 1160.182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.974, 674.184), stdev = 301.296
[info]   CI (99.9%): [≈ 0, 1699.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10507.559 ±(99.9%) 22618.633 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10507.559, 13179.970), stdev = 5873.987
[info]   CI (99.9%): [≈ 0, 33126.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.65% complete, ETA 00:02:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33348.989 ops/s
[info] # Warmup Iteration   2: 87502.600 ops/s
[info] # Warmup Iteration   3: 87979.695 ops/s
[info] # Warmup Iteration   4: 87841.685 ops/s
[info] # Warmup Iteration   5: 88185.019 ops/s
[info] Iteration   1: 88253.133 ops/s
[info]                  ·gc.alloc.rate:      8.970 MB/sec
[info]                  ·gc.alloc.rate.norm: 160.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 87818.869 ops/s
[info]                  ·gc.alloc.rate:      8.928 MB/sec
[info]                  ·gc.alloc.rate.norm: 160.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 88242.188 ops/s
[info]                  ·gc.alloc.rate:      8.970 MB/sec
[info]                  ·gc.alloc.rate.norm: 160.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 88384.246 ops/s
[info]                  ·gc.alloc.rate:      8.985 MB/sec
[info]                  ·gc.alloc.rate.norm: 160.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 88248.997 ops/s
[info]                  ·gc.alloc.rate:      8.970 MB/sec
[info]                  ·gc.alloc.rate.norm: 160.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   88189.487 ±(99.9%) 829.584 ops/s [Average]
[info]   (min, avg, max) = (87818.869, 88189.487, 88384.246), stdev = 215.440
[info]   CI (99.9%): [87359.903, 89019.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   8.965 ±(99.9%) 0.082 MB/sec [Average]
[info]   (min, avg, max) = (8.928, 8.965, 8.985), stdev = 0.021
[info]   CI (99.9%): [8.883, 9.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   160.005 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (160.005, 160.005, 160.006), stdev = 0.001
[info]   CI (99.9%): [160.003, 160.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.88% complete, ETA 00:02:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 142356.795 ops/s
[info] # Warmup Iteration   2: 271070.240 ops/s
[info] # Warmup Iteration   3: 298313.313 ops/s
[info] # Warmup Iteration   4: 301101.918 ops/s
[info] # Warmup Iteration   5: 299548.499 ops/s
[info] Iteration   1: 302555.198 ops/s
[info]                  ·gc.alloc.rate:                   1666.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              8669.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.237 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10516.843 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 301849.133 ops/s
[info]                  ·gc.alloc.rate:                   1667.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              8692.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7036.863 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 303264.135 ops/s
[info]                  ·gc.alloc.rate:                   1675.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              8697.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10520.159 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 302696.263 ops/s
[info]                  ·gc.alloc.rate:                   1671.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              8690.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7034.564 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 303866.166 ops/s
[info]                  ·gc.alloc.rate:                   1665.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              8626.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7014.521 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   302846.179 ±(99.9%) 2930.228 ops/s [Average]
[info]   (min, avg, max) = (301849.133, 302846.179, 303866.166), stdev = 760.971
[info]   CI (99.9%): [299915.951, 305776.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1669.166 ±(99.9%) 16.191 MB/sec [Average]
[info]   (min, avg, max) = (1665.541, 1669.166, 1675.621), stdev = 4.205
[info]   CI (99.9%): [1652.976, 1685.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8675.503 ±(99.9%) 111.997 B/op [Average]
[info]   (min, avg, max) = (8626.992, 8675.503, 8697.493), stdev = 29.085
[info]   CI (99.9%): [8563.506, 8787.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.259 ±(99.9%) 0.863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.259, 0.540), stdev = 0.224
[info]   CI (99.9%): [≈ 0, 1.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1620.926 ±(99.9%) 1416.904 MB/sec [Average]
[info]   (min, avg, max) = (1349.658, 1620.926, 2026.768), stdev = 367.965
[info]   CI (99.9%): [204.022, 3037.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8424.590 ±(99.9%) 7360.469 B/op [Average]
[info]   (min, avg, max) = (7014.521, 8424.590, 10520.159), stdev = 1911.490
[info]   CI (99.9%): [1064.121, 15785.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.12% complete, ETA 00:02:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 116889.097 ops/s
[info] # Warmup Iteration   2: 463702.210 ops/s
[info] # Warmup Iteration   3: 471201.372 ops/s
[info] # Warmup Iteration   4: 473250.240 ops/s
[info] # Warmup Iteration   5: 473445.149 ops/s
[info] Iteration   1: 472284.721 ops/s
[info]                  ·gc.alloc.rate:                   511.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              1704.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2245.376 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 473315.746 ops/s
[info]                  ·gc.alloc.rate:      495.694 MB/sec
[info]                  ·gc.alloc.rate.norm: 1648.264 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 456895.604 ops/s
[info]                  ·gc.alloc.rate:                   495.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              1707.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2322.107 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 473093.673 ops/s
[info]                  ·gc.alloc.rate:                   514.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              1712.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2242.635 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 472319.594 ops/s
[info]                  ·gc.alloc.rate:      494.470 MB/sec
[info]                  ·gc.alloc.rate.norm: 1648.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   469581.868 ±(99.9%) 27365.081 ops/s [Average]
[info]   (min, avg, max) = (456895.604, 469581.868, 473315.746), stdev = 7106.625
[info]   CI (99.9%): [442216.786, 496946.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   502.404 ±(99.9%) 37.949 MB/sec [Average]
[info]   (min, avg, max) = (494.470, 502.404, 514.883), stdev = 9.855
[info]   CI (99.9%): [464.455, 540.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1684.184 ±(99.9%) 127.278 B/op [Average]
[info]   (min, avg, max) = (1648.001, 1684.184, 1712.932), stdev = 33.054
[info]   CI (99.9%): [1556.906, 1811.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.279 ±(99.9%) 2.357 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.279, 1.374), stdev = 0.612
[info]   CI (99.9%): [≈ 0, 2.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.930 ±(99.9%) 7.855 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.930, 4.578), stdev = 2.040
[info]   CI (99.9%): [≈ 0, 8.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   404.370 ±(99.9%) 1421.417 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.370, 674.127), stdev = 369.138
[info]   CI (99.9%): [≈ 0, 1825.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1362.024 ±(99.9%) 4789.280 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1362.024, 2322.107), stdev = 1243.761
[info]   CI (99.9%): [≈ 0, 6151.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.35% complete, ETA 00:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 819385.320 ops/s
[info] # Warmup Iteration   2: 1138174.490 ops/s
[info] # Warmup Iteration   3: 1181145.771 ops/s
[info] # Warmup Iteration   4: 1177871.711 ops/s
[info] # Warmup Iteration   5: 1183021.435 ops/s
[info] Iteration   1: 1183923.629 ops/s
[info]                  ·gc.alloc.rate:                   643.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              855.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 897.977 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1187609.409 ops/s
[info]                  ·gc.alloc.rate:                   637.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              844.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.754 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 894.312 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1163385.965 ops/s
[info]                  ·gc.alloc.rate:                   624.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              844.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 912.930 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1187215.200 ops/s
[info]                  ·gc.alloc.rate:                   644.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              853.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 892.809 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1185830.755 ops/s
[info]                  ·gc.alloc.rate:                   645.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              857.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.336 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 893.804 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1181592.992 ±(99.9%) 39583.646 ops/s [Average]
[info]   (min, avg, max) = (1163385.965, 1181592.992, 1187609.409), stdev = 10279.747
[info]   CI (99.9%): [1142009.345, 1221176.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   639.064 ±(99.9%) 33.983 MB/sec [Average]
[info]   (min, avg, max) = (624.473, 639.064, 645.923), stdev = 8.825
[info]   CI (99.9%): [605.081, 673.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   851.310 ±(99.9%) 24.025 B/op [Average]
[info]   (min, avg, max) = (844.343, 851.310, 857.414), stdev = 6.239
[info]   CI (99.9%): [827.285, 875.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.522 ±(99.9%) 4.409 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.522, 2.571), stdev = 1.145
[info]   CI (99.9%): [≈ 0, 4.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.695 ±(99.9%) 5.862 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.695, 3.418), stdev = 1.522
[info]   CI (99.9%): [≈ 0, 6.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   674.329 ±(99.9%) 3.505 MB/sec [Average]
[info]   (min, avg, max) = (673.336, 674.329, 675.374), stdev = 0.910
[info]   CI (99.9%): [670.824, 677.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   898.366 ±(99.9%) 32.239 B/op [Average]
[info]   (min, avg, max) = (892.809, 898.366, 912.930), stdev = 8.372
[info]   CI (99.9%): [866.127, 930.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31528.994 ops/s
[info] # Warmup Iteration   2: 98218.326 ops/s
[info] # Warmup Iteration   3: 98374.361 ops/s
[info] # Warmup Iteration   4: 100365.975 ops/s
[info] # Warmup Iteration   5: 102366.233 ops/s
[info] Iteration   1: 102205.050 ops/s
[info]                  ·gc.alloc.rate:                   3244.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              49970.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3387.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52171.328 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 101749.449 ops/s
[info]                  ·gc.alloc.rate:                   3272.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              50604.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3394.636 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52497.835 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 102298.579 ops/s
[info]                  ·gc.alloc.rate:                   3260.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              50174.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41824.566 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 101333.428 ops/s
[info]                  ·gc.alloc.rate:                   3260.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              50632.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52815.736 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 101394.572 ops/s
[info]                  ·gc.alloc.rate:                   3262.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              50639.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404.260 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52836.708 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   101796.216 ±(99.9%) 1719.035 ops/s [Average]
[info]   (min, avg, max) = (101333.428, 101796.216, 102298.579), stdev = 446.428
[info]   CI (99.9%): [100077.181, 103515.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3260.157 ±(99.9%) 37.912 MB/sec [Average]
[info]   (min, avg, max) = (3244.798, 3260.157, 3272.203), stdev = 9.846
[info]   CI (99.9%): [3222.244, 3298.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50404.332 ±(99.9%) 1199.389 B/op [Average]
[info]   (min, avg, max) = (49970.781, 50404.332, 50639.300), stdev = 311.477
[info]   CI (99.9%): [49204.943, 51603.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.160 ±(99.9%) 1.894 B/op [Average]
[info]   (min, avg, max) = (0.641, 1.160, 1.939), stdev = 0.492
[info]   CI (99.9%): [≈ 0, 3.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3261.123 ±(99.9%) 1169.197 MB/sec [Average]
[info]   (min, avg, max) = (2718.080, 3261.123, 3404.260), stdev = 303.637
[info]   CI (99.9%): [2091.927, 4430.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   50429.235 ±(99.9%) 18551.717 B/op [Average]
[info]   (min, avg, max) = (41824.566, 50429.235, 52836.708), stdev = 4817.822
[info]   CI (99.9%): [31877.518, 68980.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.82% complete, ETA 00:01:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 153313.367 ops/s
[info] # Warmup Iteration   2: 325723.224 ops/s
[info] # Warmup Iteration   3: 333396.486 ops/s
[info] # Warmup Iteration   4: 332882.756 ops/s
[info] # Warmup Iteration   5: 332013.763 ops/s
[info] Iteration   1: 330385.364 ops/s
[info]                  ·gc.alloc.rate:                   543.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              2589.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3209.697 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 332349.228 ops/s
[info]                  ·gc.alloc.rate:                   541.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              2563.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3192.406 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 332734.682 ops/s
[info]                  ·gc.alloc.rate:      529.290 MB/sec
[info]                  ·gc.alloc.rate.norm: 2504.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 332150.604 ops/s
[info]                  ·gc.alloc.rate:                   543.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              2576.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3194.289 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 331807.810 ops/s
[info]                  ·gc.alloc.rate:                   542.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              2571.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3199.142 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   331885.538 ±(99.9%) 3477.793 ops/s [Average]
[info]   (min, avg, max) = (330385.364, 331885.538, 332734.682), stdev = 903.172
[info]   CI (99.9%): [328407.745, 335363.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   539.958 ±(99.9%) 23.280 MB/sec [Average]
[info]   (min, avg, max) = (529.290, 539.958, 543.614), stdev = 6.046
[info]   CI (99.9%): [516.678, 563.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2560.945 ±(99.9%) 128.154 B/op [Average]
[info]   (min, avg, max) = (2504.002, 2560.945, 2589.906), stdev = 33.281
[info]   CI (99.9%): [2432.791, 2689.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.988 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.125, 0.583), stdev = 0.257
[info]   CI (99.9%): [≈ 0, 1.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.595 ±(99.9%) 4.708 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.595, 2.777), stdev = 1.223
[info]   CI (99.9%): [≈ 0, 5.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   539.240 ±(99.9%) 1160.755 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.240, 674.330), stdev = 301.444
[info]   CI (99.9%): [≈ 0, 1699.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2559.107 ±(99.9%) 5508.731 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2559.107, 3209.697), stdev = 1430.600
[info]   CI (99.9%): [≈ 0, 8067.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.06% complete, ETA 00:01:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 229721.086 ops/s
[info] # Warmup Iteration   2: 701238.805 ops/s
[info] # Warmup Iteration   3: 718561.347 ops/s
[info] # Warmup Iteration   4: 713293.659 ops/s
[info] # Warmup Iteration   5: 713264.856 ops/s
[info] Iteration   1: 713800.130 ops/s
[info]                  ·gc.alloc.rate:                   567.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              1251.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1484.234 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 717730.970 ops/s
[info]                  ·gc.alloc.rate:                   560.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              1229.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1476.802 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 721143.083 ops/s
[info]                  ·gc.alloc.rate:                   567.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              1238.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1469.777 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 684973.701 ops/s
[info]                  ·gc.alloc.rate:      522.396 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 721352.038 ops/s
[info]                  ·gc.alloc.rate:                   562.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              1228.377 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.342 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1469.339 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   711799.984 ±(99.9%) 58946.362 ops/s [Average]
[info]   (min, avg, max) = (684973.701, 711799.984, 721352.038), stdev = 15308.183
[info]   CI (99.9%): [652853.622, 770746.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   556.153 ±(99.9%) 73.484 MB/sec [Average]
[info]   (min, avg, max) = (522.396, 556.153, 567.382), stdev = 19.084
[info]   CI (99.9%): [482.669, 629.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1229.601 ±(99.9%) 72.763 B/op [Average]
[info]   (min, avg, max) = (1200.001, 1229.601, 1251.413), stdev = 18.896
[info]   CI (99.9%): [1156.837, 1302.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.196 ±(99.9%) 1.595 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.196, 0.936), stdev = 0.414
[info]   CI (99.9%): [≈ 0, 1.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.431 ±(99.9%) 3.519 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.431, 2.066), stdev = 0.914
[info]   CI (99.9%): [≈ 0, 3.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   538.593 ±(99.9%) 1159.362 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.593, 673.355), stdev = 301.083
[info]   CI (99.9%): [≈ 0, 1697.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1180.030 ±(99.9%) 2540.212 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1180.030, 1484.234), stdev = 659.685
[info]   CI (99.9%): [≈ 0, 3720.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.29% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1038461.786 ops/s
[info] # Warmup Iteration   2: 1352243.392 ops/s
[info] # Warmup Iteration   3: 1349451.019 ops/s
[info] # Warmup Iteration   4: 1342770.490 ops/s
[info] # Warmup Iteration   5: 1370566.165 ops/s
[info] Iteration   1: 1357073.456 ops/s
[info]                  ·gc.alloc.rate:                   643.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              746.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 781.841 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1371894.189 ops/s
[info]                  ·gc.alloc.rate:                   659.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              756.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 772.630 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1371264.468 ops/s
[info]                  ·gc.alloc.rate:                   648.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              743.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 772.938 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1372052.338 ops/s
[info]                  ·gc.alloc.rate:                   647.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              743.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.649 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 771.760 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1369131.261 ops/s
[info]                  ·gc.alloc.rate:                   655.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              753.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 773.408 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1368283.143 ±(99.9%) 24543.980 ops/s [Average]
[info]   (min, avg, max) = (1357073.456, 1368283.143, 1372052.338), stdev = 6373.994
[info]   CI (99.9%): [1343739.163, 1392827.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   650.798 ±(99.9%) 25.249 MB/sec [Average]
[info]   (min, avg, max) = (643.138, 650.798, 659.562), stdev = 6.557
[info]   CI (99.9%): [625.549, 676.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   748.651 ±(99.9%) 23.261 B/op [Average]
[info]   (min, avg, max) = (743.385, 748.651, 756.688), stdev = 6.041
[info]   CI (99.9%): [725.389, 771.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.574 ±(99.9%) 4.768 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.574, 2.789), stdev = 1.238
[info]   CI (99.9%): [≈ 0, 5.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.666 ±(99.9%) 5.531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.235), stdev = 1.436
[info]   CI (99.9%): [≈ 0, 6.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   673.265 ±(99.9%) 2.205 MB/sec [Average]
[info]   (min, avg, max) = (672.649, 673.265, 674.015), stdev = 0.573
[info]   CI (99.9%): [671.060, 675.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   774.515 ±(99.9%) 15.939 B/op [Average]
[info]   (min, avg, max) = (771.760, 774.515, 781.841), stdev = 4.139
[info]   CI (99.9%): [758.577, 790.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.53% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1167132.705 ops/s
[info] # Warmup Iteration   2: 1442440.011 ops/s
[info] # Warmup Iteration   3: 1498297.993 ops/s
[info] # Warmup Iteration   4: 1487361.351 ops/s
[info] # Warmup Iteration   5: 1498902.358 ops/s
[info] Iteration   1: 1498492.925 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1498780.176 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1498764.526 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1473966.274 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1503848.100 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1494770.400 ±(99.9%) 45606.357 ops/s [Average]
[info]   (min, avg, max) = (1473966.274, 1494770.400, 1503848.100), stdev = 11843.826
[info]   CI (99.9%): [1449164.043, 1540376.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.76% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144213.964 ops/s
[info] # Warmup Iteration   2: 410212.412 ops/s
[info] # Warmup Iteration   3: 443197.576 ops/s
[info] # Warmup Iteration   4: 441855.014 ops/s
[info] # Warmup Iteration   5: 435816.220 ops/s
[info] Iteration   1: 443396.557 ops/s
[info]                  ·gc.alloc.rate:                   672.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              2387.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2395.240 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 444138.726 ops/s
[info]                  ·gc.alloc.rate:                   671.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              2381.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2391.357 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 444022.053 ops/s
[info]                  ·gc.alloc.rate:                   673.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              2389.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2391.982 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 444946.398 ops/s
[info]                  ·gc.alloc.rate:                   677.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              2395.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2386.999 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 438391.847 ops/s
[info]                  ·gc.alloc.rate:                   675.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              2425.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2422.709 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   442979.116 ±(99.9%) 10100.127 ops/s [Average]
[info]   (min, avg, max) = (438391.847, 442979.116, 444946.398), stdev = 2622.971
[info]   CI (99.9%): [432878.989, 453079.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   674.310 ±(99.9%) 8.588 MB/sec [Average]
[info]   (min, avg, max) = (671.951, 674.310, 677.267), stdev = 2.230
[info]   CI (99.9%): [665.722, 682.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2395.989 ±(99.9%) 67.303 B/op [Average]
[info]   (min, avg, max) = (2381.360, 2395.989, 2425.869), stdev = 17.478
[info]   CI (99.9%): [2328.686, 2463.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.074 ±(99.9%) 0.491 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.295), stdev = 0.128
[info]   CI (99.9%): [≈ 0, 0.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   674.781 ±(99.9%) 0.431 MB/sec [Average]
[info]   (min, avg, max) = (674.640, 674.781, 674.954), stdev = 0.112
[info]   CI (99.9%): [674.350, 675.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2397.657 ±(99.9%) 55.096 B/op [Average]
[info]   (min, avg, max) = (2386.999, 2397.657, 2422.709), stdev = 14.308
[info]   CI (99.9%): [2342.562, 2452.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:55:37
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                        (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                              N/A  thrpt    5    770817.149 ±   18160.700   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      2142.384 ±      71.637  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5      4374.906 ±      93.196    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5         0.075 ±       0.108  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5         0.153 ±       0.220    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5      2031.868 ±      13.713  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5      4149.351 ±      94.692    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        15.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        15.000                    ms
[info] AdtBenchmark.readJacksonScala                                                                       N/A  thrpt    5   1824813.182 ±   28053.149   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5      1195.311 ±      49.075  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1030.951 ±      27.546    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5         0.033 ±       0.146  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5         0.029 ±       0.125    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5      1214.655 ±    1160.903  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5      1047.009 ±     992.823    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        10.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                      N/A  thrpt    5   5607044.234 ±   72138.339   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5       379.608 ±      35.082  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       106.561 ±       9.774    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5         0.508 ±       4.370  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5         0.142 ±       1.227    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5       372.091 ±    1332.794  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5       104.478 ±     374.038    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5         3.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                             N/A  thrpt    5         7.000                    ms
[info] AdtBenchmark.readPlayJson                                                                           N/A  thrpt    5    273274.269 ±    1346.912   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      2373.178 ±      43.914  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5     13670.320 ±     257.247    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5         0.054 ±       0.091  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5         0.312 ±       0.527    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5      2301.425 ±    1416.105  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5     13258.866 ±    8216.720    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        17.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        17.000                    ms
[info] AdtBenchmark.writeCirce                                                                             N/A  thrpt    5    902041.229 ±    9853.409   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      2235.184 ±      51.607  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5      3900.384 ±      88.247    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5         0.071 ±       0.091  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5         0.123 ±       0.159    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5      2168.551 ±    1168.358  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5      3783.460 ±    2011.889    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        16.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        15.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                      N/A  thrpt    5   2845009.049 ±  141686.140   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5       951.290 ±      30.869  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       526.315 ±      21.442    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5         0.029 ±       0.176  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5         0.016 ±       0.099    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5       943.714 ±    1420.717  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5       523.419 ±     804.518    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5         7.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5         8.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5  13912424.684 ±  224654.270   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5       726.390 ±      12.931  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5        82.181 ±       1.205    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0.497 ±       4.238  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0.057 ±       0.483    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5       674.608 ±       2.159  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5        76.323 ±       1.372    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         5.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5         7.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5  15989447.362 ±   85070.858   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5         0.034 ±       0.293  MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5         0.003 ±       0.029    B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                          N/A  thrpt    5    676761.494 ±   11399.490   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      1932.182 ±      20.286  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      4494.257 ±      95.005    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5         0.067 ±       0.132  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5         0.155 ±       0.307    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5      1892.086 ±    1156.755  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5      4402.779 ±    2733.977    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        14.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        15.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                          N/A  thrpt    5   2004303.905 ±   36123.916   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                           N/A  thrpt    5      2772.044 ±      83.810  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5      2176.756 ±      58.711    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5         0.067 ±       0.119  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5         0.052 ±       0.093    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5      2713.298 ±      21.193  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5      2130.657 ±      43.521    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                N/A  thrpt    5        20.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                 N/A  thrpt    5        16.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                    N/A  thrpt    5  10001932.686 ±  114882.826   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                     N/A  thrpt    5      1251.559 ±      40.633  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                N/A  thrpt    5       196.951 ±       7.227    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0.042 ±       0.150  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5         0.007 ±       0.024    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5      1205.298 ±    1154.243  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       189.705 ±     182.096    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                          N/A  thrpt    5         9.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                           N/A  thrpt    5        10.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                   N/A  thrpt    5   3268952.561 ±   97808.701   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5      2000.845 ±      62.666  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5       963.465 ±      15.191    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5         0.075 ±       0.201  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5         0.036 ±       0.096    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5      1893.489 ±    1157.790  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5       912.052 ±     563.965    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                         N/A  thrpt    5        14.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                          N/A  thrpt    5        14.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                  N/A  thrpt    5  13327407.649 ±  247094.192   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5      1740.296 ±      71.727  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5       205.518 ±       7.067    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0.037 ±       0.143  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5         0.004 ±       0.017    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      1753.748 ±    1421.911  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5       207.044 ±     166.542    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                        N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                         N/A  thrpt    5        11.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                       N/A  thrpt    5   1221029.522 ±   18153.526   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                        N/A  thrpt    5      2868.725 ±      64.186  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   N/A  thrpt    5      3698.323 ±      99.623    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5         0.083 ±       0.113  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5         0.107 ±       0.145    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5      2710.183 ±      23.166  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5      3493.936 ±      64.157    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                             N/A  thrpt    5        20.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                              N/A  thrpt    5        19.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                         N/A  thrpt    5   2535977.372 ±   21695.085   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                          N/A  thrpt    5      2041.864 ±      57.595  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5      1267.273 ±      34.051    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5         0.058 ±       0.207  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5         0.036 ±       0.129    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5      2031.785 ±      15.317  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5      1261.018 ±       5.715    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                               N/A  thrpt    5        15.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                N/A  thrpt    5        13.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                   N/A  thrpt    5  16790267.260 ±  381413.697   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                    N/A  thrpt    5       526.782 ±      35.899  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                               N/A  thrpt    5        49.381 ±       2.857    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5         0.785 ±       6.673  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5         0.074 ±       0.625    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5       536.089 ±    1153.973  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5        50.207 ±     108.083    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                         N/A  thrpt    5         4.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                          N/A  thrpt    5         7.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                  N/A  thrpt    5   6263890.379 ±  130372.229   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5      1770.738 ±      39.897  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5       444.942 ±      13.119    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0.075 ±       0.166  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5         0.019 ±       0.042    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      1757.967 ±    1431.647  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5       441.964 ±     364.657    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                        N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                         N/A  thrpt    5        13.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                 N/A  thrpt    5  21063669.992 ±  901205.586   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       664.891 ±      32.551  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5        49.690 ±       2.249    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0.566 ±       4.652  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5         0.042 ±       0.345    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5       673.225 ±       2.154  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5        50.316 ±       2.194    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                       N/A  thrpt    5         5.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                        N/A  thrpt    5         6.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                         N/A  thrpt    5  23639287.284 ±  619948.901   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          N/A  thrpt    5         0.240 ±       2.032  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     N/A  thrpt    5         0.016 ±       0.135    B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                      N/A  thrpt    5   1779726.915 ±   15992.126   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                       N/A  thrpt    5      2759.047 ±      89.068  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  N/A  thrpt    5      2440.205 ±      77.873    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5         0.067 ±       0.132  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5         0.059 ±       0.116    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5      2576.304 ±    1171.930  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5      2278.533 ±    1034.872    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                            N/A  thrpt    5        19.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                             N/A  thrpt    5        19.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                            128  thrpt    5    306742.157 ±    5426.768   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1733.974 ±      78.696  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5      8898.280 ±     332.453    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.050 ±       0.044  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.256 ±       0.223    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1751.500 ±    1421.885  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      8984.350 ±    7211.360    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                  128  thrpt    5        13.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                     128  thrpt    5    499530.022 ±   13126.088   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       652.966 ±      20.820  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      2057.582 ±      36.080    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.052 ±       0.328    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5       539.252 ±    1160.780  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      1701.095 ±    3662.112    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5         4.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                    128  thrpt    5   1302052.045 ±   16447.753   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       890.788 ±      33.016  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1076.851 ±      48.779    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.015 ±       0.053    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5       806.737 ±    1157.673  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       975.991 ±    1414.208    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         6.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5         6.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                         128  thrpt    5    120958.908 ±    4649.371   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      3610.418 ±     121.763  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     46982.016 ±     604.031    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.083 ±       0.098  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         1.083 ±       1.260    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5      3533.954 ±    1150.413  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     46004.063 ±   15930.848    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        26.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        23.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                           128  thrpt    5    353438.162 ±    4947.311   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5       559.211 ±      20.659  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      2490.321 ±     108.924    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.179 ±       1.452  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.798 ±       6.472    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5       539.289 ±    1160.861  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      2403.845 ±    5174.571    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                  128  thrpt    5         5.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                    128  thrpt    5    825344.120 ±   73700.610   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       609.264 ±      60.720  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      1161.966 ±      60.943    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.017 ±       0.104  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.031 ±       0.197    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5       539.265 ±    1160.808  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5      1030.887 ±    2222.116    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         4.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5         4.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                   128  thrpt    5   2108191.163 ±  100447.499   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1004.388 ±      58.308  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       749.848 ±      26.480    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.046 ±       0.243  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         0.034 ±       0.180    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5      1078.166 ±    1421.429  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       805.780 ±    1071.606    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         8.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5         7.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2323448.957 ±  141937.008   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         1.799 ±      15.438  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         1.254 ±      10.764    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                        128  thrpt    5    464482.801 ±    3683.003   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5       691.001 ±      19.362  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5      2341.629 ±      60.248    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.070 ±       0.332    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5       674.073 ±       0.399  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      2284.278 ±      18.057    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                               128  thrpt    5         6.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                               128  thrpt    5     17417.117 ±     485.626   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1206.416 ±      55.729  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    109031.820 ±    7646.158    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1.891 ±      10.324    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1075.059 ±    1416.849  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     97252.225 ±  129266.816    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                     128  thrpt    5         8.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         9.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                        128  thrpt    5     31131.713 ±     128.636   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       796.367 ±      11.364  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     40264.751 ±     689.955    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.211 ±       1.814    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       674.048 ±       0.214  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     34080.132 ±     140.553    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         5.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         5.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                       128  thrpt    5     40020.567 ±    1014.049   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       589.896 ±      26.102  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5     23199.543 ±     850.997    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.572 ±       4.750  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5        22.755 ±     188.916    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       538.745 ±    1159.690  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     21210.661 ±   45662.912    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         5.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                            128  thrpt    5     28803.032 ±    1345.299   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1455.034 ±      71.241  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     79513.933 ±    2747.534    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.025 ±       0.088  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.364 ±       4.770    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1485.620 ±    1157.878  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     81156.216 ±   62270.028    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                              128  thrpt    5     23061.445 ±     908.449   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1345.421 ±      56.562  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     91830.081 ±    1295.476    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.037 ±       0.132  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2.548 ±       8.968    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1215.667 ±    1165.051  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     82812.981 ±   77364.987    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         9.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         8.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                       128  thrpt    5     21658.813 ±      78.288   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1261.153 ±      25.957  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     91641.897 ±    1628.898    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.907 ±       3.189    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1350.084 ±       4.952  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     98104.427 ±     584.810    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        11.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                      128  thrpt    5     26259.813 ±     341.834   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1399.662 ±      12.618  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5     83882.533 ±     536.805    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.025 ±       0.088  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         1.498 ±       5.257    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1348.453 ±       5.245  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     80813.883 ±     941.841    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        10.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5     26429.746 ±     257.915   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5      1388.955 ±      24.534  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5     82707.966 ±     851.341    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      128  thrpt    5         0.029 ±       0.122  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5         1.738 ±       7.256    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  128  thrpt    5      1346.529 ±       7.157  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5     80182.204 ±     748.811    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     128  thrpt    5        10.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                           128  thrpt    5      7594.303 ±      80.486   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1022.952 ±      28.411  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    211990.875 ±    5931.345    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         1.725 ±       9.093    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5       944.182 ±    1422.122  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5    195644.126 ±  294385.980    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         7.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                   128  thrpt    5     17766.708 ±     871.161   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1411.979 ±      52.603  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    125100.178 ±    2871.443    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.021 ±       0.139  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         1.834 ±      12.185    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      1345.773 ±       6.384  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5    119243.934 ±    5529.149    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        10.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         9.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                            128  thrpt    5     36810.813 ±     414.422   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       931.172 ±      29.896  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     39812.400 ±    1684.562    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.021 ±       0.139  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.892 ±       5.947    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       943.728 ±    1420.634  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     40385.492 ±   61257.742    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                           128  thrpt    5     60185.499 ±     548.010   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       799.212 ±      22.321  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     20901.716 ±     565.248    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.029 ±       0.134  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.763 ±       3.512    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       808.895 ±    1162.492  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     21160.345 ±   30505.655    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         7.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                128  thrpt    5     28099.924 ±     103.345   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1779.409 ±      19.258  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     99678.648 ±    1295.158    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.025 ±       0.104  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1.400 ±       5.858    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1757.185 ±    1425.072  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     98450.012 ±   80175.489    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        13.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                           128  thrpt    5     26116.892 ±     124.051   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1522.265 ±      33.378  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     91734.941 ±    2375.320    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.042 ±       0.127  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         2.509 ±       7.636    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1486.895 ±    1163.620  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     89616.758 ±   70533.619    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        11.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                          128  thrpt    5     35077.684 ±     666.626   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1420.453 ±      48.392  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     63732.659 ±    1931.330    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.071 ±       0.166  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         3.175 ±       7.433    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1482.842 ±    1168.498  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     66508.283 ±   51697.455    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        10.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5     35340.045 ±     353.132   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5      1371.491 ±      47.231  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5     61081.546 ±    2076.271    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.071 ±       0.108  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         3.154 ±       4.815    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                      128  thrpt    5      1347.243 ±       6.367  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5     60001.753 ±     476.208    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5        10.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         128  thrpt    5         8.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                  128  thrpt    5    325767.063 ±    4159.570   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1693.887 ±      35.832  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5      8183.700 ±     100.329    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.054 ±       0.091  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.261 ±       0.440    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1756.642 ±    1425.266  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5      8482.456 ±    6790.228    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                        128  thrpt    5        13.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                         128  thrpt    5        11.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                            128  thrpt    5   1330643.467 ±   11606.550   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       427.647 ±      28.449  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       505.823 ±      37.006    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.810 ±       6.934  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.960 ±       8.215    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5       402.372 ±    1414.395  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       476.625 ±    1675.409    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                           128  thrpt    5    671774.860 ±    9708.339   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       534.075 ±      31.440  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1251.410 ±      79.864    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.229 ±       1.883  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.540 ±       4.440    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       539.258 ±    1160.793  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      1264.486 ±    2721.979    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         5.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                          128  thrpt    5   1796604.374 ±   33562.025   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       356.369 ±      28.908  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       312.188 ±      29.056    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.556 ±       4.785  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.491 ±       4.224    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       372.002 ±    1332.405  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       326.775 ±    1170.627    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         7.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                               128  thrpt    5    102189.723 ±    2124.632   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3428.004 ±      66.341  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     52799.324 ±    1191.627    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.050 ±       0.072  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.769 ±       1.097    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      3260.828 ±    1176.413  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     50233.322 ±   18530.242    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        24.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        22.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                 128  thrpt    5    366776.197 ±    2956.804   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5       584.743 ±      34.272  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      2509.320 ±     150.913    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.067 ±       0.574  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.286 ±       2.463    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5       539.058 ±    1160.363  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5      2314.230 ±    4981.599    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         4.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                           128  thrpt    5   1313347.100 ±   39463.345   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       624.269 ±      20.587  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5       748.161 ±      13.491    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.729 ±       6.189  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.873 ±       7.405    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5       670.753 ±       3.099  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       803.908 ±      25.197    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5         7.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                          128  thrpt    5    979978.746 ±   20611.681   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       712.008 ±      24.427  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      1143.627 ±      28.499    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.020 ±       0.071    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       674.701 ±       0.342  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      1083.733 ±      22.818    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         5.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                         128  thrpt    5   2495732.522 ±  209435.956   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1188.621 ±     145.929  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       749.515 ±      35.583    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.067 ±       0.222  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.042 ±       0.139    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1211.881 ±    1160.574  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       761.208 ±     688.479    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   2817496.750 ±    8835.460   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5         0.201 ±       1.566  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5         0.113 ±       0.876    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                              128  thrpt    5    478083.389 ±    5357.484   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5       577.155 ±      23.831  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5      1900.250 ±      98.446    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.167 ±       1.346  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.549 ±       4.437    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       539.711 ±    1161.768  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      1779.228 ±    3829.923    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5         4.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                     128  thrpt    5    164249.031 ±    3256.453   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2042.064 ±      78.026  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     19569.804 ±     407.901    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0.058 ±       0.143  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         0.559 ±       1.378    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5      2023.261 ±      20.034  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5     19390.251 ±     333.723    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                           128  thrpt    5        15.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                            128  thrpt    5        13.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                              128  thrpt    5    437391.809 ±   27162.785   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       358.720 ±      49.495  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1290.689 ±     139.947    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.221 ±       1.855  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.790 ±       6.643    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       269.499 ±    1420.993  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5       965.108 ±    5088.737    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5         4.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                             128  thrpt    5   1137265.504 ±   15327.560   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       224.882 ±      26.279  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       311.228 ±      40.396    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.006 ±       0.050    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       204.628 ±    1078.945  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       284.282 ±    1498.939    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5         6.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                  128  thrpt    5     86428.453 ±     566.091   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3466.686 ±      83.840  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     63134.333 ±    1780.462    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.050 ±       0.072  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.910 ±       1.309    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      3396.206 ±      26.040  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     61850.551 ±     730.885    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        25.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        26.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                    128  thrpt    5    284493.054 ±   13261.315   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1284.731 ±      45.757  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5      7108.190 ±     125.536    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5         0.025 ±       0.088  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5         0.138 ±       0.487    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5      1216.611 ±    1166.640  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5      6734.735 ±    6500.784    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                          128  thrpt    5         9.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                           128  thrpt    5         8.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                             128  thrpt    5   1802547.267 ±   13155.863   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       947.008 ±      34.254  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5       826.872 ±      35.491    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.017 ±       0.143  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.015 ±       0.126    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       809.189 ±    1159.891  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       706.903 ±    1020.020    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5         6.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                            128  thrpt    5   2447194.448 ±   16387.536   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       676.908 ±      24.457  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       435.342 ±      13.957    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.566 ±       4.653  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.365 ±       2.996    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       673.316 ±       2.178  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       433.037 ±       4.008    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         5.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5         7.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   2671376.545 ±    2698.592   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.034 ±       0.293  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.020 ±       0.173    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                 128  thrpt    5     46577.738 ±    1811.379   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      2036.903 ±      62.375  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     68838.310 ±    1774.770    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.050 ±       0.185  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         1.678 ±       6.195    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      2031.159 ±      13.584  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     68647.030 ±    2475.867    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        15.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        14.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                     128  thrpt    5    251665.243 ±    6396.405   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2681.654 ±      89.848  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     16771.297 ±     314.397    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0.075 ±       0.134  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         0.469 ±       0.842    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5      2571.339 ±    1157.464  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5     16083.021 ±    7286.604    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        19.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        19.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                              128  thrpt    5    380339.700 ±   11533.457   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1893.582 ±      75.632  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      7836.512 ±     199.487    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.046 ±       0.183  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.189 ±       0.752    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1759.544 ±    1430.188  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      7282.358 ±    5928.015    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        13.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        13.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                             128  thrpt    5   2181954.659 ±   17971.555   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       776.445 ±      48.573  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       560.135 ±      34.229    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.033 ±       0.185  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.024 ±       0.133    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       808.863 ±    1159.244  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       583.484 ±     835.499    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5         6.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                  128  thrpt    5     88098.201 ±     782.474   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3476.659 ±      64.561  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     62112.290 ±    1261.898    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.054 ±       0.146  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.967 ±       2.596    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      3395.713 ±      24.671  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     60666.185 ±     744.918    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        25.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        23.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                    128  thrpt    5    251893.215 ±    1732.627   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1686.834 ±      50.152  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     10541.138 ±     336.344    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5         0.046 ±       0.183  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5         0.286 ±       1.144    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5      1623.834 ±    1427.633  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5     10149.721 ±    8974.187    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        12.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        12.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                             128  thrpt    5   1402902.705 ±   18594.395   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       844.247 ±      40.525  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5       947.202 ±      45.309    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.025 ±       0.215  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.028 ±       0.241    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       809.384 ±    1161.612  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       907.975 ±    1301.037    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5         6.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                            128  thrpt    5   2759312.258 ±   16498.063   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       970.663 ±      51.103  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       553.727 ±      32.362    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.046 ±       0.200  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.026 ±       0.114    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       941.936 ±    1419.622  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       537.585 ±     813.408    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5         6.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   3092472.137 ±   12229.344   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.130 ±       0.945  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.066 ±       0.482    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                 128  thrpt    5    375503.468 ±   16132.485   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      2418.081 ±     116.828  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     10136.474 ±     436.767    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.087 ±       0.143  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.365 ±       0.596    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      2439.129 ±    1427.407  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     10225.361 ±    6003.195    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        18.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        17.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                   128  thrpt    5     25101.584 ±    1591.688   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1471.860 ±      79.166  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     92289.923 ±    1407.616    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.025 ±       0.088  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         1.555 ±       5.469    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      1344.180 ±       8.137  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     84299.342 ±    5425.529    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                         128  thrpt    5        10.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                          128  thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                             128  thrpt    5     89224.611 ±     228.442   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       824.966 ±      23.623  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5     14552.562 ±     426.089    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.025 ±       0.105  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.441 ±       1.845    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       803.566 ±    1154.644  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     14176.532 ±   20396.683    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                            128  thrpt    5     59418.169 ±    2342.057   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1004.984 ±      61.859  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     26622.318 ±    1147.632    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.029 ±       0.134  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.767 ±       3.531    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       944.019 ±    1422.437  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     24978.232 ±   37249.356    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         7.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                           128  thrpt    5    135014.957 ±    1426.818   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       896.185 ±      38.414  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     10448.233 ±     555.338    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.025 ±       0.143  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.292 ±       1.677    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       807.376 ±    1157.802  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      9419.927 ±   13639.390    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                128  thrpt    5     35035.623 ±     382.666   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1735.255 ±      15.411  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     77954.263 ±    1184.319    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.037 ±       0.174  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1.682 ±       7.789    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1621.704 ±    1425.074  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     72883.775 ±   64724.760    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        12.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        11.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                  128  thrpt    5     30605.586 ±     421.237   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       357.262 ±      36.032  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     18375.774 ±    2052.827    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.079 ±       0.595  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         4.072 ±      30.639    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5       268.979 ±    1418.248  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     13877.099 ±   73170.378    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         2.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         2.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                           128  thrpt    5     29951.891 ±     641.493   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       341.573 ±      22.251  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     17949.652 ±    1298.600    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.187 ±       1.613  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         9.827 ±      84.617    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       269.349 ±    1420.201  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     14153.477 ±   74627.361    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         2.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         4.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                          128  thrpt    5     33654.615 ±     298.616   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       309.570 ±      26.996  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     14477.657 ±    1366.467    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.002 ±       0.018  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.098 ±       0.842    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       237.159 ±    1269.829  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     11112.458 ±   59488.245    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         2.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         6.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5     33284.740 ±     924.147   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5       338.713 ±      35.901  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5     16014.837 ±    1303.305    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.545 ±       4.696  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5        25.674 ±     221.063    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                      128  thrpt    5       372.219 ±    1333.307  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5     17550.780 ±   62814.580    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         128  thrpt    5         8.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                 128  thrpt    5     20727.970 ±     371.964   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5       743.725 ±      37.678  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     56475.454 ±    2936.517    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.017 ±       0.104  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         1.262 ±       7.918    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5       674.470 ±       1.211  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     51216.728 ±     827.301    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                       128  thrpt    5         5.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         5.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                          128  thrpt    5     18696.132 ±     840.895   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       545.204 ±      25.236  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     45907.637 ±    3401.696    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.204 ±       1.580  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5        17.147 ±     132.875    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       538.746 ±    1159.690  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     45462.770 ±   97890.068    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         5.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                         128  thrpt    5    105217.391 ±    1797.174   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       282.172 ±      26.804  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      4221.344 ±     445.150    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.063 ±       0.539    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       339.423 ±    1220.158  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      5090.216 ±   18290.461    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         9.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                              128  thrpt    5     16285.405 ±     629.625   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      1022.358 ±      41.945  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     98819.091 ±    1837.817    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.801 ±       4.222    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       944.046 ±    1422.652  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     91126.139 ±  135710.117    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         8.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                128  thrpt    5     42545.781 ±     188.584   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       663.126 ±      20.023  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     24532.487 ±     648.113    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.462 ±       2.652    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       674.783 ±       0.736  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     24963.889 ±      95.464    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         5.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         5.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                         128  thrpt    5     56140.146 ±    3507.382   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       799.573 ±      47.979  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     22418.750 ±     392.638    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.346 ±       1.988    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       674.183 ±       0.702  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     18906.710 ±    1184.990    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         5.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                        128  thrpt    5    170866.313 ±    2608.147   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       279.666 ±      32.186  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      2575.732 ±     310.547    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.002 ±       0.018  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.019 ±       0.165    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       339.323 ±    1219.885  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      3131.441 ±   11249.562    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         7.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    176816.003 ±     583.773   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         0.025 ±       0.206  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.220 ±       1.834    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                             128  thrpt    5     51928.191 ±     773.343   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       834.566 ±      48.501  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     25295.334 ±    1231.777    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.029 ±       0.134  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.884 ±       4.060    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       808.659 ±    1161.297  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     24501.342 ±   35015.265    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         5.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                     128  thrpt    5     94750.347 ±    4146.969   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      1961.959 ±     101.877  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     32591.993 ±     612.797    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0.058 ±       0.132  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         0.963 ±       2.177    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5      1895.466 ±    1159.910  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5     31445.252 ±   18179.584    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        14.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        13.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                              128  thrpt    5    119907.695 ±    1058.618   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1615.811 ±      19.937  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     21210.647 ±     445.859    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.050 ±       0.176  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.656 ±       2.301    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1621.790 ±    1422.761  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     21297.718 ±   18875.414    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        12.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        11.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                             128  thrpt    5    150142.498 ±    1445.774   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1409.971 ±      23.981  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5     14781.220 ±     258.013    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.046 ±       0.119  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.480 ±       1.247    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1347.727 ±       4.888  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     14128.718 ±     130.614    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        10.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        10.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                  128  thrpt    5     53722.837 ±     675.221   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2846.696 ±      73.847  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     83404.186 ±    2526.277    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.058 ±       0.164  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         1.707 ±       4.807    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      2712.894 ±      21.978  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     79484.136 ±    1549.987    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        20.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        19.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                    128  thrpt    5    169557.544 ±    4482.293   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5       605.122 ±      21.513  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5      5617.561 ±     130.827    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5         0.162 ±       1.182  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5         1.518 ±      11.065    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5       674.568 ±       0.761  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5      6262.485 ±     158.370    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5         5.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5         6.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                             128  thrpt    5    375333.152 ±   11301.127   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       391.425 ±      39.139  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1641.631 ±     180.972    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.108 ±       0.888  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.459 ±       3.768    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       404.105 ±    1420.485  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      1699.264 ±    5973.588    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5         5.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                            128  thrpt    5    643435.389 ±   14527.474   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       511.243 ±      32.648  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1250.771 ±      98.408    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.541 ±       4.660  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.324 ±      11.399    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       539.503 ±    1161.321  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1322.222 ±    2846.292    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    697175.785 ±   63064.499   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.784 ±       6.747  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         1.756 ±      15.117    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                 128  thrpt    5    261611.806 ±    6056.253   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5       746.351 ±      40.006  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5      4490.776 ±     273.580    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.025 ±       0.067  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.150 ±       0.403    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5       809.675 ±    1162.006  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5      4870.923 ±    6976.125    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5         6.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5         6.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                    128  thrpt    5     37395.662 ±     797.217   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1784.173 ±      52.463  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     75087.753 ±    2079.557    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5         0.042 ±       0.188  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5         1.748 ±       7.892    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5      1753.389 ±    1423.512  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5     73753.474 ±   59078.332    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        13.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        11.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                              128  thrpt    5    286658.500 ±    5541.191   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       306.625 ±      30.123  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1683.800 ±     195.321    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.783 ±       6.696  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         4.311 ±      36.845    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       370.599 ±    1326.546  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      2041.625 ±    7313.261    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                             128  thrpt    5    109145.476 ±    6027.416   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1230.144 ±      66.335  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     17739.081 ±     512.736    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.029 ±       0.072  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.418 ±       1.031    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1214.765 ±    1161.649  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     17540.409 ±   17049.062    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         9.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5         8.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                            128  thrpt    5    454488.938 ±   16030.977   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       300.717 ±      23.668  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1041.398 ±      93.949    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       237.184 ±    1270.028  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       826.040 ±    4414.760    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         5.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                 128  thrpt    5     39103.001 ±    1241.223   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      1914.348 ±      40.431  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     77055.423 ±    2248.634    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.050 ±       0.146  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         2.013 ±       5.860    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1757.676 ±    1426.404  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     70795.753 ±   58420.518    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        13.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        13.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                   128  thrpt    5     71912.545 ±    1276.657   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5       354.257 ±      42.763  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5      7754.895 ±    1068.816    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.062 ±       0.538  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         1.368 ±      11.776    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5       269.341 ±    1420.155  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5      5920.121 ±   31215.408    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5         2.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                             128  thrpt    5     84298.729 ±    2666.191   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       433.085 ±      38.077  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5      8086.088 ±     744.658    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.813 ±       7.003  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5        15.169 ±     130.606    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       402.191 ±    1413.760  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      7537.535 ±   26497.641    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5         8.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                            128  thrpt    5     72083.479 ±     771.306   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       389.627 ±      34.667  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      8507.875 ±     846.169    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.183 ±       1.533  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         4.003 ±      33.494    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       404.212 ±    1420.864  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      8842.499 ±   31082.680    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5         4.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                           128  thrpt    5     84271.159 ±    1851.689   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       435.271 ±      43.490  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      8129.674 ±     850.911    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.566 ±       4.742  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5        10.569 ±      88.500    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       404.336 ±    1421.298  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      7561.047 ±   26578.527    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5     86976.909 ±     785.405   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5       201.622 ±      20.146  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5      3648.972 ±     391.452    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.002 ±       0.018  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         0.038 ±       0.325    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                       128  thrpt    5       102.297 ±     880.805  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5      1858.607 ±   16003.163    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5         1.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                          128  thrpt    5         3.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                  128  thrpt    5     10327.432 ±     301.547   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1698.367 ±      45.957  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5    258837.438 ±    1506.162    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.029 ±       0.122  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         4.462 ±      18.644    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1620.927 ±    1420.281  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5    247296.473 ±  222312.689    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        12.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                           128  thrpt    5      9135.964 ±     265.072   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1395.964 ±      25.086  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    240521.148 ±    5530.138    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.037 ±       0.119  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         6.436 ±      20.393    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1350.081 ±       5.772  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5    232618.818 ±    6405.331    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5        10.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                          128  thrpt    5    151835.620 ±     942.948   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       408.394 ±      45.729  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      4233.898 ±     495.792    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.606 ±       5.215  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         6.288 ±      54.142    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       403.891 ±    1419.736  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      4191.516 ±   14733.797    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         6.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                               128  thrpt    5      5501.539 ±      26.838   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      1438.015 ±      31.182  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    411413.799 ±   10805.946    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         3.573 ±      12.558    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1349.757 ±       5.931  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5    386161.668 ±    2926.619    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        11.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                 128  thrpt    5     19865.555 ±     508.684   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1098.157 ±      34.980  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5     87021.900 ±    4473.472    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.025 ±       0.088  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         1.983 ±       6.970    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1080.383 ±    1424.908  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     85670.042 ±  113659.578    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         8.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         8.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                          128  thrpt    5     22184.142 ±     354.679   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1206.306 ±      26.890  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     85583.640 ±    1779.747    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.025 ±       0.067  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1.772 ±       4.751    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1214.610 ±    1161.451  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     86189.440 ±   82618.880    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         9.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                         128  thrpt    5    131465.625 ±    3076.954   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       295.005 ±      17.759  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3532.260 ±     277.084    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       237.330 ±    1271.013  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      2857.915 ±   15317.141    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         2.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         6.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    136253.107 ±   10951.603   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5         1.760 ±      10.462  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        20.438 ±     120.398    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                              128  thrpt    5     22337.664 ±     702.769   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1255.759 ±      36.972  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     88498.012 ±    4809.259    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1.462 ±       7.956    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1214.063 ±    1159.596  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     85623.313 ±   82614.681    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5         9.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        10.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                      128  thrpt    5    130723.005 ±    3175.069   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1732.616 ±      83.908  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     20861.764 ±     632.148    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0.067 ±       0.183  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5         0.800 ±       2.190    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          128  thrpt    5      1622.008 ±    1425.227  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5     19518.144 ±   16870.184    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        12.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                             128  thrpt    5        11.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                128  thrpt    5    526132.346 ±    5845.735   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                 128  thrpt    5       561.627 ±      31.778  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            128  thrpt    5      1680.137 ±     103.431    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.814 ±       6.922  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         2.446 ±      20.797    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       535.834 ±    1153.424  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      1603.954 ±    3452.724    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                      128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                       128  thrpt    5         6.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                               128  thrpt    5    310410.414 ±     566.597   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5       445.833 ±      32.547  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5      2260.585 ±     164.358    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.198 ±       1.703  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1.003 ±       8.635    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       539.026 ±    1160.296  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      2732.931 ±    5882.849    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5         5.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                              128  thrpt    5    725379.830 ±   11094.718   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       485.071 ±      31.981  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      1052.589 ±      70.435    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.510 ±       4.391  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1.109 ±       9.546    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       540.024 ±    1162.444  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      1173.166 ±    2525.400    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5         7.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                   128  thrpt    5     75172.557 ±    1379.915   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      3100.500 ±      46.240  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     64924.808 ±    1307.256    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.100 ±       0.183  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         2.092 ±       3.833    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      2986.719 ±    1425.558  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     62554.681 ±   30369.211    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        22.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        20.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                     128  thrpt    5    183752.694 ±    3845.278   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5       941.454 ±      51.369  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5      8063.951 ±     389.072    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0.033 ±       0.209  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         0.285 ±       1.791    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5       944.409 ±    1422.318  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5      8085.669 ±   12130.148    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5         7.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5         7.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                               128  thrpt    5    616291.817 ±    7586.944   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       341.814 ±      34.067  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5       873.033 ±      93.319    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.762 ±       6.494  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1.952 ±      16.646    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       268.564 ±    1416.060  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5       687.198 ±    3623.404    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                     128  thrpt    5         2.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                      128  thrpt    5         6.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                              128  thrpt    5    627024.481 ±   16401.983   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       478.038 ±      38.617  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1200.142 ±     117.570    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.150 ±       1.246  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.376 ±       3.131    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       404.425 ±    1421.609  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      1018.537 ±    3580.457    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5         4.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                             128  thrpt    5    967233.874 ±   57377.357   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       539.177 ±      34.535  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       877.591 ±      84.668    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.543 ±       4.679  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.882 ±       7.590    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       404.331 ±    1421.282  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       661.552 ±    2326.146    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5         5.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5   1049884.792 ±   20138.426   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5         0.331 ±       2.558  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5         0.500 ±       3.870    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                  128  thrpt    5     33520.601 ±     430.360   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1745.840 ±      32.365  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     81967.428 ±    1173.888    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.025 ±       0.088  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         1.171 ±       4.106    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1758.470 ±    1425.736  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     82579.582 ±   67339.649    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        13.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        11.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                 128  thrpt    5    125232.882 ±     487.351   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1425.251 ±      24.203  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     17914.505 ±     256.015    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.050 ±       0.091  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.628 ±       1.147    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1487.127 ±    1161.032  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     18690.428 ±   14536.951    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        11.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        11.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                          128  thrpt    5    170999.721 ±    5296.887   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       923.025 ±      37.485  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      8496.682 ±     391.164    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.033 ±       0.209  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.306 ±       1.918    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       943.948 ±    1422.082  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      8681.066 ±   12975.053    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         7.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                         128  thrpt    5    209079.331 ±    3081.164   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       979.674 ±      35.766  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      7375.033 ±     240.257    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.050 ±       0.209  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.376 ±       1.571    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1076.654 ±    1419.850  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      8102.656 ±   10657.639    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         8.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         8.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                              128  thrpt    5     67306.425 ±     879.048   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2656.755 ±      69.829  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     62125.944 ±    1522.277    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.062 ±       0.080  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1.459 ±       1.861    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2574.983 ±    1158.280  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     60199.513 ±   26580.182    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        19.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        18.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                128  thrpt    5    176982.796 ±    1150.346   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       627.079 ±      32.659  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      5577.365 ±     318.650    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.111 ±       0.639    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       539.509 ±    1161.334  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      4800.666 ±   10333.864    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         3.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                         128  thrpt    5    684499.238 ±    3623.744   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       711.143 ±      19.051  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1635.241 ±      43.543    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.046 ±       0.132  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.105 ±       0.302    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       674.340 ±       1.010  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      1550.615 ±      10.292    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         5.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                        128  thrpt    5    643081.538 ±    9848.220   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       510.475 ±      24.908  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      1249.477 ±      72.362    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.566 ±       4.875  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         1.394 ±      12.005    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       538.971 ±    1160.178  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      1320.309 ±    2842.160    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         7.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    699071.882 ±    3276.109   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         0.191 ±       1.545  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.430 ±       3.486    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                             128  thrpt    5    294123.805 ±   16092.890   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       831.139 ±      63.561  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      4448.086 ±     257.028    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.090 ±       0.361    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       809.683 ±    1162.125  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      4336.972 ±    6282.604    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         5.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                            128  thrpt    5     10201.174 ±     171.266   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1246.154 ±      30.403  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5    192281.387 ±    4149.927    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.021 ±       0.001  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         3.211 ±       0.054    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1213.537 ±    1163.485  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5    187325.294 ±  180508.476    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                     128  thrpt    5     10079.970 ±     119.810   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1160.961 ±      46.552  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5    181296.193 ±    9354.654    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.017 ±       0.104  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         2.607 ±      16.391    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1079.749 ±    1423.857  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5    168699.314 ±  223449.699    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5         9.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                    128  thrpt    5    258585.146 ±    8047.055   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1738.943 ±      79.925  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     10585.423 ±     393.274    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.037 ±       0.067  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.228 ±       0.409    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5      1753.181 ±    1422.241  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5     10684.752 ±    8916.468    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5        13.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        12.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                         128  thrpt    5      7805.099 ±     108.534   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1399.686 ±      18.092  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    282281.974 ±    5457.937    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         2.523 ±       8.870    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1349.800 ±       5.986  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5    272220.958 ±    3910.221    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        10.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                           128  thrpt    5     24441.480 ±     637.025   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1005.843 ±      57.860  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5     64777.221 ±    2833.079    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.021 ±       0.139  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         1.335 ±       8.906    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5       944.999 ±    1423.592  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     60800.153 ±   90819.003    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                  128  thrpt    5         8.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                    128  thrpt    5     31112.898 ±     231.161   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1168.402 ±      40.392  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     59109.010 ±    2315.346    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.033 ±       0.166  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         1.684 ±       8.405    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5      1079.195 ±    1421.764  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5     54615.202 ±   72168.041    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5         8.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                   128  thrpt    5    471692.264 ±    4818.693   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       877.174 ±      26.947  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      2926.805 ±     100.821    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.025 ±       0.215  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         0.083 ±       0.719    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5       808.325 ±    1159.841  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5      2697.716 ±    3882.540    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5         6.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    530575.419 ±    1809.926   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         0.429 ±       3.693  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         1.275 ±      10.973    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                        128  thrpt    5     27732.564 ±     203.878   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1145.515 ±      47.064  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     65013.166 ±    2963.626    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         1.183 ±       4.554    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1079.230 ±    1423.509  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     61275.731 ±   81098.342    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                               128  thrpt    5         9.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                128  thrpt    5     30722.632 ±     793.660   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1576.510 ±      46.884  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     80766.514 ±    2380.299    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.042 ±       0.160  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         2.128 ±       8.198    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1620.236 ±    1420.272  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     82987.146 ±   72306.684    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                      128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                       128  thrpt    5        11.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                         128  thrpt    5     29874.414 ±     302.578   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1301.224 ±      23.222  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     68553.851 ±    1446.462    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.037 ±       0.105  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         1.975 ±       5.507    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1349.945 ±       5.485  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     71120.706 ±     907.103    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        10.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                        128  thrpt    5    462392.556 ±    5113.330   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1237.086 ±      47.444  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4211.285 ±     192.548    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.033 ±       0.166  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.113 ±       0.565    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1211.941 ±    1160.049  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      4127.384 ±    3971.772    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5         8.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                             128  thrpt    5     17143.198 ±     401.313   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1666.701 ±      55.498  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    153036.508 ±    4686.766    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         1.528 ±       6.131    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1620.853 ±    1430.309  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5    148856.519 ±  131999.476    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                               128  thrpt    5     54429.049 ±     685.277   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1246.950 ±      24.908  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     36060.711 ±     675.705    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.042 ±       0.150  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1.204 ±       4.331    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1215.294 ±    1160.971  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     35157.522 ±   33733.978    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                     128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        10.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                        128  thrpt    5    124440.588 ±    5956.593   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1080.729 ±      75.786  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     13668.450 ±     554.189    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.046 ±       0.174  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.576 ±       2.183    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1079.280 ±    1423.342  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     13626.411 ±   17692.005    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5         8.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         7.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                       128  thrpt    5    851057.503 ±   12483.151   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       940.189 ±      34.463  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1738.922 ±      84.915    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.029 ±       0.091  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.054 ±       0.170    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       941.933 ±    1418.110  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      1743.324 ±    2639.956    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         7.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5         8.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5    952015.045 ±   36077.967   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                            128  thrpt    5     61280.125 ±    1768.041   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1348.813 ±      54.701  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     34644.250 ±     974.318    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.025 ±       0.105  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.643 ±       2.686    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1350.584 ±       6.993  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     34691.069 ±     862.328    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                128  thrpt    5     16582.429 ±     536.922   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1461.847 ±      67.108  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5    138759.481 ±    5195.437    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.037 ±       0.143  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         3.536 ±      13.527    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1486.348 ±    1171.651  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5    141011.223 ±  108871.752    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                      128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                       128  thrpt    5        10.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                         128  thrpt    5     15268.358 ±     150.832   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1218.679 ±      31.239  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5    125628.902 ±    2765.456    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.025 ±       0.143  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         2.568 ±      14.744    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1213.970 ±    1162.294  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5    125127.621 ±  119606.824    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        12.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                        128  thrpt    5    684948.261 ±   26964.444   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1843.779 ±      66.164  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4236.700 ±     136.266    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.021 ±       0.139  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.048 ±       0.318    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1754.109 ±    1420.079  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      4036.068 ±    3375.699    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        11.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                             128  thrpt    5     11148.253 ±     179.278   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1484.377 ±      56.745  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    209563.405 ±    6809.454    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         2.947 ±      11.354    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1350.927 ±       7.150  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5    190726.541 ±    3395.077    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5         9.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                               128  thrpt    5     43700.321 ±     695.641   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1398.055 ±      16.535  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     50349.858 ±     524.847    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.037 ±       0.119  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1.347 ±       4.259    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1351.459 ±       6.036  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     48672.065 ±     745.107    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        11.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                        128  thrpt    5     54577.874 ±     619.576   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1489.526 ±      59.051  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     42954.857 ±    1587.017    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.050 ±       0.185  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         1.444 ±       5.348    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1485.788 ±    1170.302  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     42843.141 ±   33623.829    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        10.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                       128  thrpt    5   1012643.615 ±    6857.075   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       948.180 ±      26.832  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1473.832 ±      45.775    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.029 ±       0.156  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.045 ±       0.243    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       941.980 ±    1419.486  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      1464.296 ±    2207.921    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         7.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5         6.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1125537.174 ±   10256.305   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5         0.027 ±       0.144  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         0.038 ±       0.201    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                            128  thrpt    5     39452.395 ±     613.775   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1227.225 ±      39.426  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     48964.858 ±    2125.868    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.033 ±       0.134  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.330 ±       5.345    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1214.994 ±    1160.301  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     48491.166 ±   46497.292    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                     128  thrpt    5    124140.742 ±   14144.273   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      1786.706 ±     251.647  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     22649.863 ±    1071.722    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.126 ±       1.088  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         1.689 ±      14.543    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.Compressed_Class_Space                                    128  thrpt    5         0.003 ±       0.028  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.Compressed_Class_Space.norm                               128  thrpt    5         0.043 ±       0.371    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0.075 ±       0.257  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         0.964 ±       3.407    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Old_Gen                                                128  thrpt    5         0.010 ±       0.084  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Old_Gen.norm                                           128  thrpt    5         0.131 ±       1.126    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5      1755.460 ±    1411.967  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5     22192.008 ±   16250.215    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        15.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        80.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                               128  thrpt    5    355817.365 ±    2780.528   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       729.001 ±      13.295  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5      3224.570 ±      65.961    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.025 ±       0.105  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.111 ±       0.463    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       669.073 ±       1.750  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      2959.488 ±      18.411    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                     128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                      128  thrpt    5         6.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                              128  thrpt    5    246765.152 ±    5220.341   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       547.243 ±      25.142  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      3490.859 ±     166.326    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.158 ±       1.318  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1.004 ±       8.366    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       538.828 ±    1159.869  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      3439.308 ±    7403.878    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5         4.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                             128  thrpt    5    479641.573 ±   12264.682   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       624.931 ±      13.018  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      2050.692 ±      48.429    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.593 ±       4.929  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         1.951 ±      16.209    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       673.313 ±       1.853  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      2209.485 ±      56.441    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5         6.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                  128  thrpt    5     68954.097 ±    1944.956   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2910.677 ±     111.358  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     66436.970 ±    1801.154    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.050 ±       0.108  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         1.140 ±       2.451    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      2850.107 ±    1168.959  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     65048.661 ±   26301.778    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        21.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        21.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                    128  thrpt    5    124666.888 ±     479.678   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5       699.353 ±      17.496  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5      8829.972 ±     220.203    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5         0.158 ±       0.906    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5       674.720 ±       0.240  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5      8518.971 ±      32.757    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5         5.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                              128  thrpt    5    206671.799 ±    2829.888   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       164.400 ±      12.218  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1252.113 ±     107.349    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.007 ±       0.058  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.051 ±       0.442    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       204.635 ±    1078.979  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      1563.801 ±    8245.470    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                    128  thrpt    5         2.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                     128  thrpt    5         6.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                             128  thrpt    5    405976.008 ±    3881.488   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       407.138 ±      28.636  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1578.529 ±     122.043    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.137 ±       1.183  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.533 ±       4.589    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       404.262 ±    1421.037  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      1569.803 ±    5518.087    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5         4.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                            128  thrpt    5    442343.089 ±   18506.091   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       356.194 ±      35.026  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1267.611 ±     131.426    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.558 ±       4.713  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.980 ±      16.730    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       371.909 ±    1332.010  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1327.489 ±    4741.455    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    468918.119 ±   17492.448   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         1.404 ±      12.085  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         4.796 ±      41.284    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                 128  thrpt    5     26787.640 ±    1094.403   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1360.489 ±      53.443  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     79941.660 ±    1443.240    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.046 ±       0.191  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         2.679 ±      11.127    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1350.090 ±       8.435  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     79335.922 ±    2862.094    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        10.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        11.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                           128  thrpt    5      7870.033 ±     107.610   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1103.747 ±      56.536  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5    220735.390 ±   10082.028    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         3.325 ±      13.374    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1079.565 ±    1421.614  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5    215829.379 ±  283408.812    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                  128  thrpt    5         8.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                    128  thrpt    5      7480.331 ±      82.197   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5       998.646 ±      37.033  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5    210134.454 ±    8063.690    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         3.503 ±      14.100    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5       944.105 ±    1422.018  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5    198729.854 ±  300233.466    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5         8.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                   128  thrpt    5    178279.382 ±    7378.858   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1780.264 ±      71.968  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     15717.562 ±     584.615    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.037 ±       0.143  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         0.330 ±       1.255    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5      1618.729 ±    1422.598  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5     14290.358 ±   12530.355    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5        12.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        12.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                        128  thrpt    5      7138.050 ±      43.527   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      1198.841 ±      41.855  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    264330.282 ±   10309.351    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         3.668 ±      23.013    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1213.906 ±    1160.443  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5    267691.401 ±  256403.867    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                               128  thrpt    5         9.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                          128  thrpt    5     19454.282 ±     616.040   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5       834.373 ±      52.543  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     67502.862 ±    3455.908    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.029 ±       0.209  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         2.354 ±      16.831    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5       809.371 ±    1162.531  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     65436.192 ±   93141.060    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                 128  thrpt    5         6.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                   128  thrpt    5     22186.658 ±     610.771   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5       885.791 ±      45.736  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     62840.915 ±    3017.306    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         1.486 ±       7.034    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5       944.119 ±    1422.815  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5     66990.203 ±  101084.776    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5         6.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                  128  thrpt    5    368664.818 ±    6478.543   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       857.127 ±      37.533  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      3658.993 ±     154.484    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.037 ±       0.164  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         0.160 ±       0.702    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       806.761 ±    1156.572  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5      3444.789 ±    4952.408    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5         5.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    347372.665 ±    3712.770   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5         0.246 ±       1.765  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         1.118 ±       8.038    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                       128  thrpt    5     21474.837 ±     347.152   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5       930.248 ±      52.863  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     68187.158 ±    3699.523    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.017 ±       0.104  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         1.220 ±       7.657    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5       809.228 ±    1161.182  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     59314.876 ±   85072.969    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                              128  thrpt    5         5.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                               128  thrpt    5     13394.092 ±     143.271   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1315.694 ±      37.033  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    154607.828 ±    5148.445    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1.957 ±      12.269    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1213.652 ±    1160.844  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5    142628.591 ±  136580.940    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                     128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                      128  thrpt    5         9.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                        128  thrpt    5     12835.220 ±     384.825   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1139.380 ±      40.829  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5    139722.353 ±    6745.316    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.025 ±       0.104  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         3.056 ±      12.740    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1214.360 ±    1161.607  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5    149043.684 ±  144152.420    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                       128  thrpt    5    271665.318 ±     897.441   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1612.938 ±      49.149  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      9344.342 ±     288.482    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.046 ±       0.105  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.265 ±       0.606    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1482.374 ±    1160.248  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      8588.541 ±    6740.085    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        10.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                            128  thrpt    5     11613.234 ±      96.490   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1415.467 ±      28.675  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    191852.922 ±    3470.678    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.021 ±       0.139  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         2.819 ±      18.780    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1349.716 ±       6.287  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5    182941.586 ±    1250.835    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                              128  thrpt    5     30732.708 ±     821.553   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1033.500 ±      50.763  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     52925.190 ±    2141.255    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.046 ±       0.174  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2.348 ±       8.888    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1080.368 ±    1424.866  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     55369.743 ±   73507.824    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         8.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         8.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                       128  thrpt    5     71299.535 ±    3961.235   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1601.501 ±     107.974  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     35352.968 ±    1502.362    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.025 ±       0.067  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.547 ±       1.465    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1487.420 ±    1167.399  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     32837.041 ±   25746.264    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        10.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                      128  thrpt    5    589340.653 ±   14801.179   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       835.554 ±      47.148  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      2231.404 ±     120.374    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.055 ±       0.213    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       807.607 ±    1160.541  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      2156.085 ±    3085.451    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         6.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    538886.004 ±   16441.933   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5         0.007 ±       0.054  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.019 ±       0.156    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                           128  thrpt    5     66207.805 ±    3309.795   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1597.460 ±      68.565  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     37978.743 ±     752.463    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.046 ±       0.215  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         1.100 ±       5.180    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1486.933 ±    1163.563  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     35405.140 ±   29207.321    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        11.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                   128  thrpt    5     19943.172 ±     692.981   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       717.129 ±      32.383  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     56586.115 ±    1875.825    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.050 ±       0.269  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         3.931 ±      21.245    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5       672.668 ±       1.722  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     53080.912 ±    1836.081    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         6.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                            128  thrpt    5     18929.853 ±     993.080   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       547.036 ±      35.385  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     45492.456 ±    3712.421    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.212 ±       1.783  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5        17.568 ±     147.588    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       538.774 ±    1159.751  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     44879.248 ±   96648.535    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         5.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                           128  thrpt    5    116433.928 ±    1055.787   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       299.867 ±      24.960  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      4053.762 ±     366.317    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       237.151 ±    1269.870  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      3213.004 ±   17202.021    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         2.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         5.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                128  thrpt    5     16639.081 ±     411.048   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1035.406 ±      32.956  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     97934.444 ±    3492.704    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1.179 ±       4.144    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       944.240 ±    1422.213  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     89320.097 ±  134652.149    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5         8.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                  128  thrpt    5     48727.439 ±    2164.504   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       899.045 ±      72.134  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     29034.797 ±    1671.467    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.025 ±       0.105  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.803 ±       3.354    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5       944.257 ±    1422.910  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     30467.759 ±   45528.335    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         7.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                           128  thrpt    5     63428.095 ±    1608.722   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1061.587 ±      49.885  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     26344.056 ±    1155.009    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.025 ±       0.105  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.618 ±       2.579    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1079.439 ±    1423.304  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     26770.194 ±   35111.687    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         7.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                          128  thrpt    5    300096.423 ±    3105.714   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       592.859 ±      37.178  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      3109.235 ±     211.463    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.564 ±       4.769  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         2.959 ±      25.007    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       538.784 ±    1159.774  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      2827.366 ±    6086.226    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         6.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    324858.357 ±    8023.357   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.223 ±       1.576  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         1.078 ±       7.622    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                               128  thrpt    5     60592.431 ±     558.668   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1116.400 ±      50.065  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     29001.043 ±    1434.096    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.017 ±       0.143  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.434 ±       3.737    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1079.266 ±    1425.163  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     28050.126 ±   37193.637    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         8.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                    128  thrpt    5    152903.938 ±    5867.121   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1935.261 ±      70.278  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     19923.128 ±     641.466    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5         0.025 ±       0.067  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5         0.257 ±       0.691    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5      1891.988 ±    1167.958  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5     19488.246 ±   12273.738    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        14.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        13.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                              128  thrpt    5    770611.325 ±   14685.106   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       437.059 ±      33.052  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5       892.744 ±      76.068    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.829 ±       7.070  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1.698 ±      14.488    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       401.922 ±    1412.812  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5       822.638 ±    2891.772    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5         7.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                             128  thrpt    5    379500.698 ±   23145.320   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       399.626 ±      54.418  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1657.345 ±     167.952    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.183 ±       1.533  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.757 ±       6.339    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       404.022 ±    1420.194  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      1664.885 ±    5852.366    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5         4.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                            128  thrpt    5   1086819.489 ±   38310.250   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       388.325 ±      39.470  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       562.540 ±      76.720    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.500 ±       4.302  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.734 ±       6.321    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       372.469 ±    1334.412  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       542.501 ±    1946.487    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                 128  thrpt    5     80784.847 ±     619.486   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3257.052 ±      63.724  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     63455.824 ±    1197.228    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.062 ±       0.188  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         1.215 ±       3.646    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      3123.216 ±    1425.268  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     60842.980 ±   27556.247    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        23.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        23.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                   128  thrpt    5    249920.835 ±    3322.822   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      1170.346 ±      69.601  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5      7370.367 ±     411.606    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.033 ±       0.201  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.209 ±       1.263    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      1080.064 ±    1424.684  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5      6799.499 ±    8942.820    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5         8.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5         8.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                             128  thrpt    5   1126826.781 ±  167238.758   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       393.697 ±      75.409  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       549.836 ±      49.544    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.786 ±       6.651  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         1.132 ±       9.582    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       402.576 ±    1415.114  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       559.651 ±    1969.114    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5         6.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                            128  thrpt    5    917823.958 ±    9579.070   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       555.604 ±      22.755  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5       952.782 ±      32.745    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.183 ±       1.532  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.313 ±       2.623    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       538.770 ±    1159.744  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       923.368 ±    1987.644    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5         5.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1748126.578 ±   75963.480   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       612.998 ±      29.248  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       552.038 ±      37.105    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.574 ±       4.812  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.515 ±       4.315    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       538.688 ±    1159.568  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       486.602 ±    1047.660    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1962907.490 ±  101810.230   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5         0.267 ±       2.159  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5         0.213 ±       1.723    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                128  thrpt    5     40790.221 ±     236.312   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      1886.688 ±      52.607  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     72796.454 ±    1791.921    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.071 ±       0.122  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         2.731 ±       4.688    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1894.864 ±    1161.502  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     73101.973 ±   44569.949    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        14.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        13.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                     128  thrpt    5     38589.772 ±     589.708   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5       741.861 ±      44.839  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     30259.362 ±    1760.156    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0.056 ±       0.418  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         2.291 ±      17.018    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5       807.584 ±    1160.038  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5     32930.135 ±   47117.820    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                           128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                            128  thrpt    5         5.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                              128  thrpt    5     62823.847 ±     417.467   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       677.417 ±      10.855  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     16971.972 ±     285.604    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.313 ±       1.794    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       674.401 ±       1.139  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     16896.411 ±     128.432    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         5.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5         5.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                             128  thrpt    5    203622.945 ±   15752.487   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       680.532 ±      61.789  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      5260.150 ±     141.142    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.558 ±       4.714  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         4.451 ±      37.648    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       673.425 ±       3.124  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      5207.231 ±     430.793    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5         7.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                  128  thrpt    5     24349.858 ±     254.790   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      1240.704 ±      46.497  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     80199.392 ±    3084.504    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.806 ±       2.833    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1215.103 ±    1161.136  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     78541.749 ±   75023.878    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5         9.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        11.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                    128  thrpt    5     45685.757 ±    1902.912   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5       699.068 ±      42.346  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     24084.727 ±     611.950    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5         0.025 ±       0.088  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5         0.863 ±       3.033    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5       674.306 ±       1.157  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5     23234.588 ±     957.186    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5         5.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5         5.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                             128  thrpt    5    100055.536 ±    4260.860   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1412.236 ±      71.275  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     22216.933 ±     886.750    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.037 ±       0.088  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.586 ±       1.373    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1486.066 ±    1163.869  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     23377.446 ±   18253.686    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        11.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                            128  thrpt    5    178875.748 ±    3552.240   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       585.874 ±      23.161  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      5155.558 ±     181.863    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.568 ±       4.804  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         5.045 ±      42.652    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       538.710 ±    1159.616  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      4745.146 ±   10215.011    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5         6.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    191536.857 ±    1212.418   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.019 ±       0.120  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.156 ±       0.989    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                 128  thrpt    5     69093.244 ±     582.451   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1056.146 ±      54.481  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     24059.804 ±    1311.000    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.025 ±       0.174  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.569 ±       3.963    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1078.928 ±    1422.048  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     24584.728 ±   32470.818    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5         8.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5         8.000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                                128  thrpt    5     24744.533 ±     614.788   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1292.667 ±      26.536  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     82227.075 ±    2197.093    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.021 ±       0.057  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1.327 ±       3.644    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1213.678 ±    1160.926  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     77191.884 ±   73727.220    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                      128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                       128  thrpt    5         9.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                         128  thrpt    5     19346.135 ±     980.928   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5       784.317 ±      45.925  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     63815.473 ±    4187.581    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.054 ±       0.201  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         4.378 ±      16.277    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       809.365 ±    1162.809  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     65800.556 ±   93573.334    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5         6.000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5         6.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                        128  thrpt    5    537193.873 ±   16526.474   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1438.278 ±      52.132  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4214.317 ±     143.760    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.058 ±       0.119  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.171 ±       0.351    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1349.650 ±       6.766  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      3954.740 ±     119.987    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                             128  thrpt    5     23356.980 ±     466.034   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1730.787 ±      28.009  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    116634.381 ±    3505.592    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.025 ±       0.132  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         1.679 ±       8.860    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1755.960 ±    1420.814  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5    118377.055 ±   96768.313    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        13.000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        14.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                               128  thrpt    5     70227.393 ±    3199.339   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1390.270 ±      61.686  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     31160.119 ±     190.818    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.071 ±       0.156  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1.581 ±       3.444    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1351.808 ±       5.308  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     30301.347 ±    1391.045    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5         9.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                        128  thrpt    5    153414.295 ±    1762.620   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1508.026 ±      26.897  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     15471.082 ±     396.755    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.042 ±       0.139  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.427 ±       1.429    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1486.554 ±    1159.804  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     15254.254 ±   12006.280    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        11.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        11.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                       128  thrpt    5   1076248.148 ±   59934.939   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       916.805 ±      64.813  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1340.854 ±      55.089    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.050 ±       0.201  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.073 ±       0.292    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       943.402 ±    1421.266  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      1377.900 ±    2050.150    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         7.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5         6.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1193137.203 ±    3502.958   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5         0.016 ±       0.139  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         0.022 ±       0.184    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                            128  thrpt    5    118927.330 ±     632.904   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1373.100 ±      28.113  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     18171.033 ±     294.645    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.033 ±       0.072  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.441 ±       0.949    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1350.290 ±       5.126  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     17869.278 ±     155.172    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                              128  thrpt    5     40191.892 ±     200.198   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1476.780 ±      28.056  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     57836.676 ±     886.376    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.037 ±       0.132  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1.468 ±       5.156    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1350.775 ±       5.642  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     52902.058 ±     387.233    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5         9.000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                             128  thrpt    5    726339.248 ±   35382.849   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1462.173 ±      78.439  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      3168.616 ±      72.133    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.037 ±       0.154  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.081 ±       0.331    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1347.725 ±       6.607  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      2920.966 ±     140.588    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        10.000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5         8.000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                  128  thrpt    5     30611.002 ±     323.486   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2177.763 ±      40.635  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    111973.562 ±    1286.907    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.071 ±       0.044  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         3.638 ±       2.242    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      2030.141 ±      15.848  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5    104383.826 ±     521.712    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        15.000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        15.000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                             128  thrpt    5    343528.518 ±    4719.426   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       983.871 ±      61.315  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      4508.106 ±     253.297    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.025 ±       0.174  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.114 ±       0.796    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       944.164 ±    1422.501  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      4325.629 ±    6509.094    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         7.000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5         6.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                            128  thrpt    5   1410417.260 ±   15523.373   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       848.918 ±      29.990  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       947.442 ±      31.548    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.019 ±       0.075    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       807.388 ±    1158.307  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       901.031 ±    1291.458    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5         5.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   1606869.091 ±    2073.657   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         1.368 ±      11.777  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         1.339 ±      11.530    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                                 128  thrpt    5    224841.084 ±    2109.650   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1495.947 ±      42.561  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     10471.126 ±     365.779    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.029 ±       0.156  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.204 ±       1.093    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1486.724 ±    1162.482  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     10408.967 ±    8211.957    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        11.000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        11.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                   128  thrpt    5     54966.748 ±     268.823   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1002.392 ±      31.856  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     28705.574 ±     954.078    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.021 ±       0.057  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.596 ±       1.622    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5       944.850 ±    1423.368  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     27061.415 ±   40813.899    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         6.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                            128  thrpt    5     58728.592 ±    2462.022   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       697.529 ±      20.854  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     18693.863 ±     468.799    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.555 ±       2.618    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       673.461 ±       0.287  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     18049.852 ±     767.392    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         5.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         5.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                           128  thrpt    5     68581.281 ±     721.401   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       768.524 ±      36.469  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     17639.114 ±     782.733    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.286 ±       1.645    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       805.079 ±    1154.067  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     18480.097 ±   26522.954    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                128  thrpt    5     37419.296 ±    1757.589   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1699.627 ±     103.141  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     71490.734 ±    1640.715    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.881 ±       4.170    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1620.942 ±    1424.392  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     68169.612 ±   59536.854    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        12.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        12.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                  128  thrpt    5    115590.926 ±    1083.239   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       523.957 ±      30.572  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      7135.044 ±     462.612    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.154 ±       1.194  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         2.103 ±      16.308    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5       538.574 ±    1159.321  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5      7337.729 ±   15795.152    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         3.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                           128  thrpt    5    233351.094 ±   16936.866   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       352.127 ±      17.306  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      2375.906 ±     209.567    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.192 ±       1.649  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         1.298 ±      11.175    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       269.368 ±    1420.302  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      1847.180 ±    9740.763    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         2.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         3.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                          128  thrpt    5    739527.292 ±   19664.674   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       943.419 ±      43.585  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      2007.898 ±      82.811    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.033 ±       0.122  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.071 ±       0.261    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       940.162 ±    1417.063  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      2002.580 ±    3038.062    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         6.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    781411.916 ±    8499.324   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                               128  thrpt    5    189420.531 ±    1493.732   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       624.312 ±       9.663  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      5187.639 ±      90.951    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.173 ±       0.818    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       538.723 ±    1159.642  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      4480.215 ±    9644.022    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         4.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                               128  thrpt    5    117821.376 ±    1276.461   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1336.865 ±      39.162  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     17858.621 ±     527.248    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.033 ±       0.122  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.444 ±       1.618    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1351.381 ±       6.631  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     18052.607 ±     232.249    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        10.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                        128  thrpt    5    172098.517 ±    3377.788   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       926.137 ±      41.460  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      8470.591 ±     334.656    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.025 ±       0.143  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.228 ±       1.310    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       943.543 ±    1421.153  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      8625.474 ±   12935.439    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         7.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         7.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                       128  thrpt    5    430224.427 ±   32238.169   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       858.480 ±      65.206  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      3140.778 ±     122.458    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.021 ±       0.179  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.076 ±       0.655    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       808.369 ±    1158.821  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      2957.791 ±    4236.104    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         6.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                            128  thrpt    5     61948.373 ±     393.072   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2451.807 ±      69.330  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     62295.817 ±    2058.592    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.050 ±       0.044  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.269 ±       1.113    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      2439.208 ±    1427.472  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     61977.376 ±   36334.210    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        18.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        17.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                              128  thrpt    5    181418.467 ±     906.544   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       637.116 ±      14.170  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      5527.571 ±     104.784    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.100 ±       0.772  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.869 ±       6.710    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       674.151 ±       0.747  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      5848.905 ±      26.924    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         5.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         5.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                       128  thrpt    5    400462.908 ±    4552.832   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       405.816 ±      33.503  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1595.185 ±     144.838    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.169 ±       1.298  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.665 ±       5.120    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       404.006 ±    1420.137  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      1590.040 ±    5589.267    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         3.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         4.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                      128  thrpt    5   1060333.293 ±   15269.917   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       810.605 ±      34.993  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1203.274 ±      57.728    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.031 ±       0.169    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       807.562 ±    1159.125  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      1199.127 ±    1728.003    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         7.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   1160559.262 ±    7761.082   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5         0.207 ±       1.627  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.281 ±       2.209    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                           128  thrpt    5    294386.245 ±   14104.154   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       823.936 ±      60.875  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      4404.956 ±     254.068    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.088 ±       0.556    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5       809.018 ±    1160.477  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      4321.874 ±    6132.816    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                            128  thrpt    5      4702.840 ±      34.586   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5       865.961 ±      32.892  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5    289830.114 ±    9254.620    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         4.174 ±      14.672    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5       806.086 ±    1156.717  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5    269723.861 ±  385792.166    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                  128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                   128  thrpt    5         6.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                     128  thrpt    5      4438.453 ±     103.124   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       784.595 ±      22.683  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5    278203.490 ±    5324.144    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         1.479 ±      12.732    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5       671.799 ±       1.159  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5    238214.581 ±    5622.028    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5         6.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                    128  thrpt    5     31849.609 ±     370.897   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       538.172 ±      33.565  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     26593.491 ±    1825.740    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.960 ±       8.218  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5        47.554 ±     407.255    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5       533.754 ±    1148.946  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5     26388.767 ±   56805.099    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         4.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5         9.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                         128  thrpt    5      4253.260 ±      72.842   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1020.663 ±      34.321  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    377702.648 ±   13624.897    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.029 ±       0.072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5        10.783 ±      26.521    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5       940.693 ±    1416.989  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5    348349.059 ±  527759.173    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                               128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                128  thrpt    5         8.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                           128  thrpt    5     14184.420 ±     111.207   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5       763.137 ±      51.854  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5     84680.117 ±    5502.864    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.042 ±       0.316  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         4.621 ±      35.030    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5       806.628 ±    1156.743  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     89514.924 ±  128511.388    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                    128  thrpt    5     17211.725 ±     380.138   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       854.531 ±      25.261  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     78152.276 ±    3647.568    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         1.516 ±       7.995    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5       806.112 ±    1155.061  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5     73836.041 ±  107839.388    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5         7.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                   128  thrpt    5    228754.072 ±    8245.051   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       855.105 ±      22.472  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      5884.374 ±     225.474    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.025 ±       0.132  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         0.173 ±       0.918    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5       799.382 ±    1147.438  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5      5512.900 ±    8127.385    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5         6.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    264573.547 ±    2842.608   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         0.177 ±       1.096  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         1.056 ±       6.523    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                        128  thrpt    5     15167.895 ±     283.709   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5       871.318 ±      33.026  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     90418.164 ±    4448.924    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.025 ±       0.174  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         2.590 ±      18.038    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5       806.111 ±    1155.886  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     83651.392 ±  119979.695    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                               128  thrpt    5         6.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                   128  thrpt    5   1284839.636 ±  220886.291   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5        57.548 ±      27.885  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5        70.611 ±      36.625    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                       128  thrpt    5       102.358 ±     881.333  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5       124.303 ±    1070.284    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5         1.000                counts
[info] BitSetBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5         4.000                    ms
[info] BitSetBenchmark.readPlayJson                                                                        128  thrpt    5     82375.746 ±    1583.268   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      3513.395 ±      80.210  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     67137.201 ±    1812.513    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                128  thrpt    5         0.083 ±       0.127  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5         1.590 ±       2.425    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                            128  thrpt    5      3395.479 ±      25.446  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5     64884.585 ±    1622.564    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        25.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        24.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                   128  thrpt    5   1706499.910 ±   32532.222   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       922.111 ±      36.612  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5       850.422 ±      31.624    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.042 ±       0.188  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.038 ±       0.173    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                       128  thrpt    5       943.941 ±    1421.850  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5       869.897 ±    1301.932    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5         7.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5         7.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                  128  thrpt    5    954975.021 ±   50422.269   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       275.615 ±      28.941  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5       454.326 ±      52.213    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                      128  thrpt    5       339.446 ±    1220.246  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       562.317 ±    2016.284    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         3.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5         8.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5   2162075.418 ±   10557.034   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                       128  thrpt    5     49248.953 ±     169.449   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5      2051.923 ±      48.981  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     65574.888 ±    1380.969    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.046 ±       0.067  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         1.464 ±       2.146    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                           128  thrpt    5      2029.918 ±      14.329  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5     64871.842 ±     388.286    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5        15.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5        16.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                    N/A  thrpt    5    881544.439 ±   23556.440   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                     N/A  thrpt    5      2763.032 ±     106.572  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5      4933.344 ±     126.027    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0.058 ±       0.105  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5         0.104 ±       0.185    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5      2576.701 ±    1156.752  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5      4597.968 ±    1965.584    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                          N/A  thrpt    5        19.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                           N/A  thrpt    5        18.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                              N/A  thrpt    5   4825232.940 ±   49084.075   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                               N/A  thrpt    5       303.035 ±      33.265  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          N/A  thrpt    5        98.856 ±      11.668    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5         0.798 ±       6.874  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5         0.261 ±       2.245    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5       370.603 ±    1326.572  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5       121.122 ±     433.570    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                    N/A  thrpt    5         3.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                     N/A  thrpt    5         9.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                             N/A  thrpt    5   1002656.078 ±    5000.325   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5      1169.841 ±      39.713  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5      1836.599 ±      67.313    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0.029 ±       0.108  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5         0.046 ±       0.169    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5      1213.880 ±    1161.315  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5      1906.182 ±    1829.065    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                   N/A  thrpt    5         9.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                    N/A  thrpt    5         9.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                            N/A  thrpt    5   8871183.402 ±   96240.405   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       416.636 ±      38.042  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5        73.915 ±       7.403    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5         0.527 ±       4.490  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5         0.094 ±       0.798    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5       372.244 ±    1333.429  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5        66.171 ±     237.078    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                   N/A  thrpt    5         8.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                 N/A  thrpt    5    503458.250 ±   12884.209   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2441.769 ±     111.621  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5      7632.804 ±     268.248    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0.067 ±       0.105  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5         0.208 ±       0.323    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5      2302.690 ±    1429.031  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5      7195.529 ±    4380.843    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                       N/A  thrpt    5        17.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                        N/A  thrpt    5        17.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                          N/A  thrpt    5      4569.136 ±     122.928   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                           N/A  thrpt    5      2155.738 ±      15.468  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5    742674.393 ±   20865.761    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5         0.129 ±       0.262  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5        44.461 ±      90.197    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5      2031.590 ±      12.494  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5    699908.697 ±   22350.955    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                                N/A  thrpt    5        15.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                                 N/A  thrpt    5        15.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                   N/A  thrpt    5      6148.825 ±      53.421   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5      2338.163 ±      88.148  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5    598540.250 ±   23777.279    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5         0.046 ±       0.088  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        11.729 ±      22.572    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5      2300.006 ±    1421.076  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5    588891.797 ±  367624.315    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                         N/A  thrpt    5        17.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                          N/A  thrpt    5        16.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                  N/A  thrpt    5     47458.422 ±     705.178   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5       789.490 ±      37.338  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5     26181.908 ±    1146.827    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0.025 ±       0.067  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5         0.828 ±       2.222    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5       806.797 ±    1158.375  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5     26757.179 ±   38435.726    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                        N/A  thrpt    5         6.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                         N/A  thrpt    5         5.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                         N/A  thrpt    5      4631.957 ±     306.620   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                          N/A  thrpt    5       879.323 ±      46.071  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5    298806.261 ±   11007.199    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5         0.017 ±       0.088  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5         5.607 ±      29.566    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5       943.277 ±    1421.915  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5    321693.467 ±  499336.915    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                               N/A  thrpt    5         7.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                                N/A  thrpt    5         7.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                  N/A  thrpt    5      4920.421 ±      37.394   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5       593.808 ±      11.350  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5    189939.679 ±    4364.552    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0.419 ±       3.380  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       133.815 ±    1080.597    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5       673.873 ±       2.130  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5    215549.232 ±    1478.626    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                        N/A  thrpt    5         5.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                         N/A  thrpt    5         7.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                                 N/A  thrpt    5      6546.051 ±     153.460   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       178.744 ±      26.871  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5     42984.719 ±    7529.670    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5       102.299 ±     880.827  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5     24866.647 ±  214109.331    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                       N/A  thrpt    5         1.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                        N/A  thrpt    5         3.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                         N/A  thrpt    5      6571.774 ±      35.250   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          N/A  thrpt    5       129.516 ±      11.307  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     N/A  thrpt    5     31019.734 ±    2839.816    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5       102.326 ±     881.055  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5     24548.281 ±  211368.105    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               N/A  thrpt    5         1.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                N/A  thrpt    5         3.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                    N/A  thrpt    5      7437.806 ±     135.947   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                     N/A  thrpt    5      1414.795 ±      25.177  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5    299391.824 ±    4757.395    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0.027 ±       0.076  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5         5.654 ±      16.065    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5      1486.018 ±    1158.757  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5    314603.096 ±  249356.860    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                          N/A  thrpt    5        11.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                           N/A  thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                              N/A  thrpt    5     16814.435 ±     566.756   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                               N/A  thrpt    5       398.504 ±      33.539  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          N/A  thrpt    5     37305.681 ±    3627.046    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5         0.839 ±       7.206  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5        79.785 ±     685.143    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5       401.921 ±    1412.811  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5     37734.133 ±  132655.191    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                    N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                     N/A  thrpt    5         8.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                             N/A  thrpt    5     14300.409 ±     200.422   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5       367.254 ±      25.351  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     40419.464 ±    2857.297    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0.321 ±       2.717  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5        35.406 ±     299.947    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5       404.344 ±    1421.327  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5     44507.733 ±  156452.272    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                   N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                    N/A  thrpt    5         6.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                            N/A  thrpt    5     21403.783 ±     395.996   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       370.164 ±      38.347  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     27222.168 ±    3066.039    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5         0.592 ±       5.098  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5        43.538 ±     374.876    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5       371.689 ±    1331.055  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5     27391.590 ±   97998.946    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                   N/A  thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                 N/A  thrpt    5      3379.796 ±       9.131   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2042.716 ±      63.281  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5    951288.976 ±   27721.342    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0.029 ±       0.072  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        13.567 ±      33.346    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5      2026.441 ±      18.039  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5    943712.201 ±    7803.593    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                       N/A  thrpt    5        15.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                        N/A  thrpt    5        16.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                   N/A  thrpt    5      9425.839 ±     353.685   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                    N/A  thrpt    5      1717.954 ±      67.709  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                               N/A  thrpt    5    286888.564 ±    7391.780    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5         0.058 ±       0.200  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5         9.763 ±      33.489    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5      1758.691 ±    1427.370  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5    293985.492 ±  244394.104    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                         N/A  thrpt    5        13.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                          N/A  thrpt    5        13.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                             N/A  thrpt    5     53326.437 ±    1023.269   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                              N/A  thrpt    5       510.135 ±      43.613  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         N/A  thrpt    5     15056.665 ±    1234.663    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0.779 ±       6.666  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5        22.967 ±     196.429    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5       402.209 ±    1413.822  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5     11867.048 ±   41714.704    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                   N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                    N/A  thrpt    5         6.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                            N/A  thrpt    5     40595.049 ±     502.145   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                             N/A  thrpt    5       601.105 ±      14.133  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     23307.371 ±     568.136    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5         0.279 ±       2.226  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5        10.794 ±      86.165    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5       673.318 ±       0.832  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5     26107.443 ±     331.098    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                  N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                   N/A  thrpt    5         6.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                           N/A  thrpt    5     79262.398 ±    4179.864   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                            N/A  thrpt    5       609.881 ±      35.170  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       N/A  thrpt    5     12110.308 ±     611.376    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5         0.596 ±       5.042  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5        11.916 ±     100.794    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5       538.405 ±    1158.962  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5     10725.293 ±   23095.785    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                 N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                  N/A  thrpt    5         5.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                   N/A  thrpt    5     92745.484 ±    7737.466   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               N/A  thrpt    5         0.005 ±       0.002    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                N/A  thrpt    5      7783.897 ±     200.239   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                 N/A  thrpt    5      2252.853 ±      74.054  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                            N/A  thrpt    5    455567.579 ±   12899.094    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0.025 ±       0.067  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5         5.034 ±      13.508    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5      2165.598 ±    1173.265  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5    437855.378 ±  234245.998    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                      N/A  thrpt    5        16.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                       N/A  thrpt    5        16.000                    ms
[info] IntBenchmark.readCirce                                                                              N/A  thrpt    5   8506501.771 ±   93143.955   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      4631.801 ±      94.738  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5       857.083 ±      12.355    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5         0.133 ±       0.072  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5         0.025 ±       0.013    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5      4490.077 ±    1446.861  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5       830.808 ±     264.708    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        33.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        30.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                        N/A  thrpt    5  36425061.326 ±  140960.394   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                         N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                    N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                              N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readJacksonScala                                                                       N/A  thrpt    5  10202812.887 ±  255361.693   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5      3392.888 ±     101.510  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5       523.467 ±       7.502    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5         0.112 ±       0.156  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5         0.017 ±       0.024    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5      3261.198 ±    1176.127  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5       503.260 ±     186.033    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5        24.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        21.000                    ms
[info] IntBenchmark.readJsoniterScala                                                                      N/A  thrpt    5  45918106.999 ±   80374.820   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5         0.034 ±       0.293  MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5         0.001 ±       0.010    B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                         N/A  thrpt    5  29973793.393 ± 1070796.302   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                          N/A  thrpt    5       629.035 ±      19.069  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5        33.032 ±       1.016    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5         0.549 ±       4.597  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5         0.029 ±       0.241    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5       673.966 ±       2.015  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5        35.392 ±       1.315    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                               N/A  thrpt    5         5.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                N/A  thrpt    5         6.000                    ms
[info] IntBenchmark.readPlayJson                                                                           N/A  thrpt    5   8580603.305 ±   99162.221   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      3852.607 ±      83.947  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5       706.711 ±      10.471    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5         0.104 ±       0.188  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5         0.019 ±       0.035    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5      3671.762 ±    1438.804  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5       673.485 ±     261.135    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        27.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        23.000                    ms
[info] IntBenchmark.writeCirce                                                                             N/A  thrpt    5  15065689.579 ±  454997.998   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      1258.474 ±      30.701  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5       131.493 ±       3.128    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5         0.071 ±       0.122  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5         0.007 ±       0.013    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5      1214.315 ±    1163.919  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5       126.958 ±     122.670    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5         9.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5         8.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                       N/A  thrpt    5  44051913.702 ±  372327.451   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                        N/A  thrpt    5       922.118 ±      48.846  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                   N/A  thrpt    5        32.948 ±       1.989    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5         0.042 ±       0.150  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5         0.001 ±       0.005    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5       939.166 ±    1413.903  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5        33.578 ±      50.819    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                             N/A  thrpt    5         7.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                              N/A  thrpt    5         7.000                    ms
[info] IntBenchmark.writeJacksonScala                                                                      N/A  thrpt    5  12836152.804 ±   92806.118   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      2632.625 ±     115.220  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       322.799 ±      12.869    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5         0.083 ±       0.127  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5         0.010 ±       0.016    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5      2577.446 ±    1174.569  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5       316.004 ±     142.927    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5        19.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        19.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5  47798340.127 ± 2711483.388   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5      1001.193 ±      89.143  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5        32.968 ±       1.345    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0.050 ±       0.156  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0.002 ±       0.005    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      1076.602 ±    1419.760  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5        35.382 ±      45.811    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         8.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5         8.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5  55965109.626 ±  991601.276   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5         0.764 ±       4.175  MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5         0.022 ±       0.118    B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                        N/A  thrpt    5  23068617.491 ±  115840.629   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                         N/A  thrpt    5       964.175 ±      44.990  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5        65.787 ±       3.217    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5         0.025 ±       0.132  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5         0.002 ±       0.009    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5       942.919 ±    1420.990  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5        64.357 ±      97.250    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                              N/A  thrpt    5         7.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                               N/A  thrpt    5         6.000                    ms
[info] IntBenchmark.writePlayJson                                                                          N/A  thrpt    5   2498770.590 ±   48192.857   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      1850.543 ±      54.353  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      1165.637 ±      39.608    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5         0.067 ±       0.154  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5         0.042 ±       0.098    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5      1883.329 ±    1158.640  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5      1186.886 ±     744.025    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        14.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        13.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5    168567.153 ±     997.153   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      3216.153 ±      43.597  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     30030.153 ±     532.558    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.075 ±       0.072  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.700 ±       0.667    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      3121.130 ±    1424.934  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     29146.188 ±   13435.812    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        23.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        20.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5     33004.002 ±    1273.579   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2478.979 ±      41.532  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    118223.438 ±    4199.503    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.058 ±       0.067  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2.779 ±       3.180    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2437.943 ±    1433.872  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5    116329.976 ±   70380.007    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        18.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        17.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    122407.128 ±    7737.682   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1010.568 ±      49.543  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     12995.700 ±     515.925    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.012 ±       0.072  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.162 ±       0.924    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       943.985 ±    1422.202  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     12188.164 ±   18968.823    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         7.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         7.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5    410747.376 ±    9092.330   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1643.827 ±      53.256  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      6299.226 ±     214.077    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.087 ±       0.174  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.334 ±       0.660    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1617.533 ±    1424.852  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      6203.137 ±    5566.018    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        12.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        11.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    455800.489 ±    9129.140   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5      1301.028 ±      49.378  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5      4492.869 ±     124.409    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5         0.046 ±       0.243  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5         0.158 ±       0.837    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5      1211.782 ±    1160.694  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5      4185.689 ±    4021.068    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5         9.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5         9.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5     61103.691 ±     467.966   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1431.271 ±      23.341  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     36867.418 ±     644.620    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.029 ±       0.072  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.751 ±       1.848    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1349.905 ±       6.341  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     34771.517 ±     153.716    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        10.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        11.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                   128  thrpt    5    311700.606 ±    5850.099   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2180.684 ±      81.054  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     11011.398 ±     446.171    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.071 ±       0.122  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.358 ±       0.617    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      2160.823 ±    1179.634  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     10913.619 ±    6059.737    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                         128  thrpt    5        16.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                          128  thrpt    5        16.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                            128  thrpt    5    482882.738 ±   16810.239   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1256.932 ±      46.335  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      4097.082 ±     204.780    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.029 ±       0.134  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.096 ±       0.443    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1214.497 ±    1160.716  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      3962.106 ±    3829.015    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                           128  thrpt    5   1317761.688 ±   62231.862   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      2668.366 ±     119.219  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      3187.492 ±      71.474    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.083 ±       0.160  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.099 ±       0.191    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5      2574.984 ±    1173.854  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      3078.234 ±    1475.872    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        19.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        16.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                                128  thrpt    5    106566.328 ±    3698.548   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3574.291 ±     120.154  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     52788.091 ±      67.990    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.087 ±       0.105  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1.292 ±       1.566    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      3398.605 ±      19.107  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     50196.567 ±    1761.126    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        25.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        23.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                  128  thrpt    5    342485.202 ±   21856.110   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       544.921 ±      46.894  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      2504.291 ±     156.325    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.133 ±       0.932  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.612 ±       4.265    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5       539.229 ±    1160.732  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5      2484.354 ±    5351.239    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         4.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         5.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                           128  thrpt    5    804085.743 ±    2606.823   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       596.495 ±      11.550  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1167.768 ±      21.051    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.187 ±       1.390  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.367 ±       2.725    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       673.329 ±       0.106  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      1318.189 ±       4.312    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         5.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                          128  thrpt    5   1967031.144 ±   92140.571   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       936.954 ±      30.068  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       749.875 ±      42.889    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.029 ±       0.209  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.023 ±       0.166    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       941.915 ±    1419.378  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       755.266 ±    1156.696    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         6.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2165131.132 ±   11215.315   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.237 ±       1.694  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.172 ±       1.233    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                               128  thrpt    5    445884.103 ±    3465.226   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       660.377 ±      17.241  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      2331.185 ±      52.123    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.029 ±       0.134  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.103 ±       0.475    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       674.145 ±       0.634  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      2379.804 ±      18.637    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         5.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         5.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                              128  thrpt    5     57910.757 ±    1273.251   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1864.306 ±      84.737  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     50667.616 ±    1684.935    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.054 ±       0.156  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1.469 ±       4.221    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1889.447 ±    1158.363  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     51370.061 ±   31904.618    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                    128  thrpt    5        14.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                     128  thrpt    5        14.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                       128  thrpt    5     92036.926 ±     679.691   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1693.636 ±      62.056  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     28966.820 ±    1236.346    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.029 ±       0.122  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.498 ±       2.077    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1621.388 ±    1424.385  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     27735.714 ±   24473.708    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        12.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5        11.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                      128  thrpt    5    165489.922 ±    2554.295   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      2632.260 ±      59.237  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5     25037.339 ±     426.752    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.075 ±       0.122  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.713 ±       1.154    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      2572.237 ±    1164.316  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     24471.616 ±   11247.417    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5        19.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5        16.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                           128  thrpt    5     31961.789 ±     840.477   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      2135.908 ±      68.199  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    105183.721 ±    2155.888    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.033 ±       0.072  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         1.638 ±       3.513    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      2029.935 ±      15.780  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     99967.776 ±    2154.852    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        15.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        14.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                      128  thrpt    5    135211.878 ±     695.951   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5       852.658 ±      19.798  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      9926.973 ±     266.529    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.012 ±       0.108  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.146 ±       1.253    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       808.795 ±    1160.782  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      9418.107 ±   13549.935    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         6.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                     128  thrpt    5    424609.593 ±   34898.001   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       481.096 ±      49.474  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1783.182 ±     104.964    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.587 ±       4.988  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         2.141 ±      18.181    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5       538.546 ±    1159.262  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      1995.959 ±    4301.249    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         8.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5    452451.447 ±    2520.495   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5         4.766 ±       1.089  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        16.582 ±       3.852    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                          128  thrpt    5     61395.557 ±     712.388   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1252.368 ±      25.566  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     32104.768 ±     934.733    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.029 ±       0.072  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.748 ±       1.839    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1214.986 ±    1162.745  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     31158.206 ±   29963.358    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                128  thrpt    5         9.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                                  N/A  thrpt    5   2942729.277 ±   36970.251   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      3682.417 ±      44.474  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      1969.565 ±      12.175    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0.087 ±       0.174  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5         0.047 ±       0.093    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      3528.420 ±    1135.342  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5      1887.310 ±     613.890    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        26.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        24.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                            N/A  thrpt    5    807974.709 ±   23885.130   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       501.530 ±      12.679  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5       977.000 ±      33.031    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5         0.783 ±       6.650  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5         1.539 ±      13.075    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5       402.353 ±    1414.328  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5       787.143 ±    2766.983    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5         5.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                           N/A  thrpt    5    339409.925 ±    2136.005   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5       639.369 ±      32.430  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5      2965.161 ±     149.552    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5         0.291 ±       2.419  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5         1.354 ±      11.246    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5       674.105 ±       0.432  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5      3126.265 ±      21.594    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5         6.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                          N/A  thrpt    5    565996.188 ±   44372.864   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       434.072 ±      44.211  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5      1207.149 ±      69.641    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5         0.562 ±       4.750  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5         1.546 ±      13.066    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5       404.298 ±    1421.165  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5      1117.773 ±    3929.207    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         3.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5         6.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                      N/A  thrpt    5   1494791.234 ±   51330.469   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                       N/A  thrpt    5       497.221 ±      19.195  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                  N/A  thrpt    5       523.540 ±      24.441    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                              N/A  thrpt    5         0.562 ±       4.794  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5         0.590 ±       5.033    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5       539.045 ±    1160.337  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5       568.879 ±    1224.727    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                            N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                             N/A  thrpt    5         8.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                N/A  thrpt    5   6692356.219 ±  164759.012   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                 N/A  thrpt    5       559.930 ±      32.463  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                            N/A  thrpt    5       131.697 ±       8.783    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                        N/A  thrpt    5         0.566 ±       4.744  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm                   N/A  thrpt    5         0.134 ±       1.123    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space                    N/A  thrpt    5       538.992 ±    1160.222  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm               N/A  thrpt    5       126.953 ±     273.301    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                      N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                       N/A  thrpt    5         6.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                               N/A  thrpt    5    233913.248 ±    3142.285   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      1618.697 ±      45.354  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5     10891.984 ±     410.341    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5         0.046 ±       0.104  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5         0.308 ±       0.706    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5      1620.260 ±    1426.741  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5     10907.162 ±    9709.983    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        12.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        12.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                            128  thrpt    5   1368888.873 ±   39139.550   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5        43.236 ±       8.245  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5        49.715 ±       9.772    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       102.300 ±     880.838  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       118.335 ±    1018.896    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         1.000                counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         2.000                    ms
[info] MutableBitSetBenchmark.readPlayJson                                                                 128  thrpt    5     72179.850 ±    1399.337   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3187.822 ±      67.688  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     69516.123 ±    1600.878    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.075 ±       0.072  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         1.635 ±       1.578    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      3122.599 ±    1430.299  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     68123.323 ±   32317.384    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        23.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        22.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                            128  thrpt    5   1464717.670 ±   37679.754   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       788.278 ±      26.200  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5       847.141 ±      18.824    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.012 ±       0.072  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.013 ±       0.078    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       673.636 ±       1.413  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       723.964 ±      19.138    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         5.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5         6.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                           128  thrpt    5   1593624.912 ±   98959.701   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       458.009 ±      49.355  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       452.353 ±      35.725    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.514 ±       4.338  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.505 ±       4.264    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       404.692 ±    1422.549  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       397.633 ±    1397.764    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         3.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5         6.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5    984939.353 ±    1903.865   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        10.093 ±       0.700  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        16.129 ±       1.111    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                                128  thrpt    5     49258.163 ±     407.732   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2035.292 ±      49.693  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     65042.795 ±    1663.345    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.042 ±       0.127  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1.331 ±       4.060    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1759.114 ±    1424.853  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     56222.214 ±   45650.419    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        14.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        13.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5    253471.599 ±    2450.542   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1018.371 ±      47.951  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      6324.644 ±     336.562    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.025 ±       0.143  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0.155 ±       0.891    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5       942.708 ±    1420.343  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5      5858.297 ±    8872.339    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         7.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5         6.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5     37860.356 ±    1996.437   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      1935.427 ±     103.033  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     80453.779 ±    2082.129    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.054 ±       0.044  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         2.252 ±       1.879    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1893.124 ±    1170.967  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     78748.462 ±   49866.528    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        14.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        14.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    100976.067 ±    1321.824   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       946.945 ±      46.057  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     14761.579 ±     859.975    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.046 ±       0.243  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0.715 ±       3.801    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5       943.978 ±    1420.889  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5     14722.621 ±   22257.903    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         7.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         7.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5    319046.454 ±    4327.637   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       441.886 ±      44.553  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2180.144 ±     212.393    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5         0.512 ±       4.408  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5         2.539 ±      21.857    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5       404.943 ±    1423.432  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5      1997.688 ±    7022.273    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         3.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5         7.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    342334.077 ±    1817.520   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         3.484 ±       0.038  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5        16.020 ±       0.164    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5     49731.215 ±    1690.101   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1293.855 ±      56.340  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     40948.419 ±    1194.786    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.033 ±       0.091  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         1.059 ±       2.922    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1214.920 ±    1163.049  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     38409.747 ±   36274.420    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5         9.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5         9.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                       128  thrpt    5     73017.409 ±    1366.521   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1458.014 ±      37.174  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5     31429.910 ±     568.033    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.046 ±       0.154  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.985 ±       3.316    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1479.403 ±    1162.039  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     31882.821 ±   24793.971    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                             128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                              128  thrpt    5        11.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                                128  thrpt    5    120966.180 ±    2800.697   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5       601.225 ±       8.591  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5      7822.723 ±     152.847    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5         0.250 ±       2.062  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5         3.284 ±      27.122    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5       674.061 ±       0.710  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5      8770.492 ±     197.653    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5         6.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                               128  thrpt    5    248567.133 ±   16500.369   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1055.599 ±      72.906  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      6684.758 ±     250.485    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5         0.025 ±       0.105  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5         0.157 ±       0.660    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5      1075.672 ±    1418.906  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5      6801.047 ±    8841.252    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5         8.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                    128  thrpt    5     27726.805 ±     209.649   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1499.450 ±      38.823  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     85126.830 ±    2224.639    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.021 ±       0.098  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         1.181 ±       5.570    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5      1484.656 ±    1162.069  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5     84283.349 ±   65865.064    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        10.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                               128  thrpt    5    146930.114 ±     910.445   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5       778.599 ±      29.626  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5      8341.222 ±     332.041    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5         0.021 ±       0.113  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5         0.223 ±       1.215    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5       808.847 ±    1160.386  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5      8665.454 ±   12435.283    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         6.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5         7.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                              128  thrpt    5    444111.466 ±    7471.977   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1335.288 ±      44.903  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      4732.383 ±     208.624    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5         0.050 ±       0.166  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5         0.177 ±       0.589    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5      1211.454 ±    1156.182  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5      4295.601 ±    4126.155    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5         9.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5         8.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    476910.830 ±   31807.124   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5       900.017 ±      69.624  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5      2970.273 ±     139.747    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5         0.033 ±       0.201  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5         0.109 ±       0.655    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5       809.056 ±    1160.492  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5      2665.197 ±    3727.029    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5         6.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5         5.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                   128  thrpt    5     63410.091 ±    3598.512   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1393.382 ±      82.817  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     34589.155 ±     666.506    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.017 ±       0.036  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         0.411 ±       0.884    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5      1350.184 ±       5.080  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5     33522.668 ±    1932.379    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        10.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        11.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                                 128  thrpt    5     98964.740 ±    1548.928   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1530.715 ±      39.307  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     24345.196 ±     600.511    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.029 ±       0.091  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.463 ±       1.447    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1484.734 ±    1152.637  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     23613.039 ±   18303.230    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        11.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        10.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                          128  thrpt    5    171743.276 ±    5570.367   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       730.001 ±      35.819  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      6689.967 ±     118.845    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.017 ±       0.105  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.152 ±       0.955    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       674.093 ±       0.451  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      6178.136 ±     202.429    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         5.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                         128  thrpt    5    266865.726 ±    9793.589   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       982.378 ±      42.122  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      5794.054 ±     253.307    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.017 ±       0.105  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.098 ±       0.614    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1076.579 ±    1419.291  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      6359.774 ±    8496.470    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         8.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         7.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                              128  thrpt    5     69499.403 ±     520.489   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2631.069 ±      57.354  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     59581.717 ±    1427.693    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.062 ±       0.057  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1.415 ±       1.292    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2576.187 ±    1160.909  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     58343.633 ±   26460.313    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        19.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        18.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                                128  thrpt    5    183399.345 ±   14175.625   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       892.204 ±      76.363  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      7657.504 ±     337.304    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.042 ±       0.170  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.357 ±       1.450    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       945.127 ±    1423.230  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      8112.371 ±   12201.798    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         7.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         7.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                         128  thrpt    5    515758.162 ±   13557.605   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       417.476 ±      33.138  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1274.221 ±     119.149    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.229 ±       1.971  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.707 ±       6.084    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       404.271 ±    1421.068  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      1238.495 ±    4353.630    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         5.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                        128  thrpt    5    563248.377 ±   17702.333   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       308.909 ±      25.574  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       863.286 ±      84.514    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       237.151 ±    1269.813  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       666.935 ±    3566.152    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         2.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         5.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    596112.109 ±    7852.400   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         6.060 ±       0.081  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        16.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                             128  thrpt    5     33903.321 ±     330.528   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1683.581 ±      51.453  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     78166.265 ±    2369.413    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.017 ±       0.036  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.773 ±       1.664    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1622.340 ±    1424.908  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     75309.520 ±   65846.926    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        12.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        12.000                    ms
[info] PrimitivesBenchmark.readCirce                                                                       N/A  thrpt    5    877284.657 ±   14415.185   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                        N/A  thrpt    5      2230.918 ±      66.562  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5      4003.144 ±     169.064    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5         0.100 ±       0.036  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5         0.179 ±       0.064    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5      2158.146 ±    1172.267  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5      3874.113 ±    2169.047    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                             N/A  thrpt    5        16.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                              N/A  thrpt    5        14.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                                N/A  thrpt    5   1721466.227 ±   56165.853   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5      1081.484 ±      59.852  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       988.931 ±      40.318    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0.033 ±       0.176  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5         0.030 ±       0.160    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5      1078.655 ±    1422.337  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5       985.677 ±    1291.953    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                      N/A  thrpt    5         8.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                       N/A  thrpt    5         8.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                               N/A  thrpt    5   7805548.689 ±  122884.517   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       243.025 ±      24.829  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        49.008 ±       5.553    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5        ≈ 10⁻⁵                MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        ≈ 10⁻⁶                  B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5       204.640 ±    1079.007  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5        41.429 ±     218.445    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                     N/A  thrpt    5         2.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                      N/A  thrpt    5         6.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                    N/A  thrpt    5    306610.286 ±    7466.856   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      2045.886 ±      46.210  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5     10501.536 ±      97.607    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0.046 ±       0.119  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5         0.235 ±       0.609    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5      2026.957 ±      14.120  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5     10404.599 ±     214.820    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                          N/A  thrpt    5        15.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                           N/A  thrpt    5        15.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                      N/A  thrpt    5   1155288.286 ±    4896.805   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                       N/A  thrpt    5      1645.185 ±      31.817  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5      2241.533 ±      42.192    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5         0.050 ±       0.134  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5         0.068 ±       0.182    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5      1622.517 ±    1429.479  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5      2210.846 ±    1952.103    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                            N/A  thrpt    5        12.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                             N/A  thrpt    5        12.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                               N/A  thrpt    5   2623516.806 ±   39803.577   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5      1073.640 ±      58.230  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5       644.167 ±      43.736    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5         0.029 ±       0.209  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5         0.017 ±       0.125    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5      1079.227 ±    1422.987  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5       647.963 ±     859.560    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                     N/A  thrpt    5         8.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                      N/A  thrpt    5         7.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                              N/A  thrpt    5   5820945.649 ±   89403.055   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       672.567 ±      14.692  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       181.867 ±       3.448    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5         0.593 ±       4.930  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5         0.161 ±       1.342    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5       672.591 ±       2.212  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5       181.876 ±       3.202    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                    N/A  thrpt    5         5.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                     N/A  thrpt    5         6.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                      N/A  thrpt    5   6126226.323 ±   74703.495   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       N/A  thrpt    5       383.767 ±      34.717  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  N/A  thrpt    5        98.601 ±      10.073    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                              N/A  thrpt    5         0.562 ±       4.794  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5         0.145 ±       1.235    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5       371.961 ±    1332.246  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5        95.787 ±     343.164    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            N/A  thrpt    5         3.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             N/A  thrpt    5         8.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                   N/A  thrpt    5    425906.181 ±    4208.477   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                    N/A  thrpt    5      2330.198 ±      72.460  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5      8612.357 ±     286.511    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5         0.046 ±       0.119  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5         0.169 ±       0.439    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5      2300.615 ±    1432.097  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5      8503.814 ±    5318.812    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                         N/A  thrpt    5        17.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                          N/A  thrpt    5        17.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                        128  thrpt    5     84169.394 ±    1948.370   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5      2284.012 ±      91.331  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     42715.024 ±    1073.835    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                128  thrpt    5         0.037 ±       0.143  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5         0.700 ±       2.671    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            128  thrpt    5      2164.594 ±    1174.349  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5     40468.849 ±   21387.868    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                              128  thrpt    5        16.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                               128  thrpt    5        15.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                                 128  thrpt    5    124457.761 ±    1047.989   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5      1960.441 ±      43.839  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     24795.221 ±     516.199    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.033 ±       0.122  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.421 ±       1.537    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1893.442 ±    1161.231  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     23952.194 ±   14788.763    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5        14.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        13.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                                128  thrpt    5    174083.505 ±    3223.074   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      2648.427 ±      68.636  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5     23943.347 ±     403.417    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.083 ±       0.170  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.753 ±       1.535    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      2571.850 ±    1151.297  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     23256.700 ±   10597.618    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5        19.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        17.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                     128  thrpt    5     60499.927 ±     679.298   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      3070.269 ±      78.848  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     79872.424 ±    2831.282    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0.054 ±       0.044  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         1.409 ±       1.154    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                         128  thrpt    5      2987.487 ±    1439.686  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5     77738.847 ±   38296.927    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        22.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        22.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                       128  thrpt    5    176296.384 ±    5351.986   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5       866.401 ±      58.672  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5      7735.694 ±     375.831    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.017 ±       0.067  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         0.149 ±       0.606    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           128  thrpt    5       809.880 ±    1161.474  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5      7228.515 ±   10311.850    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                             128  thrpt    5         6.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                              128  thrpt    5         6.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                                128  thrpt    5    459520.151 ±    6446.611   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       406.178 ±      31.334  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5      1391.234 ±     118.013    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.179 ±       1.542  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.615 ±       5.291    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       404.469 ±    1421.766  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      1386.870 ±    4875.111    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5         5.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                               128  thrpt    5    620997.414 ±   23445.961   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5       343.984 ±      30.774  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5       871.998 ±      88.403    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.562 ±       4.794  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1.434 ±      12.231    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       371.929 ±    1332.088  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5       945.340 ±    3380.981    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5         8.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    669582.656 ±   13685.605   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5         6.998 ±       1.607  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5        16.450 ±       3.579    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                    128  thrpt    5     33668.975 ±     137.929   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5      1666.868 ±      36.734  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     77926.325 ±    1751.607    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                            128  thrpt    5         0.025 ±       0.088  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5         1.167 ±       4.105    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                        128  thrpt    5      1623.036 ±    1426.644  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5     75881.193 ±   66787.529    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5        12.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        13.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                               128  thrpt    5   3604451.369 ±  133438.709   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      2522.078 ±     138.684  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5      1101.402 ±      33.169    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.083 ±       0.220  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.037 ±       0.098    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2437.140 ±    1435.561  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      1065.030 ±     646.441    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        18.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        16.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                         128  thrpt    5   3814995.362 ±   27694.926   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                          128  thrpt    5       417.867 ±      35.061  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                     128  thrpt    5       172.406 ±      15.437    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.793 ±       6.824  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.328 ±       2.821    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                             128  thrpt    5       402.296 ±    1414.128  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       166.153 ±     584.053    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                               128  thrpt    5         3.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                128  thrpt    5         7.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                        128  thrpt    5   2852810.159 ±   20720.821   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1294.050 ±      47.268  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5       713.955 ±      26.087    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.042 ±       0.170  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.023 ±       0.094    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1215.583 ±    1162.905  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       670.765 ±     642.926    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         8.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                       128  thrpt    5   3961620.647 ±   67545.954   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       432.818 ±      30.934  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       171.976 ±      14.393    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.577 ±       4.964  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.231 ±       1.986    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       404.304 ±    1421.186  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       161.051 ±     566.126    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         3.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         6.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                            128  thrpt    5   2927644.728 ±   46367.670   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1420.786 ±      16.748  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5       763.863 ±      18.727    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.054 ±       0.134  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.029 ±       0.072    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1351.283 ±       7.702  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       726.490 ±      10.237    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                              128  thrpt    5   2241745.683 ±   16407.007   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       550.885 ±      31.375  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5       386.808 ±      24.441    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.135 ±       1.165  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.095 ±       0.819    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       539.175 ±    1160.615  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5       378.863 ±     815.533    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         5.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                        128  thrpt    5   5926992.014 ±  333578.984   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                         128  thrpt    5       588.520 ±      45.417  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                    128  thrpt    5       156.292 ±       9.659    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.745 ±       6.281  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.203 ±       1.712    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                            128  thrpt    5       536.625 ±    1155.129  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       142.870 ±     307.699    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                              128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                               128  thrpt    5         6.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                       128  thrpt    5   3601678.107 ±  210373.478   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1145.274 ±      97.795  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5       500.499 ±      23.688    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.042 ±       0.247  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.018 ±       0.108    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1079.950 ±    1423.040  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       471.627 ±     617.291    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         9.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                      128  thrpt    5   5448781.184 ±  149507.231   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       537.516 ±      41.846  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       155.264 ±      10.379    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.523 ±       4.500  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.151 ±       1.298    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       404.633 ±    1422.341  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       116.605 ±     409.885    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         3.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         4.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   6492937.514 ±  132422.717   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5         0.604 ±       3.483  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.147 ±       0.851    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                           128  thrpt    5   3581956.301 ±   86018.201   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1013.607 ±      53.524  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5       445.400 ±      27.156    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.012 ±       0.072  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.006 ±       0.032    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5       945.168 ±    1424.151  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       415.807 ±     632.655    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         7.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         7.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                            128  thrpt    5    872856.637 ±   12561.849   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1409.583 ±      17.512  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5      2541.840 ±      51.437    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.042 ±       0.127  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.075 ±       0.228    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1349.510 ±       8.590  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      2433.503 ±      30.806    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                  128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                      128  thrpt    5   1812664.065 ±    6792.857   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       520.423 ±      30.562  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       451.844 ±      28.069    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.744 ±       6.313  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.645 ±       5.476    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5       536.363 ±    1154.563  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       465.851 ±    1002.782    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         4.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5         6.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                     128  thrpt    5   1246413.792 ±   42705.961   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       824.894 ±      28.541  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1041.799 ±      71.565    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.021 ±       0.113  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.026 ±       0.143    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5       808.360 ±    1158.983  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      1023.592 ±    1516.701    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5         6.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                    128  thrpt    5   1699335.544 ±   48892.403   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       493.813 ±      35.258  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       457.402 ±      35.857    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.541 ±       4.570  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.504 ±       4.260    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5       539.529 ±    1161.378  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       500.438 ±    1077.374    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         4.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5         7.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                         128  thrpt    5   1268547.023 ±   14969.216   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5       841.300 ±      53.486  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      1043.823 ±      63.998    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.021 ±       0.098  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.026 ±       0.122    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5       809.349 ±    1163.321  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      1004.107 ±    1441.746    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5         6.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                           128  thrpt    5   1057351.933 ±   33694.197   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5       913.496 ±      50.137  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      1359.641 ±      49.907    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.050 ±       0.166  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.074 ±       0.246    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5       944.780 ±    1424.309  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      1405.213 ±    2104.981    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5         7.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                     128  thrpt    5    817657.314 ±    6752.295   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       217.471 ±      28.449  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5       418.659 ±      58.105    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5       236.738 ±    1267.248  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       456.769 ±    2445.204    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         2.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5         7.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                    128  thrpt    5   1990862.326 ±   81074.364   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       874.619 ±      51.831  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       691.498 ±      27.139    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.025 ±       0.132  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.020 ±       0.104    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5       809.124 ±    1160.853  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       639.336 ±     909.569    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5         5.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                   128  thrpt    5   2158477.647 ±   14014.201   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       580.243 ±      16.148  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       423.080 ±      13.267    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.574 ±       4.857  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         0.420 ±       3.551    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5       673.605 ±       2.080  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       491.152 ±       4.486    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5         9.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2298444.357 ±  216019.560   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         0.895 ±       7.633  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.640 ±       5.464    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                        128  thrpt    5   2042882.397 ±   26151.066   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5       917.488 ±      35.727  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5       706.984 ±      33.661    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.017 ±       0.067  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.013 ±       0.052    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5       805.029 ±    1154.694  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       620.817 ±     899.445    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                               128  thrpt    5         6.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                       N/A  thrpt    5      6044.625 ±      46.711   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                        N/A  thrpt    5       747.278 ±      41.208  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5    194576.815 ±   10109.595    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5         0.050 ±       0.348  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5        12.989 ±      90.322    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5       808.993 ±    1160.672  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5    210582.835 ±  300950.452    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                             N/A  thrpt    5         6.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                              N/A  thrpt    5         5.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                N/A  thrpt    5     20020.271 ±     718.156   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5       264.119 ±      27.565  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5     20768.539 ±    2468.211    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0.006 ±       0.036  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5         0.485 ±       2.801    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5       237.252 ±    1270.561  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5     18636.423 ±   99836.976    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                      N/A  thrpt    5         2.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                       N/A  thrpt    5         6.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                               N/A  thrpt    5     19822.043 ±     864.670   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       186.442 ±      22.104  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     14808.676 ±    2382.845    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5       102.301 ±     880.843  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5      8272.704 ±   71230.476    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                     N/A  thrpt    5         1.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                      N/A  thrpt    5         2.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                    N/A  thrpt    5      6055.779 ±      50.846   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      1789.280 ±      34.465  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5    465088.341 ±   11416.587    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0.042 ±       0.098  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5        10.815 ±      25.533    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5      1729.996 ±    1416.657  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5    449769.836 ±  370188.720    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                          N/A  thrpt    5        13.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                           N/A  thrpt    5        14.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                               N/A  thrpt    5     56195.961 ±     418.982   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5       724.946 ±      12.235  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     20305.485 ±     382.202    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5         0.021 ±       0.139  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5         0.582 ±       3.883    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5       673.250 ±       1.993  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5     18857.492 ±     168.226    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                     N/A  thrpt    5         5.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                      N/A  thrpt    5         5.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                              N/A  thrpt    5     80801.803 ±     811.504   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       543.975 ±      35.254  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5     10597.092 ±     742.950    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5         0.589 ±       4.985  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5        11.491 ±      97.197    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5       538.974 ±    1160.182  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5     10507.559 ±   22618.633    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                    N/A  thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                     N/A  thrpt    5         8.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                      N/A  thrpt    5     88189.487 ±     829.584   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       N/A  thrpt    5         8.965 ±       0.082  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  N/A  thrpt    5       160.005 ±       0.002    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                                 128  thrpt    5    302846.179 ±    2930.228   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1669.166 ±      16.191  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5      8675.503 ±     111.997    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.050 ±       0.166  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.259 ±       0.863    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1620.926 ±    1416.904  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5      8424.590 ±    7360.469    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                       128  thrpt    5        12.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                        128  thrpt    5        10.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                          128  thrpt    5    469581.868 ±   27365.081   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       502.404 ±      37.949  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      1684.184 ±     127.278    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.279 ±       2.357  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.930 ±       7.855    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       404.370 ±    1421.417  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      1362.024 ±    4789.280    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         3.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5   1181592.992 ±   39583.646   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       639.064 ±      33.983  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       851.310 ±      24.025    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.522 ±       4.409  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.695 ±       5.862    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       674.329 ±       3.505  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       898.366 ±      32.239    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         7.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5    101796.216 ±    1719.035   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      3260.157 ±      37.912  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     50404.332 ±    1199.389    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.075 ±       0.122  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1.160 ±       1.894    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      3261.123 ±    1169.197  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     50429.235 ±   18551.717    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        24.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        24.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                                128  thrpt    5    331885.538 ±    3477.793   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       539.958 ±      23.280  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      2560.945 ±     128.154    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.125 ±       0.988  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.595 ±       4.708    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       539.240 ±    1160.755  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      2559.107 ±    5508.731    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         5.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    711799.984 ±   58946.362   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       556.153 ±      73.484  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1229.601 ±      72.763    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.196 ±       1.595  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.431 ±       3.519    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       538.593 ±    1159.362  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      1180.030 ±    2540.212    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         5.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5   1368283.143 ±   24543.980   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       650.798 ±      25.249  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       748.651 ±      23.261    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.574 ±       4.768  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.666 ±       5.531    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       673.265 ±       2.205  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       774.515 ±      15.939    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         7.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5   1494770.400 ±   45606.357   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5    442979.116 ±   10100.127   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       674.310 ±       8.588  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      2395.989 ±      67.303    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.021 ±       0.139  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.074 ±       0.491    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       674.781 ±       0.431  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      2397.657 ±      55.096    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         5.000                    ms
[info] Benchmark result is saved to jdk10graal.json
[success] Total time: 7102 s, completed May 19, 2018 6:04:25 AM
